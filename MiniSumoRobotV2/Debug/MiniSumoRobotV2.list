
MiniSumoRobotV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003998  08003998  00004998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c0  080039c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  080039d4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080039d4  000051e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010206  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281e  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00017a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afa  00000000  00000000  00018890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ab4  00000000  00000000  0001938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001138f  00000000  00000000  00030e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a79  00000000  00000000  000421cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8c46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000d8c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000dc6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003980 	.word	0x08003980

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003980 	.word	0x08003980

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <MX_ADC1_Init+0x98>)
 8000518:	4a21      	ldr	r2, [pc, #132]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b1e      	ldr	r3, [pc, #120]	@ (800059c <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b1b      	ldr	r3, [pc, #108]	@ (800059c <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053c:	4b17      	ldr	r3, [pc, #92]	@ (800059c <MX_ADC1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <MX_ADC1_Init+0x98>)
 8000544:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 8000546:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054e:	4b13      	ldr	r3, [pc, #76]	@ (800059c <MX_ADC1_Init+0x98>)
 8000550:	2201      	movs	r2, #1
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_ADC1_Init+0x98>)
 800055e:	2201      	movs	r2, #1
 8000560:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000562:	480e      	ldr	r0, [pc, #56]	@ (800059c <MX_ADC1_Init+0x98>)
 8000564:	f000 fcba 	bl	8000edc <HAL_ADC_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 f9d9 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	@ (800059c <MX_ADC1_Init+0x98>)
 8000584:	f000 fe00 	bl	8001188 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800058e:	f000 f9c9 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d157      	bne.n	800067a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a26      	ldr	r2, [pc, #152]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000602:	2303      	movs	r3, #3
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481d      	ldr	r0, [pc, #116]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000616:	f001 fce9 	bl	8001fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800061c:	4a1d      	ldr	r2, [pc, #116]	@ (8000694 <HAL_ADC_MspInit+0xec>)
 800061e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000632:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800063c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800064c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000650:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000660:	f001 f954 	bl	800190c <HAL_DMA_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800066a:	f000 f95b 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000672:	639a      	str	r2, [r3, #56]	@ 0x38
 8000674:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	@ 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40012000 	.word	0x40012000
 8000688:	40023800 	.word	0x40023800
 800068c:	40020000 	.word	0x40020000
 8000690:	20000070 	.word	0x20000070
 8000694:	40026410 	.word	0x40026410

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_DMA_Init+0x3c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <MX_DMA_Init+0x3c>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_DMA_Init+0x3c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2038      	movs	r0, #56	@ 0x38
 80006c0:	f001 f8ed 	bl	800189e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006c4:	2038      	movs	r0, #56	@ 0x38
 80006c6:	f001 f906 	bl	80018d6 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a25      	ldr	r2, [pc, #148]	@ (800078c <MX_GPIO_Init+0xb4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a10      	ldr	r2, [pc, #64]	@ (800078c <MX_GPIO_Init+0xb4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorLDir1_Pin|MotorLDir2_Pin|MotorRDir1_Pin|MotorRDir2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2178      	movs	r1, #120	@ 0x78
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_GPIO_Init+0xb8>)
 8000764:	f001 fdc6 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorLDir1_Pin MotorLDir2_Pin MotorRDir1_Pin MotorRDir2_Pin */
  GPIO_InitStruct.Pin = MotorLDir1_Pin|MotorLDir2_Pin|MotorRDir1_Pin|MotorRDir2_Pin;
 8000768:	2378      	movs	r3, #120	@ 0x78
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0xb8>)
 8000780:	f001 fc34 	bl	8001fec <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fb2d 	bl	8000df8 <HAL_Init>

  /* USER CODE BEGIN Init */
//initialize sensors
  SharpPointerL = &AdcValues[0];
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <main+0x9c>)
 80007a0:	4a24      	ldr	r2, [pc, #144]	@ (8000834 <main+0xa0>)
 80007a2:	601a      	str	r2, [r3, #0]
  SharpPointerR = &AdcValues[1];
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <main+0xa4>)
 80007a6:	4a25      	ldr	r2, [pc, #148]	@ (800083c <main+0xa8>)
 80007a8:	601a      	str	r2, [r3, #0]

//initialize motors
Motor_Init(&MotorR, &htim1, TIM_CHANNEL_1, MotorPwmL, MotorRDir1_GPIO_Port, MotorRDir1_Pin, MotorRDir2_GPIO_Port, MotorRDir2_Pin);
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <main+0xac>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2240      	movs	r2, #64	@ 0x40
 80007b0:	9203      	str	r2, [sp, #12]
 80007b2:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <main+0xb0>)
 80007b4:	9202      	str	r2, [sp, #8]
 80007b6:	2220      	movs	r2, #32
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <main+0xb0>)
 80007bc:	9200      	str	r2, [sp, #0]
 80007be:	2200      	movs	r2, #0
 80007c0:	4921      	ldr	r1, [pc, #132]	@ (8000848 <main+0xb4>)
 80007c2:	4822      	ldr	r0, [pc, #136]	@ (800084c <main+0xb8>)
 80007c4:	f000 f8b4 	bl	8000930 <Motor_Init>
Motor_Init(&MotorL, &htim1, TIM_CHANNEL_2, MotorPwmR, MotorLDir1_GPIO_Port, MotorLDir1_Pin, MotorLDir2_GPIO_Port, MotorLDir2_Pin);
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <main+0xbc>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2210      	movs	r2, #16
 80007ce:	9203      	str	r2, [sp, #12]
 80007d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <main+0xb0>)
 80007d2:	9202      	str	r2, [sp, #8]
 80007d4:	2208      	movs	r2, #8
 80007d6:	9201      	str	r2, [sp, #4]
 80007d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000844 <main+0xb0>)
 80007da:	9200      	str	r2, [sp, #0]
 80007dc:	2204      	movs	r2, #4
 80007de:	491a      	ldr	r1, [pc, #104]	@ (8000848 <main+0xb4>)
 80007e0:	481c      	ldr	r0, [pc, #112]	@ (8000854 <main+0xc0>)
 80007e2:	f000 f8a5 	bl	8000930 <Motor_Init>

//initialize motors to streategy
Sumo_InitMotors(&SumoMotors, &MotorL, &MotorR);
 80007e6:	4a19      	ldr	r2, [pc, #100]	@ (800084c <main+0xb8>)
 80007e8:	491a      	ldr	r1, [pc, #104]	@ (8000854 <main+0xc0>)
 80007ea:	481b      	ldr	r0, [pc, #108]	@ (8000858 <main+0xc4>)
 80007ec:	f000 f946 	bl	8000a7c <Sumo_InitMotors>
//initialize sensors to sumo strategy
Sumo_InitDistanceSensors(&SumoSensors, SharpPointerL , SharpPointerR);
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <main+0x9c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <main+0xa4>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4818      	ldr	r0, [pc, #96]	@ (800085c <main+0xc8>)
 80007fc:	f000 f950 	bl	8000aa0 <Sumo_InitDistanceSensors>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f832 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff ff68 	bl	80006d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000808:	f7ff ff46 	bl	8000698 <MX_DMA_Init>
  MX_ADC1_Init();
 800080c:	f7ff fe7a 	bl	8000504 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000810:	f000 fa56 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000814:	f000 f968 	bl	8000ae8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) AdcValues, 2);
 8000818:	2202      	movs	r2, #2
 800081a:	4906      	ldr	r1, [pc, #24]	@ (8000834 <main+0xa0>)
 800081c:	4810      	ldr	r0, [pc, #64]	@ (8000860 <main+0xcc>)
 800081e:	f000 fba1 	bl	8000f64 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AdcToVoltage(SharpPointerL, (float*)&SharpVoltageL);
 8000822:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <main+0x9c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	490f      	ldr	r1, [pc, #60]	@ (8000864 <main+0xd0>)
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f907 	bl	8000a3c <AdcToVoltage>
 800082e:	e7f8      	b.n	8000822 <main+0x8e>
 8000830:	200000d4 	.word	0x200000d4
 8000834:	200000d0 	.word	0x200000d0
 8000838:	200000d8 	.word	0x200000d8
 800083c:	200000d2 	.word	0x200000d2
 8000840:	20000114 	.word	0x20000114
 8000844:	40020400 	.word	0x40020400
 8000848:	20000154 	.word	0x20000154
 800084c:	200000e0 	.word	0x200000e0
 8000850:	200000f8 	.word	0x200000f8
 8000854:	200000fc 	.word	0x200000fc
 8000858:	20000118 	.word	0x20000118
 800085c:	20000138 	.word	0x20000138
 8000860:	20000028 	.word	0x20000028
 8000864:	200000dc 	.word	0x200000dc

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f856 	bl	8003928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <SystemClock_Config+0xb4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a21      	ldr	r2, [pc, #132]	@ (800091c <SystemClock_Config+0xb4>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <SystemClock_Config+0xb4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <SystemClock_Config+0xb8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <SystemClock_Config+0xb8>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <SystemClock_Config+0xb8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fd25 	bl	8002328 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008e4:	f000 f81e 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 ff88 	bl	8002818 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800090e:	f000 f809 	bl	8000924 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	@ 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <Motor_Init>:
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
}


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	8bba      	ldrh	r2, [r7, #28]
 800095c:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000968:	829a      	strh	r2, [r3, #20]

	return MOTOR_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 fa3d 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <DMA2_Stream0_IRQHandler+0x10>)
 8000a2e:	f001 f873 	bl	8001b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000070 	.word	0x20000070

08000a3c <AdcToVoltage>:
float alpha = 0.3;



void AdcToVoltage(uint16_t *AdcValue, float *Voltage)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    *Voltage = ((*AdcValue) / 4095.0f) * 3.3f;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	ee07 3a90 	vmov	s15, r3
 8000a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a52:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000a74 <AdcToVoltage+0x38>
 8000a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000a78 <AdcToVoltage+0x3c>
 8000a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	edc3 7a00 	vstr	s15, [r3]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	457ff000 	.word	0x457ff000
 8000a78:	40533333 	.word	0x40533333

08000a7c <Sumo_InitMotors>:
//}



void Sumo_InitMotors(SumoMotors_t *SumoMotors, Motor_t *MotorL, Motor_t *MotorR)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	SumoMotors->MotorL = MotorL;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	601a      	str	r2, [r3, #0]
	SumoMotors->MotorR = MotorR;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <Sumo_InitDistanceSensors>:

void Sumo_InitDistanceSensors(SumoSensors_t *SumoSensors, uint16_t *DistanceSensorL, uint16_t *DistanceSensorR)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	SumoSensors->DistanceSensorL = DistanceSensorL;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	601a      	str	r2, [r3, #0]
	SumoSensors->DistanceSensorR = DistanceSensorR;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b092      	sub	sp, #72	@ 0x48
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2220      	movs	r2, #32
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 ff08 	bl	8003928 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b18:	4b39      	ldr	r3, [pc, #228]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c04 <MX_TIM1_Init+0x11c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000b1e:	4b38      	ldr	r3, [pc, #224]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b20:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000b24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000b2c:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b2e:	2263      	movs	r2, #99	@ 0x63
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b44:	482e      	ldr	r0, [pc, #184]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b46:	f002 f847 	bl	8002bd8 <HAL_TIM_PWM_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b50:	f7ff fee8 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b60:	4619      	mov	r1, r3
 8000b62:	4827      	ldr	r0, [pc, #156]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b64:	f002 fb5c 	bl	8003220 <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b6e:	f7ff fed9 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	2360      	movs	r3, #96	@ 0x60
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000b98:	f002 f86e 	bl	8002c78 <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ba2:	f7ff febf 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	2204      	movs	r2, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4814      	ldr	r0, [pc, #80]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000bb0:	f002 f862 	bl	8002c78 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000bba:	f7ff feb3 	bl	8000924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000be2:	f002 fb8b 	bl	80032fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000bec:	f7ff fe9a 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf0:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <MX_TIM1_Init+0x118>)
 8000bf2:	f000 f82b 	bl	8000c4c <HAL_TIM_MspPostInit>

}
 8000bf6:	bf00      	nop
 8000bf8:	3748      	adds	r7, #72	@ 0x48
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000154 	.word	0x20000154
 8000c04:	40010000 	.word	0x40010000

08000c08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10d      	bne.n	8000c36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_TIM_PWM_MspInit+0x40>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <HAL_TIM_PWM_MspInit+0x40>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <HAL_TIM_PWM_MspInit+0x40>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40010000 	.word	0x40010000
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <HAL_TIM_MspPostInit+0x68>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d11e      	bne.n	8000cac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_TIM_MspPostInit+0x6c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0x6c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_TIM_MspPostInit+0x6c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorPwmL_Pin|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_TIM_MspPostInit+0x70>)
 8000ca8:	f001 f9a0 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f002 fb52 	bl	80033a0 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f7ff fe0f 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000019c 	.word	0x2000019c
 8000d10:	40011000 	.word	0x40011000

08000d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <HAL_UART_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12c      	bne.n	8000d90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|MotorPwmR_Pin;
 8000d6e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d80:	2307      	movs	r3, #7
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d8c:	f001 f92e 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da8:	f7ff fe8c 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f002 fdb1 	bl	8003938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fcdd 	bl	8000794 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de8:	080039c8 	.word	0x080039c8
  ldr r2, =_sbss
 8000dec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df0:	200001e8 	.word	0x200001e8

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 fd31 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fda4 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd49 	bl	80018f2 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 fd11 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200001e4 	.word	0x200001e4

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001e4 	.word	0x200001e4

08000edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e033      	b.n	8000f5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fb54 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d118      	bne.n	8000f4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f22:	f023 0302 	bic.w	r3, r3, #2
 8000f26:	f043 0202 	orr.w	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fa5c 	bl	80013ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f4a:	e001      	b.n	8000f50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Start_DMA+0x22>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e0d0      	b.n	8001128 <HAL_ADC_Start_DMA+0x1c4>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d018      	beq.n	8000fce <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fac:	4b60      	ldr	r3, [pc, #384]	@ (8001130 <HAL_ADC_Start_DMA+0x1cc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a60      	ldr	r2, [pc, #384]	@ (8001134 <HAL_ADC_Start_DMA+0x1d0>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9a      	lsrs	r2, r3, #18
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fc0:	e002      	b.n	8000fc8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f9      	bne.n	8000fc2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d107      	bne.n	8000fee <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 8088 	bne.w	800110e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001028:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800103c:	d106      	bne.n	800104c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f023 0206 	bic.w	r2, r3, #6
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	645a      	str	r2, [r3, #68]	@ 0x44
 800104a:	e002      	b.n	8001052 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <HAL_ADC_Start_DMA+0x1d4>)
 800105c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	4a36      	ldr	r2, [pc, #216]	@ (800113c <HAL_ADC_Start_DMA+0x1d8>)
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106a:	4a35      	ldr	r2, [pc, #212]	@ (8001140 <HAL_ADC_Start_DMA+0x1dc>)
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001072:	4a34      	ldr	r2, [pc, #208]	@ (8001144 <HAL_ADC_Start_DMA+0x1e0>)
 8001074:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800107e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800108e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800109e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	334c      	adds	r3, #76	@ 0x4c
 80010aa:	4619      	mov	r1, r3
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f000 fcda 	bl	8001a68 <HAL_DMA_Start_IT>
 80010b4:	4603      	mov	r3, r0
 80010b6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10f      	bne.n	80010e4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d129      	bne.n	8001126 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	e020      	b.n	8001126 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_ADC_Start_DMA+0x1e4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d11b      	bne.n	8001126 <HAL_ADC_Start_DMA+0x1c2>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d114      	bne.n	8001126 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	e00b      	b.n	8001126 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f043 0210 	orr.w	r2, r3, #16
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001126:	7ffb      	ldrb	r3, [r7, #31]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	431bde83 	.word	0x431bde83
 8001138:	40012300 	.word	0x40012300
 800113c:	080015e5 	.word	0x080015e5
 8001140:	0800169f 	.word	0x0800169f
 8001144:	080016bb 	.word	0x080016bb
 8001148:	40012000 	.word	0x40012000

0800114c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e113      	b.n	80013cc <HAL_ADC_ConfigChannel+0x244>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d925      	bls.n	8001200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68d9      	ldr	r1, [r3, #12]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3b1e      	subs	r3, #30
 80011ca:	2207      	movs	r2, #7
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43da      	mvns	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	400a      	ands	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68d9      	ldr	r1, [r3, #12]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4403      	add	r3, r0
 80011f2:	3b1e      	subs	r3, #30
 80011f4:	409a      	lsls	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	e022      	b.n	8001246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6919      	ldr	r1, [r3, #16]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	2207      	movs	r2, #7
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	400a      	ands	r2, r1
 8001222:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4403      	add	r3, r0
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b06      	cmp	r3, #6
 800124c:	d824      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b05      	subs	r3, #5
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b05      	subs	r3, #5
 800128a:	fa00 f203 	lsl.w	r2, r0, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	e04c      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d824      	bhi.n	80012ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b23      	subs	r3, #35	@ 0x23
 80012b2:	221f      	movs	r2, #31
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43da      	mvns	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	400a      	ands	r2, r1
 80012c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3b23      	subs	r3, #35	@ 0x23
 80012dc:	fa00 f203 	lsl.w	r2, r0, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e8:	e023      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b41      	subs	r3, #65	@ 0x41
 80012fc:	221f      	movs	r2, #31
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b41      	subs	r3, #65	@ 0x41
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_ADC_ConfigChannel+0x250>)
 8001334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10f      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_ADC_ConfigChannel+0x1f4>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b11      	cmp	r3, #17
 800137a:	d122      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_ADC_ConfigChannel+0x25c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_ADC_ConfigChannel+0x260>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9a      	lsrs	r2, r3, #18
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40012300 	.word	0x40012300
 80013dc:	40012000 	.word	0x40012000
 80013e0:	10000012 	.word	0x10000012
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f4:	4b79      	ldr	r3, [pc, #484]	@ (80015dc <ADC_Init+0x1f0>)
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <ADC_Init+0x1f4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00f      	b.n	80014ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1b      	ldrb	r3, [r3, #24]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001526:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	3b01      	subs	r3, #1
 8001544:	035a      	lsls	r2, r3, #13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e007      	b.n	8001560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b01      	subs	r3, #1
 800157c:	051a      	lsls	r2, r3, #20
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	029a      	lsls	r2, r3, #10
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d13c      	bne.n	8001678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d12b      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d127      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001638:	2b00      	cmp	r3, #0
 800163a:	d119      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0220 	bic.w	r2, r2, #32
 800164a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff fd6b 	bl	800114c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001676:	e00e      	b.n	8001696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fd75 	bl	8001174 <HAL_ADC_ErrorCallback>
}
 800168a:	e004      	b.n	8001696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff fd57 	bl	8001160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	@ 0x40
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f043 0204 	orr.w	r2, r3, #4
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff fd4a 	bl	8001174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	@ (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff29 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff3e 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff31 	bl	800174c <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa2 	bl	8001844 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff fad4 	bl	8000ec4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e099      	b.n	8001a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	e00f      	b.n	800196a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fabb 	bl	8000ec4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b05      	cmp	r3, #5
 8001956:	d908      	bls.n	800196a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e078      	b.n	8001a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e8      	bne.n	800194a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <HAL_DMA_Init+0x158>)
 8001984:	4013      	ands	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	4313      	orrs	r3, r2
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d117      	bne.n	8001a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa6f 	bl	8001ef4 <DMA_CheckFifoParam>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e016      	b.n	8001a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa26 	bl	8001e88 <DMA_CalcBaseAndBitshift>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	223f      	movs	r2, #63	@ 0x3f
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	f010803f 	.word	0xf010803f

08001a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Start_IT+0x26>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e040      	b.n	8001b10 <HAL_DMA_Start_IT+0xa8>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d12f      	bne.n	8001b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f9b8 	bl	8001e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	223f      	movs	r2, #63	@ 0x3f
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0216 	orr.w	r2, r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e005      	b.n	8001b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b24:	4b8e      	ldr	r3, [pc, #568]	@ (8001d60 <HAL_DMA_IRQHandler+0x248>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a8e      	ldr	r2, [pc, #568]	@ (8001d64 <HAL_DMA_IRQHandler+0x24c>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2208      	movs	r2, #8
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	2208      	movs	r2, #8
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2204      	movs	r2, #4
 8001bde:	409a      	lsls	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d043      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03c      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2210      	movs	r2, #16
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d024      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	e01f      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e016      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 808f 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8087 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cae:	2220      	movs	r2, #32
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d136      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0216 	bic.w	r2, r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_DMA_IRQHandler+0x1da>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	223f      	movs	r2, #63	@ 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d07e      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
        }
        return;
 8001d2e:	e079      	b.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d031      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e02c      	b.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d023      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4798      	blx	r3
 8001d78:	e01e      	b.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0210 	bic.w	r2, r2, #16
 8001d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d032      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2205      	movs	r2, #5
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d307      	bcc.n	8001e00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f2      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x2cc>
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
 8001e22:	e000      	b.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e24:	bf00      	nop
    }
  }
}
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b40      	cmp	r3, #64	@ 0x40
 8001e58:	d108      	bne.n	8001e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e6a:	e007      	b.n	8001e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3b10      	subs	r3, #16
 8001e98:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <DMA_CalcBaseAndBitshift+0x64>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d909      	bls.n	8001eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ec8:	e007      	b.n	8001eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	aaaaaaab 	.word	0xaaaaaaab
 8001ef0:	080039b0 	.word	0x080039b0

08001ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d856      	bhi.n	8001fc2 <DMA_CheckFifoParam+0xce>
 8001f14:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <DMA_CheckFifoParam+0x28>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3f 	.word	0x08001f3f
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001fc3 	.word	0x08001fc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d046      	beq.n	8001fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3c:	e043      	b.n	8001fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f46:	d140      	bne.n	8001fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4c:	e03d      	b.n	8001fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f56:	d121      	bne.n	8001f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d837      	bhi.n	8001fce <DMA_CheckFifoParam+0xda>
 8001f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <DMA_CheckFifoParam+0x70>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f7b 	.word	0x08001f7b
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	08001f8d 	.word	0x08001f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e030      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d025      	beq.n	8001fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e022      	b.n	8001fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f94:	d11f      	bne.n	8001fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f9a:	e01c      	b.n	8001fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d903      	bls.n	8001faa <DMA_CheckFifoParam+0xb6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa8:	e018      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e015      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e00b      	b.n	8001fda <DMA_CheckFifoParam+0xe6>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e00a      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e008      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e006      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e004      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
    }
  } 
  
  return status; 
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e159      	b.n	80022bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8148 	bne.w	80022b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b54      	ldr	r3, [pc, #336]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x2f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x202>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_GPIO_Init+0x2f4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x1fe>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_GPIO_Init+0x2f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x1fa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a46      	ldr	r2, [pc, #280]	@ (80022e8 <HAL_GPIO_Init+0x2fc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x1f6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_GPIO_Init+0x300>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x1f2>
 80021da:	2304      	movs	r3, #4
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021de:	2307      	movs	r3, #7
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f aea2 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e267      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d075      	beq.n	8002432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002346:	4b88      	ldr	r3, [pc, #544]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d00c      	beq.n	800236c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b85      	ldr	r3, [pc, #532]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800235a:	2b08      	cmp	r3, #8
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235e:	4b82      	ldr	r3, [pc, #520]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b7e      	ldr	r3, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05b      	beq.n	8002430 <HAL_RCC_OscConfig+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d157      	bne.n	8002430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e242      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x74>
 800238e:	4b76      	ldr	r3, [pc, #472]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a75      	ldr	r2, [pc, #468]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b70      	ldr	r3, [pc, #448]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 80023c0:	4b69      	ldr	r3, [pc, #420]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a68      	ldr	r2, [pc, #416]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fd70 	bl	8000ec4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fd6c 	bl	8000ec4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e207      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xc0>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fd5c 	bl	8000ec4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fd58 	bl	8000ec4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	@ 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1f3      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b51      	ldr	r3, [pc, #324]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0xe8>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1c7      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4937      	ldr	r1, [pc, #220]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b34      	ldr	r3, [pc, #208]	@ (800256c <HAL_RCC_OscConfig+0x244>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fd11 	bl	8000ec4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fd0d 	bl	8000ec4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1a8      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4925      	ldr	r1, [pc, #148]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b24      	ldr	r3, [pc, #144]	@ (800256c <HAL_RCC_OscConfig+0x244>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fcf0 	bl	8000ec4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fcec 	bl	8000ec4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e187      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x248>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fcd0 	bl	8000ec4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fccc 	bl	8000ec4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e167      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x200>
 8002546:	e01b      	b.n	8002580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_OscConfig+0x248>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe fcb9 	bl	8000ec4 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	e00e      	b.n	8002574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe fcb5 	bl	8000ec4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d907      	bls.n	8002574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e150      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
 8002568:	40023800 	.word	0x40023800
 800256c:	42470000 	.word	0x42470000
 8002570:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b88      	ldr	r3, [pc, #544]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ea      	bne.n	8002556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8097 	beq.w	80026bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b81      	ldr	r3, [pc, #516]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b77      	ldr	r3, [pc, #476]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b74      	ldr	r3, [pc, #464]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a73      	ldr	r2, [pc, #460]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fc75 	bl	8000ec4 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7fe fc71 	bl	8000ec4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e10c      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x2ea>
 8002604:	4b64      	ldr	r3, [pc, #400]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a63      	ldr	r2, [pc, #396]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x324>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x30c>
 800261a:	4b5f      	ldr	r3, [pc, #380]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a5e      	ldr	r2, [pc, #376]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	4b5c      	ldr	r3, [pc, #368]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	@ 0x70
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x324>
 8002634:	4b58      	ldr	r3, [pc, #352]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a57      	ldr	r2, [pc, #348]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002640:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a54      	ldr	r2, [pc, #336]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fc36 	bl	8000ec4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fc32 	bl	8000ec4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0cb      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <HAL_RCC_OscConfig+0x334>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe fc20 	bl	8000ec4 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe fc1c 	bl	8000ec4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0b5      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	4b3e      	ldr	r3, [pc, #248]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4a38      	ldr	r2, [pc, #224]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a1 	beq.w	8002808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d05c      	beq.n	800278c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d141      	bne.n	800275e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fbf0 	bl	8000ec4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fbec 	bl	8000ec4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e087      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	491b      	ldr	r1, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe fbc5 	bl	8000ec4 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe fbc1 	bl	8000ec4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e05c      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x416>
 800275c:	e054      	b.n	8002808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fbae 	bl	8000ec4 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fbaa 	bl	8000ec4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e045      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x444>
 800278a:	e03d      	b.n	8002808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e038      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	40007000 	.word	0x40007000
 80027a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x4ec>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d028      	beq.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d121      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11a      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0cc      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b68      	ldr	r3, [pc, #416]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d90c      	bls.n	8002854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a58      	ldr	r2, [pc, #352]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002876:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800288e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d119      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e067      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b37      	ldr	r3, [pc, #220]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4934      	ldr	r1, [pc, #208]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002908:	f7fe fadc 	bl	8000ec4 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fad8 	bl	8000ec4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d20c      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fa3c 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08003998 	.word	0x08003998
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e8:	b090      	sub	sp, #64	@ 0x40
 80029ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fc:	4b59      	ldr	r3, [pc, #356]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d00d      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	f200 80a1 	bhi.w	8002b50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a16:	e09b      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a1c:	e09b      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4b53      	ldr	r3, [pc, #332]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a22:	e098      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4b4f      	ldr	r3, [pc, #316]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d028      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	2200      	movs	r2, #0
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4b47      	ldr	r3, [pc, #284]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a50:	fb03 f201 	mul.w	r2, r3, r1
 8002a54:	2300      	movs	r3, #0
 8002a56:	fb00 f303 	mul.w	r3, r0, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a43      	ldr	r2, [pc, #268]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a64:	460a      	mov	r2, r1
 8002a66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6a:	4413      	add	r3, r2
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a70:	2200      	movs	r2, #0
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	61fa      	str	r2, [r7, #28]
 8002a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a7e:	f7fd fbab 	bl	80001d8 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4613      	mov	r3, r2
 8002a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8a:	e053      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8c:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	2200      	movs	r2, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	617a      	str	r2, [r7, #20]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a9e:	f04f 0b00 	mov.w	fp, #0
 8002aa2:	4652      	mov	r2, sl
 8002aa4:	465b      	mov	r3, fp
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0159      	lsls	r1, r3, #5
 8002ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab4:	0150      	lsls	r0, r2, #5
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ebb2 080a 	subs.w	r8, r2, sl
 8002abe:	eb63 090b 	sbc.w	r9, r3, fp
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ace:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ad2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ad6:	ebb2 0408 	subs.w	r4, r2, r8
 8002ada:	eb63 0509 	sbc.w	r5, r3, r9
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	00eb      	lsls	r3, r5, #3
 8002ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aec:	00e2      	lsls	r2, r4, #3
 8002aee:	4614      	mov	r4, r2
 8002af0:	461d      	mov	r5, r3
 8002af2:	eb14 030a 	adds.w	r3, r4, sl
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	eb45 030b 	adc.w	r3, r5, fp
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	028b      	lsls	r3, r1, #10
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b14:	4621      	mov	r1, r4
 8002b16:	028a      	lsls	r2, r1, #10
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	60fa      	str	r2, [r7, #12]
 8002b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b28:	f7fd fb56 	bl	80001d8 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0c1b      	lsrs	r3, r3, #16
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b4e:	e002      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3740      	adds	r7, #64	@ 0x40
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	017d7840 	.word	0x017d7840

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b03      	ldr	r3, [pc, #12]	@ (8002b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b8c:	f7ff fff0 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0a9b      	lsrs	r3, r3, #10
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	@ (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	080039a8 	.word	0x080039a8

08002bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb4:	f7ff ffdc 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	0b5b      	lsrs	r3, r3, #13
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	4903      	ldr	r1, [pc, #12]	@ (8002bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	080039a8 	.word	0x080039a8

08002bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e041      	b.n	8002c6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f802 	bl	8000c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 f8f0 	bl	8002dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0ae      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	f200 809f 	bhi.w	8002de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002de5 	.word	0x08002de5
 8002cb4:	08002de5 	.word	0x08002de5
 8002cb8:	08002de5 	.word	0x08002de5
 8002cbc:	08002d21 	.word	0x08002d21
 8002cc0:	08002de5 	.word	0x08002de5
 8002cc4:	08002de5 	.word	0x08002de5
 8002cc8:	08002de5 	.word	0x08002de5
 8002ccc:	08002d63 	.word	0x08002d63
 8002cd0:	08002de5 	.word	0x08002de5
 8002cd4:	08002de5 	.word	0x08002de5
 8002cd8:	08002de5 	.word	0x08002de5
 8002cdc:	08002da3 	.word	0x08002da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f90e 	bl	8002f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6999      	ldr	r1, [r3, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	619a      	str	r2, [r3, #24]
      break;
 8002d1e:	e064      	b.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f954 	bl	8002fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	021a      	lsls	r2, r3, #8
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]
      break;
 8002d60:	e043      	b.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f99f 	bl	80030ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0208 	orr.w	r2, r2, #8
 8002d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0204 	bic.w	r2, r2, #4
 8002d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69d9      	ldr	r1, [r3, #28]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	61da      	str	r2, [r3, #28]
      break;
 8002da0:	e023      	b.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f9e9 	bl	8003180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	021a      	lsls	r2, r3, #8
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	61da      	str	r2, [r3, #28]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
      break;
 8002de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a37      	ldr	r2, [pc, #220]	@ (8002eec <TIM_Base_SetConfig+0xf0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <TIM_Base_SetConfig+0x38>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x38>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <TIM_Base_SetConfig+0xf4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x38>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a33      	ldr	r2, [pc, #204]	@ (8002ef4 <TIM_Base_SetConfig+0xf8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x38>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a32      	ldr	r2, [pc, #200]	@ (8002ef8 <TIM_Base_SetConfig+0xfc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <TIM_Base_SetConfig+0xf0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01b      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d017      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a25      	ldr	r2, [pc, #148]	@ (8002ef0 <TIM_Base_SetConfig+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <TIM_Base_SetConfig+0xf8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a23      	ldr	r2, [pc, #140]	@ (8002ef8 <TIM_Base_SetConfig+0xfc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <TIM_Base_SetConfig+0x100>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <TIM_Base_SetConfig+0x104>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <TIM_Base_SetConfig+0x108>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002eec <TIM_Base_SetConfig+0xf0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d103      	bne.n	8002ec6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800

08002f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0201 	bic.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0302 	bic.w	r3, r3, #2
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <TIM_OC1_SetConfig+0xc8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0308 	bic.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <TIM_OC1_SetConfig+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	621a      	str	r2, [r3, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 0210 	bic.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0320 	bic.w	r3, r3, #32
 800301e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <TIM_OC2_SetConfig+0xd4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10d      	bne.n	8003050 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800304e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <TIM_OC2_SetConfig+0xd4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d113      	bne.n	8003080 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800305e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000

080030ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <TIM_OC3_SetConfig+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a14      	ldr	r2, [pc, #80]	@ (800317c <TIM_OC3_SetConfig+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40010000 	.word	0x40010000

08003180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	031b      	lsls	r3, r3, #12
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a10      	ldr	r2, [pc, #64]	@ (800321c <TIM_OC4_SetConfig+0x9c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d109      	bne.n	80031f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40010000 	.word	0x40010000

08003220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003234:	2302      	movs	r3, #2
 8003236:	e050      	b.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d018      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003284:	d013      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a13      	ldr	r2, [pc, #76]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10c      	bne.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003314:	2302      	movs	r3, #2
 8003316:	e03d      	b.n	8003394 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e042      	b.n	8003438 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fca4 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	@ 0x24
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f82b 	bl	8003440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b0c0      	sub	sp, #256	@ 0x100
 8003446:	af00      	add	r7, sp, #0
 8003448:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	ea40 0301 	orr.w	r3, r0, r1
 8003468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	431a      	orrs	r2, r3
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003498:	f021 010c 	bic.w	r1, r1, #12
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034a6:	430b      	orrs	r3, r1
 80034a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ba:	6999      	ldr	r1, [r3, #24]
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	ea40 0301 	orr.w	r3, r0, r1
 80034c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8f      	ldr	r3, [pc, #572]	@ (800370c <UART_SetConfig+0x2cc>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d005      	beq.n	80034e0 <UART_SetConfig+0xa0>
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8d      	ldr	r3, [pc, #564]	@ (8003710 <UART_SetConfig+0x2d0>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7ff fb66 	bl	8002bb0 <HAL_RCC_GetPCLK2Freq>
 80034e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034e8:	e003      	b.n	80034f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff fb4d 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 80034ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fc:	f040 810c 	bne.w	8003718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800350a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800350e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	1891      	adds	r1, r2, r2
 8003518:	65b9      	str	r1, [r7, #88]	@ 0x58
 800351a:	415b      	adcs	r3, r3
 800351c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800351e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003522:	4621      	mov	r1, r4
 8003524:	eb12 0801 	adds.w	r8, r2, r1
 8003528:	4629      	mov	r1, r5
 800352a:	eb43 0901 	adc.w	r9, r3, r1
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003542:	4690      	mov	r8, r2
 8003544:	4699      	mov	r9, r3
 8003546:	4623      	mov	r3, r4
 8003548:	eb18 0303 	adds.w	r3, r8, r3
 800354c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003550:	462b      	mov	r3, r5
 8003552:	eb49 0303 	adc.w	r3, r9, r3
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003566:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800356a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800356e:	460b      	mov	r3, r1
 8003570:	18db      	adds	r3, r3, r3
 8003572:	653b      	str	r3, [r7, #80]	@ 0x50
 8003574:	4613      	mov	r3, r2
 8003576:	eb42 0303 	adc.w	r3, r2, r3
 800357a:	657b      	str	r3, [r7, #84]	@ 0x54
 800357c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003584:	f7fc fe28 	bl	80001d8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <UART_SetConfig+0x2d4>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011c      	lsls	r4, r3, #4
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035b0:	415b      	adcs	r3, r3
 80035b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035b8:	4641      	mov	r1, r8
 80035ba:	eb12 0a01 	adds.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb43 0b01 	adc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d8:	4692      	mov	sl, r2
 80035da:	469b      	mov	fp, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	eb1a 0303 	adds.w	r3, sl, r3
 80035e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e6:	464b      	mov	r3, r9
 80035e8:	eb4b 0303 	adc.w	r3, fp, r3
 80035ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003604:	460b      	mov	r3, r1
 8003606:	18db      	adds	r3, r3, r3
 8003608:	643b      	str	r3, [r7, #64]	@ 0x40
 800360a:	4613      	mov	r3, r2
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
 8003612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800361a:	f7fc fddd 	bl	80001d8 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4611      	mov	r1, r2
 8003624:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <UART_SetConfig+0x2d4>)
 8003626:	fba3 2301 	umull	r2, r3, r3, r1
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2264      	movs	r2, #100	@ 0x64
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	1acb      	subs	r3, r1, r3
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800363a:	4b36      	ldr	r3, [pc, #216]	@ (8003714 <UART_SetConfig+0x2d4>)
 800363c:	fba3 2302 	umull	r2, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003648:	441c      	add	r4, r3
 800364a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003654:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003664:	415b      	adcs	r3, r3
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800366c:	4641      	mov	r1, r8
 800366e:	1851      	adds	r1, r2, r1
 8003670:	6339      	str	r1, [r7, #48]	@ 0x30
 8003672:	4649      	mov	r1, r9
 8003674:	414b      	adcs	r3, r1
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003684:	4659      	mov	r1, fp
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4651      	mov	r1, sl
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4642      	mov	r2, r8
 800369a:	189b      	adds	r3, r3, r2
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036a0:	464b      	mov	r3, r9
 80036a2:	460a      	mov	r2, r1
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036c0:	460b      	mov	r3, r1
 80036c2:	18db      	adds	r3, r3, r3
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036c6:	4613      	mov	r3, r2
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036d6:	f7fc fd7f 	bl	80001d8 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <UART_SetConfig+0x2d4>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	@ 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	3332      	adds	r3, #50	@ 0x32
 80036f2:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <UART_SetConfig+0x2d4>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	f003 0207 	and.w	r2, r3, #7
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4422      	add	r2, r4
 8003706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003708:	e106      	b.n	8003918 <UART_SetConfig+0x4d8>
 800370a:	bf00      	nop
 800370c:	40011000 	.word	0x40011000
 8003710:	40011400 	.word	0x40011400
 8003714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371c:	2200      	movs	r2, #0
 800371e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003722:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800372a:	4642      	mov	r2, r8
 800372c:	464b      	mov	r3, r9
 800372e:	1891      	adds	r1, r2, r2
 8003730:	6239      	str	r1, [r7, #32]
 8003732:	415b      	adcs	r3, r3
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373a:	4641      	mov	r1, r8
 800373c:	1854      	adds	r4, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0501 	adc.w	r5, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	00eb      	lsls	r3, r5, #3
 800374e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003752:	00e2      	lsls	r2, r4, #3
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4643      	mov	r3, r8
 800375a:	18e3      	adds	r3, r4, r3
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003760:	464b      	mov	r3, r9
 8003762:	eb45 0303 	adc.w	r3, r5, r3
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003786:	4629      	mov	r1, r5
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003790:	4621      	mov	r1, r4
 8003792:	008a      	lsls	r2, r1, #2
 8003794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003798:	f7fc fd1e 	bl	80001d8 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b60      	ldr	r3, [pc, #384]	@ (8003924 <UART_SetConfig+0x4e4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	61b9      	str	r1, [r7, #24]
 80037c4:	415b      	adcs	r3, r3
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	4641      	mov	r1, r8
 80037ce:	1851      	adds	r1, r2, r1
 80037d0:	6139      	str	r1, [r7, #16]
 80037d2:	4649      	mov	r1, r9
 80037d4:	414b      	adcs	r3, r1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e4:	4659      	mov	r1, fp
 80037e6:	00cb      	lsls	r3, r1, #3
 80037e8:	4651      	mov	r1, sl
 80037ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ee:	4651      	mov	r1, sl
 80037f0:	00ca      	lsls	r2, r1, #3
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	4642      	mov	r2, r8
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003800:	464b      	mov	r3, r9
 8003802:	460a      	mov	r2, r1
 8003804:	eb42 0303 	adc.w	r3, r2, r3
 8003808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003816:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003824:	4649      	mov	r1, r9
 8003826:	008b      	lsls	r3, r1, #2
 8003828:	4641      	mov	r1, r8
 800382a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382e:	4641      	mov	r1, r8
 8003830:	008a      	lsls	r2, r1, #2
 8003832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003836:	f7fc fccf 	bl	80001d8 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4611      	mov	r1, r2
 8003840:	4b38      	ldr	r3, [pc, #224]	@ (8003924 <UART_SetConfig+0x4e4>)
 8003842:	fba3 2301 	umull	r2, r3, r3, r1
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2264      	movs	r2, #100	@ 0x64
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	1acb      	subs	r3, r1, r3
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	3332      	adds	r3, #50	@ 0x32
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <UART_SetConfig+0x4e4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003860:	441c      	add	r4, r3
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	673b      	str	r3, [r7, #112]	@ 0x70
 800386a:	677a      	str	r2, [r7, #116]	@ 0x74
 800386c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	415b      	adcs	r3, r3
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b2:	464b      	mov	r3, r9
 80038b4:	460a      	mov	r2, r1
 80038b6:	eb42 0303 	adc.w	r3, r2, r3
 80038ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038e6:	f7fc fc77 	bl	80001d8 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <UART_SetConfig+0x4e4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	@ 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	@ 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	@ (8003924 <UART_SetConfig+0x4e4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	bf00      	nop
 800391a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003924:	51eb851f 	.word	0x51eb851f

08003928 <memset>:
 8003928:	4402      	add	r2, r0
 800392a:	4603      	mov	r3, r0
 800392c:	4293      	cmp	r3, r2
 800392e:	d100      	bne.n	8003932 <memset+0xa>
 8003930:	4770      	bx	lr
 8003932:	f803 1b01 	strb.w	r1, [r3], #1
 8003936:	e7f9      	b.n	800392c <memset+0x4>

08003938 <__libc_init_array>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4d0d      	ldr	r5, [pc, #52]	@ (8003970 <__libc_init_array+0x38>)
 800393c:	4c0d      	ldr	r4, [pc, #52]	@ (8003974 <__libc_init_array+0x3c>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	2600      	movs	r6, #0
 8003944:	42a6      	cmp	r6, r4
 8003946:	d109      	bne.n	800395c <__libc_init_array+0x24>
 8003948:	4d0b      	ldr	r5, [pc, #44]	@ (8003978 <__libc_init_array+0x40>)
 800394a:	4c0c      	ldr	r4, [pc, #48]	@ (800397c <__libc_init_array+0x44>)
 800394c:	f000 f818 	bl	8003980 <_init>
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	2600      	movs	r6, #0
 8003956:	42a6      	cmp	r6, r4
 8003958:	d105      	bne.n	8003966 <__libc_init_array+0x2e>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003960:	4798      	blx	r3
 8003962:	3601      	adds	r6, #1
 8003964:	e7ee      	b.n	8003944 <__libc_init_array+0xc>
 8003966:	f855 3b04 	ldr.w	r3, [r5], #4
 800396a:	4798      	blx	r3
 800396c:	3601      	adds	r6, #1
 800396e:	e7f2      	b.n	8003956 <__libc_init_array+0x1e>
 8003970:	080039c0 	.word	0x080039c0
 8003974:	080039c0 	.word	0x080039c0
 8003978:	080039c0 	.word	0x080039c0
 800397c:	080039c4 	.word	0x080039c4

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
