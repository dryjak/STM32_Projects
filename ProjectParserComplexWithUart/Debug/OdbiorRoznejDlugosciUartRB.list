
OdbiorRoznejDlugosciUartRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004540  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004784  08004784  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800478c  0800478c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004794  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080047a0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080047a0  000060fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3f2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b4  00000000  00000000  0001442e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000167e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002553d  00000000  00000000  00017ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df4f  00000000  00000000  0003cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e91d6  00000000  00000000  0004af3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  00134158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00136af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004700 	.word	0x08004700

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004700 	.word	0x08004700

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_uldivmod>:
 800023c:	b953      	cbnz	r3, 8000254 <__aeabi_uldivmod+0x18>
 800023e:	b94a      	cbnz	r2, 8000254 <__aeabi_uldivmod+0x18>
 8000240:	2900      	cmp	r1, #0
 8000242:	bf08      	it	eq
 8000244:	2800      	cmpeq	r0, #0
 8000246:	bf1c      	itt	ne
 8000248:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800024c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000250:	f000 b988 	b.w	8000564 <__aeabi_idiv0>
 8000254:	f1ad 0c08 	sub.w	ip, sp, #8
 8000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000268:	b004      	add	sp, #16
 800026a:	4770      	bx	lr

0800026c <__udivmoddi4>:
 800026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000270:	9d08      	ldr	r5, [sp, #32]
 8000272:	468e      	mov	lr, r1
 8000274:	4604      	mov	r4, r0
 8000276:	4688      	mov	r8, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14a      	bne.n	8000312 <__udivmoddi4+0xa6>
 800027c:	428a      	cmp	r2, r1
 800027e:	4617      	mov	r7, r2
 8000280:	d962      	bls.n	8000348 <__udivmoddi4+0xdc>
 8000282:	fab2 f682 	clz	r6, r2
 8000286:	b14e      	cbz	r6, 800029c <__udivmoddi4+0x30>
 8000288:	f1c6 0320 	rsb	r3, r6, #32
 800028c:	fa01 f806 	lsl.w	r8, r1, r6
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	40b7      	lsls	r7, r6
 8000296:	ea43 0808 	orr.w	r8, r3, r8
 800029a:	40b4      	lsls	r4, r6
 800029c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a0:	fa1f fc87 	uxth.w	ip, r7
 80002a4:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a8:	0c23      	lsrs	r3, r4, #16
 80002aa:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b2:	fb01 f20c 	mul.w	r2, r1, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x62>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c0:	f080 80ea 	bcs.w	8000498 <__udivmoddi4+0x22c>
 80002c4:	429a      	cmp	r2, r3
 80002c6:	f240 80e7 	bls.w	8000498 <__udivmoddi4+0x22c>
 80002ca:	3902      	subs	r1, #2
 80002cc:	443b      	add	r3, r7
 80002ce:	1a9a      	subs	r2, r3, r2
 80002d0:	b2a3      	uxth	r3, r4
 80002d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002de:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e2:	459c      	cmp	ip, r3
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0x8e>
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ec:	f080 80d6 	bcs.w	800049c <__udivmoddi4+0x230>
 80002f0:	459c      	cmp	ip, r3
 80002f2:	f240 80d3 	bls.w	800049c <__udivmoddi4+0x230>
 80002f6:	443b      	add	r3, r7
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fe:	eba3 030c 	sub.w	r3, r3, ip
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa2>
 8000306:	40f3      	lsrs	r3, r6
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xb6>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb0>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa2>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x14c>
 800032a:	4573      	cmp	r3, lr
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xc8>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 8105 	bhi.w	800053e <__udivmoddi4+0x2d2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb6e 0203 	sbc.w	r2, lr, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4690      	mov	r8, r2
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e5      	beq.n	800030e <__udivmoddi4+0xa2>
 8000342:	e9c5 4800 	strd	r4, r8, [r5]
 8000346:	e7e2      	b.n	800030e <__udivmoddi4+0xa2>
 8000348:	2a00      	cmp	r2, #0
 800034a:	f000 8090 	beq.w	800046e <__udivmoddi4+0x202>
 800034e:	fab2 f682 	clz	r6, r2
 8000352:	2e00      	cmp	r6, #0
 8000354:	f040 80a4 	bne.w	80004a0 <__udivmoddi4+0x234>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	0c03      	lsrs	r3, r0, #16
 800035c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000360:	b280      	uxth	r0, r0
 8000362:	b2bc      	uxth	r4, r7
 8000364:	2101      	movs	r1, #1
 8000366:	fbb2 fcfe 	udiv	ip, r2, lr
 800036a:	fb0e 221c 	mls	r2, lr, ip, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb04 f20c 	mul.w	r2, r4, ip
 8000376:	429a      	cmp	r2, r3
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x11e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x11c>
 8000382:	429a      	cmp	r2, r3
 8000384:	f200 80e0 	bhi.w	8000548 <__udivmoddi4+0x2dc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000390:	fb0e 3312 	mls	r3, lr, r2, r3
 8000394:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000398:	fb02 f404 	mul.w	r4, r2, r4
 800039c:	429c      	cmp	r4, r3
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x144>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x142>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f200 80ca 	bhi.w	8000542 <__udivmoddi4+0x2d6>
 80003ae:	4602      	mov	r2, r0
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x98>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa0e f401 	lsl.w	r4, lr, r1
 80003c8:	fa20 f306 	lsr.w	r3, r0, r6
 80003cc:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fa00 f801 	lsl.w	r8, r0, r1
 80003da:	fa1f fc87 	uxth.w	ip, r7
 80003de:	fbbe f0f9 	udiv	r0, lr, r9
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ec:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1a0>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003fe:	f080 809c 	bcs.w	800053a <__udivmoddi4+0x2ce>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8099 	bls.w	800053a <__udivmoddi4+0x2ce>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	eba4 040e 	sub.w	r4, r4, lr
 8000410:	fa1f fe83 	uxth.w	lr, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000420:	fb03 fc0c 	mul.w	ip, r3, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1ce>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800042e:	f080 8082 	bcs.w	8000536 <__udivmoddi4+0x2ca>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d97f      	bls.n	8000536 <__udivmoddi4+0x2ca>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	fba0 ec02 	umull	lr, ip, r0, r2
 8000446:	4564      	cmp	r4, ip
 8000448:	4673      	mov	r3, lr
 800044a:	46e1      	mov	r9, ip
 800044c:	d362      	bcc.n	8000514 <__udivmoddi4+0x2a8>
 800044e:	d05f      	beq.n	8000510 <__udivmoddi4+0x2a4>
 8000450:	b15d      	cbz	r5, 800046a <__udivmoddi4+0x1fe>
 8000452:	ebb8 0203 	subs.w	r2, r8, r3
 8000456:	eb64 0409 	sbc.w	r4, r4, r9
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	fa22 f301 	lsr.w	r3, r2, r1
 8000462:	431e      	orrs	r6, r3
 8000464:	40cc      	lsrs	r4, r1
 8000466:	e9c5 6400 	strd	r6, r4, [r5]
 800046a:	2100      	movs	r1, #0
 800046c:	e74f      	b.n	800030e <__udivmoddi4+0xa2>
 800046e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000472:	0c01      	lsrs	r1, r0, #16
 8000474:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000478:	b280      	uxth	r0, r0
 800047a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047e:	463b      	mov	r3, r7
 8000480:	4638      	mov	r0, r7
 8000482:	463c      	mov	r4, r7
 8000484:	46b8      	mov	r8, r7
 8000486:	46be      	mov	lr, r7
 8000488:	2620      	movs	r6, #32
 800048a:	fbb1 f1f7 	udiv	r1, r1, r7
 800048e:	eba2 0208 	sub.w	r2, r2, r8
 8000492:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000496:	e766      	b.n	8000366 <__udivmoddi4+0xfa>
 8000498:	4601      	mov	r1, r0
 800049a:	e718      	b.n	80002ce <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e72c      	b.n	80002fa <__udivmoddi4+0x8e>
 80004a0:	f1c6 0220 	rsb	r2, r6, #32
 80004a4:	fa2e f302 	lsr.w	r3, lr, r2
 80004a8:	40b7      	lsls	r7, r6
 80004aa:	40b1      	lsls	r1, r6
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	430a      	orrs	r2, r1
 80004b6:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ba:	b2bc      	uxth	r4, r7
 80004bc:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c0:	0c11      	lsrs	r1, r2, #16
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb08 f904 	mul.w	r9, r8, r4
 80004ca:	40b0      	lsls	r0, r6
 80004cc:	4589      	cmp	r9, r1
 80004ce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d2:	b280      	uxth	r0, r0
 80004d4:	d93e      	bls.n	8000554 <__udivmoddi4+0x2e8>
 80004d6:	1879      	adds	r1, r7, r1
 80004d8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004dc:	d201      	bcs.n	80004e2 <__udivmoddi4+0x276>
 80004de:	4589      	cmp	r9, r1
 80004e0:	d81f      	bhi.n	8000522 <__udivmoddi4+0x2b6>
 80004e2:	eba1 0109 	sub.w	r1, r1, r9
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f2:	b292      	uxth	r2, r2
 80004f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d229      	bcs.n	8000550 <__udivmoddi4+0x2e4>
 80004fc:	18ba      	adds	r2, r7, r2
 80004fe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000502:	d2c4      	bcs.n	800048e <__udivmoddi4+0x222>
 8000504:	4542      	cmp	r2, r8
 8000506:	d2c2      	bcs.n	800048e <__udivmoddi4+0x222>
 8000508:	f1a9 0102 	sub.w	r1, r9, #2
 800050c:	443a      	add	r2, r7
 800050e:	e7be      	b.n	800048e <__udivmoddi4+0x222>
 8000510:	45f0      	cmp	r8, lr
 8000512:	d29d      	bcs.n	8000450 <__udivmoddi4+0x1e4>
 8000514:	ebbe 0302 	subs.w	r3, lr, r2
 8000518:	eb6c 0c07 	sbc.w	ip, ip, r7
 800051c:	3801      	subs	r0, #1
 800051e:	46e1      	mov	r9, ip
 8000520:	e796      	b.n	8000450 <__udivmoddi4+0x1e4>
 8000522:	eba7 0909 	sub.w	r9, r7, r9
 8000526:	4449      	add	r1, r9
 8000528:	f1a8 0c02 	sub.w	ip, r8, #2
 800052c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000530:	fb09 f804 	mul.w	r8, r9, r4
 8000534:	e7db      	b.n	80004ee <__udivmoddi4+0x282>
 8000536:	4673      	mov	r3, lr
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1ce>
 800053a:	4650      	mov	r0, sl
 800053c:	e766      	b.n	800040c <__udivmoddi4+0x1a0>
 800053e:	4608      	mov	r0, r1
 8000540:	e6fd      	b.n	800033e <__udivmoddi4+0xd2>
 8000542:	443b      	add	r3, r7
 8000544:	3a02      	subs	r2, #2
 8000546:	e733      	b.n	80003b0 <__udivmoddi4+0x144>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	443b      	add	r3, r7
 800054e:	e71c      	b.n	800038a <__udivmoddi4+0x11e>
 8000550:	4649      	mov	r1, r9
 8000552:	e79c      	b.n	800048e <__udivmoddi4+0x222>
 8000554:	eba1 0109 	sub.w	r1, r1, r9
 8000558:	46c4      	mov	ip, r8
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	e7c4      	b.n	80004ee <__udivmoddi4+0x282>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <MX_GPIO_Init+0xd4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a2e      	ldr	r2, [pc, #184]	@ (800063c <MX_GPIO_Init+0xd4>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <MX_GPIO_Init+0xd4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b29      	ldr	r3, [pc, #164]	@ (800063c <MX_GPIO_Init+0xd4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a28      	ldr	r2, [pc, #160]	@ (800063c <MX_GPIO_Init+0xd4>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a22      	ldr	r2, [pc, #136]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_GPIO_Init+0xd4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f000 fea9 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480f      	ldr	r0, [pc, #60]	@ (8000640 <MX_GPIO_Init+0xd8>)
 8000602:	f000 fd19 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000606:	2320      	movs	r3, #32
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f000 fd0a 	bl	8001038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2028      	movs	r0, #40	@ 0x28
 800062a:	f000 fc10 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f000 fc27 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	@ 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fab5 	bl	8000bb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f826 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f7ff ff8a 	bl	8000568 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000654:	f000 f9c6 	bl	80009e4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&hlpuart1, &ReceiveTmp, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	490b      	ldr	r1, [pc, #44]	@ (8000688 <main+0x44>)
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <main+0x48>)
 800065e:	f001 ffb7 	bl	80025d0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ReceivedLines > 0)
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <main+0x4c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0fb      	beq.n	8000662 <main+0x1e>
	  {
		  ParserTakeLine(&ReceiveBuffer, ReceivedData);
 800066a:	490a      	ldr	r1, [pc, #40]	@ (8000694 <main+0x50>)
 800066c:	480a      	ldr	r0, [pc, #40]	@ (8000698 <main+0x54>)
 800066e:	f000 f897 	bl	80007a0 <ParserTakeLine>
		  ReceivedLines--;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <main+0x4c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <main+0x4c>)
 800067c:	701a      	strb	r2, [r3, #0]
		  ParserParse(ReceivedData);
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <main+0x50>)
 8000680:	f000 f8b4 	bl	80007ec <ParserParse>
	  if (ReceivedLines > 0)
 8000684:	e7ed      	b.n	8000662 <main+0x1e>
 8000686:	bf00      	nop
 8000688:	2000003c 	.word	0x2000003c
 800068c:	20000064 	.word	0x20000064
 8000690:	20000060 	.word	0x20000060
 8000694:	20000040 	.word	0x20000040
 8000698:	20000028 	.word	0x20000028

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	2238      	movs	r2, #56	@ 0x38
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fffc 	bl	80046a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fe78 	bl	80013b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006de:	2355      	movs	r3, #85	@ 0x55
 80006e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff12 	bl	800151c <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006fe:	f000 f849 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2104      	movs	r1, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fa10 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000726:	f000 f835 	bl	8000794 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <HAL_UART_RxCpltCallback+0x4c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d117      	bne.n	8000776 <HAL_UART_RxCpltCallback+0x42>
	{
		if (RB_OK == RB_Write(&ReceiveBuffer, ReceiveTmp))
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_UART_RxCpltCallback+0x50>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	480e      	ldr	r0, [pc, #56]	@ (8000788 <HAL_UART_RxCpltCallback+0x54>)
 800074e:	f000 f8a8 	bl	80008a2 <RB_Write>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d109      	bne.n	800076c <HAL_UART_RxCpltCallback+0x38>
		{
			if (ReceiveTmp == ENDLINE)
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <HAL_UART_RxCpltCallback+0x50>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b0a      	cmp	r3, #10
 800075e:	d105      	bne.n	800076c <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_UART_RxCpltCallback+0x58>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_UART_RxCpltCallback+0x58>)
 800076a:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&hlpuart1, &ReceiveTmp, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	4905      	ldr	r1, [pc, #20]	@ (8000784 <HAL_UART_RxCpltCallback+0x50>)
 8000770:	4807      	ldr	r0, [pc, #28]	@ (8000790 <HAL_UART_RxCpltCallback+0x5c>)
 8000772:	f001 ff2d 	bl	80025d0 <HAL_UART_Receive_IT>
	}
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40008000 	.word	0x40008000
 8000784:	2000003c 	.word	0x2000003c
 8000788:	20000028 	.word	0x20000028
 800078c:	20000060 	.word	0x20000060
 8000790:	20000064 	.word	0x20000064

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <ParserTakeLine>:
#include <parser_simple.h>
#include <string.h>

//function that checks if there is available line (command) to read and it parse this command
void ParserTakeLine(TRingBuffer *Buff, uint8_t *FinalTable)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Tmp;
	do
	{
		RB_Read(Buff,&Tmp);
 80007ae:	f107 030e 	add.w	r3, r7, #14
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f84b 	bl	8000850 <RB_Read>
		if(Tmp == ENDLINE)
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d105      	bne.n	80007cc <ParserTakeLine+0x2c>
		{
		  FinalTable[i] = 0;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e004      	b.n	80007d6 <ParserTakeLine+0x36>
		}
		else
		{
		  FinalTable[i] = Tmp;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	7bba      	ldrb	r2, [r7, #14]
 80007d4:	701a      	strb	r2, [r3, #0]
		}

		i++;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	3301      	adds	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
	}while(Tmp != ENDLINE); //repeat untill we find the end of the line
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d1e5      	bne.n	80007ae <ParserTakeLine+0xe>

}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <ParserParse>:

void ParserParse(uint8_t *FinalTable)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	//LED_ON
			  if(strcmp("LED_ON", (char*)FinalTable) == 0)
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4812      	ldr	r0, [pc, #72]	@ (8000840 <ParserParse+0x54>)
 80007f8:	f7ff fd0e 	bl	8000218 <strcmp>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d109      	bne.n	8000816 <ParserParse+0x2a>
			  {
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f000 fd97 	bl	800133c <HAL_GPIO_WritePin>
				  UartLog("Led is on!\n");
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <ParserParse+0x58>)
 8000810:	f000 f992 	bl	8000b38 <UartLog>
			  else if(strcmp("LED_OFF", (char*)FinalTable) == 0)
			  {
				  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
				  UartLog("Led is off!\n");
			  }
}
 8000814:	e00f      	b.n	8000836 <ParserParse+0x4a>
			  else if(strcmp("LED_OFF", (char*)FinalTable) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <ParserParse+0x5c>)
 800081a:	f7ff fcfd 	bl	8000218 <strcmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <ParserParse+0x4a>
				  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2120      	movs	r1, #32
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f000 fd86 	bl	800133c <HAL_GPIO_WritePin>
				  UartLog("Led is off!\n");
 8000830:	4806      	ldr	r0, [pc, #24]	@ (800084c <ParserParse+0x60>)
 8000832:	f000 f981 	bl	8000b38 <UartLog>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08004718 	.word	0x08004718
 8000844:	08004720 	.word	0x08004720
 8000848:	0800472c 	.word	0x0800472c
 800084c:	08004734 	.word	0x08004734

08000850 <RB_Read>:
#include <main.h>
#include <ring_buffer.h>

//read function
RBStatus RB_Read(TRingBuffer *Buff, uint8_t *Value)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	885b      	ldrh	r3, [r3, #2]
 8000862:	429a      	cmp	r2, r3
 8000864:	d101      	bne.n	800086a <RB_Read+0x1a>
	{
		return RB_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e015      	b.n	8000896 <RB_Read+0x46>
	}

	*Value = Buff->Buffer[Buff->Tail];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	885b      	ldrh	r3, [r3, #2]
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	791a      	ldrb	r2, [r3, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	701a      	strb	r2, [r3, #0]
	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	885b      	ldrh	r3, [r3, #2]
 800087e:	3301      	adds	r3, #1
 8000880:	425a      	negs	r2, r3
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	f002 020f 	and.w	r2, r2, #15
 800088a:	bf58      	it	pl
 800088c:	4253      	negpl	r3, r2
 800088e:	b29a      	uxth	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <RB_Write>:

//write function
RBStatus RB_Write(TRingBuffer *Buff, uint8_t Value)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b085      	sub	sp, #20
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	70fb      	strb	r3, [r7, #3]
	uint16_t HeadTmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	425a      	negs	r2, r3
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	f002 020f 	and.w	r2, r2, #15
 80008be:	bf58      	it	pl
 80008c0:	4253      	negpl	r3, r2
 80008c2:	81fb      	strh	r3, [r7, #14]
	if(HeadTmp == Buff->Tail)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	885b      	ldrh	r3, [r3, #2]
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d101      	bne.n	80008d2 <RB_Write+0x30>
	{
		return RB_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00a      	b.n	80008e8 <RB_Write+0x46>
	}

	Buff->Buffer[Buff->Head] = Value;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	711a      	strb	r2, [r3, #4]
	Buff->Head = HeadTmp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	89fa      	ldrh	r2, [r7, #14]
 80008e4:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800092a:	f000 fde7 	bl	80014fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f963 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800099e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009a2:	f000 fce3 	bl	800136c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <LPUART1_IRQHandler+0x10>)
 80009b2:	f001 fe59 	bl	8002668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000064 	.word	0x20000064

080009c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 80009ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <MX_LPUART1_UART_Init+0x90>)
 80009f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a08:	220c      	movs	r2, #12
 8000a0a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a26:	f001 fcf5 	bl	8002414 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000a30:	f7ff feb0 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a38:	f003 fd6b 	bl	8004512 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000a42:	f7ff fea7 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a4a:	f003 fda0 	bl	800458e <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000a54:	f7ff fe9e 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_LPUART1_UART_Init+0x88>)
 8000a5a:	f003 fd21 	bl	80044a0 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a64:	f7ff fe96 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000064 	.word	0x20000064
 8000a70:	40008000 	.word	0x40008000
 8000a74:	00033324 	.word	0x00033324

08000a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09e      	sub	sp, #120	@ 0x78
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2254      	movs	r2, #84	@ 0x54
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fe05 	bl	80046a8 <memset>
  if(uartHandle->Instance==LPUART1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d13e      	bne.n	8000b26 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa5f 	bl	8001f78 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac0:	f7ff fe68 	bl	8000794 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ad0:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000af4:	230c      	movs	r3, #12
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b04:	230c      	movs	r3, #12
 8000b06:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b12:	f000 fa91 	bl	8001038 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	205b      	movs	r0, #91	@ 0x5b
 8000b1c:	f000 f997 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b20:	205b      	movs	r0, #91	@ 0x5b
 8000b22:	f000 f9ae 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	3778      	adds	r7, #120	@ 0x78
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40008000 	.word	0x40008000
 8000b34:	40021000 	.word	0x40021000

08000b38 <UartLog>:
#include "usart.h"
#include "string.h"


void UartLog(char* Message)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) Message, strlen(Message), 1000);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fb73 	bl	800022c <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <UartLog+0x28>)
 8000b52:	f001 fcaf 	bl	80024b4 <HAL_UART_Transmit>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000064 	.word	0x20000064

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff ff2a 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 fd91 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fd55 	bl	8000644 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba8:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb0:	200000fc 	.word	0x200000fc

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>

08000bb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f939 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f80e 	bl	8000be8 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	e001      	b.n	8000bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd8:	f7ff fe8c 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_InitTick+0x68>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d022      	beq.n	8000c42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_InitTick+0x6c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f944 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10f      	bne.n	8000c3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d809      	bhi.n	8000c36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	2200      	movs	r2, #0
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c2a:	f000 f910 	bl	8000e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_InitTick+0x70>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e007      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e004      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	200000f8 	.word	0x200000f8
 8000c7c:	20000008 	.word	0x20000008

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200000f8 	.word	0x200000f8

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	@ (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff40 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff90 	bl	8000d8c <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5f 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff33 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa4 	bl	8000df4 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d005      	beq.n	8000eda <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e037      	b.n	8000f4a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 020e 	bic.w	r2, r2, #14
 8000ee8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ef8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f003 021f 	and.w	r2, r3, #31
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f26:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f3e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f48:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d00d      	beq.n	8000f9c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2204      	movs	r2, #4
 8000f84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e047      	b.n	800102c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 020e 	bic.w	r2, r2, #14
 8000faa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fe8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00c      	beq.n	800100c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001000:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800100a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	4798      	blx	r3
    }
  }
  return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001046:	e15a      	b.n	80012fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 814c 	beq.w	80012f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d005      	beq.n	8001078 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001074:	2b02      	cmp	r3, #2
 8001076:	d130      	bne.n	80010da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ae:	2201      	movs	r2, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 0201 	and.w	r2, r3, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d017      	beq.n	8001116 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d123      	bne.n	800116a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	6939      	ldr	r1, [r7, #16]
 8001166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0203 	and.w	r2, r3, #3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80a6 	beq.w	80012f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b5b      	ldr	r3, [pc, #364]	@ (800131c <HAL_GPIO_Init+0x2e4>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	4a5a      	ldr	r2, [pc, #360]	@ (800131c <HAL_GPIO_Init+0x2e4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b8:	4b58      	ldr	r3, [pc, #352]	@ (800131c <HAL_GPIO_Init+0x2e4>)
 80011ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c4:	4a56      	ldr	r2, [pc, #344]	@ (8001320 <HAL_GPIO_Init+0x2e8>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ee:	d01f      	beq.n	8001230 <HAL_GPIO_Init+0x1f8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <HAL_GPIO_Init+0x2ec>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d019      	beq.n	800122c <HAL_GPIO_Init+0x1f4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001328 <HAL_GPIO_Init+0x2f0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4a      	ldr	r2, [pc, #296]	@ (800132c <HAL_GPIO_Init+0x2f4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1ec>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a49      	ldr	r2, [pc, #292]	@ (8001330 <HAL_GPIO_Init+0x2f8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1e8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a48      	ldr	r2, [pc, #288]	@ (8001334 <HAL_GPIO_Init+0x2fc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1e4>
 8001218:	2305      	movs	r3, #5
 800121a:	e00a      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 800121c:	2306      	movs	r3, #6
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 8001220:	2304      	movs	r3, #4
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 8001224:	2303      	movs	r3, #3
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x1fa>
 8001230:	2300      	movs	r3, #0
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001242:	4937      	ldr	r1, [pc, #220]	@ (8001320 <HAL_GPIO_Init+0x2e8>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001250:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <HAL_GPIO_Init+0x300>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001274:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <HAL_GPIO_Init+0x300>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127a:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x300>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800129e:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x300>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012a4:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_GPIO_Init+0x300>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_GPIO_Init+0x300>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_GPIO_Init+0x300>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f2:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_GPIO_Init+0x300>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	f47f ae9d 	bne.w	8001048 <HAL_GPIO_Init+0x10>
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800
 800132c:	48000c00 	.word	0x48000c00
 8001330:	48001000 	.word	0x48001000
 8001334:	48001400 	.word	0x48001400
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f806 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d141      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013c2:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ce:	d131      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d0:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d6:	4a46      	ldr	r2, [pc, #280]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e0:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e8:	4a41      	ldr	r2, [pc, #260]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013f0:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2232      	movs	r2, #50	@ 0x32
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a3f      	ldr	r2, [pc, #252]	@ (80014f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0c9b      	lsrs	r3, r3, #18
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001406:	e002      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3b01      	subs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800140e:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800141a:	d102      	bne.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f2      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001422:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d158      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e057      	b.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001434:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143a:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001444:	e04d      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800144c:	d141      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800144e:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800145a:	d131      	bne.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001462:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2232      	movs	r2, #50	@ 0x32
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001492:	e002      	b.n	800149a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3b01      	subs	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a6:	d102      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f2      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ba:	d112      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e011      	b.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014d0:	e007      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40007000 	.word	0x40007000
 80014f4:	20000000 	.word	0x20000000
 80014f8:	431bde83 	.word	0x431bde83

080014fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150a:	6093      	str	r3, [r2, #8]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40007000 	.word	0x40007000

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e2fe      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b97      	ldr	r3, [pc, #604]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b0c      	cmp	r3, #12
 8001552:	d102      	bne.n	800155a <HAL_RCC_OscConfig+0x3e>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d002      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b8d      	ldr	r3, [pc, #564]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e2d9      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b85      	ldr	r3, [pc, #532]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a84      	ldr	r2, [pc, #528]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b78      	ldr	r3, [pc, #480]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a77      	ldr	r2, [pc, #476]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a74      	ldr	r2, [pc, #464]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb54 	bl	8000c80 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb50 	bl	8000c80 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e29e      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb40 	bl	8000c80 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fb3c 	bl	8000c80 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	@ 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e28a      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	4b60      	ldr	r3, [pc, #384]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d075      	beq.n	800171e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001632:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800163c:	4b56      	ldr	r3, [pc, #344]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x136>
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d002      	beq.n	8001658 <HAL_RCC_OscConfig+0x13c>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d11f      	bne.n	8001698 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x154>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e25d      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b49      	ldr	r3, [pc, #292]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4946      	ldr	r1, [pc, #280]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001684:	4b45      	ldr	r3, [pc, #276]	@ (800179c <HAL_RCC_OscConfig+0x280>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff faad 	bl	8000be8 <HAL_InitTick>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d043      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e249      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fae8 	bl	8000c80 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fae4 	bl	8000c80 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e232      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	492d      	ldr	r1, [pc, #180]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
 80016e6:	e01a      	b.n	800171e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fac4 	bl	8000c80 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fac0 	bl	8000c80 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e20e      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1e0>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d041      	beq.n	80017ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01c      	beq.n	800176c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa9d 	bl	8000c80 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fa99 	bl	8000c80 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1e7      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ef      	beq.n	800174a <HAL_RCC_OscConfig+0x22e>
 800176a:	e020      	b.n	80017ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa80 	bl	8000c80 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001782:	e00d      	b.n	80017a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fa7c 	bl	8000c80 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d906      	bls.n	80017a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1ca      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a0:	4b8c      	ldr	r3, [pc, #560]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ea      	bne.n	8001784 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80a6 	beq.w	8001908 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017c0:	4b84      	ldr	r3, [pc, #528]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2b4>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x2b6>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00d      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	4a7e      	ldr	r2, [pc, #504]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e2:	4b7c      	ldr	r3, [pc, #496]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	4b79      	ldr	r3, [pc, #484]	@ (80019d8 <HAL_RCC_OscConfig+0x4bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017fe:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x4bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	@ (80019d8 <HAL_RCC_OscConfig+0x4bc>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fa39 	bl	8000c80 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fa35 	bl	8000c80 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e183      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b6c      	ldr	r3, [pc, #432]	@ (80019d8 <HAL_RCC_OscConfig+0x4bc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d108      	bne.n	800184a <HAL_RCC_OscConfig+0x32e>
 8001838:	4b66      	ldr	r3, [pc, #408]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a65      	ldr	r2, [pc, #404]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	e024      	b.n	8001894 <HAL_RCC_OscConfig+0x378>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b05      	cmp	r3, #5
 8001850:	d110      	bne.n	8001874 <HAL_RCC_OscConfig+0x358>
 8001852:	4b60      	ldr	r3, [pc, #384]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001858:	4a5e      	ldr	r2, [pc, #376]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001862:	4b5c      	ldr	r3, [pc, #368]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	4a5a      	ldr	r2, [pc, #360]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001872:	e00f      	b.n	8001894 <HAL_RCC_OscConfig+0x378>
 8001874:	4b57      	ldr	r3, [pc, #348]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a56      	ldr	r2, [pc, #344]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188a:	4a52      	ldr	r2, [pc, #328]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d016      	beq.n	80018ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f9f0 	bl	8000c80 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff f9ec 	bl	8000c80 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e138      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ed      	beq.n	80018a4 <HAL_RCC_OscConfig+0x388>
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff f9d9 	bl	8000c80 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f9d5 	bl	8000c80 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e121      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e8:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ed      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001906:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b00      	cmp	r3, #0
 8001912:	d03c      	beq.n	800198e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01c      	beq.n	8001956 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001922:	4a2c      	ldr	r2, [pc, #176]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff f9a8 	bl	8000c80 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001934:	f7ff f9a4 	bl	8000c80 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0f2      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ef      	beq.n	8001934 <HAL_RCC_OscConfig+0x418>
 8001954:	e01b      	b.n	800198e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001956:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800195c:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f98b 	bl	8000c80 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196e:	f7ff f987 	bl	8000c80 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0d5      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ef      	bne.n	800196e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80c9 	beq.w	8001b2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	f000 8083 	beq.w	8001aac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d15e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_RCC_OscConfig+0x4b8>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f961 	bl	8000c80 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e00c      	b.n	80019dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f95d 	bl	8000c80 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d905      	bls.n	80019dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0ab      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ec      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e8:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b52      	ldr	r3, [pc, #328]	@ (8001b38 <HAL_RCC_OscConfig+0x61c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6a11      	ldr	r1, [r2, #32]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a02:	0212      	lsls	r2, r2, #8
 8001a04:	4311      	orrs	r1, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a0a:	0852      	lsrs	r2, r2, #1
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	0552      	lsls	r2, r2, #21
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a16:	0852      	lsrs	r2, r2, #1
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	0652      	lsls	r2, r2, #25
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a22:	06d2      	lsls	r2, r2, #27
 8001a24:	430a      	orrs	r2, r1
 8001a26:	4943      	ldr	r1, [pc, #268]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a40      	ldr	r2, [pc, #256]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff f91c 	bl	8000c80 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f918 	bl	8000c80 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e066      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x530>
 8001a6a:	e05e      	b.n	8001b2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b31      	ldr	r3, [pc, #196]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a30      	ldr	r2, [pc, #192]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f902 	bl	8000c80 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f8fe 	bl	8000c80 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e04c      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a9e:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4924      	ldr	r1, [pc, #144]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_RCC_OscConfig+0x620>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
 8001aaa:	e03e      	b.n	8001b2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e039      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCC_OscConfig+0x618>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0203 	and.w	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d12c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d123      	bne.n	8001b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d11b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d113      	bne.n	8001b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	019f800c 	.word	0x019f800c
 8001b3c:	feeefffc 	.word	0xfeeefffc

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e11e      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b91      	ldr	r3, [pc, #580]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b8e      	ldr	r3, [pc, #568]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 020f 	bic.w	r2, r3, #15
 8001b6e:	498c      	ldr	r1, [pc, #560]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b8a      	ldr	r3, [pc, #552]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e106      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d073      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d129      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b81      	ldr	r3, [pc, #516]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0f4      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bac:	f000 f99e 	bl	8001eec <RCC_GetSysClockFreqFromPLLSource>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8001da8 <HAL_RCC_ClockConfig+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d93f      	bls.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bba:	4b7a      	ldr	r3, [pc, #488]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d033      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12f      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bda:	4b72      	ldr	r3, [pc, #456]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be2:	4a70      	ldr	r2, [pc, #448]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e024      	b.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0c6      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0be      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c18:	f000 f8ce 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4a61      	ldr	r2, [pc, #388]	@ (8001da8 <HAL_RCC_ClockConfig+0x268>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d909      	bls.n	8001c3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c26:	4b5f      	ldr	r3, [pc, #380]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4957      	ldr	r1, [pc, #348]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f818 	bl	8000c80 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f814 	bl	8000c80 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e095      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c94:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a42      	ldr	r2, [pc, #264]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cac:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4936      	ldr	r1, [pc, #216]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b80      	cmp	r3, #128	@ 0x80
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cd6:	4b33      	ldr	r3, [pc, #204]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ce0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d21d      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 020f 	bic.w	r2, r3, #15
 8001cf8:	4929      	ldr	r1, [pc, #164]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7fe ffbe 	bl	8000c80 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7fe ffba 	bl	8000c80 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e03b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ed      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4917      	ldr	r1, [pc, #92]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490f      	ldr	r1, [pc, #60]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6a:	f000 f825 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490c      	ldr	r1, [pc, #48]	@ (8001dac <HAL_RCC_ClockConfig+0x26c>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff2a 	bl	8000be8 <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	04c4b400 	.word	0x04c4b400
 8001dac:	08004744 	.word	0x08004744
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e047      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e03e      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d136      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a16      	ldr	r2, [pc, #88]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	68d2      	ldr	r2, [r2, #12]
 8001e18:	0a12      	lsrs	r2, r2, #8
 8001e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
      break;
 8001e24:	e00c      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e26:	4a13      	ldr	r2, [pc, #76]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	0a12      	lsrs	r2, r2, #8
 8001e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e001      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e60:	693b      	ldr	r3, [r7, #16]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	016e3600 	.word	0x016e3600

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08004754 	.word	0x08004754

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004754 	.word	0x08004754

08001eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d10c      	bne.n	8001f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1a:	68d2      	ldr	r2, [r2, #12]
 8001f1c:	0a12      	lsrs	r2, r2, #8
 8001f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
    break;
 8001f28:	e00c      	b.n	8001f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4a0e      	ldr	r2, [pc, #56]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	0a12      	lsrs	r2, r2, #8
 8001f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    break;
 8001f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0e5b      	lsrs	r3, r3, #25
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	016e3600 	.word	0x016e3600
 8001f74:	00f42400 	.word	0x00f42400

08001f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f80:	2300      	movs	r3, #0
 8001f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8098 	beq.w	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b40      	ldr	r3, [pc, #256]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a3f      	ldr	r2, [pc, #252]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a39      	ldr	r2, [pc, #228]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fce:	f7fe fe57 	bl	8000c80 <HAL_GetTick>
 8001fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd4:	e009      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fe53 	bl	8000c80 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d902      	bls.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fea:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d159      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01e      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	d019      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002018:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a1f      	ldr	r2, [pc, #124]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002034:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002044:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fe13 	bl	8000c80 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205c:	e00b      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fe0f 	bl	8000c80 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d902      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	74fb      	strb	r3, [r7, #19]
            break;
 8002074:	e006      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ec      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10b      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002098:	4903      	ldr	r1, [pc, #12]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020a0:	e008      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	74bb      	strb	r3, [r7, #18]
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b4:	7c7b      	ldrb	r3, [r7, #17]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4ba7      	ldr	r3, [pc, #668]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	4aa6      	ldr	r2, [pc, #664]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	499d      	ldr	r1, [pc, #628]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f4:	4b98      	ldr	r3, [pc, #608]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f023 020c 	bic.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4995      	ldr	r1, [pc, #596]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002116:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	498c      	ldr	r1, [pc, #560]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002138:	4b87      	ldr	r3, [pc, #540]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	4984      	ldr	r1, [pc, #528]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800215a:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	497b      	ldr	r1, [pc, #492]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217c:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4973      	ldr	r1, [pc, #460]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219e:	4b6e      	ldr	r3, [pc, #440]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	496a      	ldr	r1, [pc, #424]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c0:	4b65      	ldr	r3, [pc, #404]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4962      	ldr	r1, [pc, #392]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	4959      	ldr	r1, [pc, #356]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002204:	4b54      	ldr	r3, [pc, #336]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	4951      	ldr	r1, [pc, #324]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002226:	4b4c      	ldr	r3, [pc, #304]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	4948      	ldr	r1, [pc, #288]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4940      	ldr	r1, [pc, #256]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a3a      	ldr	r2, [pc, #232]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002272:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228e:	4932      	ldr	r1, [pc, #200]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	4924      	ldr	r1, [pc, #144]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fe:	4916      	ldr	r1, [pc, #88]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a10      	ldr	r2, [pc, #64]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d019      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002346:	d109      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a02      	ldr	r2, [pc, #8]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	e002      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002368:	4b29      	ldr	r3, [pc, #164]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	4926      	ldr	r1, [pc, #152]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002386:	d105      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002388:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a20      	ldr	r2, [pc, #128]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002392:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ae:	4918      	ldr	r1, [pc, #96]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	490a      	ldr	r1, [pc, #40]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023f6:	d105      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002404:	7cbb      	ldrb	r3, [r7, #18]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e042      	b.n	80024ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7fe fb1d 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2224      	movs	r2, #36	@ 0x24
 8002442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 ff60 	bl	8003324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fc61 	bl	8002d2c <UART_SetConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e01b      	b.n	80024ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 ffdf 	bl	8003468 <UART_CheckIdleState>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	@ 0x28
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d17b      	bne.n	80025c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_UART_Transmit+0x26>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e074      	b.n	80025c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ee:	f7fe fbc7 	bl	8000c80 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250c:	d108      	bne.n	8002520 <HAL_UART_Transmit+0x6c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e003      	b.n	8002528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002528:	e030      	b.n	800258c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f001 f841 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03d      	b.n	80025c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10b      	bne.n	800256a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	3302      	adds	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e007      	b.n	800257a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1c8      	bne.n	800252a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	2140      	movs	r1, #64	@ 0x40
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f001 f80a 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e006      	b.n	80025c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d137      	bne.n	8002658 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_UART_Receive_IT+0x24>
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e030      	b.n	800265a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_UART_Receive_IT+0x94>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d01f      	beq.n	8002648 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	e853 3f00 	ldrex	r3, [r3]
 8002622:	613b      	str	r3, [r7, #16]
   return(result);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	623b      	str	r3, [r7, #32]
 8002636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002638:	69f9      	ldr	r1, [r7, #28]
 800263a:	6a3a      	ldr	r2, [r7, #32]
 800263c:	e841 2300 	strex	r3, r2, [r1]
 8002640:	61bb      	str	r3, [r7, #24]
   return(result);
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e6      	bne.n	8002616 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	461a      	mov	r2, r3
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f001 f822 	bl	8003698 <UART_Start_Receive_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	e000      	b.n	800265a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3728      	adds	r7, #40	@ 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40008000 	.word	0x40008000

08002668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b0ba      	sub	sp, #232	@ 0xe8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800268e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002692:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002696:	4013      	ands	r3, r2
 8002698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800269c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11b      	bne.n	80026dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8300 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
      }
      return;
 80026da:	e2fa      	b.n	8002cd2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8123 	beq.w	800292c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80026e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80026ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002920 <HAL_UART_IRQHandler+0x2b8>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80026f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80026f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002924 <HAL_UART_IRQHandler+0x2bc>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8116 	beq.w	800292c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_UART_IRQHandler+0xc8>
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_UART_IRQHandler+0xf8>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d011      	beq.n	8002790 <HAL_UART_IRQHandler+0x128>
 800276c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002920 <HAL_UART_IRQHandler+0x2b8>)
 80027ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <HAL_UART_IRQHandler+0x196>
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8266 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d013      	beq.n	800283e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002852:	2b40      	cmp	r3, #64	@ 0x40
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800285a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	d054      	beq.n	800290c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 f83a 	bl	80038dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002872:	2b40      	cmp	r3, #64	@ 0x40
 8002874:	d146      	bne.n	8002904 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3308      	adds	r3, #8
 800287c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800288c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3308      	adds	r3, #8
 800289e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1d9      	bne.n	8002876 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d017      	beq.n	80028fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d2:	4a15      	ldr	r2, [pc, #84]	@ (8002928 <HAL_UART_IRQHandler+0x2c0>)
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fb43 	bl	8000f68 <HAL_DMA_Abort_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d019      	beq.n	800291c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80028f6:	4610      	mov	r0, r2
 80028f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fa:	e00f      	b.n	800291c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9ff 	bl	8002d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002902:	e00b      	b.n	800291c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9fb 	bl	8002d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290a:	e007      	b.n	800291c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9f7 	bl	8002d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800291a:	e1dc      	b.n	8002cd6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	bf00      	nop
    return;
 800291e:	e1da      	b.n	8002cd6 <HAL_UART_IRQHandler+0x66e>
 8002920:	10000001 	.word	0x10000001
 8002924:	04000120 	.word	0x04000120
 8002928:	080039a9 	.word	0x080039a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002930:	2b01      	cmp	r3, #1
 8002932:	f040 8170 	bne.w	8002c16 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8169 	beq.w	8002c16 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8162 	beq.w	8002c16 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2210      	movs	r2, #16
 8002958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b40      	cmp	r3, #64	@ 0x40
 8002966:	f040 80d8 	bne.w	8002b1a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80af 	beq.w	8002ae0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800298c:	429a      	cmp	r2, r3
 800298e:	f080 80a7 	bcs.w	8002ae0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 8087 	bne.w	8002abe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1da      	bne.n	80029b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3308      	adds	r3, #8
 8002a00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3308      	adds	r3, #8
 8002a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e1      	bne.n	80029fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3308      	adds	r3, #8
 8002a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e3      	bne.n	8002a36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a8c:	f023 0310 	bic.w	r3, r3, #16
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aa0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e4      	bne.n	8002a7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f9fc 	bl	8000eb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f91b 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ade:	e0fc      	b.n	8002cda <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f040 80f5 	bne.w	8002cda <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f040 80eb 	bne.w	8002cda <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8fe 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
      return;
 8002b18:	e0df      	b.n	8002cda <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80d1 	beq.w	8002cde <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80cc 	beq.w	8002cde <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e4      	bne.n	8002b46 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3308      	adds	r3, #8
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ba4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e1      	bne.n	8002b7c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f023 0310 	bic.w	r3, r3, #16
 8002be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e4      	bne.n	8002bcc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f880 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c14:	e063      	b.n	8002cde <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <HAL_UART_IRQHandler+0x5d8>
 8002c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f001 fc13 	bl	8004464 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c3e:	e051      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d014      	beq.n	8002c76 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03a      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    }
    return;
 8002c74:	e035      	b.n	8002ce2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_UART_IRQHandler+0x62e>
 8002c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fe9c 	bl	80039cc <UART_EndTransmit_IT>
    return;
 8002c94:	e026      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x64e>
 8002ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f001 fbec 	bl	800448c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb4:	e016      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
 8002cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da0c      	bge.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f001 fbd4 	bl	8004478 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cd0:	e008      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
      return;
 8002cd2:	bf00      	nop
 8002cd4:	e006      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
    return;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
      return;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
      return;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <HAL_UART_IRQHandler+0x67c>
    return;
 8002ce2:	bf00      	nop
  }
}
 8002ce4:	37e8      	adds	r7, #232	@ 0xe8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b08c      	sub	sp, #48	@ 0x30
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4baa      	ldr	r3, [pc, #680]	@ (8003004 <UART_SetConfig+0x2d8>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a9f      	ldr	r2, [pc, #636]	@ (8003008 <UART_SetConfig+0x2dc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d94:	4313      	orrs	r3, r2
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	f023 010f 	bic.w	r1, r3, #15
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a90      	ldr	r2, [pc, #576]	@ (800300c <UART_SetConfig+0x2e0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d125      	bne.n	8002e1c <UART_SetConfig+0xf0>
 8002dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d81a      	bhi.n	8002e14 <UART_SetConfig+0xe8>
 8002dde:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <UART_SetConfig+0xb8>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002e05 	.word	0x08002e05
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e116      	b.n	800302a <UART_SetConfig+0x2fe>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e112      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e04:	2304      	movs	r3, #4
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e10e      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e10a      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e14:	2310      	movs	r3, #16
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e106      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <UART_SetConfig+0x2e8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d138      	bne.n	8002e98 <UART_SetConfig+0x16c>
 8002e26:	4b7a      	ldr	r3, [pc, #488]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d82d      	bhi.n	8002e90 <UART_SetConfig+0x164>
 8002e34:	a201      	add	r2, pc, #4	@ (adr r2, 8002e3c <UART_SetConfig+0x110>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002e91 	.word	0x08002e91
 8002e44:	08002e91 	.word	0x08002e91
 8002e48:	08002e91 	.word	0x08002e91
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002e91 	.word	0x08002e91
 8002e54:	08002e91 	.word	0x08002e91
 8002e58:	08002e91 	.word	0x08002e91
 8002e5c:	08002e79 	.word	0x08002e79
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e89 	.word	0x08002e89
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e76:	e0d8      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7e:	e0d4      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e86:	e0d0      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8e:	e0cc      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e96:	e0c8      	b.n	800302a <UART_SetConfig+0x2fe>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003018 <UART_SetConfig+0x2ec>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d125      	bne.n	8002eee <UART_SetConfig+0x1c2>
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002eac:	2b30      	cmp	r3, #48	@ 0x30
 8002eae:	d016      	beq.n	8002ede <UART_SetConfig+0x1b2>
 8002eb0:	2b30      	cmp	r3, #48	@ 0x30
 8002eb2:	d818      	bhi.n	8002ee6 <UART_SetConfig+0x1ba>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d00a      	beq.n	8002ece <UART_SetConfig+0x1a2>
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d814      	bhi.n	8002ee6 <UART_SetConfig+0x1ba>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <UART_SetConfig+0x19a>
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d008      	beq.n	8002ed6 <UART_SetConfig+0x1aa>
 8002ec4:	e00f      	b.n	8002ee6 <UART_SetConfig+0x1ba>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ecc:	e0ad      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed4:	e0a9      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002edc:	e0a5      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee4:	e0a1      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eec:	e09d      	b.n	800302a <UART_SetConfig+0x2fe>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800301c <UART_SetConfig+0x2f0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d125      	bne.n	8002f44 <UART_SetConfig+0x218>
 8002ef8:	4b45      	ldr	r3, [pc, #276]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f04:	d016      	beq.n	8002f34 <UART_SetConfig+0x208>
 8002f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f08:	d818      	bhi.n	8002f3c <UART_SetConfig+0x210>
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d00a      	beq.n	8002f24 <UART_SetConfig+0x1f8>
 8002f0e:	2b80      	cmp	r3, #128	@ 0x80
 8002f10:	d814      	bhi.n	8002f3c <UART_SetConfig+0x210>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <UART_SetConfig+0x1f0>
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d008      	beq.n	8002f2c <UART_SetConfig+0x200>
 8002f1a:	e00f      	b.n	8002f3c <UART_SetConfig+0x210>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f22:	e082      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f24:	2302      	movs	r3, #2
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e07e      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f32:	e07a      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f34:	2308      	movs	r3, #8
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e076      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e072      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <UART_SetConfig+0x2f4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d12a      	bne.n	8002fa4 <UART_SetConfig+0x278>
 8002f4e:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f5c:	d01a      	beq.n	8002f94 <UART_SetConfig+0x268>
 8002f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f62:	d81b      	bhi.n	8002f9c <UART_SetConfig+0x270>
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f68:	d00c      	beq.n	8002f84 <UART_SetConfig+0x258>
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f6e:	d815      	bhi.n	8002f9c <UART_SetConfig+0x270>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <UART_SetConfig+0x250>
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f78:	d008      	beq.n	8002f8c <UART_SetConfig+0x260>
 8002f7a:	e00f      	b.n	8002f9c <UART_SetConfig+0x270>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	e052      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e04e      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	e04a      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e046      	b.n	800302a <UART_SetConfig+0x2fe>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e042      	b.n	800302a <UART_SetConfig+0x2fe>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a17      	ldr	r2, [pc, #92]	@ (8003008 <UART_SetConfig+0x2dc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d13a      	bne.n	8003024 <UART_SetConfig+0x2f8>
 8002fae:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <UART_SetConfig+0x2e4>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fbc:	d01a      	beq.n	8002ff4 <UART_SetConfig+0x2c8>
 8002fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fc2:	d81b      	bhi.n	8002ffc <UART_SetConfig+0x2d0>
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc8:	d00c      	beq.n	8002fe4 <UART_SetConfig+0x2b8>
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fce:	d815      	bhi.n	8002ffc <UART_SetConfig+0x2d0>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <UART_SetConfig+0x2b0>
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd8:	d008      	beq.n	8002fec <UART_SetConfig+0x2c0>
 8002fda:	e00f      	b.n	8002ffc <UART_SetConfig+0x2d0>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e022      	b.n	800302a <UART_SetConfig+0x2fe>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fea:	e01e      	b.n	800302a <UART_SetConfig+0x2fe>
 8002fec:	2304      	movs	r3, #4
 8002fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff2:	e01a      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffa:	e016      	b.n	800302a <UART_SetConfig+0x2fe>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003002:	e012      	b.n	800302a <UART_SetConfig+0x2fe>
 8003004:	cfff69f3 	.word	0xcfff69f3
 8003008:	40008000 	.word	0x40008000
 800300c:	40013800 	.word	0x40013800
 8003010:	40021000 	.word	0x40021000
 8003014:	40004400 	.word	0x40004400
 8003018:	40004800 	.word	0x40004800
 800301c:	40004c00 	.word	0x40004c00
 8003020:	40005000 	.word	0x40005000
 8003024:	2310      	movs	r3, #16
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4aae      	ldr	r2, [pc, #696]	@ (80032e8 <UART_SetConfig+0x5bc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	f040 8097 	bne.w	8003164 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800303a:	2b08      	cmp	r3, #8
 800303c:	d823      	bhi.n	8003086 <UART_SetConfig+0x35a>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0x318>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003069 	.word	0x08003069
 8003048:	08003087 	.word	0x08003087
 800304c:	08003071 	.word	0x08003071
 8003050:	08003087 	.word	0x08003087
 8003054:	08003077 	.word	0x08003077
 8003058:	08003087 	.word	0x08003087
 800305c:	08003087 	.word	0x08003087
 8003060:	08003087 	.word	0x08003087
 8003064:	0800307f 	.word	0x0800307f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7fe ff14 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 800306c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800306e:	e010      	b.n	8003092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003070:	4b9e      	ldr	r3, [pc, #632]	@ (80032ec <UART_SetConfig+0x5c0>)
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003074:	e00d      	b.n	8003092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003076:	f7fe fe9f 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 800307a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800307c:	e009      	b.n	8003092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003084:	e005      	b.n	8003092 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8130 	beq.w	80032fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	4a94      	ldr	r2, [pc, #592]	@ (80032f0 <UART_SetConfig+0x5c4>)
 80030a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a4:	461a      	mov	r2, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d305      	bcc.n	80030ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d903      	bls.n	80030d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030d0:	e113      	b.n	80032fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	2200      	movs	r2, #0
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	60fa      	str	r2, [r7, #12]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	4a84      	ldr	r2, [pc, #528]	@ (80032f0 <UART_SetConfig+0x5c4>)
 80030e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2200      	movs	r2, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030f4:	f7fd f8a2 	bl	800023c <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	020b      	lsls	r3, r1, #8
 800310a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800310e:	0202      	lsls	r2, r0, #8
 8003110:	6979      	ldr	r1, [r7, #20]
 8003112:	6849      	ldr	r1, [r1, #4]
 8003114:	0849      	lsrs	r1, r1, #1
 8003116:	2000      	movs	r0, #0
 8003118:	460c      	mov	r4, r1
 800311a:	4605      	mov	r5, r0
 800311c:	eb12 0804 	adds.w	r8, r2, r4
 8003120:	eb43 0905 	adc.w	r9, r3, r5
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	469a      	mov	sl, r3
 800312c:	4693      	mov	fp, r2
 800312e:	4652      	mov	r2, sl
 8003130:	465b      	mov	r3, fp
 8003132:	4640      	mov	r0, r8
 8003134:	4649      	mov	r1, r9
 8003136:	f7fd f881 	bl	800023c <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4613      	mov	r3, r2
 8003140:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003148:	d308      	bcc.n	800315c <UART_SetConfig+0x430>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003150:	d204      	bcs.n	800315c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e0ce      	b.n	80032fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003162:	e0ca      	b.n	80032fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316c:	d166      	bne.n	800323c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800316e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003172:	2b08      	cmp	r3, #8
 8003174:	d827      	bhi.n	80031c6 <UART_SetConfig+0x49a>
 8003176:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x450>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b7 	.word	0x080031b7
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031c7 	.word	0x080031c7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe fe78 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80031a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031a6:	e014      	b.n	80031d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe fe8a 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031ae:	e010      	b.n	80031d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b4e      	ldr	r3, [pc, #312]	@ (80032ec <UART_SetConfig+0x5c0>)
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031b4:	e00d      	b.n	80031d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe fdff 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 80031ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031bc:	e009      	b.n	80031d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031c4:	e005      	b.n	80031d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8090 	beq.w	80032fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	4a44      	ldr	r2, [pc, #272]	@ (80032f0 <UART_SetConfig+0x5c4>)
 80031e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ec:	005a      	lsls	r2, r3, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	441a      	add	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d916      	bls.n	8003234 <UART_SetConfig+0x508>
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d212      	bcs.n	8003234 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f023 030f 	bic.w	r3, r3, #15
 8003216:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	b29a      	uxth	r2, r3
 8003224:	8bfb      	ldrh	r3, [r7, #30]
 8003226:	4313      	orrs	r3, r2
 8003228:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	8bfa      	ldrh	r2, [r7, #30]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	e062      	b.n	80032fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800323a:	e05e      	b.n	80032fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800323c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003240:	2b08      	cmp	r3, #8
 8003242:	d828      	bhi.n	8003296 <UART_SetConfig+0x56a>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <UART_SetConfig+0x520>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003271 	.word	0x08003271
 8003250:	08003279 	.word	0x08003279
 8003254:	08003281 	.word	0x08003281
 8003258:	08003297 	.word	0x08003297
 800325c:	08003287 	.word	0x08003287
 8003260:	08003297 	.word	0x08003297
 8003264:	08003297 	.word	0x08003297
 8003268:	08003297 	.word	0x08003297
 800326c:	0800328f 	.word	0x0800328f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe fe10 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003276:	e014      	b.n	80032a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7fe fe22 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 800327c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800327e:	e010      	b.n	80032a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <UART_SetConfig+0x5c0>)
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003284:	e00d      	b.n	80032a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fd97 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 800328a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800328c:	e009      	b.n	80032a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003294:	e005      	b.n	80032a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032a0:	bf00      	nop
    }

    if (pclk != 0U)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d028      	beq.n	80032fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	4a10      	ldr	r2, [pc, #64]	@ (80032f0 <UART_SetConfig+0x5c4>)
 80032ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b2:	461a      	mov	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	441a      	add	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d910      	bls.n	80032f4 <UART_SetConfig+0x5c8>
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d20c      	bcs.n	80032f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e009      	b.n	80032fa <UART_SetConfig+0x5ce>
 80032e6:	bf00      	nop
 80032e8:	40008000 	.word	0x40008000
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	0800475c 	.word	0x0800475c
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2201      	movs	r2, #1
 8003306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003316:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800331a:	4618      	mov	r0, r3
 800331c:	3730      	adds	r7, #48	@ 0x30
 800331e:	46bd      	mov	sp, r7
 8003320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003422:	d10a      	bne.n	800343a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b098      	sub	sp, #96	@ 0x60
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003478:	f7fd fc02 	bl	8000c80 <HAL_GetTick>
 800347c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d12f      	bne.n	80034ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f88e 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d022      	beq.n	80034ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e6      	bne.n	80034a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e063      	b.n	80035b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d149      	bne.n	800358e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f857 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03c      	beq.n	800358e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	623b      	str	r3, [r7, #32]
   return(result);
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30
 8003534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e6      	bne.n	8003514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	60fb      	str	r3, [r7, #12]
   return(result);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3308      	adds	r3, #8
 8003564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	617b      	str	r3, [r7, #20]
   return(result);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e012      	b.n	80035b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3758      	adds	r7, #88	@ 0x58
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e04f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d4:	d04b      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fd fb53 	bl	8000c80 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e04e      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d037      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b80      	cmp	r3, #128	@ 0x80
 8003602:	d034      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d031      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d110      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f95b 	bl	80038dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2208      	movs	r2, #8
 800362a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e029      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003648:	d111      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f941 	bl	80038dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e00f      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	429a      	cmp	r2, r3
 800368a:	d0a0      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b0a3      	sub	sp, #140	@ 0x8c
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ca:	d10e      	bne.n	80036ea <UART_Start_Receive_IT+0x52>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <UART_Start_Receive_IT+0x48>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036de:	e02d      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	@ 0xff
 80036e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036e8:	e028      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <UART_Start_Receive_IT+0x76>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <UART_Start_Receive_IT+0x6c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	@ 0xff
 80036fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003702:	e01b      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	227f      	movs	r2, #127	@ 0x7f
 8003708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800370c:	e016      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003716:	d10d      	bne.n	8003734 <UART_Start_Receive_IT+0x9c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <UART_Start_Receive_IT+0x92>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	227f      	movs	r2, #127	@ 0x7f
 8003724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003728:	e008      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	223f      	movs	r2, #63	@ 0x3f
 800372e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003732:	e003      	b.n	800373c <UART_Start_Receive_IT+0xa4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2222      	movs	r2, #34	@ 0x22
 8003748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800375c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003770:	673a      	str	r2, [r7, #112]	@ 0x70
 8003772:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003776:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800377e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e3      	bne.n	800374c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378c:	d14f      	bne.n	800382e <UART_Start_Receive_IT+0x196>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	429a      	cmp	r2, r3
 8003798:	d349      	bcc.n	800382e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a2:	d107      	bne.n	80037b4 <UART_Start_Receive_IT+0x11c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a47      	ldr	r2, [pc, #284]	@ (80038cc <UART_Start_Receive_IT+0x234>)
 80037b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80037b2:	e002      	b.n	80037ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a46      	ldr	r2, [pc, #280]	@ (80038d0 <UART_Start_Receive_IT+0x238>)
 80037b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01a      	beq.n	80037f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80037d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80037f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e4      	bne.n	80037c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003818:	64ba      	str	r2, [r7, #72]	@ 0x48
 800381a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800381e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_Start_Receive_IT+0x160>
 800382c:	e046      	b.n	80038bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	d107      	bne.n	8003848 <UART_Start_Receive_IT+0x1b0>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <UART_Start_Receive_IT+0x23c>)
 8003844:	675a      	str	r2, [r3, #116]	@ 0x74
 8003846:	e002      	b.n	800384e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <UART_Start_Receive_IT+0x240>)
 800384c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d019      	beq.n	800388a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800386a:	677b      	str	r3, [r7, #116]	@ 0x74
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
 8003876:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800387a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e6      	bne.n	8003856 <UART_Start_Receive_IT+0x1be>
 8003888:	e018      	b.n	80038bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	613b      	str	r3, [r7, #16]
   return(result);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f043 0320 	orr.w	r3, r3, #32
 800389e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	378c      	adds	r7, #140	@ 0x8c
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	080040f9 	.word	0x080040f9
 80038d0:	08003d95 	.word	0x08003d95
 80038d4:	08003bdd 	.word	0x08003bdd
 80038d8:	08003a25 	.word	0x08003a25

080038dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b095      	sub	sp, #84	@ 0x54
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40
 8003904:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e6      	bne.n	80038e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	61fb      	str	r3, [r7, #28]
   return(result);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800393a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d118      	bne.n	8003988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	60bb      	str	r3, [r7, #8]
   return(result);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f023 0310 	bic.w	r3, r3, #16
 800396a:	647b      	str	r3, [r7, #68]	@ 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	613b      	str	r3, [r7, #16]
   return(result);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e6      	bne.n	8003956 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800399c:	bf00      	nop
 800399e:	3754      	adds	r7, #84	@ 0x54
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff f99e 	bl	8002d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e6      	bne.n	80039d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff f969 	bl	8002cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a1a:	bf00      	nop
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b09c      	sub	sp, #112	@ 0x70
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3c:	2b22      	cmp	r3, #34	@ 0x22
 8003a3e:	f040 80be 	bne.w	8003bbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a50:	b2d9      	uxtb	r1, r3
 8003a52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80a1 	bne.w	8003bce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003aac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e6      	bne.n	8003a8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ade:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a33      	ldr	r2, [pc, #204]	@ (8003bd8 <UART_RxISR_8BIT+0x1b4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01f      	beq.n	8003b50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d018      	beq.n	8003b50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e6      	bne.n	8003b1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d12e      	bne.n	8003bb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0310 	bic.w	r3, r3, #16
 8003b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e6      	bne.n	8003b5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d103      	bne.n	8003ba6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff f8b0 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bb4:	e00b      	b.n	8003bce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fc fdbc 	bl	8000734 <HAL_UART_RxCpltCallback>
}
 8003bbc:	e007      	b.n	8003bce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0208 	orr.w	r2, r2, #8
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	3770      	adds	r7, #112	@ 0x70
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40008000 	.word	0x40008000

08003bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b09c      	sub	sp, #112	@ 0x70
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003bea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf4:	2b22      	cmp	r3, #34	@ 0x22
 8003bf6:	f040 80be 	bne.w	8003d76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c12:	4013      	ands	r3, r2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	1c9a      	adds	r2, r3, #2
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 80a1 	bne.w	8003d86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c64:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c96:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	@ (8003d90 <UART_RxISR_16BIT+0x1b4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01f      	beq.n	8003d08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e6      	bne.n	8003cd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d12e      	bne.n	8003d6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	613b      	str	r3, [r7, #16]
   return(result);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e6      	bne.n	8003d16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d103      	bne.n	8003d5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe ffd4 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d6c:	e00b      	b.n	8003d86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fce0 	bl	8000734 <HAL_UART_RxCpltCallback>
}
 8003d74:	e007      	b.n	8003d86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0208 	orr.w	r2, r2, #8
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	3770      	adds	r7, #112	@ 0x70
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40008000 	.word	0x40008000

08003d94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0ac      	sub	sp, #176	@ 0xb0
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003da2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dca:	2b22      	cmp	r3, #34	@ 0x22
 8003dcc:	f040 8183 	bne.w	80040d6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003dd6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003dda:	e126      	b.n	800402a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003de6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003dea:	b2d9      	uxtb	r1, r3
 8003dec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	400a      	ands	r2, r1
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d053      	beq.n	8003ed6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8003e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	f043 0202 	orr.w	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d006      	beq.n	8003ed6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fe ff19 	bl	8002d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 80a3 	bne.w	800402a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f08:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003f0c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e4      	bne.n	8003ee4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f42:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003f44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003f48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e1      	bne.n	8003f1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a60      	ldr	r2, [pc, #384]	@ (80040f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d021      	beq.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01a      	beq.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fa6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003faa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e4      	bne.n	8003f82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d130      	bne.n	8004022 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e4      	bne.n	8003fc6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d103      	bne.n	8004012 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2210      	movs	r2, #16
 8004010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fe7a 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004020:	e00e      	b.n	8004040 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fb86 	bl	8000734 <HAL_UART_RxCpltCallback>
        break;
 8004028:	e00a      	b.n	8004040 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800402a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8004032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	f47f aece 	bne.w	8003ddc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004046:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800404a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800404e:	2b00      	cmp	r3, #0
 8004050:	d049      	beq.n	80040e6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004058:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800405c:	429a      	cmp	r2, r3
 800405e:	d242      	bcs.n	80040e6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800408a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a16      	ldr	r2, [pc, #88]	@ (80040f4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800409c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e4      	bne.n	800409e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d4:	e007      	b.n	80040e6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0208 	orr.w	r2, r2, #8
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	37b0      	adds	r7, #176	@ 0xb0
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40008000 	.word	0x40008000
 80040f4:	08003a25 	.word	0x08003a25

080040f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0ae      	sub	sp, #184	@ 0xb8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004106:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800412e:	2b22      	cmp	r3, #34	@ 0x22
 8004130:	f040 8187 	bne.w	8004442 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800413a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800413e:	e12a      	b.n	8004396 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004152:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004156:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800415a:	4013      	ands	r3, r2
 800415c:	b29a      	uxth	r2, r3
 800415e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004162:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800418a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b00      	cmp	r3, #0
 8004194:	d053      	beq.n	800423e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80041a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80041d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2202      	movs	r2, #2
 80041e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f043 0204 	orr.w	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2204      	movs	r2, #4
 8004214:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421c:	f043 0202 	orr.w	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fe fd65 	bl	8002d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 80a5 	bne.w	8004396 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800425a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800425c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800426e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004272:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004276:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e2      	bne.n	800424c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80042ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e1      	bne.n	8004286 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a60      	ldr	r2, [pc, #384]	@ (800445c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d021      	beq.n	8004324 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01a      	beq.n	8004324 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004310:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004312:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004316:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800431e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e4      	bne.n	80042ee <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d130      	bne.n	800438e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004354:	647b      	str	r3, [r7, #68]	@ 0x44
 8004356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800435a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e4      	bne.n	8004332 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b10      	cmp	r3, #16
 8004374:	d103      	bne.n	800437e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe fcc4 	bl	8002d14 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800438c:	e00e      	b.n	80043ac <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc f9d0 	bl	8000734 <HAL_UART_RxCpltCallback>
        break;
 8004394:	e00a      	b.n	80043ac <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004396:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800439e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f47f aeca 	bne.w	8004140 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043b2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d049      	beq.n	8004452 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043c4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d242      	bcs.n	8004452 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	623b      	str	r3, [r7, #32]
   return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80043f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e3      	bne.n	80043cc <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a16      	ldr	r2, [pc, #88]	@ (8004460 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004408:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	60fb      	str	r3, [r7, #12]
   return(result);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f043 0320 	orr.w	r3, r3, #32
 800441e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	617b      	str	r3, [r7, #20]
   return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e4      	bne.n	800440a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004440:	e007      	b.n	8004452 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0208 	orr.w	r2, r2, #8
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	37b8      	adds	r7, #184	@ 0xb8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40008000 	.word	0x40008000
 8004460:	08003bdd 	.word	0x08003bdd

08004464 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e027      	b.n	8004506 <HAL_UARTEx_DisableFifoMode+0x66>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	@ 0x24
 80044c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80044e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004526:	2302      	movs	r3, #2
 8004528:	e02d      	b.n	8004586 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2224      	movs	r2, #36	@ 0x24
 8004536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f850 	bl	800460c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e02d      	b.n	8004602 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	@ 0x24
 80045b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f812 	bl	800460c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004618:	2b00      	cmp	r3, #0
 800461a:	d108      	bne.n	800462e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800462c:	e031      	b.n	8004692 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800462e:	2308      	movs	r3, #8
 8004630:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004632:	2308      	movs	r3, #8
 8004634:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	0e5b      	lsrs	r3, r3, #25
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	0f5b      	lsrs	r3, r3, #29
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004656:	7bbb      	ldrb	r3, [r7, #14]
 8004658:	7b3a      	ldrb	r2, [r7, #12]
 800465a:	4911      	ldr	r1, [pc, #68]	@ (80046a0 <UARTEx_SetNbDataToProcess+0x94>)
 800465c:	5c8a      	ldrb	r2, [r1, r2]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004662:	7b3a      	ldrb	r2, [r7, #12]
 8004664:	490f      	ldr	r1, [pc, #60]	@ (80046a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004666:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004668:	fb93 f3f2 	sdiv	r3, r3, r2
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	7b7a      	ldrb	r2, [r7, #13]
 8004678:	4909      	ldr	r1, [pc, #36]	@ (80046a0 <UARTEx_SetNbDataToProcess+0x94>)
 800467a:	5c8a      	ldrb	r2, [r1, r2]
 800467c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004680:	7b7a      	ldrb	r2, [r7, #13]
 8004682:	4908      	ldr	r1, [pc, #32]	@ (80046a4 <UARTEx_SetNbDataToProcess+0x98>)
 8004684:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004686:	fb93 f3f2 	sdiv	r3, r3, r2
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	08004774 	.word	0x08004774
 80046a4:	0800477c 	.word	0x0800477c

080046a8 <memset>:
 80046a8:	4402      	add	r2, r0
 80046aa:	4603      	mov	r3, r0
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d100      	bne.n	80046b2 <memset+0xa>
 80046b0:	4770      	bx	lr
 80046b2:	f803 1b01 	strb.w	r1, [r3], #1
 80046b6:	e7f9      	b.n	80046ac <memset+0x4>

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	@ (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	@ (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	@ (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	@ (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 f818 	bl	8004700 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	0800478c 	.word	0x0800478c
 80046f4:	0800478c 	.word	0x0800478c
 80046f8:	0800478c 	.word	0x0800478c
 80046fc:	08004790 	.word	0x08004790

08004700 <_init>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr

0800470c <_fini>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr
