
NRF24_RECEIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004028  08004028  00005028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004084  08004084  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800408c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000064  080040f0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080040f0  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a890  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d60  00000000  00000000  00010924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00012688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076a  00000000  00000000  00013050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016318  00000000  00000000  000137ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0e5  00000000  00000000  00029ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876f4  00000000  00000000  00034bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc2ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf4  00000000  00000000  000bc2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000beee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004010 	.word	0x08004010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004010 	.word	0x08004010

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a36      	ldr	r2, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <MX_GPIO_Init+0xfc>)
 800063a:	f001 f9df 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	21c0      	movs	r1, #192	@ 0xc0
 8000642:	481a      	ldr	r0, [pc, #104]	@ (80006ac <MX_GPIO_Init+0x100>)
 8000644:	f001 f9da 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000648:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <MX_GPIO_Init+0xfc>)
 8000662:	f001 f847 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000666:	2320      	movs	r3, #32
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <MX_GPIO_Init+0x100>)
 800067c:	f001 f83a 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8000680:	23c0      	movs	r3, #192	@ 0xc0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_GPIO_Init+0x100>)
 8000698:	f001 f82c 	bl	80016f4 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	@ 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020400 	.word	0x40020400

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fea2 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f85a 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f7ff ff76 	bl	80005ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c0:	f000 f8bc 	bl	800083c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 f9d8 	bl	8000a78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 80006c8:	481f      	ldr	r0, [pc, #124]	@ (8000748 <main+0x98>)
 80006ca:	f000 fe19 	bl	8001300 <nRF24_Init>

  nRF24_SetRXAddress(0, Odb);
 80006ce:	491f      	ldr	r1, [pc, #124]	@ (800074c <main+0x9c>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fcef 	bl	80010b4 <nRF24_SetRXAddress>
  nRF24_SetTXAddress(Nad);
 80006d6:	481e      	ldr	r0, [pc, #120]	@ (8000750 <main+0xa0>)
 80006d8:	f000 fd26 	bl	8001128 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 80006dc:	f000 fb0c 	bl	8000cf8 <nRF24_RX_Mode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(nRF24_RXAvailible())
 80006e0:	f000 fdee 	bl	80012c0 <nRF24_RXAvailible>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0fa      	beq.n	80006e0 <main+0x30>
	  {
		  nRF24_ReadRXPaylaod(Nrf24_Message);
 80006ea:	481a      	ldr	r0, [pc, #104]	@ (8000754 <main+0xa4>)
 80006ec:	f000 fdcc 	bl	8001288 <nRF24_ReadRXPaylaod>
		  MessageLength = sprintf((char*)Message, "%c\n\r", Nrf24_Message[0]);
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <main+0xa4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4918      	ldr	r1, [pc, #96]	@ (8000758 <main+0xa8>)
 80006f8:	4818      	ldr	r0, [pc, #96]	@ (800075c <main+0xac>)
 80006fa:	f002 ffe9 	bl	80036d0 <siprintf>
 80006fe:	4603      	mov	r3, r0
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <main+0xb0>)
 8000704:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <main+0xb0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000710:	4912      	ldr	r1, [pc, #72]	@ (800075c <main+0xac>)
 8000712:	4814      	ldr	r0, [pc, #80]	@ (8000764 <main+0xb4>)
 8000714:	f002 fc20 	bl	8002f58 <HAL_UART_Transmit>
		  Tmp = *Message;
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <main+0xac>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <main+0xb8>)
 800071e:	701a      	strb	r2, [r3, #0]
		  if (Tmp == 2)
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <main+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d1db      	bne.n	80006e0 <main+0x30>
		  {
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800072c:	480f      	ldr	r0, [pc, #60]	@ (800076c <main+0xbc>)
 800072e:	f001 f97e 	bl	8001a2e <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000736:	f000 fed3 	bl	80014e0 <HAL_Delay>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <main+0xbc>)
 8000740:	f001 f975 	bl	8001a2e <HAL_GPIO_TogglePin>
	  if(nRF24_RXAvailible())
 8000744:	e7cc      	b.n	80006e0 <main+0x30>
 8000746:	bf00      	nop
 8000748:	200000ac 	.word	0x200000ac
 800074c:	20000004 	.word	0x20000004
 8000750:	20000000 	.word	0x20000000
 8000754:	20000084 	.word	0x20000084
 8000758:	08004028 	.word	0x08004028
 800075c:	20000088 	.word	0x20000088
 8000760:	200000a8 	.word	0x200000a8
 8000764:	20000108 	.word	0x20000108
 8000768:	200000a9 	.word	0x200000a9
 800076c:	40020800 	.word	0x40020800

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ffc8 	bl	8003714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <SystemClock_Config+0xb8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <SystemClock_Config+0xb8>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <SystemClock_Config+0xb8>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemClock_Config+0xbc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007bc:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <SystemClock_Config+0xbc>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b19      	ldr	r3, [pc, #100]	@ (800082c <SystemClock_Config+0xbc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 f93d 	bl	8001a64 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007f0:	f000 f81e 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fba0 	bl	8001f54 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800081a:	f000 f809 	bl	8000830 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2210      	movs	r2, #16
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f001 fd41 	bl	8002314 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f7ff ffca 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000ac 	.word	0x200000ac
 80008a4:	40013000 	.word	0x40013000

080008a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_SPI_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_SPI_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000902:	23e0      	movs	r3, #224	@ 0xe0
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000912:	2305      	movs	r3, #5
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <HAL_SPI_MspInit+0x8c>)
 800091e:	f000 fee9 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40013000 	.word	0x40013000
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 fd5f 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f002 fe84 	bl	8003724 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20010000 	.word	0x20010000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000104 	.word	0x20000104
 8000a50:	200002a8 	.word	0x200002a8

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <MX_USART1_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f002 fa02 	bl	8002eb8 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f7ff feb9 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000108 	.word	0x20000108
 8000ac8:	40011000 	.word	0x40011000

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12c      	bne.n	8000b48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b44:	f000 fdd6 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 fcba 	bl	80014e0 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <nRF24_SendSpi+0x28>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	f001 fc4a 	bl	8002426 <HAL_SPI_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000150 	.word	0x20000150

08000ba0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <nRF24_ReadSpi+0x28>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	f001 fd78 	bl	80026ae <HAL_SPI_Receive>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000150 	.word	0x20000150

08000bcc <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <nRF24_ReadRegister+0x44>)
 8000be0:	f000 ff0c 	bl	80019fc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ffc3 	bl	8000b74 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000bee:	f107 030f 	add.w	r3, r7, #15
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffd3 	bl	8000ba0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <nRF24_ReadRegister+0x44>)
 8000c00:	f000 fefc 	bl	80019fc <HAL_GPIO_WritePin>

	return result;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400

08000c14 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	480a      	ldr	r0, [pc, #40]	@ (8000c58 <nRF24_ReadRegisters+0x44>)
 8000c2e:	f000 fee5 	bl	80019fc <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff9c 	bl	8000b74 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f7ff ffad 	bl	8000ba0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000c46:	2201      	movs	r2, #1
 8000c48:	2180      	movs	r1, #128	@ 0x80
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <nRF24_ReadRegisters+0x44>)
 8000c4c:	f000 fed6 	bl	80019fc <HAL_GPIO_WritePin>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40020400 	.word	0x40020400

08000c5c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f043 0320 	orr.w	r3, r3, #32
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <nRF24_WriteRegister+0x48>)
 8000c80:	f000 febc 	bl	80019fc <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff72 	bl	8000b74 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000c90:	2201      	movs	r2, #1
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <nRF24_WriteRegister+0x48>)
 8000c96:	f000 feb1 	bl	80019fc <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <nRF24_WriteRegisters+0x4c>)
 8000cc8:	f000 fe98 	bl	80019fc <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff4f 	bl	8000b74 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f7ff ff4a 	bl	8000b74 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <nRF24_WriteRegisters+0x4c>)
 8000ce6:	f000 fe89 	bl	80019fc <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000cfe:	f000 f829 	bl	8000d54 <nRF24_ReadConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8000d06:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <nRF24_RX_Mode+0x54>)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f9d3 	bl	80010b4 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f81f 	bl	8000d64 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000d26:	2070      	movs	r0, #112	@ 0x70
 8000d28:	f000 f878 	bl	8000e1c <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000d2c:	f000 f884 	bl	8000e38 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000d30:	f000 f89c 	bl	8000e6c <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8000d34:	2201      	movs	r2, #1
 8000d36:	2140      	movs	r1, #64	@ 0x40
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <nRF24_RX_Mode+0x58>)
 8000d3a:	f000 fe5f 	bl	80019fc <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff ff0c 	bl	8000b5c <nRF24_Delay>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000154 	.word	0x20000154
 8000d50:	40020400 	.word	0x40020400

08000d54 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff ff37 	bl	8000bcc <nRF24_ReadRegister>
 8000d5e:	4603      	mov	r3, r0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4619      	mov	r1, r3
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff72 	bl	8000c5c <nRF24_WriteRegister>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f7ff ff1e 	bl	8000bcc <nRF24_ReadRegister>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0307 	bic.w	r3, r3, #7
 8000d9a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2006      	movs	r0, #6
 8000db4:	f7ff ff52 	bl	8000c5c <nRF24_WriteRegister>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000dca:	2006      	movs	r0, #6
 8000dcc:	f7ff fefe 	bl	8000bcc <nRF24_ReadRegister>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000dda:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d104      	bne.n	8000dec <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e006      	b.n	8000dfa <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d103      	bne.n	8000dfa <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f7ff ff2c 	bl	8000c5c <nRF24_WriteRegister>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000e10:	2007      	movs	r0, #7
 8000e12:	f7ff fedb 	bl	8000bcc <nRF24_ReadRegister>
 8000e16:	4603      	mov	r3, r0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2007      	movs	r0, #7
 8000e2c:	f7ff ff16 	bl	8000c5c <nRF24_WriteRegister>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000e3e:	23e2      	movs	r3, #226	@ 0xe2
 8000e40:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000e42:	2200      	movs	r2, #0
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <nRF24_FlushRX+0x30>)
 8000e48:	f000 fdd8 	bl	80019fc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe8f 	bl	8000b74 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000e56:	2201      	movs	r2, #1
 8000e58:	2180      	movs	r1, #128	@ 0x80
 8000e5a:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <nRF24_FlushRX+0x30>)
 8000e5c:	f000 fdce 	bl	80019fc <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40020400 	.word	0x40020400

08000e6c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000e72:	23e1      	movs	r3, #225	@ 0xe1
 8000e74:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000e76:	2200      	movs	r2, #0
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	4808      	ldr	r0, [pc, #32]	@ (8000e9c <nRF24_FlushTX+0x30>)
 8000e7c:	f000 fdbe 	bl	80019fc <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2101      	movs	r1, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe75 	bl	8000b74 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <nRF24_FlushTX+0x30>)
 8000e90:	f000 fdb4 	bl	80019fc <HAL_GPIO_WritePin>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000eaa:	f7ff ff53 	bl	8000d54 <nRF24_ReadConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d004      	beq.n	8000ec2 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e003      	b.n	8000eca <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f023 0308 	bic.w	r3, r3, #8
 8000ec8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff49 	bl	8000d64 <nRF24_WriteConfig>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000ee4:	f7ff ff36 	bl	8000d54 <nRF24_ReadConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d104      	bne.n	8000efc <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e003      	b.n	8000f04 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f023 0304 	bic.w	r3, r3, #4
 8000f02:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff2c 	bl	8000d64 <nRF24_WriteConfig>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff fe8c 	bl	8000c5c <nRF24_WriteRegister>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2005      	movs	r0, #5
 8000f62:	f7ff fe7b 	bl	8000c5c <nRF24_WriteRegister>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	460a      	mov	r2, r1
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d901      	bls.n	8000f88 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000f84:	2305      	movs	r3, #5
 8000f86:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	3311      	adds	r3, #17
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f7ff fe5f 	bl	8000c5c <nRF24_WriteRegister>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d901      	bls.n	8000fc0 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fe03 	bl	8000bcc <nRF24_ReadRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10a      	bne.n	8000fe6 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e00b      	b.n	8000ffe <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2002      	movs	r0, #2
 8001004:	f7ff fe2a 	bl	8000c5c <nRF24_WriteRegister>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d901      	bls.n	800102a <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001026:	2305      	movs	r3, #5
 8001028:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff fdce 	bl	8000bcc <nRF24_ReadRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10a      	bne.n	8001050 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2201      	movs	r2, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	b25a      	sxtb	r2, r3
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001048:	4313      	orrs	r3, r2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e00b      	b.n	8001068 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2201      	movs	r2, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	b25b      	sxtb	r3, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	b25a      	sxtb	r2, r3
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4013      	ands	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4619      	mov	r1, r3
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fdf5 	bl	8000c5c <nRF24_WriteRegister>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d901      	bls.n	800108e <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 800108a:	2305      	movs	r3, #5
 800108c:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d801      	bhi.n	8001098 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001094:	2303      	movs	r3, #3
 8001096:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3b02      	subs	r3, #2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2003      	movs	r0, #3
 80010a8:	f7ff fdd8 	bl	8000c5c <nRF24_WriteRegister>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <nRF24_SetRXAddress+0x18>
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d11d      	bne.n	8001108 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e00d      	b.n	80010ee <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	441a      	add	r2, r3
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f1c3 0302 	rsb	r3, r3, #2
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	3310      	adds	r3, #16
 80010e2:	443b      	add	r3, r7
 80010e4:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	3301      	adds	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d9ee      	bls.n	80010d2 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	330a      	adds	r3, #10
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2203      	movs	r2, #3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdd1 	bl	8000ca8 <nRF24_WriteRegisters>
	{
 8001106:	e00a      	b.n	800111e <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	330a      	adds	r3, #10
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4610      	mov	r0, r2
 8001118:	f7ff fda0 	bl	8000c5c <nRF24_WriteRegister>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2203      	movs	r2, #3
 8001136:	4619      	mov	r1, r3
 8001138:	200a      	movs	r0, #10
 800113a:	f7ff fd6b 	bl	8000c14 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e00c      	b.n	800115e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f1c3 0302 	rsb	r3, r3, #2
 800114c:	3210      	adds	r2, #16
 800114e:	443a      	add	r2, r7
 8001150:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001154:	4a16      	ldr	r2, [pc, #88]	@ (80011b0 <nRF24_SetTXAddress+0x88>)
 8001156:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d9ef      	bls.n	8001144 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e00d      	b.n	8001186 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	441a      	add	r2, r3
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f1c3 0302 	rsb	r3, r3, #2
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	3310      	adds	r3, #16
 800117a:	443b      	add	r3, r7
 800117c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d9ee      	bls.n	800116a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2203      	movs	r2, #3
 8001192:	4619      	mov	r1, r3
 8001194:	200a      	movs	r0, #10
 8001196:	f7ff fd87 	bl	8000ca8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2203      	movs	r2, #3
 80011a0:	4619      	mov	r1, r3
 80011a2:	2010      	movs	r0, #16
 80011a4:	f7ff fd80 	bl	8000ca8 <nRF24_WriteRegisters>

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000154 	.word	0x20000154

080011b4 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80011ba:	f7ff fe27 	bl	8000e0c <nRF24_ReadStatus>
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80011c8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe25 	bl	8000e1c <nRF24_WriteStatus>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80011e4:	f7ff fdb6 	bl	8000d54 <nRF24_ReadConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e003      	b.n	8001204 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001202:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fdac 	bl	8000d64 <nRF24_WriteConfig>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800121e:	f7ff fd99 	bl	8000d54 <nRF24_ReadConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d104      	bne.n	8001236 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e003      	b.n	800123e <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f023 0320 	bic.w	r3, r3, #32
 800123c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fd8f 	bl	8000d64 <nRF24_WriteConfig>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001258:	f7ff fd7c 	bl	8000d54 <nRF24_ReadConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e003      	b.n	8001278 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f023 0310 	bic.w	r3, r3, #16
 8001276:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd72 	bl	8000d64 <nRF24_WriteConfig>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001290:	2201      	movs	r2, #1
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2061      	movs	r0, #97	@ 0x61
 8001296:	f7ff fcbd 	bl	8000c14 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 800129a:	2101      	movs	r1, #1
 800129c:	2007      	movs	r0, #7
 800129e:	f7ff fcdd 	bl	8000c5c <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 80012a2:	f7ff fdb3 	bl	8000e0c <nRF24_ReadStatus>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80012b0:	2120      	movs	r1, #32
 80012b2:	2007      	movs	r0, #7
 80012b4:	f7ff fcd2 	bl	8000c5c <nRF24_WriteRegister>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80012c6:	f7ff fda1 	bl	8000e0c <nRF24_ReadStatus>
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00c      	beq.n	80012f2 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <nRF24_RXAvailible+0x3c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e4:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd97 	bl	8000e1c <nRF24_WriteStatus>
		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <nRF24_RXAvailible+0x34>
	}
	return 0;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000080 	.word	0x20000080

08001300 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001308:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <nRF24_Init+0xa0>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	@ 0x40
 8001312:	4824      	ldr	r0, [pc, #144]	@ (80013a4 <nRF24_Init+0xa4>)
 8001314:	f000 fb72 	bl	80019fc <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	@ 0x80
 800131c:	4821      	ldr	r0, [pc, #132]	@ (80013a4 <nRF24_Init+0xa4>)
 800131e:	f000 fb6d 	bl	80019fc <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff fc1a 	bl	8000b5c <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001328:	2003      	movs	r0, #3
 800132a:	f7ff fd29 	bl	8000d80 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff fd46 	bl	8000dc0 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fdb3 	bl	8000ea0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fdcd 	bl	8000eda <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001340:	2107      	movs	r1, #7
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff fde6 	bl	8000f14 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001348:	2100      	movs	r1, #0
 800134a:	201c      	movs	r0, #28
 800134c:	f7ff fc86 	bl	8000c5c <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001350:	200a      	movs	r0, #10
 8001352:	f7ff fdfb 	bl	8000f4c <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001356:	2101      	movs	r1, #1
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fe08 	bl	8000f6e <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800135e:	2101      	movs	r1, #1
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fe20 	bl	8000fa6 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001366:	2101      	movs	r1, #1
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fe51 	bl	8001010 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800136e:	2003      	movs	r0, #3
 8001370:	f7ff fe83 	bl	800107a <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8001374:	2014      	movs	r0, #20
 8001376:	f7ff fbf1 	bl	8000b5c <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff2d 	bl	80011da <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff ff47 	bl	8001214 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff61 	bl	800124e <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 800138c:	2014      	movs	r0, #20
 800138e:	f7ff fbe5 	bl	8000b5c <nRF24_Delay>

	nRF24_ClearInterrupts();
 8001392:	f7ff ff0f 	bl	80011b4 <nRF24_ClearInterrupts>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000150 	.word	0x20000150
 80013a4:	40020400 	.word	0x40020400

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013ac:	f7ff fb52 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 f9ab 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff f969 	bl	80006b0 <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80013ec:	0800408c 	.word	0x0800408c
  ldr r2, =_sbss
 80013f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80013f4:	200002a4 	.word	0x200002a4

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f931 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fa82 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f93b 	bl	80016da <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800147c:	f000 f911 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000008 	.word	0x20000008
 8001498:	20000010 	.word	0x20000010
 800149c:	2000000c 	.word	0x2000000c

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000010 	.word	0x20000010
 80014c4:	20000158 	.word	0x20000158

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000158 	.word	0x20000158

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff47 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5c 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e159      	b.n	80019c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8148 	bne.w	80019be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	2b02      	cmp	r3, #2
 8001744:	d130      	bne.n	80017a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d017      	beq.n	80017e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a2 	beq.w	80019be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b57      	ldr	r3, [pc, #348]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a56      	ldr	r2, [pc, #344]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b54      	ldr	r3, [pc, #336]	@ (80019dc <HAL_GPIO_Init+0x2e8>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001896:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_GPIO_Init+0x2ec>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <HAL_GPIO_Init+0x2f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x202>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_GPIO_Init+0x2f4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x1fe>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a47      	ldr	r2, [pc, #284]	@ (80019ec <HAL_GPIO_Init+0x2f8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1fa>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_GPIO_Init+0x2fc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1f6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_GPIO_Init+0x300>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1f2>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x204>
 80018f6:	2300      	movs	r3, #0
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	@ (80019e0 <HAL_GPIO_Init+0x2ec>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198e:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b8:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	f67f aea2 	bls.w	8001710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	619a      	str	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a40:	887a      	ldrh	r2, [r7, #2]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	041a      	lsls	r2, r3, #16
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	400b      	ands	r3, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e267      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d075      	beq.n	8001b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a82:	4b88      	ldr	r3, [pc, #544]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d00c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d112      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d05b      	beq.n	8001b6c <HAL_RCC_OscConfig+0x108>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d157      	bne.n	8001b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e242      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac8:	d106      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x74>
 8001aca:	4b76      	ldr	r3, [pc, #472]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a75      	ldr	r2, [pc, #468]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xb0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b70      	ldr	r3, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xb0>
 8001afc:	4b69      	ldr	r3, [pc, #420]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a68      	ldr	r2, [pc, #416]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fcd4 	bl	80014c8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fcd0 	bl	80014c8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e207      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xc0>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fcc0 	bl	80014c8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fcbc 	bl	80014c8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1f3      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b51      	ldr	r3, [pc, #324]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0xe8>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b92:	4b44      	ldr	r3, [pc, #272]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x152>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e1c7      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4937      	ldr	r1, [pc, #220]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	e03a      	b.n	8001c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_RCC_OscConfig+0x244>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff fc75 	bl	80014c8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff fc71 	bl	80014c8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1a8      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4925      	ldr	r1, [pc, #148]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_RCC_OscConfig+0x244>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc54 	bl	80014c8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff fc50 	bl	80014c8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e187      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d036      	beq.n	8001cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d016      	beq.n	8001c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_RCC_OscConfig+0x248>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fc34 	bl	80014c8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc30 	bl	80014c8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e167      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_RCC_OscConfig+0x240>)
 8001c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x200>
 8001c82:	e01b      	b.n	8001cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_RCC_OscConfig+0x248>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fc1d 	bl	80014c8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	e00e      	b.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff fc19 	bl	80014c8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d907      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e150      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	42470000 	.word	0x42470000
 8001cac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ea      	bne.n	8001c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8097 	beq.w	8001df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cce:	4b81      	ldr	r3, [pc, #516]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b7d      	ldr	r3, [pc, #500]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b77      	ldr	r3, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x474>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d118      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b74      	ldr	r3, [pc, #464]	@ (8001ed8 <HAL_RCC_OscConfig+0x474>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a73      	ldr	r2, [pc, #460]	@ (8001ed8 <HAL_RCC_OscConfig+0x474>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbd9 	bl	80014c8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7ff fbd5 	bl	80014c8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e10c      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed8 <HAL_RCC_OscConfig+0x474>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2ea>
 8001d40:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d44:	4a63      	ldr	r2, [pc, #396]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x324>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x30c>
 8001d56:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d62:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d66:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0x324>
 8001d70:	4b58      	ldr	r3, [pc, #352]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d74:	4a57      	ldr	r2, [pc, #348]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7c:	4b55      	ldr	r3, [pc, #340]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d80:	4a54      	ldr	r2, [pc, #336]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f023 0304 	bic.w	r3, r3, #4
 8001d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d015      	beq.n	8001dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff fb9a 	bl	80014c8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff fb96 	bl	80014c8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0cb      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dae:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ee      	beq.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fb84 	bl	80014c8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fb80 	bl	80014c8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0b5      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ee      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	4a38      	ldr	r2, [pc, #224]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a1 	beq.w	8001f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e02:	4b34      	ldr	r3, [pc, #208]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d05c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d141      	bne.n	8001e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_RCC_OscConfig+0x478>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb54 	bl	80014c8 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff fb50 	bl	80014c8 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e087      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	019b      	lsls	r3, r3, #6
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	491b      	ldr	r1, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x478>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff fb29 	bl	80014c8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff fb25 	bl	80014c8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e05c      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x416>
 8001e98:	e054      	b.n	8001f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_RCC_OscConfig+0x478>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fb12 	bl	80014c8 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff fb0e 	bl	80014c8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e045      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
 8001ec6:	e03d      	b.n	8001f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e038      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x4ec>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d028      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d121      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d11a      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d111      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0cc      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b68      	ldr	r3, [pc, #416]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d90c      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b65      	ldr	r3, [pc, #404]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0b8      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	4b59      	ldr	r3, [pc, #356]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a58      	ldr	r2, [pc, #352]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc0:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b50      	ldr	r3, [pc, #320]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	494d      	ldr	r1, [pc, #308]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d044      	beq.n	8002074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d119      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d003      	beq.n	8002012 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200e:	2b03      	cmp	r3, #3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002012:	4b3f      	ldr	r3, [pc, #252]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e067      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4934      	ldr	r1, [pc, #208]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002044:	f7ff fa40 	bl	80014c8 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7ff fa3c 	bl	80014c8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e04f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b25      	ldr	r3, [pc, #148]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d20c      	bcs.n	800209c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b22      	ldr	r3, [pc, #136]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e032      	b.n	8002102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4916      	ldr	r1, [pc, #88]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	490e      	ldr	r1, [pc, #56]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020da:	f000 f821 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	490a      	ldr	r1, [pc, #40]	@ (8002114 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	5ccb      	ldrb	r3, [r1, r3]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f9a0 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00
 8002110:	40023800 	.word	0x40023800
 8002114:	08004030 	.word	0x08004030
 8002118:	20000008 	.word	0x20000008
 800211c:	2000000c 	.word	0x2000000c

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002124:	b090      	sub	sp, #64	@ 0x40
 8002126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d00d      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x40>
 8002144:	2b08      	cmp	r3, #8
 8002146:	f200 80a1 	bhi.w	800228c <HAL_RCC_GetSysClockFreq+0x16c>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x34>
 800214e:	2b04      	cmp	r3, #4
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x3a>
 8002152:	e09b      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b53      	ldr	r3, [pc, #332]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002158:	e09b      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800215a:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800215c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800215e:	e098      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002160:	4b4f      	ldr	r3, [pc, #316]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002168:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216a:	4b4d      	ldr	r3, [pc, #308]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d028      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	2200      	movs	r2, #0
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	627a      	str	r2, [r7, #36]	@ 0x24
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002188:	2100      	movs	r1, #0
 800218a:	4b47      	ldr	r3, [pc, #284]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800218c:	fb03 f201 	mul.w	r2, r3, r1
 8002190:	2300      	movs	r3, #0
 8002192:	fb00 f303 	mul.w	r3, r0, r3
 8002196:	4413      	add	r3, r2
 8002198:	4a43      	ldr	r2, [pc, #268]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800219a:	fba0 1202 	umull	r1, r2, r0, r2
 800219e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021a0:	460a      	mov	r2, r1
 80021a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021a6:	4413      	add	r3, r2
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ac:	2200      	movs	r2, #0
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	61fa      	str	r2, [r7, #28]
 80021b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021ba:	f7fe f861 	bl	8000280 <__aeabi_uldivmod>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4613      	mov	r3, r2
 80021c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021c6:	e053      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c8:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	2200      	movs	r2, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	617a      	str	r2, [r7, #20]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021da:	f04f 0b00 	mov.w	fp, #0
 80021de:	4652      	mov	r2, sl
 80021e0:	465b      	mov	r3, fp
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	0159      	lsls	r1, r3, #5
 80021ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021f0:	0150      	lsls	r0, r2, #5
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ebb2 080a 	subs.w	r8, r2, sl
 80021fa:	eb63 090b 	sbc.w	r9, r3, fp
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800220a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800220e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002212:	ebb2 0408 	subs.w	r4, r2, r8
 8002216:	eb63 0509 	sbc.w	r5, r3, r9
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	00eb      	lsls	r3, r5, #3
 8002224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002228:	00e2      	lsls	r2, r4, #3
 800222a:	4614      	mov	r4, r2
 800222c:	461d      	mov	r5, r3
 800222e:	eb14 030a 	adds.w	r3, r4, sl
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	eb45 030b 	adc.w	r3, r5, fp
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002246:	4629      	mov	r1, r5
 8002248:	028b      	lsls	r3, r1, #10
 800224a:	4621      	mov	r1, r4
 800224c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002250:	4621      	mov	r1, r4
 8002252:	028a      	lsls	r2, r1, #10
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225a:	2200      	movs	r2, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002264:	f7fe f80c 	bl	8000280 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4613      	mov	r3, r2
 800226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	3301      	adds	r3, #1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002294:	4618      	mov	r0, r3
 8002296:	3740      	adds	r7, #64	@ 0x40
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	017d7840 	.word	0x017d7840

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000008 	.word	0x20000008

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022c8:	f7ff fff0 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4903      	ldr	r1, [pc, #12]	@ (80022e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08004040 	.word	0x08004040

080022ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f0:	f7ff ffdc 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0b5b      	lsrs	r3, r3, #13
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	@ (8002310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	08004040 	.word	0x08004040

08002314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e07b      	b.n	800241e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002336:	d009      	beq.n	800234c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
 800233e:	e005      	b.n	800234c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fa9e 	bl	80008a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d0:	ea42 0103 	orr.w	r1, r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0104 	and.w	r1, r3, #4
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f003 0210 	and.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b088      	sub	sp, #32
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002436:	f7ff f847 	bl	80014c8 <HAL_GetTick>
 800243a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e12a      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_SPI_Transmit+0x36>
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e122      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_SPI_Transmit+0x48>
 800246a:	2302      	movs	r3, #2
 800246c:	e11b      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024bc:	d10f      	bne.n	80024de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e8:	2b40      	cmp	r3, #64	@ 0x40
 80024ea:	d007      	beq.n	80024fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002504:	d152      	bne.n	80025ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_Transmit+0xee>
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d145      	bne.n	80025a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002538:	e032      	b.n	80025a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d112      	bne.n	800256e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	1c9a      	adds	r2, r3, #2
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800256c:	e018      	b.n	80025a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800256e:	f7fe ffab 	bl	80014c8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d803      	bhi.n	8002586 <HAL_SPI_Transmit+0x160>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002584:	d102      	bne.n	800258c <HAL_SPI_Transmit+0x166>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e082      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1c7      	bne.n	800253a <HAL_SPI_Transmit+0x114>
 80025aa:	e053      	b.n	8002654 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_Transmit+0x194>
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d147      	bne.n	800264a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025e0:	e033      	b.n	800264a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d113      	bne.n	8002618 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002616:	e018      	b.n	800264a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002618:	f7fe ff56 	bl	80014c8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d803      	bhi.n	8002630 <HAL_SPI_Transmit+0x20a>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262e:	d102      	bne.n	8002636 <HAL_SPI_Transmit+0x210>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e02d      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1c6      	bne.n	80025e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fbd9 	bl	8002e10 <SPI_EndRxTxTransaction>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af02      	add	r7, sp, #8
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	e104      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Receive+0x2c>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0fc      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026e6:	d112      	bne.n	800270e <HAL_SPI_Receive+0x60>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2204      	movs	r2, #4
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f8eb 	bl	80028e0 <HAL_SPI_TransmitReceive>
 800270a:	4603      	mov	r3, r0
 800270c:	e0e4      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800270e:	f7fe fedb 	bl	80014c8 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_SPI_Receive+0x74>
 800271e:	2302      	movs	r3, #2
 8002720:	e0da      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2204      	movs	r2, #4
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002770:	d10f      	bne.n	8002792 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d007      	beq.n	80027b0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d170      	bne.n	800289a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027b8:	e035      	b.n	8002826 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d115      	bne.n	80027f4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f103 020c 	add.w	r2, r3, #12
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027f2:	e018      	b.n	8002826 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f4:	f7fe fe68 	bl	80014c8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d803      	bhi.n	800280c <HAL_SPI_Receive+0x15e>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Receive+0x164>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e058      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1c4      	bne.n	80027ba <HAL_SPI_Receive+0x10c>
 8002830:	e038      	b.n	80028a4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d113      	bne.n	8002868 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	b292      	uxth	r2, r2
 800284c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002866:	e018      	b.n	800289a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002868:	f7fe fe2e 	bl	80014c8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d803      	bhi.n	8002880 <HAL_SPI_Receive+0x1d2>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800287e:	d102      	bne.n	8002886 <HAL_SPI_Receive+0x1d8>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e01e      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1c6      	bne.n	8002832 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fa4b 	bl	8002d44 <SPI_EndRxTransaction>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028ee:	2301      	movs	r3, #1
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028f2:	f7fe fde9 	bl	80014c8 <HAL_GetTick>
 80028f6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028fe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d00c      	beq.n	800292a <HAL_SPI_TransmitReceive+0x4a>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002916:	d106      	bne.n	8002926 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <HAL_SPI_TransmitReceive+0x46>
 8002920:	7ffb      	ldrb	r3, [r7, #31]
 8002922:	2b04      	cmp	r3, #4
 8002924:	d001      	beq.n	800292a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	e17f      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_SPI_TransmitReceive+0x5c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_TransmitReceive+0x5c>
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e174      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_SPI_TransmitReceive+0x6e>
 800294a:	2302      	movs	r3, #2
 800294c:	e16d      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b04      	cmp	r3, #4
 8002960:	d003      	beq.n	800296a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2205      	movs	r2, #5
 8002966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	d007      	beq.n	80029be <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029c6:	d17e      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0xf6>
 80029d0:	8afb      	ldrh	r3, [r7, #22]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d16c      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fa:	e059      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11b      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x162>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d016      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x162>
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d113      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d119      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0x1a4>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d014      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	b292      	uxth	r2, r2
 8002a66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	1c9a      	adds	r2, r3, #2
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a80:	2301      	movs	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a84:	f7fe fd20 	bl	80014c8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d80d      	bhi.n	8002ab0 <HAL_SPI_TransmitReceive+0x1d0>
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a9a:	d009      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0bc      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1a0      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x11c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d19b      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x11c>
 8002ac4:	e082      	b.n	8002bcc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x1f4>
 8002ace:	8afb      	ldrh	r3, [r7, #22]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d171      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afa:	e05d      	b.n	8002bb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11c      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x264>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d017      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x264>
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d114      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d119      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x2a6>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d014      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b82:	2301      	movs	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b86:	f7fe fc9f 	bl	80014c8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d803      	bhi.n	8002b9e <HAL_SPI_TransmitReceive+0x2be>
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b9c:	d102      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x2c4>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e038      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19c      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x21c>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d197      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f91d 	bl	8002e10 <SPI_EndRxTxTransaction>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e01d      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	@ 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c44:	f7fe fc40 	bl	80014c8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c54:	f7fe fc38 	bl	80014c8 <HAL_GetTick>
 8002c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c5a:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	0d1b      	lsrs	r3, r3, #20
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c6a:	e055      	b.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c72:	d051      	beq.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c74:	f7fe fc28 	bl	80014c8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d902      	bls.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d13d      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca2:	d111      	bne.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cac:	d004      	beq.n	8002cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d107      	bne.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd0:	d10f      	bne.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e018      	b.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e002      	b.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d19a      	bne.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000008 	.word	0x20000008

08002d44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d58:	d111      	bne.n	8002d7e <SPI_EndRxTransaction+0x3a>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d62:	d004      	beq.n	8002d6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6c:	d107      	bne.n	8002d7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d86:	d12a      	bne.n	8002dde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d90:	d012      	beq.n	8002db8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2180      	movs	r1, #128	@ 0x80
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff ff49 	bl	8002c34 <SPI_WaitFlagStateUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02d      	beq.n	8002e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e026      	b.n	8002e06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ff36 	bl	8002c34 <SPI_WaitFlagStateUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e013      	b.n	8002e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2101      	movs	r1, #1
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff ff23 	bl	8002c34 <SPI_WaitFlagStateUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e000      	b.n	8002e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2201      	movs	r2, #1
 8002e24:	2102      	movs	r1, #2
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff04 	bl	8002c34 <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e032      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e42:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <SPI_EndRxTxTransaction+0xa0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <SPI_EndRxTxTransaction+0xa4>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e60:	d112      	bne.n	8002e88 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fee1 	bl	8002c34 <SPI_WaitFlagStateUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e00f      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ea0:	d0f2      	beq.n	8002e88 <SPI_EndRxTxTransaction+0x78>
 8002ea2:	e000      	b.n	8002ea6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ea4:	bf00      	nop
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	165e9f81 	.word	0x165e9f81

08002eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e042      	b.n	8002f50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fdf4 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	@ 0x24
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f973 	bl	80031e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d175      	bne.n	8003064 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Transmit+0x2c>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e06e      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	@ 0x21
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f96:	f7fe fa97 	bl	80014c8 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fcc:	e02e      	b.n	800302c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f848 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e03a      	b.n	8003066 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e007      	b.n	800301e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1cb      	bne.n	8002fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f814 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e006      	b.n	8003066 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	e03b      	b.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003086:	d037      	beq.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe fa1e 	bl	80014c8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <UART_WaitOnFlagUntilTimeout+0x30>
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e03a      	b.n	8003118 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d023      	beq.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d020      	beq.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	d01d      	beq.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d116      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f81d 	bl	8003120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2208      	movs	r2, #8
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e00f      	b.n	8003118 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	429a      	cmp	r2, r3
 8003114:	d0b4      	beq.n	8003080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b095      	sub	sp, #84	@ 0x54
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003148:	643a      	str	r2, [r7, #64]	@ 0x40
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800314e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3314      	adds	r3, #20
 8003162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	61fb      	str	r3, [r7, #28]
   return(result);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800317c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	2b01      	cmp	r3, #1
 8003196:	d119      	bne.n	80031cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b8:	61ba      	str	r2, [r7, #24]
 80031ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6979      	ldr	r1, [r7, #20]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	613b      	str	r3, [r7, #16]
   return(result);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031da:	bf00      	nop
 80031dc:	3754      	adds	r7, #84	@ 0x54
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b0c0      	sub	sp, #256	@ 0x100
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	68d9      	ldr	r1, [r3, #12]
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	ea40 0301 	orr.w	r3, r0, r1
 8003210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	431a      	orrs	r2, r3
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003240:	f021 010c 	bic.w	r1, r1, #12
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800324e:	430b      	orrs	r3, r1
 8003250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	6999      	ldr	r1, [r3, #24]
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	ea40 0301 	orr.w	r3, r0, r1
 800326e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b8f      	ldr	r3, [pc, #572]	@ (80034b4 <UART_SetConfig+0x2cc>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d005      	beq.n	8003288 <UART_SetConfig+0xa0>
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b8d      	ldr	r3, [pc, #564]	@ (80034b8 <UART_SetConfig+0x2d0>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d104      	bne.n	8003292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f830 	bl	80022ec <HAL_RCC_GetPCLK2Freq>
 800328c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003290:	e003      	b.n	800329a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003292:	f7ff f817 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8003296:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a4:	f040 810c 	bne.w	80034c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032c2:	415b      	adcs	r3, r3
 80032c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032ca:	4621      	mov	r1, r4
 80032cc:	eb12 0801 	adds.w	r8, r2, r1
 80032d0:	4629      	mov	r1, r5
 80032d2:	eb43 0901 	adc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032f8:	462b      	mov	r3, r5
 80032fa:	eb49 0303 	adc.w	r3, r9, r3
 80032fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800330e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003316:	460b      	mov	r3, r1
 8003318:	18db      	adds	r3, r3, r3
 800331a:	653b      	str	r3, [r7, #80]	@ 0x50
 800331c:	4613      	mov	r3, r2
 800331e:	eb42 0303 	adc.w	r3, r2, r3
 8003322:	657b      	str	r3, [r7, #84]	@ 0x54
 8003324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800332c:	f7fc ffa8 	bl	8000280 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <UART_SetConfig+0x2d4>)
 8003336:	fba3 2302 	umull	r2, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	011c      	lsls	r4, r3, #4
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003348:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800334c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003358:	415b      	adcs	r3, r3
 800335a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800335c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003360:	4641      	mov	r1, r8
 8003362:	eb12 0a01 	adds.w	sl, r2, r1
 8003366:	4649      	mov	r1, r9
 8003368:	eb43 0b01 	adc.w	fp, r3, r1
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800337c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003380:	4692      	mov	sl, r2
 8003382:	469b      	mov	fp, r3
 8003384:	4643      	mov	r3, r8
 8003386:	eb1a 0303 	adds.w	r3, sl, r3
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800338e:	464b      	mov	r3, r9
 8003390:	eb4b 0303 	adc.w	r3, fp, r3
 8003394:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033ac:	460b      	mov	r3, r1
 80033ae:	18db      	adds	r3, r3, r3
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b2:	4613      	mov	r3, r2
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033c2:	f7fc ff5d 	bl	8000280 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	4b3b      	ldr	r3, [pc, #236]	@ (80034bc <UART_SetConfig+0x2d4>)
 80033ce:	fba3 2301 	umull	r2, r3, r3, r1
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2264      	movs	r2, #100	@ 0x64
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	1acb      	subs	r3, r1, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <UART_SetConfig+0x2d4>)
 80033e4:	fba3 2302 	umull	r2, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033f0:	441c      	add	r4, r3
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800340c:	415b      	adcs	r3, r3
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003414:	4641      	mov	r1, r8
 8003416:	1851      	adds	r1, r2, r1
 8003418:	6339      	str	r1, [r7, #48]	@ 0x30
 800341a:	4649      	mov	r1, r9
 800341c:	414b      	adcs	r3, r1
 800341e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800342c:	4659      	mov	r1, fp
 800342e:	00cb      	lsls	r3, r1, #3
 8003430:	4651      	mov	r1, sl
 8003432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003436:	4651      	mov	r1, sl
 8003438:	00ca      	lsls	r2, r1, #3
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	4603      	mov	r3, r0
 8003440:	4642      	mov	r2, r8
 8003442:	189b      	adds	r3, r3, r2
 8003444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003448:	464b      	mov	r3, r9
 800344a:	460a      	mov	r2, r1
 800344c:	eb42 0303 	adc.w	r3, r2, r3
 8003450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003460:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003468:	460b      	mov	r3, r1
 800346a:	18db      	adds	r3, r3, r3
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346e:	4613      	mov	r3, r2
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800347a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800347e:	f7fc feff 	bl	8000280 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <UART_SetConfig+0x2d4>)
 8003488:	fba3 1302 	umull	r1, r3, r3, r2
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	2164      	movs	r1, #100	@ 0x64
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	3332      	adds	r3, #50	@ 0x32
 800349a:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <UART_SetConfig+0x2d4>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	f003 0207 	and.w	r2, r3, #7
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4422      	add	r2, r4
 80034ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b0:	e106      	b.n	80036c0 <UART_SetConfig+0x4d8>
 80034b2:	bf00      	nop
 80034b4:	40011000 	.word	0x40011000
 80034b8:	40011400 	.word	0x40011400
 80034bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034d2:	4642      	mov	r2, r8
 80034d4:	464b      	mov	r3, r9
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	6239      	str	r1, [r7, #32]
 80034da:	415b      	adcs	r3, r3
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034e2:	4641      	mov	r1, r8
 80034e4:	1854      	adds	r4, r2, r1
 80034e6:	4649      	mov	r1, r9
 80034e8:	eb43 0501 	adc.w	r5, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	00eb      	lsls	r3, r5, #3
 80034f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fa:	00e2      	lsls	r2, r4, #3
 80034fc:	4614      	mov	r4, r2
 80034fe:	461d      	mov	r5, r3
 8003500:	4643      	mov	r3, r8
 8003502:	18e3      	adds	r3, r4, r3
 8003504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003508:	464b      	mov	r3, r9
 800350a:	eb45 0303 	adc.w	r3, r5, r3
 800350e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800351e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800352e:	4629      	mov	r1, r5
 8003530:	008b      	lsls	r3, r1, #2
 8003532:	4621      	mov	r1, r4
 8003534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003538:	4621      	mov	r1, r4
 800353a:	008a      	lsls	r2, r1, #2
 800353c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003540:	f7fc fe9e 	bl	8000280 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4b60      	ldr	r3, [pc, #384]	@ (80036cc <UART_SetConfig+0x4e4>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	011c      	lsls	r4, r3, #4
 8003552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800355c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	61b9      	str	r1, [r7, #24]
 800356c:	415b      	adcs	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003574:	4641      	mov	r1, r8
 8003576:	1851      	adds	r1, r2, r1
 8003578:	6139      	str	r1, [r7, #16]
 800357a:	4649      	mov	r1, r9
 800357c:	414b      	adcs	r3, r1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800358c:	4659      	mov	r1, fp
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4651      	mov	r1, sl
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4642      	mov	r2, r8
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a8:	464b      	mov	r3, r9
 80035aa:	460a      	mov	r2, r1
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035cc:	4649      	mov	r1, r9
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d6:	4641      	mov	r1, r8
 80035d8:	008a      	lsls	r2, r1, #2
 80035da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035de:	f7fc fe4f 	bl	8000280 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <UART_SetConfig+0x4e4>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2264      	movs	r2, #100	@ 0x64
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	@ 0x32
 80035fc:	4a33      	ldr	r2, [pc, #204]	@ (80036cc <UART_SetConfig+0x4e4>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003608:	441c      	add	r4, r3
 800360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800360e:	2200      	movs	r2, #0
 8003610:	673b      	str	r3, [r7, #112]	@ 0x70
 8003612:	677a      	str	r2, [r7, #116]	@ 0x74
 8003614:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	415b      	adcs	r3, r3
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800365a:	464b      	mov	r3, r9
 800365c:	460a      	mov	r2, r1
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	663b      	str	r3, [r7, #96]	@ 0x60
 800366e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800367c:	4649      	mov	r1, r9
 800367e:	008b      	lsls	r3, r1, #2
 8003680:	4641      	mov	r1, r8
 8003682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003686:	4641      	mov	r1, r8
 8003688:	008a      	lsls	r2, r1, #2
 800368a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800368e:	f7fc fdf7 	bl	8000280 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <UART_SetConfig+0x4e4>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	@ 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	3332      	adds	r3, #50	@ 0x32
 80036aa:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <UART_SetConfig+0x4e4>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4422      	add	r2, r4
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036c6:	46bd      	mov	sp, r7
 80036c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <siprintf>:
 80036d0:	b40e      	push	{r1, r2, r3}
 80036d2:	b510      	push	{r4, lr}
 80036d4:	b09d      	sub	sp, #116	@ 0x74
 80036d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80036d8:	9002      	str	r0, [sp, #8]
 80036da:	9006      	str	r0, [sp, #24]
 80036dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036e0:	480a      	ldr	r0, [pc, #40]	@ (800370c <siprintf+0x3c>)
 80036e2:	9107      	str	r1, [sp, #28]
 80036e4:	9104      	str	r1, [sp, #16]
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <siprintf+0x40>)
 80036e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ec:	9105      	str	r1, [sp, #20]
 80036ee:	2400      	movs	r4, #0
 80036f0:	a902      	add	r1, sp, #8
 80036f2:	6800      	ldr	r0, [r0, #0]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80036f8:	f000 f994 	bl	8003a24 <_svfiprintf_r>
 80036fc:	9b02      	ldr	r3, [sp, #8]
 80036fe:	701c      	strb	r4, [r3, #0]
 8003700:	b01d      	add	sp, #116	@ 0x74
 8003702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003706:	b003      	add	sp, #12
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000014 	.word	0x20000014
 8003710:	ffff0208 	.word	0xffff0208

08003714 <memset>:
 8003714:	4402      	add	r2, r0
 8003716:	4603      	mov	r3, r0
 8003718:	4293      	cmp	r3, r2
 800371a:	d100      	bne.n	800371e <memset+0xa>
 800371c:	4770      	bx	lr
 800371e:	f803 1b01 	strb.w	r1, [r3], #1
 8003722:	e7f9      	b.n	8003718 <memset+0x4>

08003724 <__errno>:
 8003724:	4b01      	ldr	r3, [pc, #4]	@ (800372c <__errno+0x8>)
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000014 	.word	0x20000014

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	@ (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	@ (800376c <__libc_init_array+0x3c>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2600      	movs	r6, #0
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	@ (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	@ (8003774 <__libc_init_array+0x44>)
 8003744:	f000 fc64 	bl	8004010 <_init>
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2600      	movs	r6, #0
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	08004084 	.word	0x08004084
 800376c:	08004084 	.word	0x08004084
 8003770:	08004084 	.word	0x08004084
 8003774:	08004088 	.word	0x08004088

08003778 <__retarget_lock_acquire_recursive>:
 8003778:	4770      	bx	lr

0800377a <__retarget_lock_release_recursive>:
 800377a:	4770      	bx	lr

0800377c <_free_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4605      	mov	r5, r0
 8003780:	2900      	cmp	r1, #0
 8003782:	d041      	beq.n	8003808 <_free_r+0x8c>
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f0c      	subs	r4, r1, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	18e4      	addlt	r4, r4, r3
 8003790:	f000 f8e0 	bl	8003954 <__malloc_lock>
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <_free_r+0x90>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	b933      	cbnz	r3, 80037a8 <_free_r+0x2c>
 800379a:	6063      	str	r3, [r4, #4]
 800379c:	6014      	str	r4, [r2, #0]
 800379e:	4628      	mov	r0, r5
 80037a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a4:	f000 b8dc 	b.w	8003960 <__malloc_unlock>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d908      	bls.n	80037be <_free_r+0x42>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	1821      	adds	r1, r4, r0
 80037b0:	428b      	cmp	r3, r1
 80037b2:	bf01      	itttt	eq
 80037b4:	6819      	ldreq	r1, [r3, #0]
 80037b6:	685b      	ldreq	r3, [r3, #4]
 80037b8:	1809      	addeq	r1, r1, r0
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	e7ed      	b.n	800379a <_free_r+0x1e>
 80037be:	461a      	mov	r2, r3
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b10b      	cbz	r3, 80037c8 <_free_r+0x4c>
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d9fa      	bls.n	80037be <_free_r+0x42>
 80037c8:	6811      	ldr	r1, [r2, #0]
 80037ca:	1850      	adds	r0, r2, r1
 80037cc:	42a0      	cmp	r0, r4
 80037ce:	d10b      	bne.n	80037e8 <_free_r+0x6c>
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	4401      	add	r1, r0
 80037d4:	1850      	adds	r0, r2, r1
 80037d6:	4283      	cmp	r3, r0
 80037d8:	6011      	str	r1, [r2, #0]
 80037da:	d1e0      	bne.n	800379e <_free_r+0x22>
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	6053      	str	r3, [r2, #4]
 80037e2:	4408      	add	r0, r1
 80037e4:	6010      	str	r0, [r2, #0]
 80037e6:	e7da      	b.n	800379e <_free_r+0x22>
 80037e8:	d902      	bls.n	80037f0 <_free_r+0x74>
 80037ea:	230c      	movs	r3, #12
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	e7d6      	b.n	800379e <_free_r+0x22>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	1821      	adds	r1, r4, r0
 80037f4:	428b      	cmp	r3, r1
 80037f6:	bf04      	itt	eq
 80037f8:	6819      	ldreq	r1, [r3, #0]
 80037fa:	685b      	ldreq	r3, [r3, #4]
 80037fc:	6063      	str	r3, [r4, #4]
 80037fe:	bf04      	itt	eq
 8003800:	1809      	addeq	r1, r1, r0
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	6054      	str	r4, [r2, #4]
 8003806:	e7ca      	b.n	800379e <_free_r+0x22>
 8003808:	bd38      	pop	{r3, r4, r5, pc}
 800380a:	bf00      	nop
 800380c:	200002a0 	.word	0x200002a0

08003810 <sbrk_aligned>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0f      	ldr	r6, [pc, #60]	@ (8003850 <sbrk_aligned+0x40>)
 8003814:	460c      	mov	r4, r1
 8003816:	6831      	ldr	r1, [r6, #0]
 8003818:	4605      	mov	r5, r0
 800381a:	b911      	cbnz	r1, 8003822 <sbrk_aligned+0x12>
 800381c:	f000 fba4 	bl	8003f68 <_sbrk_r>
 8003820:	6030      	str	r0, [r6, #0]
 8003822:	4621      	mov	r1, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 fb9f 	bl	8003f68 <_sbrk_r>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d103      	bne.n	8003836 <sbrk_aligned+0x26>
 800382e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003832:	4620      	mov	r0, r4
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	1cc4      	adds	r4, r0, #3
 8003838:	f024 0403 	bic.w	r4, r4, #3
 800383c:	42a0      	cmp	r0, r4
 800383e:	d0f8      	beq.n	8003832 <sbrk_aligned+0x22>
 8003840:	1a21      	subs	r1, r4, r0
 8003842:	4628      	mov	r0, r5
 8003844:	f000 fb90 	bl	8003f68 <_sbrk_r>
 8003848:	3001      	adds	r0, #1
 800384a:	d1f2      	bne.n	8003832 <sbrk_aligned+0x22>
 800384c:	e7ef      	b.n	800382e <sbrk_aligned+0x1e>
 800384e:	bf00      	nop
 8003850:	2000029c 	.word	0x2000029c

08003854 <_malloc_r>:
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003858:	1ccd      	adds	r5, r1, #3
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	2d00      	cmp	r5, #0
 8003868:	4606      	mov	r6, r0
 800386a:	db01      	blt.n	8003870 <_malloc_r+0x1c>
 800386c:	42a9      	cmp	r1, r5
 800386e:	d904      	bls.n	800387a <_malloc_r+0x26>
 8003870:	230c      	movs	r3, #12
 8003872:	6033      	str	r3, [r6, #0]
 8003874:	2000      	movs	r0, #0
 8003876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003950 <_malloc_r+0xfc>
 800387e:	f000 f869 	bl	8003954 <__malloc_lock>
 8003882:	f8d8 3000 	ldr.w	r3, [r8]
 8003886:	461c      	mov	r4, r3
 8003888:	bb44      	cbnz	r4, 80038dc <_malloc_r+0x88>
 800388a:	4629      	mov	r1, r5
 800388c:	4630      	mov	r0, r6
 800388e:	f7ff ffbf 	bl	8003810 <sbrk_aligned>
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	4604      	mov	r4, r0
 8003896:	d158      	bne.n	800394a <_malloc_r+0xf6>
 8003898:	f8d8 4000 	ldr.w	r4, [r8]
 800389c:	4627      	mov	r7, r4
 800389e:	2f00      	cmp	r7, #0
 80038a0:	d143      	bne.n	800392a <_malloc_r+0xd6>
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	d04b      	beq.n	800393e <_malloc_r+0xea>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	4639      	mov	r1, r7
 80038aa:	4630      	mov	r0, r6
 80038ac:	eb04 0903 	add.w	r9, r4, r3
 80038b0:	f000 fb5a 	bl	8003f68 <_sbrk_r>
 80038b4:	4581      	cmp	r9, r0
 80038b6:	d142      	bne.n	800393e <_malloc_r+0xea>
 80038b8:	6821      	ldr	r1, [r4, #0]
 80038ba:	1a6d      	subs	r5, r5, r1
 80038bc:	4629      	mov	r1, r5
 80038be:	4630      	mov	r0, r6
 80038c0:	f7ff ffa6 	bl	8003810 <sbrk_aligned>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d03a      	beq.n	800393e <_malloc_r+0xea>
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	442b      	add	r3, r5
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	f8d8 3000 	ldr.w	r3, [r8]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	bb62      	cbnz	r2, 8003930 <_malloc_r+0xdc>
 80038d6:	f8c8 7000 	str.w	r7, [r8]
 80038da:	e00f      	b.n	80038fc <_malloc_r+0xa8>
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	1b52      	subs	r2, r2, r5
 80038e0:	d420      	bmi.n	8003924 <_malloc_r+0xd0>
 80038e2:	2a0b      	cmp	r2, #11
 80038e4:	d917      	bls.n	8003916 <_malloc_r+0xc2>
 80038e6:	1961      	adds	r1, r4, r5
 80038e8:	42a3      	cmp	r3, r4
 80038ea:	6025      	str	r5, [r4, #0]
 80038ec:	bf18      	it	ne
 80038ee:	6059      	strne	r1, [r3, #4]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	bf08      	it	eq
 80038f4:	f8c8 1000 	streq.w	r1, [r8]
 80038f8:	5162      	str	r2, [r4, r5]
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	4630      	mov	r0, r6
 80038fe:	f000 f82f 	bl	8003960 <__malloc_unlock>
 8003902:	f104 000b 	add.w	r0, r4, #11
 8003906:	1d23      	adds	r3, r4, #4
 8003908:	f020 0007 	bic.w	r0, r0, #7
 800390c:	1ac2      	subs	r2, r0, r3
 800390e:	bf1c      	itt	ne
 8003910:	1a1b      	subne	r3, r3, r0
 8003912:	50a3      	strne	r3, [r4, r2]
 8003914:	e7af      	b.n	8003876 <_malloc_r+0x22>
 8003916:	6862      	ldr	r2, [r4, #4]
 8003918:	42a3      	cmp	r3, r4
 800391a:	bf0c      	ite	eq
 800391c:	f8c8 2000 	streq.w	r2, [r8]
 8003920:	605a      	strne	r2, [r3, #4]
 8003922:	e7eb      	b.n	80038fc <_malloc_r+0xa8>
 8003924:	4623      	mov	r3, r4
 8003926:	6864      	ldr	r4, [r4, #4]
 8003928:	e7ae      	b.n	8003888 <_malloc_r+0x34>
 800392a:	463c      	mov	r4, r7
 800392c:	687f      	ldr	r7, [r7, #4]
 800392e:	e7b6      	b.n	800389e <_malloc_r+0x4a>
 8003930:	461a      	mov	r2, r3
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	42a3      	cmp	r3, r4
 8003936:	d1fb      	bne.n	8003930 <_malloc_r+0xdc>
 8003938:	2300      	movs	r3, #0
 800393a:	6053      	str	r3, [r2, #4]
 800393c:	e7de      	b.n	80038fc <_malloc_r+0xa8>
 800393e:	230c      	movs	r3, #12
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	4630      	mov	r0, r6
 8003944:	f000 f80c 	bl	8003960 <__malloc_unlock>
 8003948:	e794      	b.n	8003874 <_malloc_r+0x20>
 800394a:	6005      	str	r5, [r0, #0]
 800394c:	e7d6      	b.n	80038fc <_malloc_r+0xa8>
 800394e:	bf00      	nop
 8003950:	200002a0 	.word	0x200002a0

08003954 <__malloc_lock>:
 8003954:	4801      	ldr	r0, [pc, #4]	@ (800395c <__malloc_lock+0x8>)
 8003956:	f7ff bf0f 	b.w	8003778 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	20000298 	.word	0x20000298

08003960 <__malloc_unlock>:
 8003960:	4801      	ldr	r0, [pc, #4]	@ (8003968 <__malloc_unlock+0x8>)
 8003962:	f7ff bf0a 	b.w	800377a <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	20000298 	.word	0x20000298

0800396c <__ssputs_r>:
 800396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	688e      	ldr	r6, [r1, #8]
 8003972:	461f      	mov	r7, r3
 8003974:	42be      	cmp	r6, r7
 8003976:	680b      	ldr	r3, [r1, #0]
 8003978:	4682      	mov	sl, r0
 800397a:	460c      	mov	r4, r1
 800397c:	4690      	mov	r8, r2
 800397e:	d82d      	bhi.n	80039dc <__ssputs_r+0x70>
 8003980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003988:	d026      	beq.n	80039d8 <__ssputs_r+0x6c>
 800398a:	6965      	ldr	r5, [r4, #20]
 800398c:	6909      	ldr	r1, [r1, #16]
 800398e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003992:	eba3 0901 	sub.w	r9, r3, r1
 8003996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800399a:	1c7b      	adds	r3, r7, #1
 800399c:	444b      	add	r3, r9
 800399e:	106d      	asrs	r5, r5, #1
 80039a0:	429d      	cmp	r5, r3
 80039a2:	bf38      	it	cc
 80039a4:	461d      	movcc	r5, r3
 80039a6:	0553      	lsls	r3, r2, #21
 80039a8:	d527      	bpl.n	80039fa <__ssputs_r+0x8e>
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7ff ff52 	bl	8003854 <_malloc_r>
 80039b0:	4606      	mov	r6, r0
 80039b2:	b360      	cbz	r0, 8003a0e <__ssputs_r+0xa2>
 80039b4:	6921      	ldr	r1, [r4, #16]
 80039b6:	464a      	mov	r2, r9
 80039b8:	f000 fae6 	bl	8003f88 <memcpy>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	6126      	str	r6, [r4, #16]
 80039ca:	6165      	str	r5, [r4, #20]
 80039cc:	444e      	add	r6, r9
 80039ce:	eba5 0509 	sub.w	r5, r5, r9
 80039d2:	6026      	str	r6, [r4, #0]
 80039d4:	60a5      	str	r5, [r4, #8]
 80039d6:	463e      	mov	r6, r7
 80039d8:	42be      	cmp	r6, r7
 80039da:	d900      	bls.n	80039de <__ssputs_r+0x72>
 80039dc:	463e      	mov	r6, r7
 80039de:	6820      	ldr	r0, [r4, #0]
 80039e0:	4632      	mov	r2, r6
 80039e2:	4641      	mov	r1, r8
 80039e4:	f000 faa6 	bl	8003f34 <memmove>
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	1b9b      	subs	r3, r3, r6
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	4433      	add	r3, r6
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	2000      	movs	r0, #0
 80039f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fa:	462a      	mov	r2, r5
 80039fc:	f000 fad2 	bl	8003fa4 <_realloc_r>
 8003a00:	4606      	mov	r6, r0
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d1e0      	bne.n	80039c8 <__ssputs_r+0x5c>
 8003a06:	6921      	ldr	r1, [r4, #16]
 8003a08:	4650      	mov	r0, sl
 8003a0a:	f7ff feb7 	bl	800377c <_free_r>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	f8ca 3000 	str.w	r3, [sl]
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a1a:	81a3      	strh	r3, [r4, #12]
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a20:	e7e9      	b.n	80039f6 <__ssputs_r+0x8a>
	...

08003a24 <_svfiprintf_r>:
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	4698      	mov	r8, r3
 8003a2a:	898b      	ldrh	r3, [r1, #12]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	b09d      	sub	sp, #116	@ 0x74
 8003a30:	4607      	mov	r7, r0
 8003a32:	460d      	mov	r5, r1
 8003a34:	4614      	mov	r4, r2
 8003a36:	d510      	bpl.n	8003a5a <_svfiprintf_r+0x36>
 8003a38:	690b      	ldr	r3, [r1, #16]
 8003a3a:	b973      	cbnz	r3, 8003a5a <_svfiprintf_r+0x36>
 8003a3c:	2140      	movs	r1, #64	@ 0x40
 8003a3e:	f7ff ff09 	bl	8003854 <_malloc_r>
 8003a42:	6028      	str	r0, [r5, #0]
 8003a44:	6128      	str	r0, [r5, #16]
 8003a46:	b930      	cbnz	r0, 8003a56 <_svfiprintf_r+0x32>
 8003a48:	230c      	movs	r3, #12
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a50:	b01d      	add	sp, #116	@ 0x74
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	2340      	movs	r3, #64	@ 0x40
 8003a58:	616b      	str	r3, [r5, #20]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a5e:	2320      	movs	r3, #32
 8003a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a68:	2330      	movs	r3, #48	@ 0x30
 8003a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c08 <_svfiprintf_r+0x1e4>
 8003a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a72:	f04f 0901 	mov.w	r9, #1
 8003a76:	4623      	mov	r3, r4
 8003a78:	469a      	mov	sl, r3
 8003a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a7e:	b10a      	cbz	r2, 8003a84 <_svfiprintf_r+0x60>
 8003a80:	2a25      	cmp	r2, #37	@ 0x25
 8003a82:	d1f9      	bne.n	8003a78 <_svfiprintf_r+0x54>
 8003a84:	ebba 0b04 	subs.w	fp, sl, r4
 8003a88:	d00b      	beq.n	8003aa2 <_svfiprintf_r+0x7e>
 8003a8a:	465b      	mov	r3, fp
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4638      	mov	r0, r7
 8003a92:	f7ff ff6b 	bl	800396c <__ssputs_r>
 8003a96:	3001      	adds	r0, #1
 8003a98:	f000 80a7 	beq.w	8003bea <_svfiprintf_r+0x1c6>
 8003a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a9e:	445a      	add	r2, fp
 8003aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 809f 	beq.w	8003bea <_svfiprintf_r+0x1c6>
 8003aac:	2300      	movs	r3, #0
 8003aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ab6:	f10a 0a01 	add.w	sl, sl, #1
 8003aba:	9304      	str	r3, [sp, #16]
 8003abc:	9307      	str	r3, [sp, #28]
 8003abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ac4:	4654      	mov	r4, sl
 8003ac6:	2205      	movs	r2, #5
 8003ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003acc:	484e      	ldr	r0, [pc, #312]	@ (8003c08 <_svfiprintf_r+0x1e4>)
 8003ace:	f7fc fb87 	bl	80001e0 <memchr>
 8003ad2:	9a04      	ldr	r2, [sp, #16]
 8003ad4:	b9d8      	cbnz	r0, 8003b0e <_svfiprintf_r+0xea>
 8003ad6:	06d0      	lsls	r0, r2, #27
 8003ad8:	bf44      	itt	mi
 8003ada:	2320      	movmi	r3, #32
 8003adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ae0:	0711      	lsls	r1, r2, #28
 8003ae2:	bf44      	itt	mi
 8003ae4:	232b      	movmi	r3, #43	@ 0x2b
 8003ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aea:	f89a 3000 	ldrb.w	r3, [sl]
 8003aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af0:	d015      	beq.n	8003b1e <_svfiprintf_r+0xfa>
 8003af2:	9a07      	ldr	r2, [sp, #28]
 8003af4:	4654      	mov	r4, sl
 8003af6:	2000      	movs	r0, #0
 8003af8:	f04f 0c0a 	mov.w	ip, #10
 8003afc:	4621      	mov	r1, r4
 8003afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b02:	3b30      	subs	r3, #48	@ 0x30
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	d94b      	bls.n	8003ba0 <_svfiprintf_r+0x17c>
 8003b08:	b1b0      	cbz	r0, 8003b38 <_svfiprintf_r+0x114>
 8003b0a:	9207      	str	r2, [sp, #28]
 8003b0c:	e014      	b.n	8003b38 <_svfiprintf_r+0x114>
 8003b0e:	eba0 0308 	sub.w	r3, r0, r8
 8003b12:	fa09 f303 	lsl.w	r3, r9, r3
 8003b16:	4313      	orrs	r3, r2
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	46a2      	mov	sl, r4
 8003b1c:	e7d2      	b.n	8003ac4 <_svfiprintf_r+0xa0>
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	1d19      	adds	r1, r3, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	9103      	str	r1, [sp, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbb      	ittet	lt
 8003b2a:	425b      	neglt	r3, r3
 8003b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b30:	9307      	strge	r3, [sp, #28]
 8003b32:	9307      	strlt	r3, [sp, #28]
 8003b34:	bfb8      	it	lt
 8003b36:	9204      	strlt	r2, [sp, #16]
 8003b38:	7823      	ldrb	r3, [r4, #0]
 8003b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b3c:	d10a      	bne.n	8003b54 <_svfiprintf_r+0x130>
 8003b3e:	7863      	ldrb	r3, [r4, #1]
 8003b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b42:	d132      	bne.n	8003baa <_svfiprintf_r+0x186>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	1d1a      	adds	r2, r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	9203      	str	r2, [sp, #12]
 8003b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b50:	3402      	adds	r4, #2
 8003b52:	9305      	str	r3, [sp, #20]
 8003b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c18 <_svfiprintf_r+0x1f4>
 8003b58:	7821      	ldrb	r1, [r4, #0]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	4650      	mov	r0, sl
 8003b5e:	f7fc fb3f 	bl	80001e0 <memchr>
 8003b62:	b138      	cbz	r0, 8003b74 <_svfiprintf_r+0x150>
 8003b64:	9b04      	ldr	r3, [sp, #16]
 8003b66:	eba0 000a 	sub.w	r0, r0, sl
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	4082      	lsls	r2, r0
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	3401      	adds	r4, #1
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b78:	4824      	ldr	r0, [pc, #144]	@ (8003c0c <_svfiprintf_r+0x1e8>)
 8003b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b7e:	2206      	movs	r2, #6
 8003b80:	f7fc fb2e 	bl	80001e0 <memchr>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d036      	beq.n	8003bf6 <_svfiprintf_r+0x1d2>
 8003b88:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <_svfiprintf_r+0x1ec>)
 8003b8a:	bb1b      	cbnz	r3, 8003bd4 <_svfiprintf_r+0x1b0>
 8003b8c:	9b03      	ldr	r3, [sp, #12]
 8003b8e:	3307      	adds	r3, #7
 8003b90:	f023 0307 	bic.w	r3, r3, #7
 8003b94:	3308      	adds	r3, #8
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b9a:	4433      	add	r3, r6
 8003b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b9e:	e76a      	b.n	8003a76 <_svfiprintf_r+0x52>
 8003ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	e7a8      	b.n	8003afc <_svfiprintf_r+0xd8>
 8003baa:	2300      	movs	r3, #0
 8003bac:	3401      	adds	r4, #1
 8003bae:	9305      	str	r3, [sp, #20]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 0c0a 	mov.w	ip, #10
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bbc:	3a30      	subs	r2, #48	@ 0x30
 8003bbe:	2a09      	cmp	r2, #9
 8003bc0:	d903      	bls.n	8003bca <_svfiprintf_r+0x1a6>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0c6      	beq.n	8003b54 <_svfiprintf_r+0x130>
 8003bc6:	9105      	str	r1, [sp, #20]
 8003bc8:	e7c4      	b.n	8003b54 <_svfiprintf_r+0x130>
 8003bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bce:	4604      	mov	r4, r0
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e7f0      	b.n	8003bb6 <_svfiprintf_r+0x192>
 8003bd4:	ab03      	add	r3, sp, #12
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <_svfiprintf_r+0x1f0>)
 8003bdc:	a904      	add	r1, sp, #16
 8003bde:	4638      	mov	r0, r7
 8003be0:	f3af 8000 	nop.w
 8003be4:	1c42      	adds	r2, r0, #1
 8003be6:	4606      	mov	r6, r0
 8003be8:	d1d6      	bne.n	8003b98 <_svfiprintf_r+0x174>
 8003bea:	89ab      	ldrh	r3, [r5, #12]
 8003bec:	065b      	lsls	r3, r3, #25
 8003bee:	f53f af2d 	bmi.w	8003a4c <_svfiprintf_r+0x28>
 8003bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bf4:	e72c      	b.n	8003a50 <_svfiprintf_r+0x2c>
 8003bf6:	ab03      	add	r3, sp, #12
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <_svfiprintf_r+0x1f0>)
 8003bfe:	a904      	add	r1, sp, #16
 8003c00:	4638      	mov	r0, r7
 8003c02:	f000 f879 	bl	8003cf8 <_printf_i>
 8003c06:	e7ed      	b.n	8003be4 <_svfiprintf_r+0x1c0>
 8003c08:	08004048 	.word	0x08004048
 8003c0c:	08004052 	.word	0x08004052
 8003c10:	00000000 	.word	0x00000000
 8003c14:	0800396d 	.word	0x0800396d
 8003c18:	0800404e 	.word	0x0800404e

08003c1c <_printf_common>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	4616      	mov	r6, r2
 8003c22:	4698      	mov	r8, r3
 8003c24:	688a      	ldr	r2, [r1, #8]
 8003c26:	690b      	ldr	r3, [r1, #16]
 8003c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bfb8      	it	lt
 8003c30:	4613      	movlt	r3, r2
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c38:	4607      	mov	r7, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	b10a      	cbz	r2, 8003c42 <_printf_common+0x26>
 8003c3e:	3301      	adds	r3, #1
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	0699      	lsls	r1, r3, #26
 8003c46:	bf42      	ittt	mi
 8003c48:	6833      	ldrmi	r3, [r6, #0]
 8003c4a:	3302      	addmi	r3, #2
 8003c4c:	6033      	strmi	r3, [r6, #0]
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	f015 0506 	ands.w	r5, r5, #6
 8003c54:	d106      	bne.n	8003c64 <_printf_common+0x48>
 8003c56:	f104 0a19 	add.w	sl, r4, #25
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	6832      	ldr	r2, [r6, #0]
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	dc26      	bgt.n	8003cb2 <_printf_common+0x96>
 8003c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	3b00      	subs	r3, #0
 8003c6c:	bf18      	it	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	0692      	lsls	r2, r2, #26
 8003c72:	d42b      	bmi.n	8003ccc <_printf_common+0xb0>
 8003c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c78:	4641      	mov	r1, r8
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c8      	blx	r9
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d01e      	beq.n	8003cc0 <_printf_common+0xa4>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	6922      	ldr	r2, [r4, #16]
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	bf02      	ittt	eq
 8003c8e:	68e5      	ldreq	r5, [r4, #12]
 8003c90:	6833      	ldreq	r3, [r6, #0]
 8003c92:	1aed      	subeq	r5, r5, r3
 8003c94:	68a3      	ldr	r3, [r4, #8]
 8003c96:	bf0c      	ite	eq
 8003c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c9c:	2500      	movne	r5, #0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bfc4      	itt	gt
 8003ca2:	1a9b      	subgt	r3, r3, r2
 8003ca4:	18ed      	addgt	r5, r5, r3
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	341a      	adds	r4, #26
 8003caa:	42b5      	cmp	r5, r6
 8003cac:	d11a      	bne.n	8003ce4 <_printf_common+0xc8>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e008      	b.n	8003cc4 <_printf_common+0xa8>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	4638      	mov	r0, r7
 8003cba:	47c8      	blx	r9
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d103      	bne.n	8003cc8 <_printf_common+0xac>
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc8:	3501      	adds	r5, #1
 8003cca:	e7c6      	b.n	8003c5a <_printf_common+0x3e>
 8003ccc:	18e1      	adds	r1, r4, r3
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	2030      	movs	r0, #48	@ 0x30
 8003cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cd6:	4422      	add	r2, r4
 8003cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	e7c7      	b.n	8003c74 <_printf_common+0x58>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4638      	mov	r0, r7
 8003cec:	47c8      	blx	r9
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d0e6      	beq.n	8003cc0 <_printf_common+0xa4>
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7d9      	b.n	8003caa <_printf_common+0x8e>
	...

08003cf8 <_printf_i>:
 8003cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfc:	7e0f      	ldrb	r7, [r1, #24]
 8003cfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d00:	2f78      	cmp	r7, #120	@ 0x78
 8003d02:	4691      	mov	r9, r2
 8003d04:	4680      	mov	r8, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	469a      	mov	sl, r3
 8003d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d0e:	d807      	bhi.n	8003d20 <_printf_i+0x28>
 8003d10:	2f62      	cmp	r7, #98	@ 0x62
 8003d12:	d80a      	bhi.n	8003d2a <_printf_i+0x32>
 8003d14:	2f00      	cmp	r7, #0
 8003d16:	f000 80d1 	beq.w	8003ebc <_printf_i+0x1c4>
 8003d1a:	2f58      	cmp	r7, #88	@ 0x58
 8003d1c:	f000 80b8 	beq.w	8003e90 <_printf_i+0x198>
 8003d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d28:	e03a      	b.n	8003da0 <_printf_i+0xa8>
 8003d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d2e:	2b15      	cmp	r3, #21
 8003d30:	d8f6      	bhi.n	8003d20 <_printf_i+0x28>
 8003d32:	a101      	add	r1, pc, #4	@ (adr r1, 8003d38 <_printf_i+0x40>)
 8003d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003d21 	.word	0x08003d21
 8003d44:	08003d21 	.word	0x08003d21
 8003d48:	08003d21 	.word	0x08003d21
 8003d4c:	08003d21 	.word	0x08003d21
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003d21 	.word	0x08003d21
 8003d58:	08003d21 	.word	0x08003d21
 8003d5c:	08003d21 	.word	0x08003d21
 8003d60:	08003d21 	.word	0x08003d21
 8003d64:	08003ea3 	.word	0x08003ea3
 8003d68:	08003dcf 	.word	0x08003dcf
 8003d6c:	08003e5d 	.word	0x08003e5d
 8003d70:	08003d21 	.word	0x08003d21
 8003d74:	08003d21 	.word	0x08003d21
 8003d78:	08003ec5 	.word	0x08003ec5
 8003d7c:	08003d21 	.word	0x08003d21
 8003d80:	08003dcf 	.word	0x08003dcf
 8003d84:	08003d21 	.word	0x08003d21
 8003d88:	08003d21 	.word	0x08003d21
 8003d8c:	08003e65 	.word	0x08003e65
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6032      	str	r2, [r6, #0]
 8003d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003da0:	2301      	movs	r3, #1
 8003da2:	e09c      	b.n	8003ede <_printf_i+0x1e6>
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	6031      	str	r1, [r6, #0]
 8003dac:	0606      	lsls	r6, r0, #24
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0xbc>
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	e003      	b.n	8003dbc <_printf_i+0xc4>
 8003db4:	0645      	lsls	r5, r0, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0xb8>
 8003db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	da03      	bge.n	8003dc8 <_printf_i+0xd0>
 8003dc0:	232d      	movs	r3, #45	@ 0x2d
 8003dc2:	426d      	negs	r5, r5
 8003dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dc8:	4858      	ldr	r0, [pc, #352]	@ (8003f2c <_printf_i+0x234>)
 8003dca:	230a      	movs	r3, #10
 8003dcc:	e011      	b.n	8003df2 <_printf_i+0xfa>
 8003dce:	6821      	ldr	r1, [r4, #0]
 8003dd0:	6833      	ldr	r3, [r6, #0]
 8003dd2:	0608      	lsls	r0, r1, #24
 8003dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dd8:	d402      	bmi.n	8003de0 <_printf_i+0xe8>
 8003dda:	0649      	lsls	r1, r1, #25
 8003ddc:	bf48      	it	mi
 8003dde:	b2ad      	uxthmi	r5, r5
 8003de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003de2:	4852      	ldr	r0, [pc, #328]	@ (8003f2c <_printf_i+0x234>)
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	bf14      	ite	ne
 8003de8:	230a      	movne	r3, #10
 8003dea:	2308      	moveq	r3, #8
 8003dec:	2100      	movs	r1, #0
 8003dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003df2:	6866      	ldr	r6, [r4, #4]
 8003df4:	60a6      	str	r6, [r4, #8]
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	db05      	blt.n	8003e06 <_printf_i+0x10e>
 8003dfa:	6821      	ldr	r1, [r4, #0]
 8003dfc:	432e      	orrs	r6, r5
 8003dfe:	f021 0104 	bic.w	r1, r1, #4
 8003e02:	6021      	str	r1, [r4, #0]
 8003e04:	d04b      	beq.n	8003e9e <_printf_i+0x1a6>
 8003e06:	4616      	mov	r6, r2
 8003e08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e10:	5dc7      	ldrb	r7, [r0, r7]
 8003e12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e16:	462f      	mov	r7, r5
 8003e18:	42bb      	cmp	r3, r7
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	d9f4      	bls.n	8003e08 <_printf_i+0x110>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d10b      	bne.n	8003e3a <_printf_i+0x142>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	07df      	lsls	r7, r3, #31
 8003e26:	d508      	bpl.n	8003e3a <_printf_i+0x142>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	6861      	ldr	r1, [r4, #4]
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	bfde      	ittt	le
 8003e30:	2330      	movle	r3, #48	@ 0x30
 8003e32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e36:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e3a:	1b92      	subs	r2, r2, r6
 8003e3c:	6122      	str	r2, [r4, #16]
 8003e3e:	f8cd a000 	str.w	sl, [sp]
 8003e42:	464b      	mov	r3, r9
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	4621      	mov	r1, r4
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f7ff fee7 	bl	8003c1c <_printf_common>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d14a      	bne.n	8003ee8 <_printf_i+0x1f0>
 8003e52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e56:	b004      	add	sp, #16
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	4832      	ldr	r0, [pc, #200]	@ (8003f30 <_printf_i+0x238>)
 8003e66:	2778      	movs	r7, #120	@ 0x78
 8003e68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	6831      	ldr	r1, [r6, #0]
 8003e70:	061f      	lsls	r7, r3, #24
 8003e72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e76:	d402      	bmi.n	8003e7e <_printf_i+0x186>
 8003e78:	065f      	lsls	r7, r3, #25
 8003e7a:	bf48      	it	mi
 8003e7c:	b2ad      	uxthmi	r5, r5
 8003e7e:	6031      	str	r1, [r6, #0]
 8003e80:	07d9      	lsls	r1, r3, #31
 8003e82:	bf44      	itt	mi
 8003e84:	f043 0320 	orrmi.w	r3, r3, #32
 8003e88:	6023      	strmi	r3, [r4, #0]
 8003e8a:	b11d      	cbz	r5, 8003e94 <_printf_i+0x19c>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	e7ad      	b.n	8003dec <_printf_i+0xf4>
 8003e90:	4826      	ldr	r0, [pc, #152]	@ (8003f2c <_printf_i+0x234>)
 8003e92:	e7e9      	b.n	8003e68 <_printf_i+0x170>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f023 0320 	bic.w	r3, r3, #32
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	e7f6      	b.n	8003e8c <_printf_i+0x194>
 8003e9e:	4616      	mov	r6, r2
 8003ea0:	e7bd      	b.n	8003e1e <_printf_i+0x126>
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	6961      	ldr	r1, [r4, #20]
 8003ea8:	1d18      	adds	r0, r3, #4
 8003eaa:	6030      	str	r0, [r6, #0]
 8003eac:	062e      	lsls	r6, r5, #24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	d501      	bpl.n	8003eb6 <_printf_i+0x1be>
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <_printf_i+0x1c4>
 8003eb6:	0668      	lsls	r0, r5, #25
 8003eb8:	d5fb      	bpl.n	8003eb2 <_printf_i+0x1ba>
 8003eba:	8019      	strh	r1, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	e7bc      	b.n	8003e3e <_printf_i+0x146>
 8003ec4:	6833      	ldr	r3, [r6, #0]
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	6032      	str	r2, [r6, #0]
 8003eca:	681e      	ldr	r6, [r3, #0]
 8003ecc:	6862      	ldr	r2, [r4, #4]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7fc f985 	bl	80001e0 <memchr>
 8003ed6:	b108      	cbz	r0, 8003edc <_printf_i+0x1e4>
 8003ed8:	1b80      	subs	r0, r0, r6
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ee6:	e7aa      	b.n	8003e3e <_printf_i+0x146>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	4632      	mov	r2, r6
 8003eec:	4649      	mov	r1, r9
 8003eee:	4640      	mov	r0, r8
 8003ef0:	47d0      	blx	sl
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0ad      	beq.n	8003e52 <_printf_i+0x15a>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d413      	bmi.n	8003f24 <_printf_i+0x22c>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e7a6      	b.n	8003e56 <_printf_i+0x15e>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4640      	mov	r0, r8
 8003f10:	47d0      	blx	sl
 8003f12:	3001      	adds	r0, #1
 8003f14:	d09d      	beq.n	8003e52 <_printf_i+0x15a>
 8003f16:	3501      	adds	r5, #1
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	9903      	ldr	r1, [sp, #12]
 8003f1c:	1a5b      	subs	r3, r3, r1
 8003f1e:	42ab      	cmp	r3, r5
 8003f20:	dcf2      	bgt.n	8003f08 <_printf_i+0x210>
 8003f22:	e7eb      	b.n	8003efc <_printf_i+0x204>
 8003f24:	2500      	movs	r5, #0
 8003f26:	f104 0619 	add.w	r6, r4, #25
 8003f2a:	e7f5      	b.n	8003f18 <_printf_i+0x220>
 8003f2c:	08004059 	.word	0x08004059
 8003f30:	0800406a 	.word	0x0800406a

08003f34 <memmove>:
 8003f34:	4288      	cmp	r0, r1
 8003f36:	b510      	push	{r4, lr}
 8003f38:	eb01 0402 	add.w	r4, r1, r2
 8003f3c:	d902      	bls.n	8003f44 <memmove+0x10>
 8003f3e:	4284      	cmp	r4, r0
 8003f40:	4623      	mov	r3, r4
 8003f42:	d807      	bhi.n	8003f54 <memmove+0x20>
 8003f44:	1e43      	subs	r3, r0, #1
 8003f46:	42a1      	cmp	r1, r4
 8003f48:	d008      	beq.n	8003f5c <memmove+0x28>
 8003f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f52:	e7f8      	b.n	8003f46 <memmove+0x12>
 8003f54:	4402      	add	r2, r0
 8003f56:	4601      	mov	r1, r0
 8003f58:	428a      	cmp	r2, r1
 8003f5a:	d100      	bne.n	8003f5e <memmove+0x2a>
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f66:	e7f7      	b.n	8003f58 <memmove+0x24>

08003f68 <_sbrk_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4d06      	ldr	r5, [pc, #24]	@ (8003f84 <_sbrk_r+0x1c>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fc fd38 	bl	80009e8 <_sbrk>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_sbrk_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_sbrk_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000294 	.word	0x20000294

08003f88 <memcpy>:
 8003f88:	440a      	add	r2, r1
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f90:	d100      	bne.n	8003f94 <memcpy+0xc>
 8003f92:	4770      	bx	lr
 8003f94:	b510      	push	{r4, lr}
 8003f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f9e:	4291      	cmp	r1, r2
 8003fa0:	d1f9      	bne.n	8003f96 <memcpy+0xe>
 8003fa2:	bd10      	pop	{r4, pc}

08003fa4 <_realloc_r>:
 8003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	4607      	mov	r7, r0
 8003faa:	4614      	mov	r4, r2
 8003fac:	460d      	mov	r5, r1
 8003fae:	b921      	cbnz	r1, 8003fba <_realloc_r+0x16>
 8003fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	f7ff bc4d 	b.w	8003854 <_malloc_r>
 8003fba:	b92a      	cbnz	r2, 8003fc8 <_realloc_r+0x24>
 8003fbc:	f7ff fbde 	bl	800377c <_free_r>
 8003fc0:	4625      	mov	r5, r4
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc8:	f000 f81a 	bl	8004000 <_malloc_usable_size_r>
 8003fcc:	4284      	cmp	r4, r0
 8003fce:	4606      	mov	r6, r0
 8003fd0:	d802      	bhi.n	8003fd8 <_realloc_r+0x34>
 8003fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fd6:	d8f4      	bhi.n	8003fc2 <_realloc_r+0x1e>
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff fc3a 	bl	8003854 <_malloc_r>
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	b908      	cbnz	r0, 8003fe8 <_realloc_r+0x44>
 8003fe4:	4645      	mov	r5, r8
 8003fe6:	e7ec      	b.n	8003fc2 <_realloc_r+0x1e>
 8003fe8:	42b4      	cmp	r4, r6
 8003fea:	4622      	mov	r2, r4
 8003fec:	4629      	mov	r1, r5
 8003fee:	bf28      	it	cs
 8003ff0:	4632      	movcs	r2, r6
 8003ff2:	f7ff ffc9 	bl	8003f88 <memcpy>
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f7ff fbbf 	bl	800377c <_free_r>
 8003ffe:	e7f1      	b.n	8003fe4 <_realloc_r+0x40>

08004000 <_malloc_usable_size_r>:
 8004000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004004:	1f18      	subs	r0, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	bfbc      	itt	lt
 800400a:	580b      	ldrlt	r3, [r1, r0]
 800400c:	18c0      	addlt	r0, r0, r3
 800400e:	4770      	bx	lr

08004010 <_init>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr

0800401c <_fini>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr
