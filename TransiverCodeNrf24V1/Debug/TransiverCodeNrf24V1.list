
TransiverCodeNrf24V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003044  08003044  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800304c  0800304c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003054  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003060  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003060  00005124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcae  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d12  00000000  00000000  00012cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00014a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c4  00000000  00000000  00015558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018e4  00000000  00000000  00015e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce8c  00000000  00000000  00017700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7eed  00000000  00000000  0002458c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  0010c4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002fec 	.word	0x08002fec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002fec 	.word	0x08002fec

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fa9b 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f808 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8da 	bl	8000708 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000554:	f000 f850 	bl	80005f8 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000558:	f000 f898 	bl	800068c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x18>

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	@ 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fd10 	bl	8002f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fdbc 	bl	8001100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	@ 0x55
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fe56 	bl	8001268 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 f925 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f954 	bl	800188c <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 f911 	bl	8000810 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 80005fe:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000602:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000604:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000606:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800061c:	220c      	movs	r2, #12
 800061e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800063a:	f001 fe3c 	bl	80022b6 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000644:	f000 f8e4 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800064c:	f002 fbd8 	bl	8002e00 <HAL_UARTEx_SetTxFifoThreshold>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000656:	f000 f8db 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065a:	2100      	movs	r1, #0
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800065e:	f002 fc0d 	bl	8002e7c <HAL_UARTEx_SetRxFifoThreshold>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000668:	f000 f8d2 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_LPUART1_UART_Init+0x88>)
 800066e:	f002 fb8e 	bl	8002d8e <HAL_UARTEx_DisableFifoMode>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000678:	f000 f8ca 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40008000 	.word	0x40008000
 8000688:	00033324 	.word	0x00033324

0800068c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_SPI2_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <MX_SPI2_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_SPI2_Init+0x74>)
 8000698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006da:	2207      	movs	r2, #7
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_SPI2_Init+0x74>)
 80006ec:	f001 fd38 	bl	8002160 <HAL_SPI_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 f88b 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000bc 	.word	0x200000bc
 8000704:	40003800 	.word	0x40003800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a39      	ldr	r2, [pc, #228]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b37      	ldr	r3, [pc, #220]	@ (8000808 <MX_GPIO_Init+0x100>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a33      	ldr	r2, [pc, #204]	@ (8000808 <MX_GPIO_Init+0x100>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b31      	ldr	r3, [pc, #196]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <MX_GPIO_Init+0x100>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <MX_GPIO_Init+0x100>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_GPIO_Init+0x100>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000788:	f000 fc7e 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	481e      	ldr	r0, [pc, #120]	@ (800080c <MX_GPIO_Init+0x104>)
 8000792:	f000 fc79 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	@ (800080c <MX_GPIO_Init+0x104>)
 80007ae:	f000 fae9 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF24_CSN_Pin;
 80007b2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ce:	f000 fad9 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80007d2:	2380      	movs	r3, #128	@ 0x80
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <MX_GPIO_Init+0x104>)
 80007ea:	f000 facb 	bl	8000d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2028      	movs	r0, #40	@ 0x28
 80007f4:	f000 fa91 	bl	8000d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f8:	2028      	movs	r0, #40	@ 0x28
 80007fa:	f000 faa8 	bl	8000d4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	@ 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	@ 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000852:	f000 fcf9 	bl	8001248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09e      	sub	sp, #120	@ 0x78
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2254      	movs	r2, #84	@ 0x54
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fb85 	bl	8002f94 <memset>
  if(huart->Instance==LPUART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1f      	ldr	r2, [pc, #124]	@ (800090c <HAL_UART_MspInit+0xa8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d136      	bne.n	8000902 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000894:	2320      	movs	r3, #32
 8000896:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fa0f 	bl	8001cc4 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ac:	f7ff ffb0 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008b4:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <HAL_UART_MspInit+0xac>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008e0:	230c      	movs	r3, #12
 80008e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008f0:	230c      	movs	r3, #12
 80008f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fe:	f000 fa41 	bl	8000d84 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000902:	bf00      	nop
 8000904:	3778      	adds	r7, #120	@ 0x78
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40008000 	.word	0x40008000
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <HAL_SPI_MspInit+0x7c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d128      	bne.n	8000988 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_SPI_MspInit+0x80>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000966:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000978:	2305      	movs	r3, #5
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_SPI_MspInit+0x84>)
 8000984:	f000 f9fe 	bl	8000d84 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40003800 	.word	0x40003800
 8000994:	40021000 	.word	0x40021000
 8000998:	48000400 	.word	0x48000400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f2:	f000 f899 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a02:	f000 fb59 	bl	80010b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a34:	f7ff ffea 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f002 faa1 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fd6f 	bl	8000544 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a74:	08003054 	.word	0x08003054
  ldr r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a7c:	20000124 	.word	0x20000124

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>

08000a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f939 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f80e 	bl	8000ab4 <HAL_InitTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	e001      	b.n	8000aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa4:	f7ff feba 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_InitTick+0x68>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d022      	beq.n	8000b0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_InitTick+0x6c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <HAL_InitTick+0x68>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f944 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10f      	bne.n	8000b08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	d809      	bhi.n	8000b02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aee:	2200      	movs	r2, #0
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af6:	f000 f910 	bl	8000d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_InitTick+0x70>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e007      	b.n	8000b12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e004      	b.n	8000b12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e001      	b.n	8000b12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	20000120 	.word	0x20000120
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000120 	.word	0x20000120

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff29 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff40 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff90 	bl	8000c58 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5f 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff33 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa4 	bl	8000cc0 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d92:	e15a      	b.n	800104a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 814c 	beq.w	8001044 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d017      	beq.n	8000e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d123      	bne.n	8000eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	6939      	ldr	r1, [r7, #16]
 8000eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0203 	and.w	r2, r3, #3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80a6 	beq.w	8001044 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8001068 <HAL_GPIO_Init+0x2e4>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efc:	4a5a      	ldr	r2, [pc, #360]	@ (8001068 <HAL_GPIO_Init+0x2e4>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f04:	4b58      	ldr	r3, [pc, #352]	@ (8001068 <HAL_GPIO_Init+0x2e4>)
 8000f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f10:	4a56      	ldr	r2, [pc, #344]	@ (800106c <HAL_GPIO_Init+0x2e8>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f3a:	d01f      	beq.n	8000f7c <HAL_GPIO_Init+0x1f8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001070 <HAL_GPIO_Init+0x2ec>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d019      	beq.n	8000f78 <HAL_GPIO_Init+0x1f4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4b      	ldr	r2, [pc, #300]	@ (8001074 <HAL_GPIO_Init+0x2f0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_GPIO_Init+0x1f0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001078 <HAL_GPIO_Init+0x2f4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00d      	beq.n	8000f70 <HAL_GPIO_Init+0x1ec>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a49      	ldr	r2, [pc, #292]	@ (800107c <HAL_GPIO_Init+0x2f8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x1e8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a48      	ldr	r2, [pc, #288]	@ (8001080 <HAL_GPIO_Init+0x2fc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_GPIO_Init+0x1e4>
 8000f64:	2305      	movs	r3, #5
 8000f66:	e00a      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f68:	2306      	movs	r3, #6
 8000f6a:	e008      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1fa>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8e:	4937      	ldr	r1, [pc, #220]	@ (800106c <HAL_GPIO_Init+0x2e8>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc0:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fea:	4a26      	ldr	r2, [pc, #152]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001014:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_GPIO_Init+0x300>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_GPIO_Init+0x300>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f ae9d 	bne.w	8000d94 <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48001000 	.word	0x48001000
 8001080:	48001400 	.word	0x48001400
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f806 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d141      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800110e:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111a:	d131      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800111c:	4b47      	ldr	r3, [pc, #284]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001122:	4a46      	ldr	r2, [pc, #280]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	4b43      	ldr	r3, [pc, #268]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001134:	4a41      	ldr	r2, [pc, #260]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2232      	movs	r2, #50	@ 0x32
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9b      	lsrs	r3, r3, #18
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001152:	e002      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3b01      	subs	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115a:	4b38      	ldr	r3, [pc, #224]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d102      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f2      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117a:	d158      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e057      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001186:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800118c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001190:	e04d      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001198:	d141      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a6:	d131      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c0:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2232      	movs	r2, #50	@ 0x32
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011de:	e002      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f2:	d102      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f2      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001206:	d112      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e011      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800121c:	e007      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001256:	6093      	str	r3, [r2, #8]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40007000 	.word	0x40007000

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e2fe      	b.n	8001878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d075      	beq.n	8001372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	4b97      	ldr	r3, [pc, #604]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001290:	4b94      	ldr	r3, [pc, #592]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3e>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_OscConfig+0x44>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d10b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b8d      	ldr	r3, [pc, #564]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d05b      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d157      	bne.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e2d9      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x74>
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a84      	ldr	r2, [pc, #528]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b7f      	ldr	r3, [pc, #508]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7e      	ldr	r2, [pc, #504]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b7c      	ldr	r3, [pc, #496]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7b      	ldr	r2, [pc, #492]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 8001300:	4b78      	ldr	r3, [pc, #480]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a77      	ldr	r2, [pc, #476]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b75      	ldr	r3, [pc, #468]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a74      	ldr	r2, [pc, #464]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fc14 	bl	8000b4c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc10 	bl	8000b4c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e29e      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xc0>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc00 	bl	8000b4c <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fbfc 	bl	8000b4c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e28a      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	4b60      	ldr	r3, [pc, #384]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0xe8>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800137e:	4b59      	ldr	r3, [pc, #356]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001388:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x136>
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d002      	beq.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d11f      	bne.n	80013e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x154>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e25d      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b49      	ldr	r3, [pc, #292]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4946      	ldr	r1, [pc, #280]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d0:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_RCC_OscConfig+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fb6d 	bl	8000ab4 <HAL_InitTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d043      	beq.n	8001468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e249      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d023      	beq.n	8001434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a3c      	ldr	r2, [pc, #240]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fba8 	bl	8000b4c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fba4 	bl	8000b4c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e232      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	061b      	lsls	r3, r3, #24
 800142c:	492d      	ldr	r1, [pc, #180]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e01a      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a2a      	ldr	r2, [pc, #168]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800143a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb84 	bl	8000b4c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fb80 	bl	8000b4c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e20e      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1e0>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d041      	beq.n	80014fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001484:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148e:	f7ff fb5d 	bl	8000b4c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001496:	f7ff fb59 	bl	8000b4c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1e7      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ef      	beq.n	8001496 <HAL_RCC_OscConfig+0x22e>
 80014b6:	e020      	b.n	80014fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb40 	bl	8000b4c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ce:	e00d      	b.n	80014ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb3c 	bl	8000b4c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d906      	bls.n	80014ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1ca      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80014ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ea      	bne.n	80014d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80a6 	beq.w	8001654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800150c:	4b84      	ldr	r3, [pc, #528]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x2b4>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x2b6>
 800151c:	2300      	movs	r3, #0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00d      	beq.n	800153e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	4a7e      	ldr	r2, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	@ 0x58
 800152e:	4b7c      	ldr	r3, [pc, #496]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	4b79      	ldr	r3, [pc, #484]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154a:	4b76      	ldr	r3, [pc, #472]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a75      	ldr	r2, [pc, #468]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff faf9 	bl	8000b4c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff faf5 	bl	8000b4c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e183      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001570:	4b6c      	ldr	r3, [pc, #432]	@ (8001724 <HAL_RCC_OscConfig+0x4bc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_RCC_OscConfig+0x32e>
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a65      	ldr	r2, [pc, #404]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	e024      	b.n	80015e0 <HAL_RCC_OscConfig+0x378>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d110      	bne.n	80015c0 <HAL_RCC_OscConfig+0x358>
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x378>
 80015c0:	4b57      	ldr	r3, [pc, #348]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d016      	beq.n	8001616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fab0 	bl	8000b4c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff faac 	bl	8000b4c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e138      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001606:	4b46      	ldr	r3, [pc, #280]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ed      	beq.n	80015f0 <HAL_RCC_OscConfig+0x388>
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fa99 	bl	8000b4c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fa95 	bl	8000b4c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e121      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001634:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ed      	bne.n	800161e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001642:	7ffb      	ldrb	r3, [r7, #31]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03c      	beq.n	80016da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800166e:	4a2c      	ldr	r2, [pc, #176]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fa68 	bl	8000b4c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001680:	f7ff fa64 	bl	8000b4c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0f2      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ef      	beq.n	8001680 <HAL_RCC_OscConfig+0x418>
 80016a0:	e01b      	b.n	80016da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa4b 	bl	8000b4c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ba:	f7ff fa47 	bl	8000b4c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0d5      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80c9 	beq.w	8001876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	f000 8083 	beq.w	80017f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d15e      	bne.n	80017b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fa21 	bl	8000b4c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170c:	e00c      	b.n	8001728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fa1d 	bl	8000b4c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d905      	bls.n	8001728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0ab      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b55      	ldr	r3, [pc, #340]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b52      	ldr	r3, [pc, #328]	@ (8001884 <HAL_RCC_OscConfig+0x61c>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6a11      	ldr	r1, [r2, #32]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001744:	3a01      	subs	r2, #1
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800174e:	0212      	lsls	r2, r2, #8
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	0552      	lsls	r2, r2, #21
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	3a01      	subs	r2, #1
 8001766:	0652      	lsls	r2, r2, #25
 8001768:	4311      	orrs	r1, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800176e:	06d2      	lsls	r2, r2, #27
 8001770:	430a      	orrs	r2, r1
 8001772:	4943      	ldr	r1, [pc, #268]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b41      	ldr	r3, [pc, #260]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001784:	4b3e      	ldr	r3, [pc, #248]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800178e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff f9dc 	bl	8000b4c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f9d8 	bl	8000b4c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e066      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x530>
 80017b6:	e05e      	b.n	8001876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9c2 	bl	8000b4c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f9be 	bl	8000b4c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04c      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017ea:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	4924      	ldr	r1, [pc, #144]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_RCC_OscConfig+0x620>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]
 80017f6:	e03e      	b.n	8001876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e039      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCC_OscConfig+0x618>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d12c      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d123      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d11b      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d113      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	019f800c 	.word	0x019f800c
 8001888:	feeefffc 	.word	0xfeeefffc

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e11e      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b91      	ldr	r3, [pc, #580]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b8e      	ldr	r3, [pc, #568]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	498c      	ldr	r1, [pc, #560]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e106      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d073      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d129      	bne.n	800193c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b81      	ldr	r3, [pc, #516]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0f4      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018f8:	f000 f99e 	bl	8001c38 <RCC_GetSysClockFreqFromPLLSource>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a7c      	ldr	r2, [pc, #496]	@ (8001af4 <HAL_RCC_ClockConfig+0x268>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d93f      	bls.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001906:	4b7a      	ldr	r3, [pc, #488]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800191a:	2b00      	cmp	r3, #0
 800191c:	d033      	beq.n	8001986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12f      	bne.n	8001986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800192e:	4a70      	ldr	r2, [pc, #448]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e024      	b.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d107      	bne.n	8001954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001944:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0c6      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0be      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001964:	f000 f8ce 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4a61      	ldr	r2, [pc, #388]	@ (8001af4 <HAL_RCC_ClockConfig+0x268>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d909      	bls.n	8001986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800197a:	4a5d      	ldr	r2, [pc, #372]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b5a      	ldr	r3, [pc, #360]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4957      	ldr	r1, [pc, #348]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001998:	f7ff f8d8 	bl	8000b4c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f8d4 	bl	8000b4c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e095      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b4e      	ldr	r3, [pc, #312]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a42      	ldr	r2, [pc, #264]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019f8:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a00:	4a3b      	ldr	r2, [pc, #236]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4936      	ldr	r1, [pc, #216]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b80      	cmp	r3, #128	@ 0x80
 8001a20:	d105      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4a32      	ldr	r2, [pc, #200]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d21d      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 020f 	bic.w	r2, r3, #15
 8001a44:	4929      	ldr	r1, [pc, #164]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f87e 	bl	8000b4c <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f87a 	bl	8000b4c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e03b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ed      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4917      	ldr	r1, [pc, #92]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490f      	ldr	r1, [pc, #60]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab6:	f000 f825 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <HAL_RCC_ClockConfig+0x26c>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_RCC_ClockConfig+0x270>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe ffea 	bl	8000ab4 <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	04c4b400 	.word	0x04c4b400
 8001af8:	08003004 	.word	0x08003004
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e047      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e03e      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d136      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b58:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b62:	68d2      	ldr	r2, [r2, #12]
 8001b64:	0a12      	lsrs	r2, r2, #8
 8001b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
      break;
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	0a12      	lsrs	r2, r2, #8
 8001b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
      break;
 8001b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0e5b      	lsrs	r3, r3, #25
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e001      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bac:	693b      	ldr	r3, [r7, #16]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	016e3600 	.word	0x016e3600

08001bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000000 	.word	0x20000000

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4904      	ldr	r1, [pc, #16]	@ (8001c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08003014 	.word	0x08003014

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c10:	f7ff ffda 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08003014 	.word	0x08003014

08001c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d10c      	bne.n	8001c76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c66:	68d2      	ldr	r2, [r2, #12]
 8001c68:	0a12      	lsrs	r2, r2, #8
 8001c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
    break;
 8001c74:	e00c      	b.n	8001c90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c80:	68d2      	ldr	r2, [r2, #12]
 8001c82:	0a12      	lsrs	r2, r2, #8
 8001c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    break;
 8001c8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0e5b      	lsrs	r3, r3, #25
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	016e3600 	.word	0x016e3600
 8001cc0:	00f42400 	.word	0x00f42400

08001cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ccc:	2300      	movs	r3, #0
 8001cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8098 	beq.w	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b40      	ldr	r3, [pc, #256]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a39      	ldr	r2, [pc, #228]	@ (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d1a:	f7fe ff17 	bl	8000b4c <HAL_GetTick>
 8001d1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d20:	e009      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe ff13 	bl	8000b4c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d902      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	74fb      	strb	r3, [r7, #19]
        break;
 8001d34:	e005      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d36:	4b30      	ldr	r3, [pc, #192]	@ (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ef      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d159      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01e      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d019      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d76:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d90:	4a18      	ldr	r2, [pc, #96]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe fed3 	bl	8000b4c <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe fecf 	bl	8000b4c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d902      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001dc0:	e006      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ec      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10b      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de4:	4903      	ldr	r1, [pc, #12]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001dec:	e008      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	74bb      	strb	r3, [r7, #18]
 8001df2:	e005      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e00:	7c7b      	ldrb	r3, [r7, #17]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e06:	4ba7      	ldr	r3, [pc, #668]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	4aa6      	ldr	r2, [pc, #664]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e24:	f023 0203 	bic.w	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	499d      	ldr	r1, [pc, #628]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e40:	4b98      	ldr	r3, [pc, #608]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e46:	f023 020c 	bic.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4995      	ldr	r1, [pc, #596]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e62:	4b90      	ldr	r3, [pc, #576]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	498c      	ldr	r1, [pc, #560]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e84:	4b87      	ldr	r3, [pc, #540]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4984      	ldr	r1, [pc, #528]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	497b      	ldr	r1, [pc, #492]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ec8:	4b76      	ldr	r3, [pc, #472]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4973      	ldr	r1, [pc, #460]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eea:	4b6e      	ldr	r3, [pc, #440]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	496a      	ldr	r1, [pc, #424]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f0c:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4962      	ldr	r1, [pc, #392]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	4959      	ldr	r1, [pc, #356]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f50:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	4951      	ldr	r1, [pc, #324]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f72:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	4948      	ldr	r1, [pc, #288]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f94:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4940      	ldr	r1, [pc, #256]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fcc:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	4932      	ldr	r1, [pc, #200]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002004:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	4924      	ldr	r1, [pc, #144]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002022:	d105      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800202e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204a:	4916      	ldr	r1, [pc, #88]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800205a:	d105      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002066:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4908      	ldr	r1, [pc, #32]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002092:	d109      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a02      	ldr	r2, [pc, #8]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800209e:	60d3      	str	r3, [r2, #12]
 80020a0:	e002      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4926      	ldr	r1, [pc, #152]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020d2:	d105      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a20      	ldr	r2, [pc, #128]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d015      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	4918      	ldr	r1, [pc, #96]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210a:	d105      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002116:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800212a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002150:	7cbb      	ldrb	r3, [r7, #18]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e09d      	b.n	80022ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002182:	d009      	beq.n	8002198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
 800218a:	e005      	b.n	8002198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fbae 	bl	8000914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021d8:	d902      	bls.n	80021e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e002      	b.n	80021e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80021ee:	d007      	beq.n	8002200 <HAL_SPI_Init+0xa0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	ea42 0103 	orr.w	r1, r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	f003 0204 	and.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e042      	b.n	800234e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fac2 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	@ 0x24
 80022e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fb25 	bl	8002950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f826 	bl	8002358 <UART_SetConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e01b      	b.n	800234e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002324:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002334:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fba4 	bl	8002a94 <UART_CheckIdleState>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b08c      	sub	sp, #48	@ 0x30
 800235e:	af00      	add	r7, sp, #0
 8002360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	431a      	orrs	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4313      	orrs	r3, r2
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4baa      	ldr	r3, [pc, #680]	@ (8002630 <UART_SetConfig+0x2d8>)
 8002388:	4013      	ands	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002390:	430b      	orrs	r3, r1
 8002392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a9f      	ldr	r2, [pc, #636]	@ (8002634 <UART_SetConfig+0x2dc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c0:	4313      	orrs	r3, r2
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80023ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	f023 010f 	bic.w	r1, r3, #15
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a90      	ldr	r2, [pc, #576]	@ (8002638 <UART_SetConfig+0x2e0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d125      	bne.n	8002448 <UART_SetConfig+0xf0>
 80023fc:	4b8f      	ldr	r3, [pc, #572]	@ (800263c <UART_SetConfig+0x2e4>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d81a      	bhi.n	8002440 <UART_SetConfig+0xe8>
 800240a:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <UART_SetConfig+0xb8>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002421 	.word	0x08002421
 8002414:	08002431 	.word	0x08002431
 8002418:	08002429 	.word	0x08002429
 800241c:	08002439 	.word	0x08002439
 8002420:	2301      	movs	r3, #1
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002426:	e116      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002428:	2302      	movs	r3, #2
 800242a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800242e:	e112      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002430:	2304      	movs	r3, #4
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002436:	e10e      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002438:	2308      	movs	r3, #8
 800243a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800243e:	e10a      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002440:	2310      	movs	r3, #16
 8002442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002446:	e106      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a7c      	ldr	r2, [pc, #496]	@ (8002640 <UART_SetConfig+0x2e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d138      	bne.n	80024c4 <UART_SetConfig+0x16c>
 8002452:	4b7a      	ldr	r3, [pc, #488]	@ (800263c <UART_SetConfig+0x2e4>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d82d      	bhi.n	80024bc <UART_SetConfig+0x164>
 8002460:	a201      	add	r2, pc, #4	@ (adr r2, 8002468 <UART_SetConfig+0x110>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800249d 	.word	0x0800249d
 800246c:	080024bd 	.word	0x080024bd
 8002470:	080024bd 	.word	0x080024bd
 8002474:	080024bd 	.word	0x080024bd
 8002478:	080024ad 	.word	0x080024ad
 800247c:	080024bd 	.word	0x080024bd
 8002480:	080024bd 	.word	0x080024bd
 8002484:	080024bd 	.word	0x080024bd
 8002488:	080024a5 	.word	0x080024a5
 800248c:	080024bd 	.word	0x080024bd
 8002490:	080024bd 	.word	0x080024bd
 8002494:	080024bd 	.word	0x080024bd
 8002498:	080024b5 	.word	0x080024b5
 800249c:	2300      	movs	r3, #0
 800249e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024a2:	e0d8      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024a4:	2302      	movs	r3, #2
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024aa:	e0d4      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024ac:	2304      	movs	r3, #4
 80024ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b2:	e0d0      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024b4:	2308      	movs	r3, #8
 80024b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ba:	e0cc      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024bc:	2310      	movs	r3, #16
 80024be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c2:	e0c8      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002644 <UART_SetConfig+0x2ec>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d125      	bne.n	800251a <UART_SetConfig+0x1c2>
 80024ce:	4b5b      	ldr	r3, [pc, #364]	@ (800263c <UART_SetConfig+0x2e4>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024d8:	2b30      	cmp	r3, #48	@ 0x30
 80024da:	d016      	beq.n	800250a <UART_SetConfig+0x1b2>
 80024dc:	2b30      	cmp	r3, #48	@ 0x30
 80024de:	d818      	bhi.n	8002512 <UART_SetConfig+0x1ba>
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d00a      	beq.n	80024fa <UART_SetConfig+0x1a2>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d814      	bhi.n	8002512 <UART_SetConfig+0x1ba>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <UART_SetConfig+0x19a>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d008      	beq.n	8002502 <UART_SetConfig+0x1aa>
 80024f0:	e00f      	b.n	8002512 <UART_SetConfig+0x1ba>
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024f8:	e0ad      	b.n	8002656 <UART_SetConfig+0x2fe>
 80024fa:	2302      	movs	r3, #2
 80024fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002500:	e0a9      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002502:	2304      	movs	r3, #4
 8002504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002508:	e0a5      	b.n	8002656 <UART_SetConfig+0x2fe>
 800250a:	2308      	movs	r3, #8
 800250c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002510:	e0a1      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002512:	2310      	movs	r3, #16
 8002514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002518:	e09d      	b.n	8002656 <UART_SetConfig+0x2fe>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a4a      	ldr	r2, [pc, #296]	@ (8002648 <UART_SetConfig+0x2f0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d125      	bne.n	8002570 <UART_SetConfig+0x218>
 8002524:	4b45      	ldr	r3, [pc, #276]	@ (800263c <UART_SetConfig+0x2e4>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800252e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002530:	d016      	beq.n	8002560 <UART_SetConfig+0x208>
 8002532:	2bc0      	cmp	r3, #192	@ 0xc0
 8002534:	d818      	bhi.n	8002568 <UART_SetConfig+0x210>
 8002536:	2b80      	cmp	r3, #128	@ 0x80
 8002538:	d00a      	beq.n	8002550 <UART_SetConfig+0x1f8>
 800253a:	2b80      	cmp	r3, #128	@ 0x80
 800253c:	d814      	bhi.n	8002568 <UART_SetConfig+0x210>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <UART_SetConfig+0x1f0>
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d008      	beq.n	8002558 <UART_SetConfig+0x200>
 8002546:	e00f      	b.n	8002568 <UART_SetConfig+0x210>
 8002548:	2300      	movs	r3, #0
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800254e:	e082      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002550:	2302      	movs	r3, #2
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002556:	e07e      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002558:	2304      	movs	r3, #4
 800255a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800255e:	e07a      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002560:	2308      	movs	r3, #8
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002566:	e076      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002568:	2310      	movs	r3, #16
 800256a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800256e:	e072      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a35      	ldr	r2, [pc, #212]	@ (800264c <UART_SetConfig+0x2f4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12a      	bne.n	80025d0 <UART_SetConfig+0x278>
 800257a:	4b30      	ldr	r3, [pc, #192]	@ (800263c <UART_SetConfig+0x2e4>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002588:	d01a      	beq.n	80025c0 <UART_SetConfig+0x268>
 800258a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800258e:	d81b      	bhi.n	80025c8 <UART_SetConfig+0x270>
 8002590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002594:	d00c      	beq.n	80025b0 <UART_SetConfig+0x258>
 8002596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800259a:	d815      	bhi.n	80025c8 <UART_SetConfig+0x270>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <UART_SetConfig+0x250>
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a4:	d008      	beq.n	80025b8 <UART_SetConfig+0x260>
 80025a6:	e00f      	b.n	80025c8 <UART_SetConfig+0x270>
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ae:	e052      	b.n	8002656 <UART_SetConfig+0x2fe>
 80025b0:	2302      	movs	r3, #2
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025b6:	e04e      	b.n	8002656 <UART_SetConfig+0x2fe>
 80025b8:	2304      	movs	r3, #4
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025be:	e04a      	b.n	8002656 <UART_SetConfig+0x2fe>
 80025c0:	2308      	movs	r3, #8
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025c6:	e046      	b.n	8002656 <UART_SetConfig+0x2fe>
 80025c8:	2310      	movs	r3, #16
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ce:	e042      	b.n	8002656 <UART_SetConfig+0x2fe>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <UART_SetConfig+0x2dc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d13a      	bne.n	8002650 <UART_SetConfig+0x2f8>
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <UART_SetConfig+0x2e4>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80025e8:	d01a      	beq.n	8002620 <UART_SetConfig+0x2c8>
 80025ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80025ee:	d81b      	bhi.n	8002628 <UART_SetConfig+0x2d0>
 80025f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f4:	d00c      	beq.n	8002610 <UART_SetConfig+0x2b8>
 80025f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025fa:	d815      	bhi.n	8002628 <UART_SetConfig+0x2d0>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <UART_SetConfig+0x2b0>
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002604:	d008      	beq.n	8002618 <UART_SetConfig+0x2c0>
 8002606:	e00f      	b.n	8002628 <UART_SetConfig+0x2d0>
 8002608:	2300      	movs	r3, #0
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800260e:	e022      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002610:	2302      	movs	r3, #2
 8002612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002616:	e01e      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002618:	2304      	movs	r3, #4
 800261a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800261e:	e01a      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002620:	2308      	movs	r3, #8
 8002622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002626:	e016      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002628:	2310      	movs	r3, #16
 800262a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800262e:	e012      	b.n	8002656 <UART_SetConfig+0x2fe>
 8002630:	cfff69f3 	.word	0xcfff69f3
 8002634:	40008000 	.word	0x40008000
 8002638:	40013800 	.word	0x40013800
 800263c:	40021000 	.word	0x40021000
 8002640:	40004400 	.word	0x40004400
 8002644:	40004800 	.word	0x40004800
 8002648:	40004c00 	.word	0x40004c00
 800264c:	40005000 	.word	0x40005000
 8002650:	2310      	movs	r3, #16
 8002652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4aae      	ldr	r2, [pc, #696]	@ (8002914 <UART_SetConfig+0x5bc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	f040 8097 	bne.w	8002790 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002662:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002666:	2b08      	cmp	r3, #8
 8002668:	d823      	bhi.n	80026b2 <UART_SetConfig+0x35a>
 800266a:	a201      	add	r2, pc, #4	@ (adr r2, 8002670 <UART_SetConfig+0x318>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002695 	.word	0x08002695
 8002674:	080026b3 	.word	0x080026b3
 8002678:	0800269d 	.word	0x0800269d
 800267c:	080026b3 	.word	0x080026b3
 8002680:	080026a3 	.word	0x080026a3
 8002684:	080026b3 	.word	0x080026b3
 8002688:	080026b3 	.word	0x080026b3
 800268c:	080026b3 	.word	0x080026b3
 8002690:	080026ab 	.word	0x080026ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002694:	f7ff faa4 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800269a:	e010      	b.n	80026be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800269c:	4b9e      	ldr	r3, [pc, #632]	@ (8002918 <UART_SetConfig+0x5c0>)
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026a0:	e00d      	b.n	80026be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a2:	f7ff fa2f 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 80026a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80026a8:	e009      	b.n	80026be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80026b0:	e005      	b.n	80026be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80026bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8130 	beq.w	8002926 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	4a94      	ldr	r2, [pc, #592]	@ (800291c <UART_SetConfig+0x5c4>)
 80026cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026d0:	461a      	mov	r2, r3
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d305      	bcc.n	80026f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d903      	bls.n	80026fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026fc:	e113      	b.n	8002926 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	2200      	movs	r2, #0
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	60fa      	str	r2, [r7, #12]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	4a84      	ldr	r2, [pc, #528]	@ (800291c <UART_SetConfig+0x5c4>)
 800270c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002710:	b29b      	uxth	r3, r3
 8002712:	2200      	movs	r2, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002720:	f7fd fd7a 	bl	8000218 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	020b      	lsls	r3, r1, #8
 8002736:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800273a:	0202      	lsls	r2, r0, #8
 800273c:	6979      	ldr	r1, [r7, #20]
 800273e:	6849      	ldr	r1, [r1, #4]
 8002740:	0849      	lsrs	r1, r1, #1
 8002742:	2000      	movs	r0, #0
 8002744:	460c      	mov	r4, r1
 8002746:	4605      	mov	r5, r0
 8002748:	eb12 0804 	adds.w	r8, r2, r4
 800274c:	eb43 0905 	adc.w	r9, r3, r5
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	469a      	mov	sl, r3
 8002758:	4693      	mov	fp, r2
 800275a:	4652      	mov	r2, sl
 800275c:	465b      	mov	r3, fp
 800275e:	4640      	mov	r0, r8
 8002760:	4649      	mov	r1, r9
 8002762:	f7fd fd59 	bl	8000218 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4613      	mov	r3, r2
 800276c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002774:	d308      	bcc.n	8002788 <UART_SetConfig+0x430>
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800277c:	d204      	bcs.n	8002788 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	e0ce      	b.n	8002926 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800278e:	e0ca      	b.n	8002926 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002798:	d166      	bne.n	8002868 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800279a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d827      	bhi.n	80027f2 <UART_SetConfig+0x49a>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <UART_SetConfig+0x450>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	080027e3 	.word	0x080027e3
 80027bc:	080027f3 	.word	0x080027f3
 80027c0:	080027f3 	.word	0x080027f3
 80027c4:	080027f3 	.word	0x080027f3
 80027c8:	080027eb 	.word	0x080027eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff fa08 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027d2:	e014      	b.n	80027fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d4:	f7ff fa1a 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 80027d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027da:	e010      	b.n	80027fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002918 <UART_SetConfig+0x5c0>)
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027e0:	e00d      	b.n	80027fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e2:	f7ff f98f 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027e8:	e009      	b.n	80027fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027f0:	e005      	b.n	80027fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80027fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8090 	beq.w	8002926 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	4a44      	ldr	r2, [pc, #272]	@ (800291c <UART_SetConfig+0x5c4>)
 800280c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002810:	461a      	mov	r2, r3
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	fbb3 f3f2 	udiv	r3, r3, r2
 8002818:	005a      	lsls	r2, r3, #1
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	441a      	add	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	d916      	bls.n	8002860 <UART_SetConfig+0x508>
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002838:	d212      	bcs.n	8002860 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f023 030f 	bic.w	r3, r3, #15
 8002842:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	b29a      	uxth	r2, r3
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	4313      	orrs	r3, r2
 8002854:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	8bfa      	ldrh	r2, [r7, #30]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e062      	b.n	8002926 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002866:	e05e      	b.n	8002926 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002868:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800286c:	2b08      	cmp	r3, #8
 800286e:	d828      	bhi.n	80028c2 <UART_SetConfig+0x56a>
 8002870:	a201      	add	r2, pc, #4	@ (adr r2, 8002878 <UART_SetConfig+0x520>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	0800289d 	.word	0x0800289d
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028ad 	.word	0x080028ad
 8002884:	080028c3 	.word	0x080028c3
 8002888:	080028b3 	.word	0x080028b3
 800288c:	080028c3 	.word	0x080028c3
 8002890:	080028c3 	.word	0x080028c3
 8002894:	080028c3 	.word	0x080028c3
 8002898:	080028bb 	.word	0x080028bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800289c:	f7ff f9a0 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028a2:	e014      	b.n	80028ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff f9b2 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 80028a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028aa:	e010      	b.n	80028ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <UART_SetConfig+0x5c0>)
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028b0:	e00d      	b.n	80028ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b2:	f7ff f927 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 80028b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028b8:	e009      	b.n	80028ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028c0:	e005      	b.n	80028ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80028cc:	bf00      	nop
    }

    if (pclk != 0U)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d028      	beq.n	8002926 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	4a10      	ldr	r2, [pc, #64]	@ (800291c <UART_SetConfig+0x5c4>)
 80028da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028de:	461a      	mov	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	441a      	add	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	d910      	bls.n	8002920 <UART_SetConfig+0x5c8>
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002904:	d20c      	bcs.n	8002920 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	e009      	b.n	8002926 <UART_SetConfig+0x5ce>
 8002912:	bf00      	nop
 8002914:	40008000 	.word	0x40008000
 8002918:	00f42400 	.word	0x00f42400
 800291c:	0800301c 	.word	0x0800301c
      }
      else
      {
        ret = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2201      	movs	r2, #1
 800292a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2201      	movs	r2, #1
 8002932:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002942:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002946:	4618      	mov	r0, r3
 8002948:	3730      	adds	r7, #48	@ 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01a      	beq.n	8002a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4e:	d10a      	bne.n	8002a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b098      	sub	sp, #96	@ 0x60
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa4:	f7fe f852 	bl	8000b4c <HAL_GetTick>
 8002aa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d12f      	bne.n	8002b18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f88e 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d022      	beq.n	8002b18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e6      	bne.n	8002ad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e063      	b.n	8002be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d149      	bne.n	8002bba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f857 	bl	8002be8 <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03c      	beq.n	8002bba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e6      	bne.n	8002b40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3308      	adds	r3, #8
 8002b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3308      	adds	r3, #8
 8002b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e5      	bne.n	8002b72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e012      	b.n	8002be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3758      	adds	r7, #88	@ 0x58
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	e04f      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c00:	d04b      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fd ffa3 	bl	8000b4c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e04e      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d037      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b80      	cmp	r3, #128	@ 0x80
 8002c2e:	d034      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d031      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d110      	bne.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f838 	bl	8002cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2208      	movs	r2, #8
 8002c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e029      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c74:	d111      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f81e 	bl	8002cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0a0      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b095      	sub	sp, #84	@ 0x54
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e6      	bne.n	8002cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d28:	e841 2300 	strex	r3, r2, [r1]
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e3      	bne.n	8002cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d118      	bne.n	8002d6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 0310 	bic.w	r3, r3, #16
 8002d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	613b      	str	r3, [r7, #16]
   return(result);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e6      	bne.n	8002d3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d82:	bf00      	nop
 8002d84:	3754      	adds	r7, #84	@ 0x54
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e027      	b.n	8002df4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	@ 0x24
 8002db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002dd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e02d      	b.n	8002e74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f84f 	bl	8002ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e02d      	b.n	8002ef0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	@ 0x24
 8002ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f811 	bl	8002ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f18:	e031      	b.n	8002f7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f1e:	2308      	movs	r3, #8
 8002f20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	0e5b      	lsrs	r3, r3, #25
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	0f5b      	lsrs	r3, r3, #29
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f42:	7bbb      	ldrb	r3, [r7, #14]
 8002f44:	7b3a      	ldrb	r2, [r7, #12]
 8002f46:	4911      	ldr	r1, [pc, #68]	@ (8002f8c <UARTEx_SetNbDataToProcess+0x94>)
 8002f48:	5c8a      	ldrb	r2, [r1, r2]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f4e:	7b3a      	ldrb	r2, [r7, #12]
 8002f50:	490f      	ldr	r1, [pc, #60]	@ (8002f90 <UARTEx_SetNbDataToProcess+0x98>)
 8002f52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	7b7a      	ldrb	r2, [r7, #13]
 8002f64:	4909      	ldr	r1, [pc, #36]	@ (8002f8c <UARTEx_SetNbDataToProcess+0x94>)
 8002f66:	5c8a      	ldrb	r2, [r1, r2]
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f6c:	7b7a      	ldrb	r2, [r7, #13]
 8002f6e:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <UARTEx_SetNbDataToProcess+0x98>)
 8002f70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	08003034 	.word	0x08003034
 8002f90:	0800303c 	.word	0x0800303c

08002f94 <memset>:
 8002f94:	4402      	add	r2, r0
 8002f96:	4603      	mov	r3, r0
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <memset+0xa>
 8002f9c:	4770      	bx	lr
 8002f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa2:	e7f9      	b.n	8002f98 <memset+0x4>

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8002fdc <__libc_init_array+0x38>)
 8002fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe0 <__libc_init_array+0x3c>)
 8002faa:	1b64      	subs	r4, r4, r5
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	2600      	movs	r6, #0
 8002fb0:	42a6      	cmp	r6, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe4 <__libc_init_array+0x40>)
 8002fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002fe8 <__libc_init_array+0x44>)
 8002fb8:	f000 f818 	bl	8002fec <_init>
 8002fbc:	1b64      	subs	r4, r4, r5
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	42a6      	cmp	r6, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fcc:	4798      	blx	r3
 8002fce:	3601      	adds	r6, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd6:	4798      	blx	r3
 8002fd8:	3601      	adds	r6, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	0800304c 	.word	0x0800304c
 8002fe0:	0800304c 	.word	0x0800304c
 8002fe4:	0800304c 	.word	0x0800304c
 8002fe8:	08003050 	.word	0x08003050

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
