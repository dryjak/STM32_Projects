
TransiverCodeNrf24V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f14  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080040ec  080040ec  000050ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  00006034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004134  08004134  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00005134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004138  08004138  00005138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0800413c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000034  08004170  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004170  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e979  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f17  00000000  00000000  000149dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000168f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091b  00000000  00000000  000174c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002485f  00000000  00000000  00017de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6cc  00000000  00000000  0003c642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8286  00000000  00000000  00049d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131f94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  00131fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00135018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040d4 	.word	0x080040d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	080040d4 	.word	0x080040d4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <CS_Select>:
//extern SPI_HandleTypeDef hspi2;



void CS_Select(NRF24_t *NRF24_Module)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CSN_Port, NRF24_Module->NRF24CSN_Pin, GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68d8      	ldr	r0, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	8a1b      	ldrh	r3, [r3, #16]
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	f000 ff68 	bl	800142c <HAL_GPIO_WritePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <CS_Unselect>:

void CS_Unselect(NRF24_t *NRF24_Module)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CSN_Port, NRF24_Module->NRF24CSN_Pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68d8      	ldr	r0, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8a1b      	ldrh	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f000 ff58 	bl	800142c <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <CE_Enable>:
void CE_Enable(NRF24_t *NRF24_Module)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CE_Port, NRF24_Module->NRF24CE_Pin, GPIO_PIN_SET);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6858      	ldr	r0, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	891b      	ldrh	r3, [r3, #8]
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	f000 ff48 	bl	800142c <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <CE_Disable>:
void CE_Disable(NRF24_t *NRF24_Module)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CE_Port, NRF24_Module->NRF24CE_Pin, GPIO_PIN_RESET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	2200      	movs	r2, #0
 80005b6:	4619      	mov	r1, r3
 80005b8:	f000 ff38 	bl	800142c <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Nrf24_WriteMultiRegister>:
}
*/

//write multiple bytes to a particular register
void Nrf24_WriteMultiRegister(NRF24_t *NRF24_Module, uint8_t Register, uint8_t *Data, uint8_t Size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	461a      	mov	r2, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	72fb      	strb	r3, [r7, #11]
 80005d4:	4613      	mov	r3, r2
 80005d6:	72bb      	strb	r3, [r7, #10]
	uint8_t buff[2];
	buff[0] = Register | 1 << 5;
 80005d8:	7afb      	ldrb	r3, [r7, #11]
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	753b      	strb	r3, [r7, #20]
	//buff[1] = Data;

	//Pull cs pin low to select the device
	CS_Select(NRF24_Module);
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f7ff ffae 	bl	8000544 <CS_Select>

	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, buff, 1, 1000);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 0114 	add.w	r1, r7, #20
 80005f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f4:	2201      	movs	r2, #1
 80005f6:	f002 f84a 	bl	800268e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, Data, Size, 1000);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f002 f841 	bl	800268e <HAL_SPI_Transmit>

	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f7ff ffa9 	bl	8000564 <CS_Unselect>

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <Nrf24_WriteRegister>:


void Nrf24_WriteRegister(NRF24_t *NRF24_Module, uint8_t reg, uint8_t data)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
 8000626:	4613      	mov	r3, r2
 8000628:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = W_REGISTER | (REGISTER_MASK & reg);
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 031f 	and.w	r3, r3, #31
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	b2db      	uxtb	r3, r3
 8000638:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 800063a:	78bb      	ldrb	r3, [r7, #2]
 800063c:	737b      	strb	r3, [r7, #13]

	CS_Select(NRF24_Module);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff80 	bl	8000544 <CS_Select>
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, buff, 2, 1000);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	f107 010c 	add.w	r1, r7, #12
 800064c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000650:	2202      	movs	r2, #2
 8000652:	f002 f81c 	bl	800268e <HAL_SPI_Transmit>
	CS_Unselect(NRF24_Module);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ff84 	bl	8000564 <CS_Unselect>
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Nrf24_ReadRegister>:
	return Data;
}
*/

uint8_t Nrf24_ReadRegister(NRF24_t *NRF24_Module, uint8_t reg)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = R_REGISTER | (REGISTER_MASK & reg);
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	f003 031f 	and.w	r3, r3, #31
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]

	CS_Select(NRF24_Module);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ff60 	bl	8000544 <CS_Select>
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &cmd, 1, 1000);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 010e 	add.w	r1, r7, #14
 800068c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000690:	2201      	movs	r2, #1
 8000692:	f001 fffc 	bl	800268e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_Module->NRF24_SPI, &data, 1, 1000);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 010f 	add.w	r1, r7, #15
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	2201      	movs	r2, #1
 80006a4:	f002 f969 	bl	800297a <HAL_SPI_Receive>
	CS_Unselect(NRF24_Module);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff5b 	bl	8000564 <CS_Unselect>

	return data;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Nrf24_SendCommand>:
	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
}

void Nrf24_SendCommand(NRF24_t *NRF24_Module, uint8_t Cmd)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
		//Pull cs pin low to select the device
		CS_Select(NRF24_Module);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff3d 	bl	8000544 <CS_Select>

		HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &Cmd, 1, 1000);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	1cf9      	adds	r1, r7, #3
 80006d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d4:	2201      	movs	r2, #1
 80006d6:	f001 ffda 	bl	800268e <HAL_SPI_Transmit>

		//Pull cs pin high to release the device
		CS_Unselect(NRF24_Module);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ff42 	bl	8000564 <CS_Unselect>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Nrf24_InitNRF24>:

void Nrf24_InitNRF24(NRF24_t *NRF24_Module, GPIO_TypeDef *NRF24CE_Port, uint16_t NRF24CE_Pin, GPIO_TypeDef *NRF24CSN_Port, uint16_t NRF24CSN_Pin, SPI_HandleTypeDef *hspi)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	80fb      	strh	r3, [r7, #6]
	NRF24_Module->NRF24_SPI = hspi;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	601a      	str	r2, [r3, #0]

	NRF24_Module->NRF24CE_Port = NRF24CE_Port;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	605a      	str	r2, [r3, #4]
	NRF24_Module->NRF24CE_Pin = NRF24CE_Pin;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	811a      	strh	r2, [r3, #8]

	NRF24_Module->NRF24CSN_Port = NRF24CSN_Port;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	60da      	str	r2, [r3, #12]
	NRF24_Module->NRF24CSN_Pin = NRF24CSN_Pin;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	8b3a      	ldrh	r2, [r7, #24]
 8000714:	821a      	strh	r2, [r3, #16]

	//dissable the chip before cofiguring the device
	CE_Disable(NRF24_Module);
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff44 	bl	80005a4 <CE_Disable>
	//CS_Unselect(NRF24_Module);

	Nrf24_WriteRegister(NRF24_Module, CONFIG, 0);			//will be configured later
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff ff7a 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, EN_AA, 0);			//No auto ack
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff ff75 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, EN_RXADDR, 0);		//Nt enabling any data pipe now
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f7ff ff70 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, SETUP_AW, 0x03);		//5 bytes for the tx / rx address
 800073a:	2203      	movs	r2, #3
 800073c:	2103      	movs	r1, #3
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff6b 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, SETUP_RETR, 0x00);	//no Automatic Retransmission
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f7ff ff66 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, RF_CH, 0x00);			//will be setup with rx or tx
 800074e:	2200      	movs	r2, #0
 8000750:	2105      	movs	r1, #5
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f7ff ff61 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, RF_SETUP, 0x0E);		//Power = 0dB, dataRate = 2Mbps
 8000758:	220e      	movs	r2, #14
 800075a:	2106      	movs	r1, #6
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ff5c 	bl	800061a <Nrf24_WriteRegister>

	//enabling the chip after configuration
	CE_Enable(NRF24_Module);
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ff0e 	bl	8000584 <CE_Enable>
	//CS_Select(NRF24_Module);
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <Nrf24_TxMode>:

//Set up the TX mode
void Nrf24_TxMode(NRF24_t *NRF24_Module, uint8_t *Address, uint8_t channel)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	4613      	mov	r3, r2
 800077c:	71fb      	strb	r3, [r7, #7]
	//disable the chip before configuring the device
	CE_Disable(NRF24_Module);
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff10 	bl	80005a4 <CE_Disable>
	//CS_Unselect(NRF24_Module);

	Nrf24_WriteRegister(NRF24_Module, RF_CH, channel);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	461a      	mov	r2, r3
 8000788:	2105      	movs	r1, #5
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f7ff ff45 	bl	800061a <Nrf24_WriteRegister>
	Nrf24_WriteMultiRegister(NRF24_Module, TX_ADDR, Address, 5);	//write the transmit adress
 8000790:	2305      	movs	r3, #5
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	2110      	movs	r1, #16
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff14 	bl	80005c4 <Nrf24_WriteMultiRegister>

	uint8_t Config = Nrf24_ReadRegister(NRF24_Module, CONFIG);
 800079c:	2100      	movs	r1, #0
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff ff60 	bl	8000664 <Nrf24_ReadRegister>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75fb      	strb	r3, [r7, #23]
	Config = Config | (1<<1);
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	75fb      	strb	r3, [r7, #23]
	//Config = Config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	Nrf24_WriteRegister(NRF24_Module, CONFIG, Config);
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f7ff ff2f 	bl	800061a <Nrf24_WriteRegister>

	//enabling the chip after configuration
	CE_Enable(NRF24_Module);
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff fee1 	bl	8000584 <CE_Enable>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Nrf24_Transmit>:

uint8_t Nrf24_Transmit(NRF24_t *NRF24_Module, uint8_t *Data)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
	uint8_t CommandToSend = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]

	//select the device
	CS_Select(NRF24_Module);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff feb3 	bl	8000544 <CS_Select>

	//payload command
	CommandToSend = W_TX_PAYLOAD;
 80007de:	23a0      	movs	r3, #160	@ 0xa0
 80007e0:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &CommandToSend, 1, 100);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	f107 010e 	add.w	r1, r7, #14
 80007ea:	2364      	movs	r3, #100	@ 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	f001 ff4e 	bl	800268e <HAL_SPI_Transmit>
	//send the payload
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, Data, 32, 1000);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fa:	2220      	movs	r2, #32
 80007fc:	6839      	ldr	r1, [r7, #0]
 80007fe:	f001 ff46 	bl	800268e <HAL_SPI_Transmit>

	//Unselect the device
	CS_Unselect(NRF24_Module);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff feae 	bl	8000564 <CS_Unselect>

	HAL_Delay(1);
 8000808:	2001      	movs	r0, #1
 800080a:	f000 fb5b 	bl	8000ec4 <HAL_Delay>

	uint8_t FifoStatus = Nrf24_ReadRegister(NRF24_Module, FIFO_STATUS);
 800080e:	2117      	movs	r1, #23
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff27 	bl	8000664 <Nrf24_ReadRegister>
 8000816:	4603      	mov	r3, r0
 8000818:	73fb      	strb	r3, [r7, #15]

	if((FifoStatus & (1<<4)) && (!(FifoStatus & (1<<3))))
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00d      	beq.n	8000840 <Nrf24_Transmit+0x76>
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d108      	bne.n	8000840 <Nrf24_Transmit+0x76>
	{
		CommandToSend = FLUSH_TX;
 800082e:	23e1      	movs	r3, #225	@ 0xe1
 8000830:	73bb      	strb	r3, [r7, #14]
		Nrf24_SendCommand(NRF24_Module, CommandToSend);
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff3e 	bl	80006b8 <Nrf24_SendCommand>


		return 1;
 800083c:	2301      	movs	r3, #1
 800083e:	e000      	b.n	8000842 <Nrf24_Transmit+0x78>
	}

	return 0;
 8000840:	2300      	movs	r3, #0


}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fac6 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f833 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f905 	bl	8000a68 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800085e:	f000 f87b 	bl	8000958 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000862:	f000 f8c3 	bl	80009ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  Nrf24_InitNRF24(&NRF24, NRF24_CE_GPIO_Port, NRF24_CE_Pin, NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, &hspi2);
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <main+0x60>)
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	490e      	ldr	r1, [pc, #56]	@ (80008b0 <main+0x64>)
 8000878:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <main+0x68>)
 800087a:	f7ff ff35 	bl	80006e8 <Nrf24_InitNRF24>

  Nrf24_TxMode(&NRF24, TxAddress, 10);
 800087e:	220a      	movs	r2, #10
 8000880:	490d      	ldr	r1, [pc, #52]	@ (80008b8 <main+0x6c>)
 8000882:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <main+0x68>)
 8000884:	f7ff ff74 	bl	8000770 <Nrf24_TxMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Nrf24_Transmit(&NRF24, Data) == 1)
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <main+0x70>)
 800088a:	480a      	ldr	r0, [pc, #40]	@ (80008b4 <main+0x68>)
 800088c:	f7ff ff9d 	bl	80007ca <Nrf24_Transmit>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d104      	bne.n	80008a0 <main+0x54>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000896:	2120      	movs	r1, #32
 8000898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089c:	f000 fdde 	bl	800145c <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a4:	f000 fb0e 	bl	8000ec4 <HAL_Delay>
	  if(Nrf24_Transmit(&NRF24, Data) == 1)
 80008a8:	e7ee      	b.n	8000888 <main+0x3c>
 80008aa:	bf00      	nop
 80008ac:	200000e4 	.word	0x200000e4
 80008b0:	48000800 	.word	0x48000800
 80008b4:	20000148 	.word	0x20000148
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	@ 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	2238      	movs	r2, #56	@ 0x38
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 fbd4 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 fdf8 	bl	80014d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f2:	2340      	movs	r3, #64	@ 0x40
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000902:	2355      	movs	r3, #85	@ 0x55
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fe92 	bl	8001640 <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000922:	f000 f925 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2104      	movs	r1, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f990 	bl	8001c64 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800094a:	f000 f911 	bl	8000b70 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800095c:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 800095e:	4a21      	ldr	r2, [pc, #132]	@ (80009e4 <MX_LPUART1_UART_Init+0x8c>)
 8000960:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000964:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <MX_LPUART1_UART_Init+0x90>)
 8000966:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 800097c:	220c      	movs	r2, #12
 800097e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 800099a:	f002 fd01 	bl	80033a0 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80009a4:	f000 f8e4 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 80009ac:	f003 fa9c 	bl	8003ee8 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80009b6:	f000 f8db 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 80009be:	f003 fad1 	bl	8003f64 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80009c8:	f000 f8d2 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_LPUART1_UART_Init+0x88>)
 80009ce:	f003 fa52 	bl	8003e76 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80009d8:	f000 f8ca 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000050 	.word	0x20000050
 80009e4:	40008000 	.word	0x40008000
 80009e8:	00033324 	.word	0x00033324

080009ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_SPI2_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <MX_SPI2_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_SPI2_Init+0x74>)
 80009f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a22:	2220      	movs	r2, #32
 8000a24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a46:	2208      	movs	r2, #8
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_SPI2_Init+0x74>)
 8000a4c:	f001 fd74 	bl	8002538 <HAL_SPI_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f88b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000e4 	.word	0x200000e4
 8000a64:	40003800 	.word	0x40003800

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	4a39      	ldr	r2, [pc, #228]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a27      	ldr	r2, [pc, #156]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b25      	ldr	r3, [pc, #148]	@ (8000b68 <MX_GPIO_Init+0x100>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f000 fca0 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <MX_GPIO_Init+0x104>)
 8000af2:	f000 fc9b 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <MX_GPIO_Init+0x104>)
 8000b0e:	f000 fb0b 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF24_CSN_Pin;
 8000b12:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2e:	f000 fafb 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <MX_GPIO_Init+0x104>)
 8000b4a:	f000 faed 	bl	8001128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2028      	movs	r0, #40	@ 0x28
 8000b54:	f000 fab3 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	@ 0x28
 8000b5a:	f000 faca 	bl	80010f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <Error_Handler+0x8>

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bb2:	f000 fd35 	bl	8001620 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09e      	sub	sp, #120	@ 0x78
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2254      	movs	r2, #84	@ 0x54
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fa49 	bl	800407c <memset>
  if(huart->Instance==LPUART1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	@ (8000c6c <HAL_UART_MspInit+0xa8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d136      	bne.n	8000c62 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fa4b 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff ffb0 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c14:	4a16      	ldr	r2, [pc, #88]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2c:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_UART_MspInit+0xac>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c50:	230c      	movs	r3, #12
 8000c52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f000 fa63 	bl	8001128 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3778      	adds	r7, #120	@ 0x78
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40008000 	.word	0x40008000
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_SPI_MspInit+0x7c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d128      	bne.n	8000ce8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_SPI_MspInit+0x80>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <HAL_SPI_MspInit+0x84>)
 8000ce4:	f000 fa20 	bl	8001128 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	@ 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40003800 	.word	0x40003800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f899 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d5e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d62:	f000 fb95 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f003 f965 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fd43 	bl	800084c <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000dd4:	0800413c 	.word	0x0800413c
  ldr r2, =_sbss
 8000dd8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ddc:	20000160 	.word	0x20000160

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f95b 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff feba 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <HAL_InitTick+0x68>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d022      	beq.n	8000e6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_InitTick+0x6c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_InitTick+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f966 	bl	800110e <HAL_SYSTICK_Config>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10f      	bne.n	8000e68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d809      	bhi.n	8000e62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e56:	f000 f932 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_InitTick+0x70>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e004      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000030 	.word	0x20000030
 8000e80:	20000028 	.word	0x20000028
 8000e84:	2000002c 	.word	0x2000002c

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	@ (8000ea4 <HAL_IncTick+0x1c>)
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	2000015c 	.word	0x2000015c
 8000ea8:	20000030 	.word	0x20000030

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000015c 	.word	0x2000015c

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000edc:	d004      	beq.n	8000ee8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_Delay+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee8:	bf00      	nop
 8000eea:	f7ff ffdf 	bl	8000eac <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d8f7      	bhi.n	8000eea <HAL_Delay+0x26>
  {
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000030 	.word	0x20000030

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	@ (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	@ 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff40 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff33 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa4 	bl	8001064 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001136:	e15a      	b.n	80013ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 814c 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d017      	beq.n	8001206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	6939      	ldr	r1, [r7, #16]
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80a6 	beq.w	80013e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a0:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a8:	4b58      	ldr	r3, [pc, #352]	@ (800140c <HAL_GPIO_Init+0x2e4>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b4:	4a56      	ldr	r2, [pc, #344]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012de:	d01f      	beq.n	8001320 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x2ec>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d019      	beq.n	800131c <HAL_GPIO_Init+0x1f4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x2f0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	@ (800141c <HAL_GPIO_Init+0x2f4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <HAL_GPIO_Init+0x2f8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a48      	ldr	r2, [pc, #288]	@ (8001424 <HAL_GPIO_Init+0x2fc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e4>
 8001308:	2305      	movs	r3, #5
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800130c:	2306      	movs	r3, #6
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	@ (8001410 <HAL_GPIO_Init+0x2e8>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001364:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136a:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_GPIO_Init+0x300>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138e:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_GPIO_Init+0x300>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e2:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <HAL_GPIO_Init+0x300>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae9d 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e002      	b.n	8001450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43d9      	mvns	r1, r3
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f806 	bl	80014c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d141      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f2:	d131      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f4:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014fa:	4a46      	ldr	r2, [pc, #280]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001500:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800150c:	4a41      	ldr	r2, [pc, #260]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001514:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2232      	movs	r2, #50	@ 0x32
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	3301      	adds	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152a:	e002      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3b01      	subs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001532:	4b38      	ldr	r3, [pc, #224]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800153e:	d102      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f2      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001552:	d158      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e057      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155e:	4a2d      	ldr	r2, [pc, #180]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001568:	e04d      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001570:	d141      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157e:	d131      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001586:	4a23      	ldr	r2, [pc, #140]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001598:	4a1e      	ldr	r2, [pc, #120]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2232      	movs	r2, #50	@ 0x32
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	e002      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ca:	d102      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f2      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015de:	d112      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e011      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015f4:	e007      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001604:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40007000 	.word	0x40007000
 8001618:	20000028 	.word	0x20000028
 800161c:	431bde83 	.word	0x431bde83

08001620 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162e:	6093      	str	r3, [r2, #8]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2fe      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d075      	beq.n	800174a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b97      	ldr	r3, [pc, #604]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4b94      	ldr	r3, [pc, #592]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0x3e>
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d002      	beq.n	8001684 <HAL_RCC_OscConfig+0x44>
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d10b      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b8d      	ldr	r3, [pc, #564]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d05b      	beq.n	8001748 <HAL_RCC_OscConfig+0x108>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d157      	bne.n	8001748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e2d9      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x74>
 80016a6:	4b85      	ldr	r3, [pc, #532]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a84      	ldr	r2, [pc, #528]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x98>
 80016be:	4b7f      	ldr	r3, [pc, #508]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7e      	ldr	r2, [pc, #504]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7c      	ldr	r3, [pc, #496]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7b      	ldr	r2, [pc, #492]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016d8:	4b78      	ldr	r3, [pc, #480]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a77      	ldr	r2, [pc, #476]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b75      	ldr	r3, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a74      	ldr	r2, [pc, #464]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fbd8 	bl	8000eac <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fbd4 	bl	8000eac <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	@ 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e29e      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001712:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xc0>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fbc4 	bl	8000eac <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fbc0 	bl	8000eac <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e28a      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800173a:	4b60      	ldr	r3, [pc, #384]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0xe8>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d075      	beq.n	8001842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b59      	ldr	r3, [pc, #356]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4b56      	ldr	r3, [pc, #344]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d102      	bne.n	8001776 <HAL_RCC_OscConfig+0x136>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d002      	beq.n	800177c <HAL_RCC_OscConfig+0x13c>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d11f      	bne.n	80017bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x154>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e25d      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	4946      	ldr	r1, [pc, #280]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017a8:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fb31 	bl	8000e14 <HAL_InitTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d043      	beq.n	8001840 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e249      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d023      	beq.n	800180c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a3c      	ldr	r2, [pc, #240]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb6c 	bl	8000eac <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fb68 	bl	8000eac <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e232      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	061b      	lsls	r3, r3, #24
 8001804:	492d      	ldr	r1, [pc, #180]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
 800180a:	e01a      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2a      	ldr	r2, [pc, #168]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001812:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fb48 	bl	8000eac <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fb44 	bl	8000eac <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20e      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001832:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1e0>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d041      	beq.n	80018d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01c      	beq.n	8001890 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185c:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fb21 	bl	8000eac <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fb1d 	bl	8000eac <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1e7      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ef      	beq.n	800186e <HAL_RCC_OscConfig+0x22e>
 800188e:	e020      	b.n	80018d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001896:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb04 	bl	8000eac <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a6:	e00d      	b.n	80018c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb00 	bl	8000eac <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d906      	bls.n	80018c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1ca      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	4b8c      	ldr	r3, [pc, #560]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ea      	bne.n	80018a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80a6 	beq.w	8001a2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018e4:	4b84      	ldr	r3, [pc, #528]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2b4>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x2b6>
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00d      	beq.n	8001916 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a7e      	ldr	r2, [pc, #504]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b7c      	ldr	r3, [pc, #496]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001916:	4b79      	ldr	r3, [pc, #484]	@ (8001afc <HAL_RCC_OscConfig+0x4bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001922:	4b76      	ldr	r3, [pc, #472]	@ (8001afc <HAL_RCC_OscConfig+0x4bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	@ (8001afc <HAL_RCC_OscConfig+0x4bc>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff fabd 	bl	8000eac <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff fab9 	bl	8000eac <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e183      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <HAL_RCC_OscConfig+0x4bc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_RCC_OscConfig+0x32e>
 800195c:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	4a65      	ldr	r2, [pc, #404]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800196c:	e024      	b.n	80019b8 <HAL_RCC_OscConfig+0x378>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d110      	bne.n	8001998 <HAL_RCC_OscConfig+0x358>
 8001976:	4b60      	ldr	r3, [pc, #384]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197c:	4a5e      	ldr	r2, [pc, #376]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001986:	4b5c      	ldr	r3, [pc, #368]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	4a5a      	ldr	r2, [pc, #360]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x378>
 8001998:	4b57      	ldr	r3, [pc, #348]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199e:	4a56      	ldr	r2, [pc, #344]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a8:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ae:	4a52      	ldr	r2, [pc, #328]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa74 	bl	8000eac <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa70 	bl	8000eac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e138      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ed      	beq.n	80019c8 <HAL_RCC_OscConfig+0x388>
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa5d 	bl	8000eac <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fa59 	bl	8000eac <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e121      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ed      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	4a34      	ldr	r2, [pc, #208]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d03c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a46:	4a2c      	ldr	r2, [pc, #176]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fa2c 	bl	8000eac <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a58:	f7ff fa28 	bl	8000eac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0f2      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <HAL_RCC_OscConfig+0x418>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa0f 	bl	8000eac <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a92:	f7ff fa0b 	bl	8000eac <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0d5      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ef      	bne.n	8001a92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80c9 	beq.w	8001c4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	f000 8083 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d15e      	bne.n	8001b90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_RCC_OscConfig+0x4b8>)
 8001ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9e5 	bl	8000eac <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	e00c      	b.n	8001b00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff f9e1 	bl	8000eac <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d905      	bls.n	8001b00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ab      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	4b55      	ldr	r3, [pc, #340]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ec      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b52      	ldr	r3, [pc, #328]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <HAL_RCC_OscConfig+0x61c>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6a11      	ldr	r1, [r2, #32]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b1c:	3a01      	subs	r2, #1
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	4311      	orrs	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b26:	0212      	lsls	r2, r2, #8
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b2e:	0852      	lsrs	r2, r2, #1
 8001b30:	3a01      	subs	r2, #1
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b3a:	0852      	lsrs	r2, r2, #1
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	0652      	lsls	r2, r2, #25
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b46:	06d2      	lsls	r2, r2, #27
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4943      	ldr	r1, [pc, #268]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b41      	ldr	r3, [pc, #260]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a40      	ldr	r2, [pc, #256]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a3d      	ldr	r2, [pc, #244]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9a0 	bl	8000eac <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f99c 	bl	8000eac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e066      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x530>
 8001b8e:	e05e      	b.n	8001c4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f986 	bl	8000eac <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f982 	bl	8000eac <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04c      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4924      	ldr	r1, [pc, #144]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_RCC_OscConfig+0x620>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60cb      	str	r3, [r1, #12]
 8001bce:	e03e      	b.n	8001c4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e039      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <HAL_RCC_OscConfig+0x618>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d12c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d123      	bne.n	8001c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d11b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d113      	bne.n	8001c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	019f800c 	.word	0x019f800c
 8001c60:	feeefffc 	.word	0xfeeefffc

08001c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e11e      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b91      	ldr	r3, [pc, #580]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 020f 	bic.w	r2, r3, #15
 8001c92:	498c      	ldr	r1, [pc, #560]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e106      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d073      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d129      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc0:	4b81      	ldr	r3, [pc, #516]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0f4      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cd0:	f000 f99e 	bl	8002010 <RCC_GetSysClockFreqFromPLLSource>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4a7c      	ldr	r2, [pc, #496]	@ (8001ecc <HAL_RCC_ClockConfig+0x268>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d93f      	bls.n	8001d5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cde:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d033      	beq.n	8001d5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12f      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cfe:	4b72      	ldr	r3, [pc, #456]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d06:	4a70      	ldr	r2, [pc, #448]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e024      	b.n	8001d5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0c6      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0be      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d3c:	f000 f8ce 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4a61      	ldr	r2, [pc, #388]	@ (8001ecc <HAL_RCC_ClockConfig+0x268>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d909      	bls.n	8001d5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d52:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4957      	ldr	r1, [pc, #348]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d70:	f7ff f89c 	bl	8000eac <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff f898 	bl	8000eac <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e095      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a42      	ldr	r2, [pc, #264]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b39      	ldr	r3, [pc, #228]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4936      	ldr	r1, [pc, #216]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b80      	cmp	r3, #128	@ 0x80
 8001df8:	d105      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dfa:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e06:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d21d      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 020f 	bic.w	r2, r3, #15
 8001e1c:	4929      	ldr	r1, [pc, #164]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f842 	bl	8000eac <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff f83e 	bl	8000eac <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e03b      	b.n	8001eba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1ed      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4917      	ldr	r1, [pc, #92]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490f      	ldr	r1, [pc, #60]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e8e:	f000 f825 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <HAL_RCC_ClockConfig+0x26c>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_RCC_ClockConfig+0x270>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCC_ClockConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ffae 	bl	8000e14 <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	04c4b400 	.word	0x04c4b400
 8001ed0:	080040ec 	.word	0x080040ec
 8001ed4:	20000028 	.word	0x20000028
 8001ed8:	2000002c 	.word	0x2000002c

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eee:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e047      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e03e      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d136      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3301      	adds	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f30:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3a:	68d2      	ldr	r2, [r2, #12]
 8001f3c:	0a12      	lsrs	r2, r2, #8
 8001f3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
      break;
 8001f48:	e00c      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f4a:	4a13      	ldr	r2, [pc, #76]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	0a12      	lsrs	r2, r2, #8
 8001f58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0e5b      	lsrs	r3, r3, #25
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e001      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f84:	693b      	ldr	r3, [r7, #16]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	016e3600 	.word	0x016e3600

08001fa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000028 	.word	0x20000028

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4904      	ldr	r1, [pc, #16]	@ (8001fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	080040fc 	.word	0x080040fc

08001fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe8:	f7ff ffda 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0adb      	lsrs	r3, r3, #11
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4904      	ldr	r1, [pc, #16]	@ (800200c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	080040fc 	.word	0x080040fc

08002010 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002016:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d10c      	bne.n	800204e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002034:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	4a14      	ldr	r2, [pc, #80]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800203e:	68d2      	ldr	r2, [r2, #12]
 8002040:	0a12      	lsrs	r2, r2, #8
 8002042:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
    break;
 800204c:	e00c      	b.n	8002068 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002058:	68d2      	ldr	r2, [r2, #12]
 800205a:	0a12      	lsrs	r2, r2, #8
 800205c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    break;
 8002066:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0e5b      	lsrs	r3, r3, #25
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000
 8002094:	016e3600 	.word	0x016e3600
 8002098:	00f42400 	.word	0x00f42400

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020a4:	2300      	movs	r3, #0
 80020a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a8:	2300      	movs	r3, #0
 80020aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8098 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b43      	ldr	r3, [pc, #268]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4a3f      	ldr	r2, [pc, #252]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a39      	ldr	r2, [pc, #228]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fedb 	bl	8000eac <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020f8:	e009      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe fed7 	bl	8000eac <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d902      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	74fb      	strb	r3, [r7, #19]
        break;
 800210c:	e005      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210e:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ef      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d159      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002120:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01e      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	d019      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213c:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002146:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002148:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	4a1b      	ldr	r2, [pc, #108]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002168:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7fe fe97 	bl	8000eac <HAL_GetTick>
 800217e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	e00b      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe fe93 	bl	8000eac <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d902      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	74fb      	strb	r3, [r7, #19]
            break;
 8002198:	e006      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ec      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021bc:	4903      	ldr	r1, [pc, #12]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021c4:	e008      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
 80021ca:	e005      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d8:	7c7b      	ldrb	r3, [r7, #17]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4ba7      	ldr	r3, [pc, #668]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	4aa6      	ldr	r2, [pc, #664]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f6:	4ba1      	ldr	r3, [pc, #644]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	499d      	ldr	r1, [pc, #628]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002218:	4b98      	ldr	r3, [pc, #608]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	f023 020c 	bic.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4995      	ldr	r1, [pc, #596]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223a:	4b90      	ldr	r3, [pc, #576]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002240:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	498c      	ldr	r1, [pc, #560]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800225c:	4b87      	ldr	r3, [pc, #540]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4984      	ldr	r1, [pc, #528]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227e:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	497b      	ldr	r1, [pc, #492]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a0:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	4973      	ldr	r1, [pc, #460]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c2:	4b6e      	ldr	r3, [pc, #440]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	496a      	ldr	r1, [pc, #424]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e4:	4b65      	ldr	r3, [pc, #404]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4962      	ldr	r1, [pc, #392]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	4959      	ldr	r1, [pc, #356]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002328:	4b54      	ldr	r3, [pc, #336]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	4951      	ldr	r1, [pc, #324]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800234a:	4b4c      	ldr	r3, [pc, #304]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002350:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	4948      	ldr	r1, [pc, #288]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800236c:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	4940      	ldr	r1, [pc, #256]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800238a:	d105      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b3b      	ldr	r3, [pc, #236]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a3a      	ldr	r2, [pc, #232]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002396:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023a4:	4b35      	ldr	r3, [pc, #212]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b2:	4932      	ldr	r1, [pc, #200]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ea:	4924      	ldr	r1, [pc, #144]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	4916      	ldr	r1, [pc, #88]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002432:	d105      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800243e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4908      	ldr	r1, [pc, #32]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800246a:	d109      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a02      	ldr	r2, [pc, #8]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002476:	60d3      	str	r3, [r2, #12]
 8002478:	e002      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800248c:	4b29      	ldr	r3, [pc, #164]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	4926      	ldr	r1, [pc, #152]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d2:	4918      	ldr	r1, [pc, #96]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	490a      	ldr	r1, [pc, #40]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002528:	7cbb      	ldrb	r3, [r7, #18]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e09d      	b.n	8002686 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800255a:	d009      	beq.n	8002570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
 8002562:	e005      	b.n	8002570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fb72 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025b0:	d902      	bls.n	80025b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e002      	b.n	80025be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025c6:	d007      	beq.n	80025d8 <HAL_SPI_Init+0xa0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025d0:	d002      	beq.n	80025d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	ea42 0103 	orr.w	r1, r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	f003 0204 	and.w	r2, r3, #4
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269e:	f7fe fc05 	bl	8000eac <HAL_GetTick>
 80026a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	e15c      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_SPI_Transmit+0x36>
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e154      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_SPI_Transmit+0x48>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e14d      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002728:	d10f      	bne.n	800274a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d007      	beq.n	8002768 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002770:	d952      	bls.n	8002818 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_SPI_Transmit+0xf2>
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d145      	bne.n	800280c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027a4:	e032      	b.n	800280c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d112      	bne.n	80027da <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	1c9a      	adds	r2, r3, #2
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027d8:	e018      	b.n	800280c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027da:	f7fe fb67 	bl	8000eac <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d803      	bhi.n	80027f2 <HAL_SPI_Transmit+0x164>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f0:	d102      	bne.n	80027f8 <HAL_SPI_Transmit+0x16a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0b2      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1c7      	bne.n	80027a6 <HAL_SPI_Transmit+0x118>
 8002816:	e083      	b.n	8002920 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_Transmit+0x198>
 8002820:	8b7b      	ldrh	r3, [r7, #26]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d177      	bne.n	8002916 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d912      	bls.n	8002856 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	1c9a      	adds	r2, r3, #2
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b02      	subs	r3, #2
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002854:	e05f      	b.n	8002916 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800287c:	e04b      	b.n	8002916 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d12b      	bne.n	80028e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d912      	bls.n	80028bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	1c9a      	adds	r2, r3, #2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b02      	subs	r3, #2
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028ba:	e02c      	b.n	8002916 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028e2:	e018      	b.n	8002916 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e4:	f7fe fae2 	bl	8000eac <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d803      	bhi.n	80028fc <HAL_SPI_Transmit+0x26e>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028fa:	d102      	bne.n	8002902 <HAL_SPI_Transmit+0x274>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e02d      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ae      	bne.n	800287e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fcf5 	bl	8003314 <SPI_EndRxTxTransaction>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b088      	sub	sp, #32
 800297e:	af02      	add	r7, sp, #8
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	e123      	b.n	8002be2 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_SPI_Receive+0x2c>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e11b      	b.n	8002be2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029b2:	d112      	bne.n	80029da <HAL_SPI_Receive+0x60>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2204      	movs	r2, #4
 80029c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f90a 	bl	8002bea <HAL_SPI_TransmitReceive>
 80029d6:	4603      	mov	r3, r0
 80029d8:	e103      	b.n	8002be2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029da:	f7fe fa67 	bl	8000eac <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_SPI_Receive+0x74>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e0f9      	b.n	8002be2 <HAL_SPI_Receive+0x268>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2204      	movs	r2, #4
 80029fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a40:	d908      	bls.n	8002a54 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e007      	b.n	8002a64 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a6c:	d10f      	bne.n	8002a8e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d007      	beq.n	8002aac <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ab4:	d875      	bhi.n	8002ba2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ab6:	e037      	b.n	8002b28 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d117      	bne.n	8002af6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f103 020c 	add.w	r2, r3, #12
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002af4:	e018      	b.n	8002b28 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af6:	f7fe f9d9 	bl	8000eac <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d803      	bhi.n	8002b0e <HAL_SPI_Receive+0x194>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Receive+0x19a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e05c      	b.n	8002be2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1c1      	bne.n	8002ab8 <HAL_SPI_Receive+0x13e>
 8002b34:	e03b      	b.n	8002bae <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d115      	bne.n	8002b70 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002b6e:	e018      	b.n	8002ba2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b70:	f7fe f99c 	bl	8000eac <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d803      	bhi.n	8002b88 <HAL_SPI_Receive+0x20e>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_Receive+0x214>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e01f      	b.n	8002be2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1c3      	bne.n	8002b36 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fb56 	bl	8003264 <SPI_EndRxTransaction>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	@ 0x28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bfc:	f7fe f956 	bl	8000eac <HAL_GetTick>
 8002c00:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c08:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c18:	7ffb      	ldrb	r3, [r7, #31]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d00c      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x4e>
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c24:	d106      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x4a>
 8002c2e:	7ffb      	ldrb	r3, [r7, #31]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d001      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e1f3      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x60>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x60>
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e1e8      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x72>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e1e1      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d003      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2205      	movs	r2, #5
 8002c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cba:	d802      	bhi.n	8002cc2 <HAL_SPI_TransmitReceive+0xd8>
 8002cbc:	8abb      	ldrh	r3, [r7, #20]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d908      	bls.n	8002cd4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e007      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	2b40      	cmp	r3, #64	@ 0x40
 8002cf0:	d007      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d0a:	f240 8083 	bls.w	8002e14 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_TransmitReceive+0x132>
 8002d16:	8afb      	ldrh	r3, [r7, #22]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d16f      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	1c9a      	adds	r2, r3, #2
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d40:	e05c      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d11b      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x19e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x19e>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d113      	bne.n	8002d88 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	1c9a      	adds	r2, r3, #2
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d11c      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x1e6>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	b292      	uxth	r2, r2
 8002dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dd0:	f7fe f86c 	bl	8000eac <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d80d      	bhi.n	8002dfc <HAL_SPI_TransmitReceive+0x212>
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002de6:	d009      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e111      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d19d      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x158>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d197      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x158>
 8002e12:	e0e5      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x23a>
 8002e1c:	8afb      	ldrh	r3, [r7, #22]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	f040 80d1 	bne.w	8002fc6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d912      	bls.n	8002e54 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b02      	subs	r3, #2
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e52:	e0b8      	b.n	8002fc6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7a:	e0a4      	b.n	8002fc6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d134      	bne.n	8002ef4 <HAL_SPI_TransmitReceive+0x30a>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02f      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x30a>
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d12c      	bne.n	8002ef4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d912      	bls.n	8002eca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	881a      	ldrh	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b02      	subs	r3, #2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ec8:	e012      	b.n	8002ef0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d148      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x3aa>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d042      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d923      	bls.n	8002f62 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	b292      	uxth	r2, r2
 8002f26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b02      	subs	r3, #2
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d81f      	bhi.n	8002f90 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	e016      	b.n	8002f90 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f103 020c 	add.w	r2, r3, #12
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f90:	2301      	movs	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f94:	f7fd ff8a 	bl	8000eac <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d803      	bhi.n	8002fac <HAL_SPI_TransmitReceive+0x3c2>
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002faa:	d102      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x3c8>
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e02c      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f47f af55 	bne.w	8002e7c <HAL_SPI_TransmitReceive+0x292>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f47f af4e 	bne.w	8002e7c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a3a      	ldr	r2, [r7, #32]
 8002fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f995 	bl	8003314 <SPI_EndRxTxTransaction>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800301e:	2300      	movs	r3, #0
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3728      	adds	r7, #40	@ 0x28
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003038:	f7fd ff38 	bl	8000eac <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003048:	f7fd ff30 	bl	8000eac <HAL_GetTick>
 800304c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800304e:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	0d1b      	lsrs	r3, r3, #20
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305e:	e054      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003066:	d050      	beq.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003068:	f7fd ff20 	bl	8000eac <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d902      	bls.n	800307e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13d      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800308c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003096:	d111      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a0:	d004      	beq.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030aa:	d107      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c4:	d10f      	bne.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e017      	b.n	800312a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b01      	subs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d19b      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000028 	.word	0x20000028

08003138 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800314a:	f7fd feaf 	bl	8000eac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	4413      	add	r3, r2
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800315a:	f7fd fea7 	bl	8000eac <HAL_GetTick>
 800315e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003168:	4b3d      	ldr	r3, [pc, #244]	@ (8003260 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00da      	lsls	r2, r3, #3
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	0d1b      	lsrs	r3, r3, #20
 8003178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003180:	e060      	b.n	8003244 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003188:	d107      	bne.n	800319a <SPI_WaitFifoStateUntilTimeout+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003198:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031a0:	d050      	beq.n	8003244 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a2:	f7fd fe83 	bl	8000eac <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d902      	bls.n	80031b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d13d      	bne.n	8003234 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d0:	d111      	bne.n	80031f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031da:	d004      	beq.n	80031e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e4:	d107      	bne.n	80031f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031fe:	d10f      	bne.n	8003220 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e010      	b.n	8003256 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3b01      	subs	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d196      	bne.n	8003182 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3728      	adds	r7, #40	@ 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000028 	.word	0x20000028

08003264 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003278:	d111      	bne.n	800329e <SPI_EndRxTransaction+0x3a>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003282:	d004      	beq.n	800328e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328c:	d107      	bne.n	800329e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff febd 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e023      	b.n	800330c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032cc:	d11d      	bne.n	800330a <SPI_EndRxTransaction+0xa6>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d6:	d004      	beq.n	80032e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e0:	d113      	bne.n	800330a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff ff22 	bl	8003138 <SPI_WaitFifoStateUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e000      	b.n	800330c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff03 	bl	8003138 <SPI_WaitFifoStateUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e027      	b.n	8003398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fe68 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e014      	b.n	8003398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2200      	movs	r2, #0
 8003376:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff fedc 	bl	8003138 <SPI_WaitFifoStateUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e000      	b.n	8003398 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e042      	b.n	8003438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fd fbfd 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb24 	bl	8003a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f825 	bl	8003440 <UART_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01b      	b.n	8003438 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800341e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fba3 	bl	8003b7c <UART_CheckIdleState>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b08c      	sub	sp, #48	@ 0x30
 8003446:	af00      	add	r7, sp, #0
 8003448:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4baa      	ldr	r3, [pc, #680]	@ (8003718 <UART_SetConfig+0x2d8>)
 8003470:	4013      	ands	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003478:	430b      	orrs	r3, r1
 800347a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a9f      	ldr	r2, [pc, #636]	@ (800371c <UART_SetConfig+0x2dc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a8:	4313      	orrs	r3, r2
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	f023 010f 	bic.w	r1, r3, #15
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a90      	ldr	r2, [pc, #576]	@ (8003720 <UART_SetConfig+0x2e0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <UART_SetConfig+0xf0>
 80034e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003724 <UART_SetConfig+0x2e4>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d81a      	bhi.n	8003528 <UART_SetConfig+0xe8>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <UART_SetConfig+0xb8>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003509 	.word	0x08003509
 80034fc:	08003519 	.word	0x08003519
 8003500:	08003511 	.word	0x08003511
 8003504:	08003521 	.word	0x08003521
 8003508:	2301      	movs	r3, #1
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e116      	b.n	800373e <UART_SetConfig+0x2fe>
 8003510:	2302      	movs	r3, #2
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e112      	b.n	800373e <UART_SetConfig+0x2fe>
 8003518:	2304      	movs	r3, #4
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e10e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003520:	2308      	movs	r3, #8
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e10a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e106      	b.n	800373e <UART_SetConfig+0x2fe>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <UART_SetConfig+0x2e8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d138      	bne.n	80035ac <UART_SetConfig+0x16c>
 800353a:	4b7a      	ldr	r3, [pc, #488]	@ (8003724 <UART_SetConfig+0x2e4>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d82d      	bhi.n	80035a4 <UART_SetConfig+0x164>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0x110>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003585 	.word	0x08003585
 8003554:	080035a5 	.word	0x080035a5
 8003558:	080035a5 	.word	0x080035a5
 800355c:	080035a5 	.word	0x080035a5
 8003560:	08003595 	.word	0x08003595
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035a5 	.word	0x080035a5
 8003570:	0800358d 	.word	0x0800358d
 8003574:	080035a5 	.word	0x080035a5
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035a5 	.word	0x080035a5
 8003580:	0800359d 	.word	0x0800359d
 8003584:	2300      	movs	r3, #0
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e0d8      	b.n	800373e <UART_SetConfig+0x2fe>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e0d4      	b.n	800373e <UART_SetConfig+0x2fe>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e0d0      	b.n	800373e <UART_SetConfig+0x2fe>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a2:	e0cc      	b.n	800373e <UART_SetConfig+0x2fe>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035aa:	e0c8      	b.n	800373e <UART_SetConfig+0x2fe>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5e      	ldr	r2, [pc, #376]	@ (800372c <UART_SetConfig+0x2ec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d125      	bne.n	8003602 <UART_SetConfig+0x1c2>
 80035b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <UART_SetConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035c0:	2b30      	cmp	r3, #48	@ 0x30
 80035c2:	d016      	beq.n	80035f2 <UART_SetConfig+0x1b2>
 80035c4:	2b30      	cmp	r3, #48	@ 0x30
 80035c6:	d818      	bhi.n	80035fa <UART_SetConfig+0x1ba>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d00a      	beq.n	80035e2 <UART_SetConfig+0x1a2>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d814      	bhi.n	80035fa <UART_SetConfig+0x1ba>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <UART_SetConfig+0x19a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d008      	beq.n	80035ea <UART_SetConfig+0x1aa>
 80035d8:	e00f      	b.n	80035fa <UART_SetConfig+0x1ba>
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e0:	e0ad      	b.n	800373e <UART_SetConfig+0x2fe>
 80035e2:	2302      	movs	r3, #2
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e8:	e0a9      	b.n	800373e <UART_SetConfig+0x2fe>
 80035ea:	2304      	movs	r3, #4
 80035ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f0:	e0a5      	b.n	800373e <UART_SetConfig+0x2fe>
 80035f2:	2308      	movs	r3, #8
 80035f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f8:	e0a1      	b.n	800373e <UART_SetConfig+0x2fe>
 80035fa:	2310      	movs	r3, #16
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003600:	e09d      	b.n	800373e <UART_SetConfig+0x2fe>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4a      	ldr	r2, [pc, #296]	@ (8003730 <UART_SetConfig+0x2f0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d125      	bne.n	8003658 <UART_SetConfig+0x218>
 800360c:	4b45      	ldr	r3, [pc, #276]	@ (8003724 <UART_SetConfig+0x2e4>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003616:	2bc0      	cmp	r3, #192	@ 0xc0
 8003618:	d016      	beq.n	8003648 <UART_SetConfig+0x208>
 800361a:	2bc0      	cmp	r3, #192	@ 0xc0
 800361c:	d818      	bhi.n	8003650 <UART_SetConfig+0x210>
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d00a      	beq.n	8003638 <UART_SetConfig+0x1f8>
 8003622:	2b80      	cmp	r3, #128	@ 0x80
 8003624:	d814      	bhi.n	8003650 <UART_SetConfig+0x210>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <UART_SetConfig+0x1f0>
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d008      	beq.n	8003640 <UART_SetConfig+0x200>
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x210>
 8003630:	2300      	movs	r3, #0
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003636:	e082      	b.n	800373e <UART_SetConfig+0x2fe>
 8003638:	2302      	movs	r3, #2
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363e:	e07e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003640:	2304      	movs	r3, #4
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003646:	e07a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003648:	2308      	movs	r3, #8
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364e:	e076      	b.n	800373e <UART_SetConfig+0x2fe>
 8003650:	2310      	movs	r3, #16
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003656:	e072      	b.n	800373e <UART_SetConfig+0x2fe>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <UART_SetConfig+0x2f4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12a      	bne.n	80036b8 <UART_SetConfig+0x278>
 8003662:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <UART_SetConfig+0x2e4>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003670:	d01a      	beq.n	80036a8 <UART_SetConfig+0x268>
 8003672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003676:	d81b      	bhi.n	80036b0 <UART_SetConfig+0x270>
 8003678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367c:	d00c      	beq.n	8003698 <UART_SetConfig+0x258>
 800367e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003682:	d815      	bhi.n	80036b0 <UART_SetConfig+0x270>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <UART_SetConfig+0x250>
 8003688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x260>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x270>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e052      	b.n	800373e <UART_SetConfig+0x2fe>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e04e      	b.n	800373e <UART_SetConfig+0x2fe>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e04a      	b.n	800373e <UART_SetConfig+0x2fe>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e046      	b.n	800373e <UART_SetConfig+0x2fe>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e042      	b.n	800373e <UART_SetConfig+0x2fe>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a17      	ldr	r2, [pc, #92]	@ (800371c <UART_SetConfig+0x2dc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d13a      	bne.n	8003738 <UART_SetConfig+0x2f8>
 80036c2:	4b18      	ldr	r3, [pc, #96]	@ (8003724 <UART_SetConfig+0x2e4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d0:	d01a      	beq.n	8003708 <UART_SetConfig+0x2c8>
 80036d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0x2d0>
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036dc:	d00c      	beq.n	80036f8 <UART_SetConfig+0x2b8>
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e2:	d815      	bhi.n	8003710 <UART_SetConfig+0x2d0>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <UART_SetConfig+0x2b0>
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ec:	d008      	beq.n	8003700 <UART_SetConfig+0x2c0>
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x2d0>
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e022      	b.n	800373e <UART_SetConfig+0x2fe>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e01e      	b.n	800373e <UART_SetConfig+0x2fe>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e01a      	b.n	800373e <UART_SetConfig+0x2fe>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e016      	b.n	800373e <UART_SetConfig+0x2fe>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e012      	b.n	800373e <UART_SetConfig+0x2fe>
 8003718:	cfff69f3 	.word	0xcfff69f3
 800371c:	40008000 	.word	0x40008000
 8003720:	40013800 	.word	0x40013800
 8003724:	40021000 	.word	0x40021000
 8003728:	40004400 	.word	0x40004400
 800372c:	40004800 	.word	0x40004800
 8003730:	40004c00 	.word	0x40004c00
 8003734:	40005000 	.word	0x40005000
 8003738:	2310      	movs	r3, #16
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4aae      	ldr	r2, [pc, #696]	@ (80039fc <UART_SetConfig+0x5bc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 8097 	bne.w	8003878 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800374e:	2b08      	cmp	r3, #8
 8003750:	d823      	bhi.n	800379a <UART_SetConfig+0x35a>
 8003752:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <UART_SetConfig+0x318>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	0800377d 	.word	0x0800377d
 800375c:	0800379b 	.word	0x0800379b
 8003760:	08003785 	.word	0x08003785
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800378b 	.word	0x0800378b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	0800379b 	.word	0x0800379b
 8003774:	0800379b 	.word	0x0800379b
 8003778:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7fe fc1c 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003782:	e010      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b9e      	ldr	r3, [pc, #632]	@ (8003a00 <UART_SetConfig+0x5c0>)
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003788:	e00d      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe fba7 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 800378e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003790:	e009      	b.n	80037a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003798:	e005      	b.n	80037a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8130 	beq.w	8003a0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	4a94      	ldr	r2, [pc, #592]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80037b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d305      	bcc.n	80037de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d903      	bls.n	80037e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037e4:	e113      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2200      	movs	r2, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	60fa      	str	r2, [r7, #12]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	4a84      	ldr	r2, [pc, #528]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80037f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2200      	movs	r2, #0
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003804:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003808:	f7fc fd06 	bl	8000218 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	020b      	lsls	r3, r1, #8
 800381e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003822:	0202      	lsls	r2, r0, #8
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	6849      	ldr	r1, [r1, #4]
 8003828:	0849      	lsrs	r1, r1, #1
 800382a:	2000      	movs	r0, #0
 800382c:	460c      	mov	r4, r1
 800382e:	4605      	mov	r5, r0
 8003830:	eb12 0804 	adds.w	r8, r2, r4
 8003834:	eb43 0905 	adc.w	r9, r3, r5
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	469a      	mov	sl, r3
 8003840:	4693      	mov	fp, r2
 8003842:	4652      	mov	r2, sl
 8003844:	465b      	mov	r3, fp
 8003846:	4640      	mov	r0, r8
 8003848:	4649      	mov	r1, r9
 800384a:	f7fc fce5 	bl	8000218 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4613      	mov	r3, r2
 8003854:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800385c:	d308      	bcc.n	8003870 <UART_SetConfig+0x430>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003864:	d204      	bcs.n	8003870 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a3a      	ldr	r2, [r7, #32]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	e0ce      	b.n	8003a0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003876:	e0ca      	b.n	8003a0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	d166      	bne.n	8003950 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003882:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003886:	2b08      	cmp	r3, #8
 8003888:	d827      	bhi.n	80038da <UART_SetConfig+0x49a>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <UART_SetConfig+0x450>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038bd 	.word	0x080038bd
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038db 	.word	0x080038db
 80038a0:	080038cb 	.word	0x080038cb
 80038a4:	080038db 	.word	0x080038db
 80038a8:	080038db 	.word	0x080038db
 80038ac:	080038db 	.word	0x080038db
 80038b0:	080038d3 	.word	0x080038d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7fe fb80 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80038b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038ba:	e014      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe fb92 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 80038c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038c2:	e010      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a00 <UART_SetConfig+0x5c0>)
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038c8:	e00d      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ca:	f7fe fb07 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038d0:	e009      	b.n	80038e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038d8:	e005      	b.n	80038e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8090 	beq.w	8003a0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	4a44      	ldr	r2, [pc, #272]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80038f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003900:	005a      	lsls	r2, r3, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	441a      	add	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d916      	bls.n	8003948 <UART_SetConfig+0x508>
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003920:	d212      	bcs.n	8003948 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f023 030f 	bic.w	r3, r3, #15
 800392a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	b29a      	uxth	r2, r3
 8003938:	8bfb      	ldrh	r3, [r7, #30]
 800393a:	4313      	orrs	r3, r2
 800393c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	8bfa      	ldrh	r2, [r7, #30]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e062      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800394e:	e05e      	b.n	8003a0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003950:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003954:	2b08      	cmp	r3, #8
 8003956:	d828      	bhi.n	80039aa <UART_SetConfig+0x56a>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <UART_SetConfig+0x520>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003985 	.word	0x08003985
 8003964:	0800398d 	.word	0x0800398d
 8003968:	08003995 	.word	0x08003995
 800396c:	080039ab 	.word	0x080039ab
 8003970:	0800399b 	.word	0x0800399b
 8003974:	080039ab 	.word	0x080039ab
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039ab 	.word	0x080039ab
 8003980:	080039a3 	.word	0x080039a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fe fb18 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800398a:	e014      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7fe fb2a 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003992:	e010      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003994:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <UART_SetConfig+0x5c0>)
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003998:	e00d      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399a:	f7fe fa9f 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039a0:	e009      	b.n	80039b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039a8:	e005      	b.n	80039b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039b4:	bf00      	nop
    }

    if (pclk != 0U)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d028      	beq.n	8003a0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	4a10      	ldr	r2, [pc, #64]	@ (8003a04 <UART_SetConfig+0x5c4>)
 80039c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	441a      	add	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d910      	bls.n	8003a08 <UART_SetConfig+0x5c8>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ec:	d20c      	bcs.n	8003a08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e009      	b.n	8003a0e <UART_SetConfig+0x5ce>
 80039fa:	bf00      	nop
 80039fc:	40008000 	.word	0x40008000
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	08004104 	.word	0x08004104
      }
      else
      {
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3730      	adds	r7, #48	@ 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b36:	d10a      	bne.n	8003b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b098      	sub	sp, #96	@ 0x60
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd f98e 	bl	8000eac <HAL_GetTick>
 8003b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d12f      	bne.n	8003c00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f88e 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d022      	beq.n	8003c00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e063      	b.n	8003cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d149      	bne.n	8003ca2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f857 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d03c      	beq.n	8003ca2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c7a:	61fa      	str	r2, [r7, #28]
 8003c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	617b      	str	r3, [r7, #20]
   return(result);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e012      	b.n	8003cc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3758      	adds	r7, #88	@ 0x58
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e04f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce8:	d04b      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd f8df 	bl	8000eac <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e04e      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d037      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d034      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d031      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d110      	bne.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2208      	movs	r2, #8
 8003d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f838 	bl	8003daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e029      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5c:	d111      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f81e 	bl	8003daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e00f      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d0a0      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b095      	sub	sp, #84	@ 0x54
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e6      	bne.n	8003db2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3308      	adds	r3, #8
 8003dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d118      	bne.n	8003e56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	@ 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UARTEx_DisableFifoMode+0x16>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e027      	b.n	8003edc <HAL_UARTEx_DisableFifoMode+0x66>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	@ 0x24
 8003e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e02d      	b.n	8003f5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f84f 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e02d      	b.n	8003fd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	@ 0x24
 8003f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f811 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004000:	e031      	b.n	8004066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004002:	2308      	movs	r3, #8
 8004004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004006:	2308      	movs	r3, #8
 8004008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	0e5b      	lsrs	r3, r3, #25
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	0f5b      	lsrs	r3, r3, #29
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	7b3a      	ldrb	r2, [r7, #12]
 800402e:	4911      	ldr	r1, [pc, #68]	@ (8004074 <UARTEx_SetNbDataToProcess+0x94>)
 8004030:	5c8a      	ldrb	r2, [r1, r2]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004036:	7b3a      	ldrb	r2, [r7, #12]
 8004038:	490f      	ldr	r1, [pc, #60]	@ (8004078 <UARTEx_SetNbDataToProcess+0x98>)
 800403a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800403c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	7b7a      	ldrb	r2, [r7, #13]
 800404c:	4909      	ldr	r1, [pc, #36]	@ (8004074 <UARTEx_SetNbDataToProcess+0x94>)
 800404e:	5c8a      	ldrb	r2, [r1, r2]
 8004050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004054:	7b7a      	ldrb	r2, [r7, #13]
 8004056:	4908      	ldr	r1, [pc, #32]	@ (8004078 <UARTEx_SetNbDataToProcess+0x98>)
 8004058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800405a:	fb93 f3f2 	sdiv	r3, r3, r2
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	0800411c 	.word	0x0800411c
 8004078:	08004124 	.word	0x08004124

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	@ (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	@ (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	@ (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	@ (80040d0 <__libc_init_array+0x44>)
 80040a0:	f000 f818 	bl	80040d4 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08004134 	.word	0x08004134
 80040c8:	08004134 	.word	0x08004134
 80040cc:	08004134 	.word	0x08004134
 80040d0:	08004138 	.word	0x08004138

080040d4 <_init>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr

080040e0 <_fini>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr
