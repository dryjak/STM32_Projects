
TransiverCodeNrf24V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004130  08004130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004134  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000001c  08004150  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004150  00006148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e97e  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f05  00000000  00000000  000149ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000168d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091b  00000000  00000000  000174a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002485f  00000000  00000000  00017dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6c6  00000000  00000000  0003c61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8286  00000000  00000000  00049ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  00131fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00134fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040cc 	.word	0x080040cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	080040cc 	.word	0x080040cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <CS_Select>:
//extern SPI_HandleTypeDef hspi2;



void CS_Select(NRF24_t *NRF24_Module)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CSN_Port, NRF24_Module->NRF24CSN_Pin, GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68d8      	ldr	r0, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	8a1b      	ldrh	r3, [r3, #16]
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	f000 ff64 	bl	8001424 <HAL_GPIO_WritePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <CS_Unselect>:

void CS_Unselect(NRF24_t *NRF24_Module)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CSN_Port, NRF24_Module->NRF24CSN_Pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68d8      	ldr	r0, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8a1b      	ldrh	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f000 ff54 	bl	8001424 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <CE_Enable>:
void CE_Enable(NRF24_t *NRF24_Module)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CE_Port, NRF24_Module->NRF24CE_Pin, GPIO_PIN_RESET);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6858      	ldr	r0, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	891b      	ldrh	r3, [r3, #8]
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	f000 ff44 	bl	8001424 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <CE_Disable>:
void CE_Disable(NRF24_t *NRF24_Module)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF24_Module->NRF24CE_Port, NRF24_Module->NRF24CE_Pin, GPIO_PIN_SET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f000 ff34 	bl	8001424 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Nrf24_WriteRegister>:


//write a single byte to a particular register
void Nrf24_WriteRegister(NRF24_t *NRF24_Module, uint8_t Register, uint8_t Data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
 80005d0:	4613      	mov	r3, r2
 80005d2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2];
	buff[0] = Register | 1 << 5;
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	733b      	strb	r3, [r7, #12]
	buff[1] = Data;
 80005de:	78bb      	ldrb	r3, [r7, #2]
 80005e0:	737b      	strb	r3, [r7, #13]

	//Pull cs pin low to select the device
	CS_Select(NRF24_Module);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffae 	bl	8000544 <CS_Select>

	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, buff, 2, 1000);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f4:	2202      	movs	r2, #2
 80005f6:	f002 f846 	bl	8002686 <HAL_SPI_Transmit>

	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ffb2 	bl	8000564 <CS_Unselect>

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Nrf24_WriteMultiRegister>:


//write multiple bytes to a particular register
void Nrf24_WriteMultiRegister(NRF24_t *NRF24_Module, uint8_t Register, uint8_t *Data, uint8_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	461a      	mov	r2, r3
 8000614:	460b      	mov	r3, r1
 8000616:	72fb      	strb	r3, [r7, #11]
 8000618:	4613      	mov	r3, r2
 800061a:	72bb      	strb	r3, [r7, #10]
	uint8_t buff[2];
	buff[0] = Register | 1 << 5;
 800061c:	7afb      	ldrb	r3, [r7, #11]
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	b2db      	uxtb	r3, r3
 8000624:	753b      	strb	r3, [r7, #20]
	//buff[1] = Data;

	//Pull cs pin low to select the device
	CS_Select(NRF24_Module);
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f7ff ff8c 	bl	8000544 <CS_Select>

	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, buff, 1, 1000);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	f107 0114 	add.w	r1, r7, #20
 8000634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000638:	2201      	movs	r2, #1
 800063a:	f002 f824 	bl	8002686 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, Data, Size, 1000);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	7abb      	ldrb	r3, [r7, #10]
 8000644:	b29a      	uxth	r2, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f002 f81b 	bl	8002686 <HAL_SPI_Transmit>

	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f7ff ff87 	bl	8000564 <CS_Unselect>

}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <Nrf24_ReadRegister>:

uint8_t Nrf24_ReadRegister(NRF24_t *NRF24_Module, uint8_t Register)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	460b      	mov	r3, r1
 8000668:	70fb      	strb	r3, [r7, #3]
	uint8_t Data = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
	//Pull cs pin low to select the device
	CS_Select(NRF24_Module);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff68 	bl	8000544 <CS_Select>

	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &Register, 1, 1000);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	1cf9      	adds	r1, r7, #3
 800067a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067e:	2201      	movs	r2, #1
 8000680:	f002 f801 	bl	8002686 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_Module->NRF24_SPI, &Data, 1, 1000);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 010f 	add.w	r1, r7, #15
 800068c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000690:	2201      	movs	r2, #1
 8000692:	f002 f96e 	bl	8002972 <HAL_SPI_Receive>

	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff64 	bl	8000564 <CS_Unselect>

	return Data;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <Nrf24_SendCommand>:
	//Pull cs pin high to release the device
	CS_Unselect(NRF24_Module);
}

void Nrf24_SendCommand(NRF24_t *NRF24_Module, uint8_t Cmd)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	70fb      	strb	r3, [r7, #3]
		//Pull cs pin low to select the device
		CS_Select(NRF24_Module);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff46 	bl	8000544 <CS_Select>

		HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &Cmd, 1, 1000);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	1cf9      	adds	r1, r7, #3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	2201      	movs	r2, #1
 80006c4:	f001 ffdf 	bl	8002686 <HAL_SPI_Transmit>

		//Pull cs pin high to release the device
		CS_Unselect(NRF24_Module);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff4b 	bl	8000564 <CS_Unselect>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <Nrf24_InitNRF24>:

void Nrf24_InitNRF24(NRF24_t *NRF24_Module, GPIO_TypeDef *NRF24CE_Port, uint16_t NRF24CE_Pin, GPIO_TypeDef *NRF24CSN_Port, uint16_t NRF24CSN_Pin, SPI_HandleTypeDef *hspi)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4613      	mov	r3, r2
 80006e4:	80fb      	strh	r3, [r7, #6]
	NRF24_Module->NRF24_SPI = hspi;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	601a      	str	r2, [r3, #0]

	NRF24_Module->NRF24CE_Port = NRF24CE_Port;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	605a      	str	r2, [r3, #4]
	NRF24_Module->NRF24CE_Pin = NRF24CE_Pin;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	811a      	strh	r2, [r3, #8]

	NRF24_Module->NRF24CSN_Port = NRF24CSN_Port;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	60da      	str	r2, [r3, #12]
	NRF24_Module->NRF24CSN_Pin = NRF24CSN_Pin;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	8b3a      	ldrh	r2, [r7, #24]
 8000702:	821a      	strh	r2, [r3, #16]

	//dissable the chip before cofiguring the device
	CE_Disable(NRF24_Module);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff ff4d 	bl	80005a4 <CE_Disable>
	//CS_Unselect(NRF24_Module);

	Nrf24_WriteRegister(NRF24_Module, CONFIG, 0);			//will be configured later
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff58 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, EN_AA, 0);			//No auto ack
 8000714:	2200      	movs	r2, #0
 8000716:	2101      	movs	r1, #1
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff53 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, EN_RXADDR, 0);		//Nt enabling any data pipe now
 800071e:	2200      	movs	r2, #0
 8000720:	2102      	movs	r1, #2
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff ff4e 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, SETUP_AW, 0x03);		//5 bytes for the tx / rx address
 8000728:	2203      	movs	r2, #3
 800072a:	2103      	movs	r1, #3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff ff49 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, SETUP_RETR, 0x00);	//no Automatic Retransmission
 8000732:	2200      	movs	r2, #0
 8000734:	2104      	movs	r1, #4
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff ff44 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, RF_CH, 0x00);			//will be setup with rx or tx
 800073c:	2200      	movs	r2, #0
 800073e:	2105      	movs	r1, #5
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff ff3f 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteRegister(NRF24_Module, RF_SETUP, 0x0E);		//Power = 0dB, dataRate = 2Mbps
 8000746:	220e      	movs	r2, #14
 8000748:	2106      	movs	r1, #6
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff ff3a 	bl	80005c4 <Nrf24_WriteRegister>

	//enabling the chip after configuration
	CE_Enable(NRF24_Module);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff ff17 	bl	8000584 <CE_Enable>
	//CS_Select(NRF24_Module);
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <Nrf24_TxMode>:

//Set up the TX mode
void Nrf24_TxMode(NRF24_t *NRF24_Module, uint8_t *Address, uint8_t channel)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	4613      	mov	r3, r2
 800076a:	71fb      	strb	r3, [r7, #7]
	//disable the chip before configuring the device
	CE_Disable(NRF24_Module);
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff ff19 	bl	80005a4 <CE_Disable>
	CS_Unselect(NRF24_Module);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff fef6 	bl	8000564 <CS_Unselect>

	Nrf24_WriteRegister(NRF24_Module, RF_CH, channel);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	2105      	movs	r1, #5
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff20 	bl	80005c4 <Nrf24_WriteRegister>
	Nrf24_WriteMultiRegister(NRF24_Module, TX_ADDR, Address, 5);	//write the transmit adress
 8000784:	2305      	movs	r3, #5
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	2110      	movs	r1, #16
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f7ff ff3c 	bl	8000608 <Nrf24_WriteMultiRegister>

	uint8_t Config = Nrf24_ReadRegister(NRF24_Module, CONFIG);
 8000790:	2100      	movs	r1, #0
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f7ff ff63 	bl	800065e <Nrf24_ReadRegister>
 8000798:	4603      	mov	r3, r0
 800079a:	75fb      	strb	r3, [r7, #23]
	Config = Config | (1<<1);
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	75fb      	strb	r3, [r7, #23]
	Nrf24_WriteRegister(NRF24_Module, CONFIG, Config);
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f7ff ff0a 	bl	80005c4 <Nrf24_WriteRegister>

	//enabling the chip after configuration
	CE_Enable(NRF24_Module);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff fee7 	bl	8000584 <CE_Enable>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <Nrf24_Transmit>:

uint8_t Nrf24_Transmit(NRF24_t *NRF24_Module, uint8_t *Data, uint8_t Address)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71fb      	strb	r3, [r7, #7]
	uint8_t CommandToSend = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	75bb      	strb	r3, [r7, #22]

	//select the device
	CS_Select(NRF24_Module);
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff feb7 	bl	8000544 <CS_Select>

	//payload command
	CommandToSend = W_TX_PAYLOAD;
 80007d6:	23a0      	movs	r3, #160	@ 0xa0
 80007d8:	75bb      	strb	r3, [r7, #22]
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, &CommandToSend, 1, 100);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	f107 0116 	add.w	r1, r7, #22
 80007e2:	2364      	movs	r3, #100	@ 0x64
 80007e4:	2201      	movs	r2, #1
 80007e6:	f001 ff4e 	bl	8002686 <HAL_SPI_Transmit>
	//send the payload
	HAL_SPI_Transmit(NRF24_Module->NRF24_SPI, Data, 32, 1000);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	2220      	movs	r2, #32
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	f001 ff46 	bl	8002686 <HAL_SPI_Transmit>

	//Unselect the device
	CS_Unselect(NRF24_Module);
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff feb2 	bl	8000564 <CS_Unselect>

	HAL_Delay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f000 fb5b 	bl	8000ebc <HAL_Delay>

	uint8_t FifoStatus = Nrf24_ReadRegister(NRF24_Module, FIFO_STATUS);
 8000806:	2117      	movs	r1, #23
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff ff28 	bl	800065e <Nrf24_ReadRegister>
 800080e:	4603      	mov	r3, r0
 8000810:	75fb      	strb	r3, [r7, #23]

	if((FifoStatus & (1<<4)) && (!(FifoStatus & (1<<3))))
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	f003 0310 	and.w	r3, r3, #16
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00d      	beq.n	8000838 <Nrf24_Transmit+0x7a>
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	2b00      	cmp	r3, #0
 8000824:	d108      	bne.n	8000838 <Nrf24_Transmit+0x7a>
	{
		CommandToSend = FLUSH_TX;
 8000826:	23e1      	movs	r3, #225	@ 0xe1
 8000828:	75bb      	strb	r3, [r7, #22]
		Nrf24_SendCommand(NRF24_Module, CommandToSend);
 800082a:	7dbb      	ldrb	r3, [r7, #22]
 800082c:	4619      	mov	r1, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f7ff ff39 	bl	80006a6 <Nrf24_SendCommand>

		return 1;
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <Nrf24_Transmit+0x7c>
	}

	return 0;
 8000838:	2300      	movs	r3, #0


}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fac6 	bl	8000dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f833 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f905 	bl	8000a60 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000856:	f000 f87b 	bl	8000950 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800085a:	f000 f8c3 	bl	80009e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  Nrf24_InitNRF24(&NRF24, NRF24_CE_GPIO_Port, NRF24_CE_Pin, NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, &hspi2);
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <main+0x60>)
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800086c:	2280      	movs	r2, #128	@ 0x80
 800086e:	490e      	ldr	r1, [pc, #56]	@ (80008a8 <main+0x64>)
 8000870:	480e      	ldr	r0, [pc, #56]	@ (80008ac <main+0x68>)
 8000872:	f7ff ff30 	bl	80006d6 <Nrf24_InitNRF24>

  Nrf24_TxMode(&NRF24, TxAddress, 10);
 8000876:	220a      	movs	r2, #10
 8000878:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <main+0x6c>)
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <main+0x68>)
 800087c:	f7ff ff6f 	bl	800075e <Nrf24_TxMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Nrf24_Transmit(&NRF24, Data, 10))
 8000880:	220a      	movs	r2, #10
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <main+0x70>)
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <main+0x68>)
 8000886:	f7ff ff9a 	bl	80007be <Nrf24_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <main+0x56>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f000 fddd 	bl	8001454 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089e:	f000 fb0d 	bl	8000ebc <HAL_Delay>
	  if(Nrf24_Transmit(&NRF24, Data, 10))
 80008a2:	e7ed      	b.n	8000880 <main+0x3c>
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	48000800 	.word	0x48000800
 80008ac:	20000130 	.word	0x20000130
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2238      	movs	r2, #56	@ 0x38
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fbd4 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fdf8 	bl	80014d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008fa:	2355      	movs	r3, #85	@ 0x55
 80008fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fe92 	bl	8001638 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800091a:	f000 f925 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2104      	movs	r1, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f990 	bl	8001c5c <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000942:	f000 f911 	bl	8000b68 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	@ 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000956:	4a21      	ldr	r2, [pc, #132]	@ (80009dc <MX_LPUART1_UART_Init+0x8c>)
 8000958:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 800095c:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <MX_LPUART1_UART_Init+0x90>)
 800095e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000974:	220c      	movs	r2, #12
 8000976:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 8000992:	f002 fd01 	bl	8003398 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800099c:	f000 f8e4 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 80009a4:	f003 fa9c 	bl	8003ee0 <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80009ae:	f000 f8db 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 80009b6:	f003 fad1 	bl	8003f5c <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80009c0:	f000 f8d2 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_LPUART1_UART_Init+0x88>)
 80009c6:	f003 fa52 	bl	8003e6e <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80009d0:	f000 f8ca 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000038 	.word	0x20000038
 80009dc:	40008000 	.word	0x40008000
 80009e0:	00033324 	.word	0x00033324

080009e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_SPI2_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_SPI2_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_SPI2_Init+0x74>)
 80009f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_SPI2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_SPI2_Init+0x74>)
 80009fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_SPI2_Init+0x74>)
 8000a44:	f001 fd74 	bl	8002530 <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 f88b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000cc 	.word	0x200000cc
 8000a5c:	40003800 	.word	0x40003800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a39      	ldr	r2, [pc, #228]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b34      	ldr	r3, [pc, #208]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a33      	ldr	r2, [pc, #204]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a27      	ldr	r2, [pc, #156]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <MX_GPIO_Init+0x100>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fca0 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	481e      	ldr	r0, [pc, #120]	@ (8000b64 <MX_GPIO_Init+0x104>)
 8000aea:	f000 fc9b 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <MX_GPIO_Init+0x104>)
 8000b06:	f000 fb0b 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF24_CSN_Pin;
 8000b0a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 fafb 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <MX_GPIO_Init+0x104>)
 8000b42:	f000 faed 	bl	8001120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2028      	movs	r0, #40	@ 0x28
 8000b4c:	f000 fab3 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b50:	2028      	movs	r0, #40	@ 0x28
 8000b52:	f000 faca 	bl	80010ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000800 	.word	0x48000800

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000baa:	f000 fd35 	bl	8001618 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09e      	sub	sp, #120	@ 0x78
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2254      	movs	r2, #84	@ 0x54
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 fa49 	bl	8004074 <memset>
  if(huart->Instance==LPUART1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <HAL_UART_MspInit+0xa8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d136      	bne.n	8000c5a <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bec:	2320      	movs	r3, #32
 8000bee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fa4b 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff ffb0 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c0c:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_UART_MspInit+0xac>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f000 fa63 	bl	8001120 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3778      	adds	r7, #120	@ 0x78
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40008000 	.word	0x40008000
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <HAL_SPI_MspInit+0x7c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d128      	bne.n	8000ce0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c92:	4a16      	ldr	r2, [pc, #88]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_SPI_MspInit+0x80>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cbe:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_SPI_MspInit+0x84>)
 8000cdc:	f000 fa20 	bl	8001120 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40003800 	.word	0x40003800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f899 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d56:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d5a:	f000 fb95 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f003 f965 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fd43 	bl	8000844 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dcc:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 8000dd0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dd4:	20000148 	.word	0x20000148

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>

08000dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f95b 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f80e 	bl	8000e0c <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfc:	f7ff feba 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e00:	79fb      	ldrb	r3, [r7, #7]

}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_InitTick+0x68>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d022      	beq.n	8000e66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_InitTick+0x6c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_InitTick+0x68>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f966 	bl	8001106 <HAL_SYSTICK_Config>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d809      	bhi.n	8000e5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e46:	2200      	movs	r2, #0
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e4e:	f000 f932 	bl	80010b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_InitTick+0x70>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e004      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000018 	.word	0x20000018
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	20000014 	.word	0x20000014

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a03      	ldr	r2, [pc, #12]	@ (8000e9c <HAL_IncTick+0x1c>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000144 	.word	0x20000144
 8000ea0:	20000018 	.word	0x20000018

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000144 	.word	0x20000144

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ed4:	d004      	beq.n	8000ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_Delay+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee0:	bf00      	nop
 8000ee2:	f7ff ffdf 	bl	8000ea4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d8f7      	bhi.n	8000ee2 <HAL_Delay+0x26>
  {
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000018 	.word	0x20000018

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff40 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff90 	bl	8000ff4 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5f 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff33 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa4 	bl	800105c <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800112e:	e15a      	b.n	80013e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 814c 	beq.w	80013e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80a6 	beq.w	80013e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b5b      	ldr	r3, [pc, #364]	@ (8001404 <HAL_GPIO_Init+0x2e4>)
 8001296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001298:	4a5a      	ldr	r2, [pc, #360]	@ (8001404 <HAL_GPIO_Init+0x2e4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a0:	4b58      	ldr	r3, [pc, #352]	@ (8001404 <HAL_GPIO_Init+0x2e4>)
 80012a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ac:	4a56      	ldr	r2, [pc, #344]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x1f8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4c      	ldr	r2, [pc, #304]	@ (800140c <HAL_GPIO_Init+0x2ec>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x1f4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <HAL_GPIO_Init+0x2f0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x1f0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <HAL_GPIO_Init+0x2f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1ec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a49      	ldr	r2, [pc, #292]	@ (8001418 <HAL_GPIO_Init+0x2f8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1e8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a48      	ldr	r2, [pc, #288]	@ (800141c <HAL_GPIO_Init+0x2fc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1e4>
 8001300:	2305      	movs	r3, #5
 8001302:	e00a      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 8001304:	2306      	movs	r3, #6
 8001306:	e008      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 8001308:	2304      	movs	r3, #4
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 800130c:	2303      	movs	r3, #3
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1fa>
 8001318:	2300      	movs	r3, #0
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132a:	4937      	ldr	r1, [pc, #220]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001338:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <HAL_GPIO_Init+0x300>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135c:	4a30      	ldr	r2, [pc, #192]	@ (8001420 <HAL_GPIO_Init+0x300>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001362:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <HAL_GPIO_Init+0x300>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001386:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <HAL_GPIO_Init+0x300>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_GPIO_Init+0x300>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <HAL_GPIO_Init+0x300>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_GPIO_Init+0x300>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013da:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_GPIO_Init+0x300>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f ae9d 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	48000400 	.word	0x48000400
 8001410:	48000800 	.word	0x48000800
 8001414:	48000c00 	.word	0x48000c00
 8001418:	48001000 	.word	0x48001000
 800141c:	48001400 	.word	0x48001400
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e002      	b.n	8001448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43d9      	mvns	r1, r3
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	400b      	ands	r3, r1
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f806 	bl	80014b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d141      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014de:	4b4b      	ldr	r3, [pc, #300]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ea:	d131      	bne.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ec:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014f2:	4a46      	ldr	r2, [pc, #280]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	4b43      	ldr	r3, [pc, #268]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001504:	4a41      	ldr	r2, [pc, #260]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800150c:	4b40      	ldr	r3, [pc, #256]	@ (8001610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2232      	movs	r2, #50	@ 0x32
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a3f      	ldr	r2, [pc, #252]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	e002      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3b01      	subs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152a:	4b38      	ldr	r3, [pc, #224]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001536:	d102      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f2      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153e:	4b33      	ldr	r3, [pc, #204]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d158      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e057      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001550:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001556:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800155c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001560:	e04d      	b.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001568:	d141      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d131      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001590:	4a1e      	ldr	r2, [pc, #120]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001598:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2232      	movs	r2, #50	@ 0x32
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	e002      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015c2:	d102      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d6:	d112      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e011      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015ec:	e007      	b.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40007000 	.word	0x40007000
 8001610:	20000010 	.word	0x20000010
 8001614:	431bde83 	.word	0x431bde83

08001618 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001626:	6093      	str	r3, [r2, #8]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e2fe      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d075      	beq.n	8001742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b97      	ldr	r3, [pc, #604]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001660:	4b94      	ldr	r3, [pc, #592]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x3e>
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d002      	beq.n	800167c <HAL_RCC_OscConfig+0x44>
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d10b      	bne.n	8001694 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b8d      	ldr	r3, [pc, #564]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05b      	beq.n	8001740 <HAL_RCC_OscConfig+0x108>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d157      	bne.n	8001740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2d9      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x74>
 800169e:	4b85      	ldr	r3, [pc, #532]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a84      	ldr	r2, [pc, #528]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x98>
 80016b6:	4b7f      	ldr	r3, [pc, #508]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a7e      	ldr	r2, [pc, #504]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b7c      	ldr	r3, [pc, #496]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7b      	ldr	r2, [pc, #492]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016d0:	4b78      	ldr	r3, [pc, #480]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a77      	ldr	r2, [pc, #476]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a74      	ldr	r2, [pc, #464]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fbd8 	bl	8000ea4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fbd4 	bl	8000ea4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	@ 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e29e      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170a:	4b6a      	ldr	r3, [pc, #424]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xc0>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fbc4 	bl	8000ea4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fbc0 	bl	8000ea4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e28a      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001732:	4b60      	ldr	r3, [pc, #384]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0xe8>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d075      	beq.n	800183a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001758:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0x136>
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d002      	beq.n	8001774 <HAL_RCC_OscConfig+0x13c>
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d11f      	bne.n	80017b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	4b4f      	ldr	r3, [pc, #316]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_OscConfig+0x154>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e25d      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	4946      	ldr	r1, [pc, #280]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017a0:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb31 	bl	8000e0c <HAL_InitTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d043      	beq.n	8001838 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e249      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d023      	beq.n	8001804 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a3c      	ldr	r2, [pc, #240]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb6c 	bl	8000ea4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fb68 	bl	8000ea4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e232      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e2:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	492d      	ldr	r1, [pc, #180]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
 8001802:	e01a      	b.n	800183a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2a      	ldr	r2, [pc, #168]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800180a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fb48 	bl	8000ea4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fb44 	bl	8000ea4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e20e      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1e0>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d041      	beq.n	80018ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01c      	beq.n	8001888 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001854:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fb21 	bl	8000ea4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fb1d 	bl	8000ea4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1e7      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0ef      	beq.n	8001866 <HAL_RCC_OscConfig+0x22e>
 8001886:	e020      	b.n	80018ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_RCC_OscConfig+0x27c>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fb04 	bl	8000ea4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189e:	e00d      	b.n	80018bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb00 	bl	8000ea4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d906      	bls.n	80018bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1ca      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	4b8c      	ldr	r3, [pc, #560]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ea      	bne.n	80018a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018dc:	4b84      	ldr	r3, [pc, #528]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x2b4>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x2b6>
 80018ec:	2300      	movs	r3, #0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a7e      	ldr	r2, [pc, #504]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190e:	4b79      	ldr	r3, [pc, #484]	@ (8001af4 <HAL_RCC_OscConfig+0x4bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800191a:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_RCC_OscConfig+0x4bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x4bc>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fabd 	bl	8000ea4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff fab9 	bl	8000ea4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e183      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <HAL_RCC_OscConfig+0x4bc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d108      	bne.n	8001966 <HAL_RCC_OscConfig+0x32e>
 8001954:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195a:	4a65      	ldr	r2, [pc, #404]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001964:	e024      	b.n	80019b0 <HAL_RCC_OscConfig+0x378>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d110      	bne.n	8001990 <HAL_RCC_OscConfig+0x358>
 800196e:	4b60      	ldr	r3, [pc, #384]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001974:	4a5e      	ldr	r2, [pc, #376]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800197e:	4b5c      	ldr	r3, [pc, #368]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001984:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800198e:	e00f      	b.n	80019b0 <HAL_RCC_OscConfig+0x378>
 8001990:	4b57      	ldr	r3, [pc, #348]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001996:	4a56      	ldr	r2, [pc, #344]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a0:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a52      	ldr	r2, [pc, #328]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d016      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fa74 	bl	8000ea4 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff fa70 	bl	8000ea4 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e138      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ed      	beq.n	80019c0 <HAL_RCC_OscConfig+0x388>
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa5d 	bl	8000ea4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fa59 	bl	8000ea4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e121      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ed      	bne.n	80019ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b35      	ldr	r3, [pc, #212]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	4a34      	ldr	r2, [pc, #208]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa2c 	bl	8000ea4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a50:	f7ff fa28 	bl	8000ea4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0f2      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ef      	beq.n	8001a50 <HAL_RCC_OscConfig+0x418>
 8001a70:	e01b      	b.n	8001aaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a78:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa0f 	bl	8000ea4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8a:	f7ff fa0b 	bl	8000ea4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0d5      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80c9 	beq.w	8001c46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	f000 8083 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d15e      	bne.n	8001b88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f9e5 	bl	8000ea4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001adc:	e00c      	b.n	8001af8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff f9e1 	bl	8000ea4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d905      	bls.n	8001af8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0ab      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af8:	4b55      	ldr	r3, [pc, #340]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ec      	bne.n	8001ade <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b52      	ldr	r3, [pc, #328]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b52      	ldr	r3, [pc, #328]	@ (8001c54 <HAL_RCC_OscConfig+0x61c>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6a11      	ldr	r1, [r2, #32]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b14:	3a01      	subs	r2, #1
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b1e:	0212      	lsls	r2, r2, #8
 8001b20:	4311      	orrs	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b26:	0852      	lsrs	r2, r2, #1
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	0552      	lsls	r2, r2, #21
 8001b2c:	4311      	orrs	r1, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b32:	0852      	lsrs	r2, r2, #1
 8001b34:	3a01      	subs	r2, #1
 8001b36:	0652      	lsls	r2, r2, #25
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b3e:	06d2      	lsls	r2, r2, #27
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4943      	ldr	r1, [pc, #268]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b41      	ldr	r3, [pc, #260]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a40      	ldr	r2, [pc, #256]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b54:	4b3e      	ldr	r3, [pc, #248]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a3d      	ldr	r2, [pc, #244]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9a0 	bl	8000ea4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f99c 	bl	8000ea4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e066      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x530>
 8001b86:	e05e      	b.n	8001c46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f986 	bl	8000ea4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f982 	bl	8000ea4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04c      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	4924      	ldr	r1, [pc, #144]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_OscConfig+0x620>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
 8001bc6:	e03e      	b.n	8001c46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e039      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d12c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d123      	bne.n	8001c42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d11b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d113      	bne.n	8001c42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	019f800c 	.word	0x019f800c
 8001c58:	feeefffc 	.word	0xfeeefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e11e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b91      	ldr	r3, [pc, #580]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b8e      	ldr	r3, [pc, #568]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 020f 	bic.w	r2, r3, #15
 8001c8a:	498c      	ldr	r1, [pc, #560]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b8a      	ldr	r3, [pc, #552]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e106      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d073      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d129      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	4b81      	ldr	r3, [pc, #516]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0f4      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cc8:	f000 f99e 	bl	8002008 <RCC_GetSysClockFreqFromPLLSource>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ec4 <HAL_RCC_ClockConfig+0x268>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d93f      	bls.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d033      	beq.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12f      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cf6:	4b72      	ldr	r3, [pc, #456]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cfe:	4a70      	ldr	r2, [pc, #448]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e024      	b.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d14:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0c6      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	4b66      	ldr	r3, [pc, #408]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0be      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d34:	f000 f8ce 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4a61      	ldr	r2, [pc, #388]	@ (8001ec4 <HAL_RCC_ClockConfig+0x268>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d909      	bls.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d42:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4957      	ldr	r1, [pc, #348]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff f89c 	bl	8000ea4 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f898 	bl	8000ea4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e095      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a42      	ldr	r2, [pc, #264]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b39      	ldr	r3, [pc, #228]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4936      	ldr	r1, [pc, #216]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b80      	cmp	r3, #128	@ 0x80
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001df8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d21d      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 020f 	bic.w	r2, r3, #15
 8001e14:	4929      	ldr	r1, [pc, #164]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f842 	bl	8000ea4 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7ff f83e 	bl	8000ea4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e03b      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ed      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4917      	ldr	r1, [pc, #92]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490f      	ldr	r1, [pc, #60]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e86:	f000 f825 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <HAL_RCC_ClockConfig+0x26c>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x270>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_RCC_ClockConfig+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ffae 	bl	8000e0c <HAL_InitTick>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	04c4b400 	.word	0x04c4b400
 8001ec8:	080040e4 	.word	0x080040e4
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	20000014 	.word	0x20000014

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eda:	4b2c      	ldr	r3, [pc, #176]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e047      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e03e      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001efe:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d136      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f28:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
      break;
 8001f40:	e00c      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	0a12      	lsrs	r2, r2, #8
 8001f50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
      break;
 8001f5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0e5b      	lsrs	r3, r3, #25
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e001      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f7c:	693b      	ldr	r3, [r7, #16]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	016e3600 	.word	0x016e3600

08001f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000010 	.word	0x20000010

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4904      	ldr	r1, [pc, #16]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	080040f4 	.word	0x080040f4

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe0:	f7ff ffda 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0adb      	lsrs	r3, r3, #11
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4904      	ldr	r1, [pc, #16]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	080040f4 	.word	0x080040f4

08002008 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3301      	adds	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d10c      	bne.n	8002046 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202c:	4a17      	ldr	r2, [pc, #92]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	0a12      	lsrs	r2, r2, #8
 800203a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
    break;
 8002044:	e00c      	b.n	8002060 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	0a12      	lsrs	r2, r2, #8
 8002054:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    break;
 800205e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0e5b      	lsrs	r3, r3, #25
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800207a:	687b      	ldr	r3, [r7, #4]
}
 800207c:	4618      	mov	r0, r3
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	016e3600 	.word	0x016e3600
 8002090:	00f42400 	.word	0x00f42400

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800209c:	2300      	movs	r3, #0
 800209e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a0:	2300      	movs	r3, #0
 80020a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8098 	beq.w	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	4a3f      	ldr	r2, [pc, #252]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020de:	4b3a      	ldr	r3, [pc, #232]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a39      	ldr	r2, [pc, #228]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ea:	f7fe fedb 	bl	8000ea4 <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020f0:	e009      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fed7 	bl	8000ea4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d902      	bls.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	74fb      	strb	r3, [r7, #19]
        break;
 8002104:	e005      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002106:	4b30      	ldr	r3, [pc, #192]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ef      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d159      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002118:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002122:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01e      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d019      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002160:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fe97 	bl	8000ea4 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002178:	e00b      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fe93 	bl	8000ea4 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d902      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	74fb      	strb	r3, [r7, #19]
            break;
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ec      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b4:	4903      	ldr	r1, [pc, #12]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021bc:	e008      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	74bb      	strb	r3, [r7, #18]
 80021c2:	e005      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d0:	7c7b      	ldrb	r3, [r7, #17]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4ba7      	ldr	r3, [pc, #668]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4aa6      	ldr	r2, [pc, #664]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ee:	4ba1      	ldr	r3, [pc, #644]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f023 0203 	bic.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	499d      	ldr	r1, [pc, #628]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002210:	4b98      	ldr	r3, [pc, #608]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f023 020c 	bic.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4995      	ldr	r1, [pc, #596]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002232:	4b90      	ldr	r3, [pc, #576]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	498c      	ldr	r1, [pc, #560]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002254:	4b87      	ldr	r3, [pc, #540]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	4984      	ldr	r1, [pc, #528]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002276:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	497b      	ldr	r1, [pc, #492]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002298:	4b76      	ldr	r3, [pc, #472]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4973      	ldr	r1, [pc, #460]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	496a      	ldr	r1, [pc, #424]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022dc:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4962      	ldr	r1, [pc, #392]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	4959      	ldr	r1, [pc, #356]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002320:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002326:	f023 0203 	bic.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	4951      	ldr	r1, [pc, #324]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b4c      	ldr	r3, [pc, #304]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	4948      	ldr	r1, [pc, #288]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002364:	4b43      	ldr	r3, [pc, #268]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4940      	ldr	r1, [pc, #256]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a3a      	ldr	r2, [pc, #232]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239c:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	4932      	ldr	r1, [pc, #200]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d4:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e2:	4924      	ldr	r1, [pc, #144]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	4916      	ldr	r1, [pc, #88]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d019      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002462:	d109      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a02      	ldr	r2, [pc, #8]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
 8002470:	e002      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4926      	ldr	r1, [pc, #152]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024a4:	4b21      	ldr	r3, [pc, #132]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a20      	ldr	r2, [pc, #128]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80024bc:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ca:	4918      	ldr	r1, [pc, #96]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a12      	ldr	r2, [pc, #72]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024f4:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	490a      	ldr	r1, [pc, #40]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002512:	d105      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800251e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002520:	7cbb      	ldrb	r3, [r7, #18]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e09d      	b.n	800267e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002552:	d009      	beq.n	8002568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
 800255a:	e005      	b.n	8002568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb72 	bl	8000c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025a8:	d902      	bls.n	80025b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e002      	b.n	80025b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025be:	d007      	beq.n	80025d0 <HAL_SPI_Init+0xa0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	ea42 0103 	orr.w	r1, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	f003 0204 	and.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002696:	f7fe fc05 	bl	8000ea4 <HAL_GetTick>
 800269a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d001      	beq.n	80026b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
 80026ae:	e15c      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_Transmit+0x36>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e154      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_SPI_Transmit+0x48>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e14d      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2203      	movs	r2, #3
 80026da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	88fa      	ldrh	r2, [r7, #6]
 80026ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002720:	d10f      	bne.n	8002742 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002740:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d007      	beq.n	8002760 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002768:	d952      	bls.n	8002810 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Transmit+0xf2>
 8002772:	8b7b      	ldrh	r3, [r7, #26]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d145      	bne.n	8002804 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	1c9a      	adds	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800279c:	e032      	b.n	8002804 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d112      	bne.n	80027d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027d0:	e018      	b.n	8002804 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d2:	f7fe fb67 	bl	8000ea4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d803      	bhi.n	80027ea <HAL_SPI_Transmit+0x164>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027e8:	d102      	bne.n	80027f0 <HAL_SPI_Transmit+0x16a>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0b2      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1c7      	bne.n	800279e <HAL_SPI_Transmit+0x118>
 800280e:	e083      	b.n	8002918 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_SPI_Transmit+0x198>
 8002818:	8b7b      	ldrh	r3, [r7, #26]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d177      	bne.n	800290e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d912      	bls.n	800284e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282c:	881a      	ldrh	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	1c9a      	adds	r2, r3, #2
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b02      	subs	r3, #2
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800284c:	e05f      	b.n	800290e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002874:	e04b      	b.n	800290e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d12b      	bne.n	80028dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d912      	bls.n	80028b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b02      	subs	r3, #2
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028b2:	e02c      	b.n	800290e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	7812      	ldrb	r2, [r2, #0]
 80028c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028da:	e018      	b.n	800290e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028dc:	f7fe fae2 	bl	8000ea4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d803      	bhi.n	80028f4 <HAL_SPI_Transmit+0x26e>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f2:	d102      	bne.n	80028fa <HAL_SPI_Transmit+0x274>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e02d      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ae      	bne.n	8002876 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	6839      	ldr	r1, [r7, #0]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fcf5 	bl	800330c <SPI_EndRxTxTransaction>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002968:	2300      	movs	r3, #0
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af02      	add	r7, sp, #8
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	e123      	b.n	8002bda <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Receive+0x2c>
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e11b      	b.n	8002bda <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029aa:	d112      	bne.n	80029d2 <HAL_SPI_Receive+0x60>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10e      	bne.n	80029d2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2204      	movs	r2, #4
 80029b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f90a 	bl	8002be2 <HAL_SPI_TransmitReceive>
 80029ce:	4603      	mov	r3, r0
 80029d0:	e103      	b.n	8002bda <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d2:	f7fe fa67 	bl	8000ea4 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_SPI_Receive+0x74>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0f9      	b.n	8002bda <HAL_SPI_Receive+0x268>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2204      	movs	r2, #4
 80029f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a38:	d908      	bls.n	8002a4c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e007      	b.n	8002a5c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a64:	d10f      	bne.n	8002a86 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a90:	2b40      	cmp	r3, #64	@ 0x40
 8002a92:	d007      	beq.n	8002aa4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aac:	d875      	bhi.n	8002b9a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002aae:	e037      	b.n	8002b20 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d117      	bne.n	8002aee <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f103 020c 	add.w	r2, r3, #12
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002aec:	e018      	b.n	8002b20 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aee:	f7fe f9d9 	bl	8000ea4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_Receive+0x194>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_Receive+0x19a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e05c      	b.n	8002bda <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1c1      	bne.n	8002ab0 <HAL_SPI_Receive+0x13e>
 8002b2c:	e03b      	b.n	8002ba6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d115      	bne.n	8002b68 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	b292      	uxth	r2, r2
 8002b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	1c9a      	adds	r2, r3, #2
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002b66:	e018      	b.n	8002b9a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b68:	f7fe f99c 	bl	8000ea4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d803      	bhi.n	8002b80 <HAL_SPI_Receive+0x20e>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b7e:	d102      	bne.n	8002b86 <HAL_SPI_Receive+0x214>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e01f      	b.n	8002bda <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1c3      	bne.n	8002b2e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6839      	ldr	r1, [r7, #0]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb56 	bl	800325c <SPI_EndRxTransaction>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08a      	sub	sp, #40	@ 0x28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf4:	f7fe f956 	bl	8000ea4 <HAL_GetTick>
 8002bf8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c00:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d00c      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x4e>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1c:	d106      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x4a>
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d001      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e1f3      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x60>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x60>
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1e8      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x72>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e1e1      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d003      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cb2:	d802      	bhi.n	8002cba <HAL_SPI_TransmitReceive+0xd8>
 8002cb4:	8abb      	ldrh	r3, [r7, #20]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d908      	bls.n	8002ccc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e007      	b.n	8002cdc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b40      	cmp	r3, #64	@ 0x40
 8002ce8:	d007      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d02:	f240 8083 	bls.w	8002e0c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x132>
 8002d0e:	8afb      	ldrh	r3, [r7, #22]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d16f      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d38:	e05c      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d11b      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x19e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x19e>
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d113      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x1e6>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	b292      	uxth	r2, r2
 8002da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	1c9a      	adds	r2, r3, #2
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dc8:	f7fe f86c 	bl	8000ea4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d80d      	bhi.n	8002df4 <HAL_SPI_TransmitReceive+0x212>
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dde:	d009      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e111      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d19d      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x158>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d197      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x158>
 8002e0a:	e0e5      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x23a>
 8002e14:	8afb      	ldrh	r3, [r7, #22]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 80d1 	bne.w	8002fbe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d912      	bls.n	8002e4c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	881a      	ldrh	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	1c9a      	adds	r2, r3, #2
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b02      	subs	r3, #2
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e4a:	e0b8      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e72:	e0a4      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d134      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x30a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02f      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x30a>
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d12c      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d912      	bls.n	8002ec2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b02      	subs	r3, #2
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ec0:	e012      	b.n	8002ee8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	7812      	ldrb	r2, [r2, #0]
 8002ece:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d148      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x3aa>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d042      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d923      	bls.n	8002f5a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b02      	subs	r3, #2
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d81f      	bhi.n	8002f88 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	e016      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f103 020c 	add.w	r2, r3, #12
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f8c:	f7fd ff8a 	bl	8000ea4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d803      	bhi.n	8002fa4 <HAL_SPI_TransmitReceive+0x3c2>
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa2:	d102      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x3c8>
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e02c      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f af55 	bne.w	8002e74 <HAL_SPI_TransmitReceive+0x292>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f47f af4e 	bne.w	8002e74 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f995 	bl	800330c <SPI_EndRxTxTransaction>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00e      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003016:	2300      	movs	r3, #0
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3728      	adds	r7, #40	@ 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003030:	f7fd ff38 	bl	8000ea4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003040:	f7fd ff30 	bl	8000ea4 <HAL_GetTick>
 8003044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003046:	4b39      	ldr	r3, [pc, #228]	@ (800312c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	0d1b      	lsrs	r3, r3, #20
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003056:	e054      	b.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800305e:	d050      	beq.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003060:	f7fd ff20 	bl	8000ea4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d13d      	bne.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800308e:	d111      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003098:	d004      	beq.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a2:	d107      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030bc:	d10f      	bne.n	80030de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e017      	b.n	8003122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3b01      	subs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d19b      	bne.n	8003058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000010 	.word	0x20000010

08003130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	@ 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003142:	f7fd feaf 	bl	8000ea4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003152:	f7fd fea7 	bl	8000ea4 <HAL_GetTick>
 8003156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003160:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00da      	lsls	r2, r3, #3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	0d1b      	lsrs	r3, r3, #20
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003178:	e060      	b.n	800323c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003180:	d107      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003198:	d050      	beq.n	800323c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800319a:	f7fd fe83 	bl	8000ea4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d902      	bls.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d13d      	bne.n	800322c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c8:	d111      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d2:	d004      	beq.n	80031de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031dc:	d107      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f6:	d10f      	bne.n	8003218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e010      	b.n	800324e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3b01      	subs	r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d196      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	@ 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000010 	.word	0x20000010

0800325c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003270:	d111      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327a:	d004      	beq.n	8003286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d107      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff febd 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e023      	b.n	8003304 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c4:	d11d      	bne.n	8003302 <SPI_EndRxTransaction+0xa6>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ce:	d004      	beq.n	80032da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d8:	d113      	bne.n	8003302 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff22 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e000      	b.n	8003304 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff03 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e027      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe68 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e014      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fedc 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e000      	b.n	8003390 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e042      	b.n	8003430 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd fbfd 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2224      	movs	r2, #36	@ 0x24
 80033c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fb24 	bl	8003a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f825 	bl	8003438 <UART_SetConfig>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e01b      	b.n	8003430 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fba3 	bl	8003b74 <UART_CheckIdleState>
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b08c      	sub	sp, #48	@ 0x30
 800343e:	af00      	add	r7, sp, #0
 8003440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	431a      	orrs	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4313      	orrs	r3, r2
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4baa      	ldr	r3, [pc, #680]	@ (8003710 <UART_SetConfig+0x2d8>)
 8003468:	4013      	ands	r3, r2
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003470:	430b      	orrs	r3, r1
 8003472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a9f      	ldr	r2, [pc, #636]	@ (8003714 <UART_SetConfig+0x2dc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a0:	4313      	orrs	r3, r2
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	f023 010f 	bic.w	r1, r3, #15
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a90      	ldr	r2, [pc, #576]	@ (8003718 <UART_SetConfig+0x2e0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d125      	bne.n	8003528 <UART_SetConfig+0xf0>
 80034dc:	4b8f      	ldr	r3, [pc, #572]	@ (800371c <UART_SetConfig+0x2e4>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d81a      	bhi.n	8003520 <UART_SetConfig+0xe8>
 80034ea:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <UART_SetConfig+0xb8>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003511 	.word	0x08003511
 80034f8:	08003509 	.word	0x08003509
 80034fc:	08003519 	.word	0x08003519
 8003500:	2301      	movs	r3, #1
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003506:	e116      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e112      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e10e      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e10a      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e106      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7c      	ldr	r2, [pc, #496]	@ (8003720 <UART_SetConfig+0x2e8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d138      	bne.n	80035a4 <UART_SetConfig+0x16c>
 8003532:	4b7a      	ldr	r3, [pc, #488]	@ (800371c <UART_SetConfig+0x2e4>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d82d      	bhi.n	800359c <UART_SetConfig+0x164>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <UART_SetConfig+0x110>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800357d 	.word	0x0800357d
 800354c:	0800359d 	.word	0x0800359d
 8003550:	0800359d 	.word	0x0800359d
 8003554:	0800359d 	.word	0x0800359d
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800359d 	.word	0x0800359d
 8003560:	0800359d 	.word	0x0800359d
 8003564:	0800359d 	.word	0x0800359d
 8003568:	08003585 	.word	0x08003585
 800356c:	0800359d 	.word	0x0800359d
 8003570:	0800359d 	.word	0x0800359d
 8003574:	0800359d 	.word	0x0800359d
 8003578:	08003595 	.word	0x08003595
 800357c:	2300      	movs	r3, #0
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003582:	e0d8      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003584:	2302      	movs	r3, #2
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e0d4      	b.n	8003736 <UART_SetConfig+0x2fe>
 800358c:	2304      	movs	r3, #4
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e0d0      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003594:	2308      	movs	r3, #8
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e0cc      	b.n	8003736 <UART_SetConfig+0x2fe>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a2:	e0c8      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003724 <UART_SetConfig+0x2ec>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d125      	bne.n	80035fa <UART_SetConfig+0x1c2>
 80035ae:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <UART_SetConfig+0x2e4>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035b8:	2b30      	cmp	r3, #48	@ 0x30
 80035ba:	d016      	beq.n	80035ea <UART_SetConfig+0x1b2>
 80035bc:	2b30      	cmp	r3, #48	@ 0x30
 80035be:	d818      	bhi.n	80035f2 <UART_SetConfig+0x1ba>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d00a      	beq.n	80035da <UART_SetConfig+0x1a2>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d814      	bhi.n	80035f2 <UART_SetConfig+0x1ba>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <UART_SetConfig+0x19a>
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d008      	beq.n	80035e2 <UART_SetConfig+0x1aa>
 80035d0:	e00f      	b.n	80035f2 <UART_SetConfig+0x1ba>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035d8:	e0ad      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035da:	2302      	movs	r3, #2
 80035dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e0:	e0a9      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035e2:	2304      	movs	r3, #4
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e8:	e0a5      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035ea:	2308      	movs	r3, #8
 80035ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f0:	e0a1      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035f2:	2310      	movs	r3, #16
 80035f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f8:	e09d      	b.n	8003736 <UART_SetConfig+0x2fe>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003728 <UART_SetConfig+0x2f0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d125      	bne.n	8003650 <UART_SetConfig+0x218>
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <UART_SetConfig+0x2e4>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800360e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003610:	d016      	beq.n	8003640 <UART_SetConfig+0x208>
 8003612:	2bc0      	cmp	r3, #192	@ 0xc0
 8003614:	d818      	bhi.n	8003648 <UART_SetConfig+0x210>
 8003616:	2b80      	cmp	r3, #128	@ 0x80
 8003618:	d00a      	beq.n	8003630 <UART_SetConfig+0x1f8>
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d814      	bhi.n	8003648 <UART_SetConfig+0x210>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <UART_SetConfig+0x1f0>
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	d008      	beq.n	8003638 <UART_SetConfig+0x200>
 8003626:	e00f      	b.n	8003648 <UART_SetConfig+0x210>
 8003628:	2300      	movs	r3, #0
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800362e:	e082      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003630:	2302      	movs	r3, #2
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003636:	e07e      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003638:	2304      	movs	r3, #4
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363e:	e07a      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003640:	2308      	movs	r3, #8
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003646:	e076      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003648:	2310      	movs	r3, #16
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364e:	e072      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a35      	ldr	r2, [pc, #212]	@ (800372c <UART_SetConfig+0x2f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d12a      	bne.n	80036b0 <UART_SetConfig+0x278>
 800365a:	4b30      	ldr	r3, [pc, #192]	@ (800371c <UART_SetConfig+0x2e4>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003664:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003668:	d01a      	beq.n	80036a0 <UART_SetConfig+0x268>
 800366a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800366e:	d81b      	bhi.n	80036a8 <UART_SetConfig+0x270>
 8003670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003674:	d00c      	beq.n	8003690 <UART_SetConfig+0x258>
 8003676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367a:	d815      	bhi.n	80036a8 <UART_SetConfig+0x270>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <UART_SetConfig+0x250>
 8003680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003684:	d008      	beq.n	8003698 <UART_SetConfig+0x260>
 8003686:	e00f      	b.n	80036a8 <UART_SetConfig+0x270>
 8003688:	2300      	movs	r3, #0
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368e:	e052      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e04e      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e04a      	b.n	8003736 <UART_SetConfig+0x2fe>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e046      	b.n	8003736 <UART_SetConfig+0x2fe>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e042      	b.n	8003736 <UART_SetConfig+0x2fe>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <UART_SetConfig+0x2dc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d13a      	bne.n	8003730 <UART_SetConfig+0x2f8>
 80036ba:	4b18      	ldr	r3, [pc, #96]	@ (800371c <UART_SetConfig+0x2e4>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036c8:	d01a      	beq.n	8003700 <UART_SetConfig+0x2c8>
 80036ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ce:	d81b      	bhi.n	8003708 <UART_SetConfig+0x2d0>
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d4:	d00c      	beq.n	80036f0 <UART_SetConfig+0x2b8>
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036da:	d815      	bhi.n	8003708 <UART_SetConfig+0x2d0>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <UART_SetConfig+0x2b0>
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e4:	d008      	beq.n	80036f8 <UART_SetConfig+0x2c0>
 80036e6:	e00f      	b.n	8003708 <UART_SetConfig+0x2d0>
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ee:	e022      	b.n	8003736 <UART_SetConfig+0x2fe>
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f6:	e01e      	b.n	8003736 <UART_SetConfig+0x2fe>
 80036f8:	2304      	movs	r3, #4
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	e01a      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003700:	2308      	movs	r3, #8
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e016      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003708:	2310      	movs	r3, #16
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e012      	b.n	8003736 <UART_SetConfig+0x2fe>
 8003710:	cfff69f3 	.word	0xcfff69f3
 8003714:	40008000 	.word	0x40008000
 8003718:	40013800 	.word	0x40013800
 800371c:	40021000 	.word	0x40021000
 8003720:	40004400 	.word	0x40004400
 8003724:	40004800 	.word	0x40004800
 8003728:	40004c00 	.word	0x40004c00
 800372c:	40005000 	.word	0x40005000
 8003730:	2310      	movs	r3, #16
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4aae      	ldr	r2, [pc, #696]	@ (80039f4 <UART_SetConfig+0x5bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	f040 8097 	bne.w	8003870 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003742:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003746:	2b08      	cmp	r3, #8
 8003748:	d823      	bhi.n	8003792 <UART_SetConfig+0x35a>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <UART_SetConfig+0x318>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003775 	.word	0x08003775
 8003754:	08003793 	.word	0x08003793
 8003758:	0800377d 	.word	0x0800377d
 800375c:	08003793 	.word	0x08003793
 8003760:	08003783 	.word	0x08003783
 8003764:	08003793 	.word	0x08003793
 8003768:	08003793 	.word	0x08003793
 800376c:	08003793 	.word	0x08003793
 8003770:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003774:	f7fe fc1c 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800377a:	e010      	b.n	800379e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b9e      	ldr	r3, [pc, #632]	@ (80039f8 <UART_SetConfig+0x5c0>)
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003780:	e00d      	b.n	800379e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe fba7 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8003786:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003788:	e009      	b.n	800379e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003790:	e005      	b.n	800379e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800379c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8130 	beq.w	8003a06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	4a94      	ldr	r2, [pc, #592]	@ (80039fc <UART_SetConfig+0x5c4>)
 80037ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d305      	bcc.n	80037d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d903      	bls.n	80037de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037dc:	e113      	b.n	8003a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2200      	movs	r2, #0
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	60fa      	str	r2, [r7, #12]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	4a84      	ldr	r2, [pc, #528]	@ (80039fc <UART_SetConfig+0x5c4>)
 80037ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2200      	movs	r2, #0
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003800:	f7fc fd0a 	bl	8000218 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	020b      	lsls	r3, r1, #8
 8003816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800381a:	0202      	lsls	r2, r0, #8
 800381c:	6979      	ldr	r1, [r7, #20]
 800381e:	6849      	ldr	r1, [r1, #4]
 8003820:	0849      	lsrs	r1, r1, #1
 8003822:	2000      	movs	r0, #0
 8003824:	460c      	mov	r4, r1
 8003826:	4605      	mov	r5, r0
 8003828:	eb12 0804 	adds.w	r8, r2, r4
 800382c:	eb43 0905 	adc.w	r9, r3, r5
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	469a      	mov	sl, r3
 8003838:	4693      	mov	fp, r2
 800383a:	4652      	mov	r2, sl
 800383c:	465b      	mov	r3, fp
 800383e:	4640      	mov	r0, r8
 8003840:	4649      	mov	r1, r9
 8003842:	f7fc fce9 	bl	8000218 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4613      	mov	r3, r2
 800384c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003854:	d308      	bcc.n	8003868 <UART_SetConfig+0x430>
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385c:	d204      	bcs.n	8003868 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e0ce      	b.n	8003a06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800386e:	e0ca      	b.n	8003a06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	d166      	bne.n	8003948 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800387a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800387e:	2b08      	cmp	r3, #8
 8003880:	d827      	bhi.n	80038d2 <UART_SetConfig+0x49a>
 8003882:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <UART_SetConfig+0x450>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7fe fb80 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80038b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038b2:	e014      	b.n	80038de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fb92 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80038b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038ba:	e010      	b.n	80038de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b4e      	ldr	r3, [pc, #312]	@ (80039f8 <UART_SetConfig+0x5c0>)
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fb07 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 80038c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038d0:	e005      	b.n	80038de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8090 	beq.w	8003a06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	4a44      	ldr	r2, [pc, #272]	@ (80039fc <UART_SetConfig+0x5c4>)
 80038ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f8:	005a      	lsls	r2, r3, #1
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	441a      	add	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	d916      	bls.n	8003940 <UART_SetConfig+0x508>
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d212      	bcs.n	8003940 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f023 030f 	bic.w	r3, r3, #15
 8003922:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	b29a      	uxth	r2, r3
 8003930:	8bfb      	ldrh	r3, [r7, #30]
 8003932:	4313      	orrs	r3, r2
 8003934:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	8bfa      	ldrh	r2, [r7, #30]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e062      	b.n	8003a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003946:	e05e      	b.n	8003a06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003948:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800394c:	2b08      	cmp	r3, #8
 800394e:	d828      	bhi.n	80039a2 <UART_SetConfig+0x56a>
 8003950:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <UART_SetConfig+0x520>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a3 	.word	0x080039a3
 8003968:	08003993 	.word	0x08003993
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039a3 	.word	0x080039a3
 8003978:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7fe fb18 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8003980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003982:	e014      	b.n	80039ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe fb2a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800398a:	e010      	b.n	80039ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800398c:	4b1a      	ldr	r3, [pc, #104]	@ (80039f8 <UART_SetConfig+0x5c0>)
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003990:	e00d      	b.n	80039ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7fe fa9f 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8003996:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003998:	e009      	b.n	80039ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039a0:	e005      	b.n	80039ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039ac:	bf00      	nop
    }

    if (pclk != 0U)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <UART_SetConfig+0x5c4>)
 80039ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039be:	461a      	mov	r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	441a      	add	r2, r3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d910      	bls.n	8003a00 <UART_SetConfig+0x5c8>
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d20c      	bcs.n	8003a00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e009      	b.n	8003a06 <UART_SetConfig+0x5ce>
 80039f2:	bf00      	nop
 80039f4:	40008000 	.word	0x40008000
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	080040fc 	.word	0x080040fc
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a22:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3730      	adds	r7, #48	@ 0x30
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01a      	beq.n	8003b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b2e:	d10a      	bne.n	8003b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b098      	sub	sp, #96	@ 0x60
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b84:	f7fd f98e 	bl	8000ea4 <HAL_GetTick>
 8003b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d12f      	bne.n	8003bf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f88e 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d022      	beq.n	8003bf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e6      	bne.n	8003bb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e063      	b.n	8003cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d149      	bne.n	8003c9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f857 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d03c      	beq.n	8003c9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c72:	61fa      	str	r2, [r7, #28]
 8003c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e012      	b.n	8003cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3758      	adds	r7, #88	@ 0x58
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd8:	e04f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce0:	d04b      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fd f8df 	bl	8000ea4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e04e      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d037      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b80      	cmp	r3, #128	@ 0x80
 8003d0e:	d034      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b40      	cmp	r3, #64	@ 0x40
 8003d14:	d031      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d110      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f838 	bl	8003da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2208      	movs	r2, #8
 8003d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e029      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d54:	d111      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f81e 	bl	8003da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e00f      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d0a0      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b095      	sub	sp, #84	@ 0x54
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d118      	bne.n	8003e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f023 0310 	bic.w	r3, r3, #16
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6979      	ldr	r1, [r7, #20]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e6      	bne.n	8003e1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e62:	bf00      	nop
 8003e64:	3754      	adds	r7, #84	@ 0x54
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e027      	b.n	8003ed4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003eb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e02d      	b.n	8003f54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f84f 	bl	8003fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e02d      	b.n	8003fd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	@ 0x24
 8003f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f811 	bl	8003fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d108      	bne.n	8003ffa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ff8:	e031      	b.n	800405e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ffe:	2308      	movs	r3, #8
 8004000:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	0e5b      	lsrs	r3, r3, #25
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	0f5b      	lsrs	r3, r3, #29
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004022:	7bbb      	ldrb	r3, [r7, #14]
 8004024:	7b3a      	ldrb	r2, [r7, #12]
 8004026:	4911      	ldr	r1, [pc, #68]	@ (800406c <UARTEx_SetNbDataToProcess+0x94>)
 8004028:	5c8a      	ldrb	r2, [r1, r2]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800402e:	7b3a      	ldrb	r2, [r7, #12]
 8004030:	490f      	ldr	r1, [pc, #60]	@ (8004070 <UARTEx_SetNbDataToProcess+0x98>)
 8004032:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004034:	fb93 f3f2 	sdiv	r3, r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	7b7a      	ldrb	r2, [r7, #13]
 8004044:	4909      	ldr	r1, [pc, #36]	@ (800406c <UARTEx_SetNbDataToProcess+0x94>)
 8004046:	5c8a      	ldrb	r2, [r1, r2]
 8004048:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800404c:	7b7a      	ldrb	r2, [r7, #13]
 800404e:	4908      	ldr	r1, [pc, #32]	@ (8004070 <UARTEx_SetNbDataToProcess+0x98>)
 8004050:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004052:	fb93 f3f2 	sdiv	r3, r3, r2
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	08004114 	.word	0x08004114
 8004070:	0800411c 	.word	0x0800411c

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	4d0d      	ldr	r5, [pc, #52]	@ (80040bc <__libc_init_array+0x38>)
 8004088:	4c0d      	ldr	r4, [pc, #52]	@ (80040c0 <__libc_init_array+0x3c>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	2600      	movs	r6, #0
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	4d0b      	ldr	r5, [pc, #44]	@ (80040c4 <__libc_init_array+0x40>)
 8004096:	4c0c      	ldr	r4, [pc, #48]	@ (80040c8 <__libc_init_array+0x44>)
 8004098:	f000 f818 	bl	80040cc <_init>
 800409c:	1b64      	subs	r4, r4, r5
 800409e:	10a4      	asrs	r4, r4, #2
 80040a0:	2600      	movs	r6, #0
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	0800412c 	.word	0x0800412c
 80040c0:	0800412c 	.word	0x0800412c
 80040c4:	0800412c 	.word	0x0800412c
 80040c8:	08004130 	.word	0x08004130

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
