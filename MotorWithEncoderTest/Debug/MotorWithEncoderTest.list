
MotorWithEncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080056b0  080056b0  000066b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056f0  080056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f8  080056f8  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005700  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000014  08005714  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005714  000071e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001422b  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a62  00000000  00000000  0001b26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd6  00000000  00000000  0001ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026134  00000000  00000000  0001fa2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132ca  00000000  00000000  00045b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8290  00000000  00000000  00058e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001510bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  00151100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001556fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005698 	.word	0x08005698

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08005698 	.word	0x08005698

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	ed87 0a00 	vstr	s0, [r7]
 8000d90:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	213c      	movs	r1, #60	@ 0x3c
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fc28 	bl	800360c <HAL_TIM_Encoder_Start>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 8000dda:	8afa      	ldrh	r2, [r7, #22]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	085b      	lsrs	r3, r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd0b      	ble.n	8000e1a <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	81da      	strh	r2, [r3, #14]
 8000e18:	e016      	b.n	8000e48 <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	0fda      	lsrs	r2, r3, #31
 8000e28:	4413      	add	r3, r2
 8000e2a:	105b      	asrs	r3, r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	da0a      	bge.n	8000e48 <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	889b      	ldrh	r3, [r3, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb34 	bl	80004bc <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <Encoder_AngularVelocity+0xf0>)
 8000e5a:	f7ff fb99 	bl	8000590 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4614      	mov	r4, r2
 8000e64:	461d      	mov	r5, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	889b      	ldrh	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb26 	bl	80004bc <__aeabi_i2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4620      	mov	r0, r4
 8000e76:	4629      	mov	r1, r5
 8000e78:	f7ff fcb4 	bl	80007e4 <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd96 	bl	80009b4 <__aeabi_d2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	edd3 6a00 	vldr	s13, [r3]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8afa      	ldrh	r2, [r7, #22]
 8000ea8:	819a      	strh	r2, [r3, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40768000 	.word	0x40768000

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a39      	ldr	r2, [pc, #228]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a33      	ldr	r2, [pc, #204]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <MX_GPIO_Init+0x100>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_DIR1_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f001 f812 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	@ 0x80
 8000f40:	481e      	ldr	r0, [pc, #120]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f42:	f001 f80d 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f5e:	f000 fe7d 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_DIR1_Pin;
 8000f62:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f000 fe6d 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR2_Pin;
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR2_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <MX_GPIO_Init+0x104>)
 8000f9a:	f000 fe5f 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2028      	movs	r0, #40	@ 0x28
 8000fa4:	f000 fe25 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa8:	2028      	movs	r0, #40	@ 0x28
 8000faa:	f000 fe3c 	bl	8001c26 <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	@ 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fca6 	bl	8001916 <HAL_Init>
// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f85b 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f7ff ff73 	bl	8000eb8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000fd2:	f000 fbd5 	bl	8001780 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8000fd6:	f000 faad 	bl	8001534 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000fda:	f000 fa55 	bl	8001488 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000fde:	f000 f9ff 	bl	80013e0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fe2:	f000 f89a 	bl	800111a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_DIR1_GPIO_Port,  MOTOR_DIR1_Pin, MOTOR_DIR2_GPIO_Port,  MOTOR_DIR2_Pin);
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <main+0xa0>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	9203      	str	r2, [sp, #12]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <main+0xa4>)
 8000ff4:	9202      	str	r2, [sp, #8]
 8000ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001000:	9200      	str	r2, [sp, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	4918      	ldr	r1, [pc, #96]	@ (8001068 <main+0xa8>)
 8001006:	4819      	ldr	r0, [pc, #100]	@ (800106c <main+0xac>)
 8001008:	f000 f94d 	bl	80012a6 <Motor_Init>
  Encoder_Init(&Encoder, &htim3, EncoderResolution, EncoderSampleTime);
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <main+0xb0>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <main+0xb4>)
 8001012:	edd2 7a00 	vldr	s15, [r2]
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	461a      	mov	r2, r3
 800101c:	4916      	ldr	r1, [pc, #88]	@ (8001078 <main+0xb8>)
 800101e:	4817      	ldr	r0, [pc, #92]	@ (800107c <main+0xbc>)
 8001020:	f7ff feae 	bl	8000d80 <Encoder_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <main+0xc0>)
 8001026:	f002 f85f 	bl	80030e8 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, 1);
	  TIM4->CCR1 = 80;
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  HAL_Delay(3000);
	  */
	  Motor_SetRideParameters(&Motor, 50, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	2132      	movs	r1, #50	@ 0x32
 800102e:	480f      	ldr	r0, [pc, #60]	@ (800106c <main+0xac>)
 8001030:	f000 f8a8 	bl	8001184 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <main+0xac>)
 8001036:	f000 f8ea 	bl	800120e <Motor_Ride>
	  HAL_Delay(5000);
 800103a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800103e:	f000 fcdb 	bl	80019f8 <HAL_Delay>

	  Motor_SetRideParameters(&Motor, 70, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	2146      	movs	r1, #70	@ 0x46
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <main+0xac>)
 8001048:	f000 f89c 	bl	8001184 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 800104c:	4807      	ldr	r0, [pc, #28]	@ (800106c <main+0xac>)
 800104e:	f000 f8de 	bl	800120e <Motor_Ride>
	  HAL_Delay(5000);
 8001052:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001056:	f000 fccf 	bl	80019f8 <HAL_Delay>
	  Motor_SetRideParameters(&Motor, 50, 1);
 800105a:	bf00      	nop
 800105c:	e7e5      	b.n	800102a <main+0x6a>
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000
 8001064:	48000800 	.word	0x48000800
 8001068:	20000100 	.word	0x20000100
 800106c:	20000030 	.word	0x20000030
 8001070:	20000002 	.word	0x20000002
 8001074:	20000004 	.word	0x20000004
 8001078:	200000b4 	.word	0x200000b4
 800107c:	20000048 	.word	0x20000048
 8001080:	20000068 	.word	0x20000068

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2238      	movs	r2, #56	@ 0x38
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fad4 	bl	8005640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 ff96 	bl	8001fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	2340      	movs	r3, #64	@ 0x40
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010c6:	2355      	movs	r3, #85	@ 0x55
 80010c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 f830 	bl	8002140 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010e6:	f000 f847 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fb2e 	bl	8002764 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800110e:	f000 f833 	bl	8001178 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	@ 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2019      	movs	r0, #25
 8001124:	f000 fd65 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001128:	2019      	movs	r0, #25
 800112a:	f000 fd7c 	bl	8001c26 <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10c      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		EncoderAngle = 0;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
		EncoderAngularVelocity = 0;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
		Encoder_AngularVelocity(&Encoder, &EncoderAngle, &EncoderAngularVelocity);
 8001156:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001158:	4904      	ldr	r1, [pc, #16]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800115c:	f7ff fe32 	bl	8000dc4 <Encoder_AngularVelocity>
	}
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40012c00 	.word	0x40012c00
 800116c:	20000060 	.word	0x20000060
 8001170:	20000064 	.word	0x20000064
 8001174:	20000048 	.word	0x20000048

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <Error_Handler+0x8>

08001184 <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
 8001190:	4613      	mov	r3, r2
 8001192:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d902      	bls.n	80011a0 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2264      	movs	r2, #100	@ 0x64
 800119e:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d110      	bne.n	80011ce <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6898      	ldr	r0, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	899b      	ldrh	r3, [r3, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	f000 fed2 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6918      	ldr	r0, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	8a9b      	ldrh	r3, [r3, #20]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	f000 feca 	bl	8001f60 <HAL_GPIO_WritePin>
 80011cc:	e00f      	b.n	80011ee <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6898      	ldr	r0, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	899b      	ldrh	r3, [r3, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	f000 fec1 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6918      	ldr	r0, [r3, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	8a9b      	ldrh	r3, [r3, #20]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	f000 feb9 	bl	8001f60 <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	78ba      	ldrb	r2, [r7, #2]
 80011f2:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f002 f84c 	bl	800329c <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <Motor_Ride+0x1e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7d9a      	ldrb	r2, [r3, #22]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800122a:	e036      	b.n	800129a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d107      	bne.n	8001244 <Motor_Ride+0x36>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7d99      	ldrb	r1, [r3, #22]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	460b      	mov	r3, r1
 8001240:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001242:	e02a      	b.n	800129a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b08      	cmp	r3, #8
 800124a:	d107      	bne.n	800125c <Motor_Ride+0x4e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d99      	ldrb	r1, [r3, #22]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	460b      	mov	r3, r1
 8001258:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800125a:	e01e      	b.n	800129a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d107      	bne.n	8001274 <Motor_Ride+0x66>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7d99      	ldrb	r1, [r3, #22]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001272:	e012      	b.n	800129a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d107      	bne.n	800128c <Motor_Ride+0x7e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7d99      	ldrb	r1, [r3, #22]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800128a:	e006      	b.n	800129a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7d99      	ldrb	r1, [r3, #22]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8bba      	ldrh	r2, [r7, #28]
 80012d2:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a3a      	ldr	r2, [r7, #32]
 80012d8:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012de:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_MspInit+0x44>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	@ 0x60
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_MspInit+0x44>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_MspInit+0x44>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6593      	str	r3, [r2, #88]	@ 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001326:	f000 fefb 	bl	8002120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <NMI_Handler+0x4>

08001340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <MemManage_Handler+0x4>

08001350 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <UsageFault_Handler+0x4>

08001360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 fb15 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800139e:	f002 f9c3 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000068 	.word	0x20000068

080013ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013b4:	f000 fdec 	bl	8001f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <MX_TIM1_Init+0xa0>)
 8001400:	4a20      	ldr	r2, [pc, #128]	@ (8001484 <MX_TIM1_Init+0xa4>)
 8001402:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM1_Init+0xa0>)
 8001406:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800140a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_TIM1_Init+0xa0>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_TIM1_Init+0xa0>)
 8001414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_TIM1_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_TIM1_Init+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_TIM1_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_TIM1_Init+0xa0>)
 800142e:	f001 fe03 	bl	8003038 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001438:	f7ff fe9e 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_TIM1_Init+0xa0>)
 800144a:	f002 fbd1 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001454:	f7ff fe90 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM1_Init+0xa0>)
 800146a:	f003 f99f 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001474:	f7ff fe80 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000068 	.word	0x20000068
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	@ 0x30
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2224      	movs	r2, #36	@ 0x24
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f8d2 	bl	8005640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_TIM3_Init+0xa8>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014ba:	f640 62ff 	movw	r2, #3839	@ 0xeff
 80014be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d4:	2301      	movs	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014f8:	f001 ffe2 	bl	80034c0 <HAL_TIM_Encoder_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001502:	f7ff fe39 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <MX_TIM3_Init+0xa4>)
 8001514:	f003 f94a 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800151e:	f7ff fe2b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	@ 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000b4 	.word	0x200000b4
 8001530:	40000400 	.word	0x40000400

08001534 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001566:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <MX_TIM4_Init+0xe8>)
 8001568:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <MX_TIM4_Init+0xec>)
 800156a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <MX_TIM4_Init+0xe8>)
 800156e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001572:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b29      	ldr	r3, [pc, #164]	@ (800161c <MX_TIM4_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800157a:	4b28      	ldr	r3, [pc, #160]	@ (800161c <MX_TIM4_Init+0xe8>)
 800157c:	2263      	movs	r2, #99	@ 0x63
 800157e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <MX_TIM4_Init+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b25      	ldr	r3, [pc, #148]	@ (800161c <MX_TIM4_Init+0xe8>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800158c:	4823      	ldr	r0, [pc, #140]	@ (800161c <MX_TIM4_Init+0xe8>)
 800158e:	f001 fd53 	bl	8003038 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001598:	f7ff fdee 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a6:	4619      	mov	r1, r3
 80015a8:	481c      	ldr	r0, [pc, #112]	@ (800161c <MX_TIM4_Init+0xe8>)
 80015aa:	f002 fb21 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80015b4:	f7ff fde0 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015b8:	4818      	ldr	r0, [pc, #96]	@ (800161c <MX_TIM4_Init+0xe8>)
 80015ba:	f001 fe0d 	bl	80031d8 <HAL_TIM_PWM_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80015c4:	f7ff fdd8 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	@ (800161c <MX_TIM4_Init+0xe8>)
 80015d8:	f003 f8e8 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015e2:	f7ff fdc9 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e6:	2360      	movs	r3, #96	@ 0x60
 80015e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	@ (800161c <MX_TIM4_Init+0xe8>)
 80015fe:	f002 f9e3 	bl	80039c8 <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001608:	f7ff fdb6 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <MX_TIM4_Init+0xe8>)
 800160e:	f000 f87f 	bl	8001710 <HAL_TIM_MspPostInit>

}
 8001612:	bf00      	nop
 8001614:	3738      	adds	r7, #56	@ 0x38
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000100 	.word	0x20000100
 8001620:	40000800 	.word	0x40000800

08001624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <HAL_TIM_Base_MspInit+0x5c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10c      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 800163c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001640:	6613      	str	r3, [r2, #96]	@ 0x60
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800164e:	e010      	b.n	8001672 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <HAL_TIM_Base_MspInit+0x64>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10b      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <HAL_TIM_Base_MspInit+0x60>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40000800 	.word	0x40000800

0800168c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <HAL_TIM_Encoder_MspInit+0x7c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d128      	bne.n	8001700 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	4a16      	ldr	r2, [pc, #88]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_TIM_Encoder_MspInit+0x80>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016de:	23c0      	movs	r3, #192	@ 0xc0
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ee:	2302      	movs	r3, #2
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f000 faae 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	@ 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40000400 	.word	0x40000400
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <HAL_TIM_MspPostInit+0x64>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d11b      	bne.n	800176a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_TIM_MspPostInit+0x68>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <HAL_TIM_MspPostInit+0x68>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_TIM_MspPostInit+0x68>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800174a:	2340      	movs	r3, #64	@ 0x40
 800174c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800175a:	2302      	movs	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <HAL_TIM_MspPostInit+0x6c>)
 8001766:	f000 fa79 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40000800 	.word	0x40000800
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400

08001780 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001784:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 8001786:	4a21      	ldr	r2, [pc, #132]	@ (800180c <MX_LPUART1_UART_Init+0x8c>)
 8001788:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 800178c:	4a20      	ldr	r2, [pc, #128]	@ (8001810 <MX_LPUART1_UART_Init+0x90>)
 800178e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017a4:	220c      	movs	r2, #12
 80017a6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80017c0:	4811      	ldr	r0, [pc, #68]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017c2:	f003 f8cf 	bl	8004964 <HAL_UART_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80017cc:	f7ff fcd4 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	480d      	ldr	r0, [pc, #52]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017d4:	f003 fe6a 	bl	80054ac <HAL_UARTEx_SetTxFifoThreshold>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80017de:	f7ff fccb 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017e6:	f003 fe9f 	bl	8005528 <HAL_UARTEx_SetRxFifoThreshold>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80017f0:	f7ff fcc2 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_LPUART1_UART_Init+0x88>)
 80017f6:	f003 fe20 	bl	800543a <HAL_UARTEx_DisableFifoMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001800:	f7ff fcba 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000014c 	.word	0x2000014c
 800180c:	40008000 	.word	0x40008000
 8001810:	00033324 	.word	0x00033324

08001814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b09e      	sub	sp, #120	@ 0x78
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2254      	movs	r2, #84	@ 0x54
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 ff03 	bl	8005640 <memset>
  if(uartHandle->Instance==LPUART1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1f      	ldr	r2, [pc, #124]	@ (80018bc <HAL_UART_MspInit+0xa8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d136      	bne.n	80018b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001844:	2320      	movs	r3, #32
 8001846:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4618      	mov	r0, r3
 8001852:	f001 f9a3 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800185c:	f7ff fc8c 	bl	8001178 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001860:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 8001862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001864:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_UART_MspInit+0xac>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001890:	230c      	movs	r3, #12
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018a0:	230c      	movs	r3, #12
 80018a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ae:	f000 f9d5 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80018b2:	bf00      	nop
 80018b4:	3778      	adds	r7, #120	@ 0x78
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40008000 	.word	0x40008000
 80018c0:	40021000 	.word	0x40021000

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c4:	480d      	ldr	r0, [pc, #52]	@ (80018fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff fd78 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f003 fead 	bl	8005650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff fb63 	bl	8000fc0 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   r0, =_estack
 80018fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001908:	08005700 	.word	0x08005700
  ldr r2, =_sbss
 800190c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001910:	200001e4 	.word	0x200001e4

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>

08001916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f95b 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f80e 	bl	8001948 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e001      	b.n	800193c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001938:	f7ff fcda 	bl	80012f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193c:	79fb      	ldrb	r3, [r7, #7]

}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_InitTick+0x68>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d022      	beq.n	80019a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_InitTick+0x6c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_InitTick+0x68>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001968:	fbb1 f3f3 	udiv	r3, r1, r3
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f966 	bl	8001c42 <HAL_SYSTICK_Config>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	d809      	bhi.n	8001996 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800198a:	f000 f932 	bl	8001bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_InitTick+0x70>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e007      	b.n	80019a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e004      	b.n	80019a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000010 	.word	0x20000010
 80019b4:	20000008 	.word	0x20000008
 80019b8:	2000000c 	.word	0x2000000c

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_IncTick+0x20>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a03      	ldr	r2, [pc, #12]	@ (80019d8 <HAL_IncTick+0x1c>)
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	200001e0 	.word	0x200001e0
 80019dc:	20000010 	.word	0x20000010

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200001e0 	.word	0x200001e0

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a10:	d004      	beq.n	8001a1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_Delay+0x40>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1c:	bf00      	nop
 8001a1e:	f7ff ffdf 	bl	80019e0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d8f7      	bhi.n	8001a1e <HAL_Delay+0x26>
  {
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000010 	.word	0x20000010

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff40 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa4 	bl	8001b98 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c6a:	e15a      	b.n	8001f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 814c 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0203 	and.w	r2, r3, #3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80a6 	beq.w	8001f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de8:	4a56      	ldr	r2, [pc, #344]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e12:	d01f      	beq.n	8001e54 <HAL_GPIO_Init+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4c      	ldr	r2, [pc, #304]	@ (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d019      	beq.n	8001e50 <HAL_GPIO_Init+0x1f4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1f0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4a      	ldr	r2, [pc, #296]	@ (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a49      	ldr	r2, [pc, #292]	@ (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1e4>
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	e00a      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e40:	2306      	movs	r3, #6
 8001e42:	e008      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e54:	2300      	movs	r3, #0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e66:	4937      	ldr	r1, [pc, #220]	@ (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e98:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec2:	4a26      	ldr	r2, [pc, #152]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <HAL_GPIO_Init+0x300>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f ae9d 	bne.w	8001c6c <HAL_GPIO_Init+0x10>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	48001400 	.word	0x48001400
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f806 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b43      	ldr	r3, [pc, #268]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200c:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002014:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	@ 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d158      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e057      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002068:	e04d      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002070:	d141      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002072:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207e:	d131      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2232      	movs	r2, #50	@ 0x32
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b6:	e002      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d102      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020de:	d112      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e011      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f4:	e007      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40007000 	.word	0x40007000
 8002118:	20000008 	.word	0x20000008
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800212a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212e:	6093      	str	r3, [r2, #8]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e2fe      	b.n	8002750 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b97      	ldr	r3, [pc, #604]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b94      	ldr	r3, [pc, #592]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0x3e>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d002      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b8d      	ldr	r3, [pc, #564]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e2d9      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a84      	ldr	r2, [pc, #528]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7b      	ldr	r2, [pc, #492]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b78      	ldr	r3, [pc, #480]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a77      	ldr	r2, [pc, #476]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a74      	ldr	r2, [pc, #464]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff fbf2 	bl	80019e0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fbee 	bl	80019e0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e29e      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fbde 	bl	80019e0 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fbda 	bl	80019e0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e28a      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d075      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4b56      	ldr	r3, [pc, #344]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x136>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x13c>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d11f      	bne.n	80022bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x154>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e25d      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b49      	ldr	r3, [pc, #292]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4946      	ldr	r1, [pc, #280]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a8:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb4b 	bl	8001948 <HAL_InitTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e249      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d023      	beq.n	800230c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a3c      	ldr	r2, [pc, #240]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fb86 	bl	80019e0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fb82 	bl	80019e0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e232      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ea:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b31      	ldr	r3, [pc, #196]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	492d      	ldr	r1, [pc, #180]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e01a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230c:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fb62 	bl	80019e0 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff fb5e 	bl	80019e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e20e      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1e0>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d041      	beq.n	80023d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7ff fb3b 	bl	80019e0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff fb37 	bl	80019e0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1e7      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ef      	beq.n	800236e <HAL_RCC_OscConfig+0x22e>
 800238e:	e020      	b.n	80023d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff fb1e 	bl	80019e0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a6:	e00d      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fb1a 	bl	80019e0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d906      	bls.n	80023c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1ca      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c4:	4b8c      	ldr	r3, [pc, #560]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ea      	bne.n	80023a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a6 	beq.w	800252c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023e4:	4b84      	ldr	r3, [pc, #528]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2b4>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x2b6>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	@ 0x58
 8002406:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002416:	4b79      	ldr	r3, [pc, #484]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff fad7 	bl	80019e0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fad3 	bl	80019e0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e183      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	4b6c      	ldr	r3, [pc, #432]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_RCC_OscConfig+0x32e>
 800245c:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800246c:	e024      	b.n	80024b8 <HAL_RCC_OscConfig+0x378>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d110      	bne.n	8002498 <HAL_RCC_OscConfig+0x358>
 8002476:	4b60      	ldr	r3, [pc, #384]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002486:	4b5c      	ldr	r3, [pc, #368]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4a5a      	ldr	r2, [pc, #360]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x378>
 8002498:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a56      	ldr	r2, [pc, #344]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff fa8e 	bl	80019e0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7ff fa8a 	bl	80019e0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e138      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024de:	4b46      	ldr	r3, [pc, #280]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCC_OscConfig+0x388>
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7ff fa77 	bl	80019e0 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff fa73 	bl	80019e0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e121      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800250c:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ed      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01c      	beq.n	800257a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002540:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002546:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff fa46 	bl	80019e0 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002558:	f7ff fa42 	bl	80019e0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0f2      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256a:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x418>
 8002578:	e01b      	b.n	80025b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800257a:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002580:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7ff fa29 	bl	80019e0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002592:	f7ff fa25 	bl	80019e0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d5      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80c9 	beq.w	800274e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	f000 8083 	beq.w	80026d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d15e      	bne.n	8002690 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff f9ff 	bl	80019e0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e00c      	b.n	8002600 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff f9fb 	bl	80019e0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d905      	bls.n	8002600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ab      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ec      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	4b52      	ldr	r3, [pc, #328]	@ (800275c <HAL_RCC_OscConfig+0x61c>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6a11      	ldr	r1, [r2, #32]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261c:	3a01      	subs	r2, #1
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002626:	0212      	lsls	r2, r2, #8
 8002628:	4311      	orrs	r1, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800262e:	0852      	lsrs	r2, r2, #1
 8002630:	3a01      	subs	r2, #1
 8002632:	0552      	lsls	r2, r2, #21
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800263a:	0852      	lsrs	r2, r2, #1
 800263c:	3a01      	subs	r2, #1
 800263e:	0652      	lsls	r2, r2, #25
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002646:	06d2      	lsls	r2, r2, #27
 8002648:	430a      	orrs	r2, r1
 800264a:	4943      	ldr	r1, [pc, #268]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f9ba 	bl	80019e0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff f9b6 	bl	80019e0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e066      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b35      	ldr	r3, [pc, #212]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x530>
 800268e:	e05e      	b.n	800274e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a30      	ldr	r2, [pc, #192]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff f9a0 	bl	80019e0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff f99c 	bl	80019e0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04c      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4924      	ldr	r1, [pc, #144]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCC_OscConfig+0x620>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
 80026ce:	e03e      	b.n	800274e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e039      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d12c      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d123      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d11b      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d113      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d109      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	019f800c 	.word	0x019f800c
 8002760:	feeefffc 	.word	0xfeeefffc

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e11e      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b91      	ldr	r3, [pc, #580]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	498c      	ldr	r1, [pc, #560]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b8a      	ldr	r3, [pc, #552]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e106      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d073      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d129      	bne.n	8002814 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c0:	4b81      	ldr	r3, [pc, #516]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0f4      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027d0:	f000 f99e 	bl	8002b10 <RCC_GetSysClockFreqFromPLLSource>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_ClockConfig+0x268>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d93f      	bls.n	800285e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027de:	4b7a      	ldr	r3, [pc, #488]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d033      	beq.n	800285e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12f      	bne.n	800285e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002806:	4a70      	ldr	r2, [pc, #448]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800280c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e024      	b.n	800285e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0c6      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0be      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800283c:	f000 f8ce 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4a61      	ldr	r2, [pc, #388]	@ (80029cc <HAL_RCC_ClockConfig+0x268>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d909      	bls.n	800285e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800284a:	4b5f      	ldr	r3, [pc, #380]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002852:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002858:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b5a      	ldr	r3, [pc, #360]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4957      	ldr	r1, [pc, #348]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7ff f8b6 	bl	80019e0 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7ff f8b2 	bl	80019e0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e095      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b43      	ldr	r3, [pc, #268]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a42      	ldr	r2, [pc, #264]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028d0:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028d8:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b39      	ldr	r3, [pc, #228]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4936      	ldr	r1, [pc, #216]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
 80028f2:	e008      	b.n	8002906 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b80      	cmp	r3, #128	@ 0x80
 80028f8:	d105      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002904:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002906:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d21d      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 020f 	bic.w	r2, r3, #15
 800291c:	4929      	ldr	r1, [pc, #164]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002924:	f7ff f85c 	bl	80019e0 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7ff f858 	bl	80019e0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e03b      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ed      	bne.n	800292c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4917      	ldr	r1, [pc, #92]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297a:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490f      	ldr	r1, [pc, #60]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298e:	f000 f825 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <HAL_RCC_ClockConfig+0x26c>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x270>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe ffc8 	bl	8001948 <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	04c4b400 	.word	0x04c4b400
 80029d0:	080056b0 	.word	0x080056b0
 80029d4:	20000008 	.word	0x20000008
 80029d8:	2000000c 	.word	0x2000000c

080029dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e047      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a00:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e03e      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d136      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a30:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	68d2      	ldr	r2, [r2, #12]
 8002a3c:	0a12      	lsrs	r2, r2, #8
 8002a3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
      break;
 8002a48:	e00c      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a4a:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	0a12      	lsrs	r2, r2, #8
 8002a58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
      break;
 8002a62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0e5b      	lsrs	r3, r3, #25
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e001      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a84:	693b      	ldr	r3, [r7, #16]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	016e3600 	.word	0x016e3600

08002aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	080056c0 	.word	0x080056c0

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae8:	f7ff ffda 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0adb      	lsrs	r3, r3, #11
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080056c0 	.word	0x080056c0

08002b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10c      	bne.n	8002b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3e:	68d2      	ldr	r2, [r2, #12]
 8002b40:	0a12      	lsrs	r2, r2, #8
 8002b42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
    break;
 8002b4c:	e00c      	b.n	8002b68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	0a12      	lsrs	r2, r2, #8
 8002b5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    break;
 8002b66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0e5b      	lsrs	r3, r3, #25
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b82:	687b      	ldr	r3, [r7, #4]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000
 8002b94:	016e3600 	.word	0x016e3600
 8002b98:	00f42400 	.word	0x00f42400

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8098 	beq.w	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	4a3f      	ldr	r2, [pc, #252]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a39      	ldr	r2, [pc, #228]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf2:	f7fe fef5 	bl	80019e0 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe fef1 	bl	80019e0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c0c:	e005      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c0e:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ef      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d159      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01e      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d019      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c68:	4a18      	ldr	r2, [pc, #96]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe feb1 	bl	80019e0 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c80:	e00b      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fead 	bl	80019e0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d902      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	74fb      	strb	r3, [r7, #19]
            break;
 8002c98:	e006      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ec      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	4903      	ldr	r1, [pc, #12]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	74bb      	strb	r3, [r7, #18]
 8002cca:	e005      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd8:	7c7b      	ldrb	r3, [r7, #17]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4ba7      	ldr	r3, [pc, #668]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	4aa6      	ldr	r2, [pc, #664]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 0203 	bic.w	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	499d      	ldr	r1, [pc, #628]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d18:	4b98      	ldr	r3, [pc, #608]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f023 020c 	bic.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4995      	ldr	r1, [pc, #596]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d3a:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	498c      	ldr	r1, [pc, #560]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d5c:	4b87      	ldr	r3, [pc, #540]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4984      	ldr	r1, [pc, #528]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	497b      	ldr	r1, [pc, #492]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da0:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4973      	ldr	r1, [pc, #460]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	496a      	ldr	r1, [pc, #424]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002de4:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4962      	ldr	r1, [pc, #392]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e06:	4b5d      	ldr	r3, [pc, #372]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	4959      	ldr	r1, [pc, #356]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e28:	4b54      	ldr	r3, [pc, #336]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	4951      	ldr	r1, [pc, #324]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4948      	ldr	r1, [pc, #288]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4940      	ldr	r1, [pc, #256]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a3a      	ldr	r2, [pc, #232]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea4:	4b35      	ldr	r3, [pc, #212]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	4932      	ldr	r1, [pc, #200]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ece:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	4924      	ldr	r1, [pc, #144]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002efa:	d105      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	4916      	ldr	r1, [pc, #88]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a10      	ldr	r2, [pc, #64]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d019      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a02      	ldr	r2, [pc, #8]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f76:	60d3      	str	r3, [r2, #12]
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8c:	4b29      	ldr	r3, [pc, #164]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	4926      	ldr	r1, [pc, #152]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fac:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4918      	ldr	r1, [pc, #96]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	490a      	ldr	r1, [pc, #40]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800301a:	d105      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003028:	7cbb      	ldrb	r3, [r7, #18]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e049      	b.n	80030de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fae0 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fef8 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e054      	b.n	80031aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a26      	ldr	r2, [pc, #152]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d01d      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	@ (80031cc <HAL_TIM_Base_Start_IT+0xe4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x80>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d115      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d015      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0xbe>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d011      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e008      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40013400 	.word	0x40013400
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40015000 	.word	0x40015000
 80031d4:	00010007 	.word	0x00010007

080031d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e049      	b.n	800327e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f841 	bl	8003286 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fe28 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x24>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e03c      	b.n	800333a <HAL_TIM_PWM_Start+0x9e>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d109      	bne.n	80032da <HAL_TIM_PWM_Start+0x3e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e02f      	b.n	800333a <HAL_TIM_PWM_Start+0x9e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x58>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e022      	b.n	800333a <HAL_TIM_PWM_Start+0x9e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d109      	bne.n	800330e <HAL_TIM_PWM_Start+0x72>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e015      	b.n	800333a <HAL_TIM_PWM_Start+0x9e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b10      	cmp	r3, #16
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x8c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e008      	b.n	800333a <HAL_TIM_PWM_Start+0x9e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0a6      	b.n	8003490 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_TIM_PWM_Start+0xb6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003350:	e023      	b.n	800339a <HAL_TIM_PWM_Start+0xfe>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0xc6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003360:	e01b      	b.n	800339a <HAL_TIM_PWM_Start+0xfe>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0xd6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	e013      	b.n	800339a <HAL_TIM_PWM_Start+0xfe>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d104      	bne.n	8003382 <HAL_TIM_PWM_Start+0xe6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003380:	e00b      	b.n	800339a <HAL_TIM_PWM_Start+0xfe>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b10      	cmp	r3, #16
 8003386:	d104      	bne.n	8003392 <HAL_TIM_PWM_Start+0xf6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003390:	e003      	b.n	800339a <HAL_TIM_PWM_Start+0xfe>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 f9dc 	bl	8004760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <HAL_TIM_PWM_Start+0x1fc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <HAL_TIM_PWM_Start+0x148>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a39      	ldr	r2, [pc, #228]	@ (800349c <HAL_TIM_PWM_Start+0x200>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_TIM_PWM_Start+0x148>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a37      	ldr	r2, [pc, #220]	@ (80034a0 <HAL_TIM_PWM_Start+0x204>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_TIM_PWM_Start+0x148>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_TIM_PWM_Start+0x208>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_TIM_PWM_Start+0x148>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_TIM_PWM_Start+0x20c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIM_PWM_Start+0x148>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a33      	ldr	r2, [pc, #204]	@ (80034ac <HAL_TIM_PWM_Start+0x210>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x14c>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_TIM_PWM_Start+0x14e>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <HAL_TIM_PWM_Start+0x1fc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003410:	d01d      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a26      	ldr	r2, [pc, #152]	@ (80034b0 <HAL_TIM_PWM_Start+0x214>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a24      	ldr	r2, [pc, #144]	@ (80034b4 <HAL_TIM_PWM_Start+0x218>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a23      	ldr	r2, [pc, #140]	@ (80034b8 <HAL_TIM_PWM_Start+0x21c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_TIM_PWM_Start+0x200>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_TIM_PWM_Start+0x204>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIM_PWM_Start+0x1b2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <HAL_TIM_PWM_Start+0x210>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d115      	bne.n	800347a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_TIM_PWM_Start+0x220>)
 8003456:	4013      	ands	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d015      	beq.n	800348c <HAL_TIM_PWM_Start+0x1f0>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003466:	d011      	beq.n	800348c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	e008      	b.n	800348c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e000      	b.n	800348e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40013400 	.word	0x40013400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40015000 	.word	0x40015000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e097      	b.n	8003604 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7fe f8cf 	bl	800168c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003504:	f023 0307 	bic.w	r3, r3, #7
 8003508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 fca9 	bl	8003e6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	4313      	orrs	r3, r2
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003560:	f023 030c 	bic.w	r3, r3, #12
 8003564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800356c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	4313      	orrs	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	011a      	lsls	r2, r3, #4
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	031b      	lsls	r3, r3, #12
 8003590:	4313      	orrs	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800359e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4313      	orrs	r3, r2
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800361c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800362c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d110      	bne.n	800365e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003642:	7b7b      	ldrb	r3, [r7, #13]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e069      	b.n	8003720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800365c:	e031      	b.n	80036c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d110      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800366a:	7b3b      	ldrb	r3, [r7, #12]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e055      	b.n	8003720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003684:	e01d      	b.n	80036c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003692:	7b7b      	ldrb	r3, [r7, #13]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003698:	7b3b      	ldrb	r3, [r7, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e03e      	b.n	8003720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_TIM_Encoder_Start+0xc4>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d008      	beq.n	80036e0 <HAL_TIM_Encoder_Start+0xd4>
 80036ce:	e00f      	b.n	80036f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f841 	bl	8004760 <TIM_CCxChannelCmd>
      break;
 80036de:	e016      	b.n	800370e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	2104      	movs	r1, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 f839 	bl	8004760 <TIM_CCxChannelCmd>
      break;
 80036ee:	e00e      	b.n	800370e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f831 	bl	8004760 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	2104      	movs	r1, #4
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f82a 	bl	8004760 <TIM_CCxChannelCmd>
      break;
 800370c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d020      	beq.n	800378c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0202 	mvn.w	r2, #2
 800375c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fb5c 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fb4e 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb5f 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0204 	mvn.w	r2, #4
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fb36 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fb28 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb39 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0208 	mvn.w	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2204      	movs	r2, #4
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fb10 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb02 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb13 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 faea 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fadc 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 faed 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0201 	mvn.w	r2, #1
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fc50 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f001 f815 	bl	80048ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 f80d 	bl	8004900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 faa7 	bl	8003e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0220 	mvn.w	r2, #32
 8003926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 ffd5 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 ffe1 	bl	8004914 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 ffd9 	bl	8004928 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 ffd1 	bl	800493c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80039b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 ffc9 	bl	8004950 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0ff      	b.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b14      	cmp	r3, #20
 80039f2:	f200 80f0 	bhi.w	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003bd7 	.word	0x08003bd7
 8003a04:	08003bd7 	.word	0x08003bd7
 8003a08:	08003bd7 	.word	0x08003bd7
 8003a0c:	08003a91 	.word	0x08003a91
 8003a10:	08003bd7 	.word	0x08003bd7
 8003a14:	08003bd7 	.word	0x08003bd7
 8003a18:	08003bd7 	.word	0x08003bd7
 8003a1c:	08003ad3 	.word	0x08003ad3
 8003a20:	08003bd7 	.word	0x08003bd7
 8003a24:	08003bd7 	.word	0x08003bd7
 8003a28:	08003bd7 	.word	0x08003bd7
 8003a2c:	08003b13 	.word	0x08003b13
 8003a30:	08003bd7 	.word	0x08003bd7
 8003a34:	08003bd7 	.word	0x08003bd7
 8003a38:	08003bd7 	.word	0x08003bd7
 8003a3c:	08003b55 	.word	0x08003b55
 8003a40:	08003bd7 	.word	0x08003bd7
 8003a44:	08003bd7 	.word	0x08003bd7
 8003a48:	08003bd7 	.word	0x08003bd7
 8003a4c:	08003b95 	.word	0x08003b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fabc 	bl	8003fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0208 	orr.w	r2, r2, #8
 8003a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	619a      	str	r2, [r3, #24]
      break;
 8003a8e:	e0a5      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fb36 	bl	8004108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
      break;
 8003ad0:	e084      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fba9 	bl	8004230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0208 	orr.w	r2, r2, #8
 8003aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0204 	bic.w	r2, r2, #4
 8003afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69d9      	ldr	r1, [r3, #28]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
      break;
 8003b10:	e064      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fc1b 	bl	8004354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	021a      	lsls	r2, r3, #8
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	61da      	str	r2, [r3, #28]
      break;
 8003b52:	e043      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc8e 	bl	800447c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0208 	orr.w	r2, r2, #8
 8003b6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003b92:	e023      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fcd8 	bl	8004550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIM_ConfigClockSource+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0f6      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x20a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6f      	ldr	r2, [pc, #444]	@ (8003e04 <HAL_TIM_ConfigClockSource+0x214>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f000 80c1 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003e04 <HAL_TIM_ConfigClockSource+0x214>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f200 80c6 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c54:	4a6c      	ldr	r2, [pc, #432]	@ (8003e08 <HAL_TIM_ConfigClockSource+0x218>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 80b9 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <HAL_TIM_ConfigClockSource+0x218>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f200 80be 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c64:	4a69      	ldr	r2, [pc, #420]	@ (8003e0c <HAL_TIM_ConfigClockSource+0x21c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	f000 80b1 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c6c:	4a67      	ldr	r2, [pc, #412]	@ (8003e0c <HAL_TIM_ConfigClockSource+0x21c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f200 80b6 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c74:	4a66      	ldr	r2, [pc, #408]	@ (8003e10 <HAL_TIM_ConfigClockSource+0x220>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f000 80a9 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c7c:	4a64      	ldr	r2, [pc, #400]	@ (8003e10 <HAL_TIM_ConfigClockSource+0x220>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f200 80ae 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c84:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_TIM_ConfigClockSource+0x224>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f000 80a1 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c8c:	4a61      	ldr	r2, [pc, #388]	@ (8003e14 <HAL_TIM_ConfigClockSource+0x224>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f200 80a6 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c94:	4a60      	ldr	r2, [pc, #384]	@ (8003e18 <HAL_TIM_ConfigClockSource+0x228>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	f000 8099 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e18 <HAL_TIM_ConfigClockSource+0x228>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	f200 809e 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ca4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ca8:	f000 8091 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003cac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003cb0:	f200 8096 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb8:	f000 8089 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc0:	f200 808e 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc8:	d03e      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x158>
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cce:	f200 8087 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	f000 8086 	beq.w	8003de6 <HAL_TIM_ConfigClockSource+0x1f6>
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cde:	d87f      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ce0:	2b70      	cmp	r3, #112	@ 0x70
 8003ce2:	d01a      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x12a>
 8003ce4:	2b70      	cmp	r3, #112	@ 0x70
 8003ce6:	d87b      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ce8:	2b60      	cmp	r3, #96	@ 0x60
 8003cea:	d050      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x19e>
 8003cec:	2b60      	cmp	r3, #96	@ 0x60
 8003cee:	d877      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cf0:	2b50      	cmp	r3, #80	@ 0x50
 8003cf2:	d03c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x17e>
 8003cf4:	2b50      	cmp	r3, #80	@ 0x50
 8003cf6:	d873      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d058      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x1be>
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d86f      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d00:	2b30      	cmp	r3, #48	@ 0x30
 8003d02:	d064      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003d04:	2b30      	cmp	r3, #48	@ 0x30
 8003d06:	d86b      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d060      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d867      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05c      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d05a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x1de>
 8003d18:	e062      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d2a:	f000 fcf9 	bl	8004720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	609a      	str	r2, [r3, #8]
      break;
 8003d46:	e04f      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d58:	f000 fce2 	bl	8004720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6a:	609a      	str	r2, [r3, #8]
      break;
 8003d6c:	e03c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 fc54 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2150      	movs	r1, #80	@ 0x50
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fcad 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e02c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 fc73 	bl	8004686 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2160      	movs	r1, #96	@ 0x60
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fc9d 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e01c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 fc34 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2140      	movs	r1, #64	@ 0x40
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fc8d 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e00c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f000 fc84 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8003dde:	e003      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00100070 	.word	0x00100070
 8003e08:	00100060 	.word	0x00100060
 8003e0c:	00100050 	.word	0x00100050
 8003e10:	00100040 	.word	0x00100040
 8003e14:	00100030 	.word	0x00100030
 8003e18:	00100020 	.word	0x00100020

08003e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d017      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a49      	ldr	r2, [pc, #292]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a48      	ldr	r2, [pc, #288]	@ (8003fb8 <TIM_Base_SetConfig+0x14c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a47      	ldr	r2, [pc, #284]	@ (8003fbc <TIM_Base_SetConfig+0x150>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a46      	ldr	r2, [pc, #280]	@ (8003fc0 <TIM_Base_SetConfig+0x154>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x48>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a45      	ldr	r2, [pc, #276]	@ (8003fc4 <TIM_Base_SetConfig+0x158>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a39      	ldr	r2, [pc, #228]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d023      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed4:	d01f      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a36      	ldr	r2, [pc, #216]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a35      	ldr	r2, [pc, #212]	@ (8003fb8 <TIM_Base_SetConfig+0x14c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a34      	ldr	r2, [pc, #208]	@ (8003fbc <TIM_Base_SetConfig+0x150>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a33      	ldr	r2, [pc, #204]	@ (8003fc0 <TIM_Base_SetConfig+0x154>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a33      	ldr	r2, [pc, #204]	@ (8003fc8 <TIM_Base_SetConfig+0x15c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a32      	ldr	r2, [pc, #200]	@ (8003fcc <TIM_Base_SetConfig+0x160>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a31      	ldr	r2, [pc, #196]	@ (8003fd0 <TIM_Base_SetConfig+0x164>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0xaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <TIM_Base_SetConfig+0x158>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <TIM_Base_SetConfig+0x110>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc0 <TIM_Base_SetConfig+0x154>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00f      	beq.n	8003f7c <TIM_Base_SetConfig+0x110>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <TIM_Base_SetConfig+0x15c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_Base_SetConfig+0x110>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a19      	ldr	r2, [pc, #100]	@ (8003fcc <TIM_Base_SetConfig+0x160>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_Base_SetConfig+0x110>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <TIM_Base_SetConfig+0x164>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0x110>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <TIM_Base_SetConfig+0x158>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40015000 	.word	0x40015000
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0201 	bic.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 0302 	bic.w	r3, r3, #2
 8004020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a30      	ldr	r2, [pc, #192]	@ (80040f0 <TIM_OC1_SetConfig+0x11c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <TIM_OC1_SetConfig+0x88>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2f      	ldr	r2, [pc, #188]	@ (80040f4 <TIM_OC1_SetConfig+0x120>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00f      	beq.n	800405c <TIM_OC1_SetConfig+0x88>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2e      	ldr	r2, [pc, #184]	@ (80040f8 <TIM_OC1_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_OC1_SetConfig+0x88>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a2d      	ldr	r2, [pc, #180]	@ (80040fc <TIM_OC1_SetConfig+0x128>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_OC1_SetConfig+0x88>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a2c      	ldr	r2, [pc, #176]	@ (8004100 <TIM_OC1_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC1_SetConfig+0x88>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a2b      	ldr	r2, [pc, #172]	@ (8004104 <TIM_OC1_SetConfig+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10c      	bne.n	8004076 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0308 	bic.w	r3, r3, #8
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <TIM_OC1_SetConfig+0x11c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_OC1_SetConfig+0xd2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <TIM_OC1_SetConfig+0x120>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_OC1_SetConfig+0xd2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <TIM_OC1_SetConfig+0x124>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_OC1_SetConfig+0xd2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1a      	ldr	r2, [pc, #104]	@ (80040fc <TIM_OC1_SetConfig+0x128>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_OC1_SetConfig+0xd2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <TIM_OC1_SetConfig+0x12c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC1_SetConfig+0xd2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <TIM_OC1_SetConfig+0x130>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40013400 	.word	0x40013400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	40015000 	.word	0x40015000

08004108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 0210 	bic.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <TIM_OC2_SetConfig+0x110>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_OC2_SetConfig+0x74>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2b      	ldr	r2, [pc, #172]	@ (800421c <TIM_OC2_SetConfig+0x114>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x74>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a2a      	ldr	r2, [pc, #168]	@ (8004220 <TIM_OC2_SetConfig+0x118>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10d      	bne.n	8004198 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <TIM_OC2_SetConfig+0x110>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <TIM_OC2_SetConfig+0xc0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1e      	ldr	r2, [pc, #120]	@ (800421c <TIM_OC2_SetConfig+0x114>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00f      	beq.n	80041c8 <TIM_OC2_SetConfig+0xc0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004224 <TIM_OC2_SetConfig+0x11c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_OC2_SetConfig+0xc0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <TIM_OC2_SetConfig+0x120>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_OC2_SetConfig+0xc0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1c      	ldr	r2, [pc, #112]	@ (800422c <TIM_OC2_SetConfig+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_OC2_SetConfig+0xc0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <TIM_OC2_SetConfig+0x118>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d113      	bne.n	80041f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40013400 	.word	0x40013400
 8004220:	40015000 	.word	0x40015000
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800427c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	@ (800433c <TIM_OC3_SetConfig+0x10c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_OC3_SetConfig+0x72>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	@ (8004340 <TIM_OC3_SetConfig+0x110>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_OC3_SetConfig+0x72>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <TIM_OC3_SetConfig+0x114>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10d      	bne.n	80042be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <TIM_OC3_SetConfig+0x10c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <TIM_OC3_SetConfig+0xbe>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <TIM_OC3_SetConfig+0x110>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00f      	beq.n	80042ee <TIM_OC3_SetConfig+0xbe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004348 <TIM_OC3_SetConfig+0x118>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_OC3_SetConfig+0xbe>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <TIM_OC3_SetConfig+0x11c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_OC3_SetConfig+0xbe>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <TIM_OC3_SetConfig+0x120>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC3_SetConfig+0xbe>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a16      	ldr	r2, [pc, #88]	@ (8004344 <TIM_OC3_SetConfig+0x114>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d113      	bne.n	8004316 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40015000 	.word	0x40015000
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800

08004354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800438e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004464 <TIM_OC4_SetConfig+0x110>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_OC4_SetConfig+0x74>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004468 <TIM_OC4_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC4_SetConfig+0x74>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <TIM_OC4_SetConfig+0x118>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10d      	bne.n	80043e4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	031b      	lsls	r3, r3, #12
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <TIM_OC4_SetConfig+0x110>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <TIM_OC4_SetConfig+0xc0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004468 <TIM_OC4_SetConfig+0x114>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00f      	beq.n	8004414 <TIM_OC4_SetConfig+0xc0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <TIM_OC4_SetConfig+0x11c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_OC4_SetConfig+0xc0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <TIM_OC4_SetConfig+0x120>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_OC4_SetConfig+0xc0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <TIM_OC4_SetConfig+0x124>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC4_SetConfig+0xc0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <TIM_OC4_SetConfig+0x118>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d113      	bne.n	800443c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004422:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40015000 	.word	0x40015000
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800

0800447c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <TIM_OC5_SetConfig+0xbc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_OC5_SetConfig+0x82>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a18      	ldr	r2, [pc, #96]	@ (800453c <TIM_OC5_SetConfig+0xc0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_OC5_SetConfig+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <TIM_OC5_SetConfig+0xc4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_OC5_SetConfig+0x82>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <TIM_OC5_SetConfig+0xc8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_OC5_SetConfig+0x82>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <TIM_OC5_SetConfig+0xcc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_OC5_SetConfig+0x82>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a14      	ldr	r2, [pc, #80]	@ (800454c <TIM_OC5_SetConfig+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d109      	bne.n	8004512 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	40015000 	.word	0x40015000

08004550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <TIM_OC6_SetConfig+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_OC6_SetConfig+0x84>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <TIM_OC6_SetConfig+0xc4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_OC6_SetConfig+0x84>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <TIM_OC6_SetConfig+0xc8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_OC6_SetConfig+0x84>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a17      	ldr	r2, [pc, #92]	@ (800461c <TIM_OC6_SetConfig+0xcc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_OC6_SetConfig+0x84>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <TIM_OC6_SetConfig+0xd0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC6_SetConfig+0x84>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <TIM_OC6_SetConfig+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d109      	bne.n	80045e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800
 8004624:	40015000 	.word	0x40015000

08004628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 030a 	bic.w	r3, r3, #10
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004686:	b480      	push	{r7}
 8004688:	b087      	sub	sp, #28
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0210 	bic.w	r2, r3, #16
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	031b      	lsls	r3, r3, #12
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80046fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	f043 0307 	orr.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800473a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	431a      	orrs	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2201      	movs	r2, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e074      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a33      	ldr	r2, [pc, #204]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a31      	ldr	r2, [pc, #196]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004808:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a21      	ldr	r2, [pc, #132]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004844:	d01d      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a11      	ldr	r2, [pc, #68]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40015000 	.word	0x40015000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40014000 	.word	0x40014000

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e042      	b.n	80049fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc ff43 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2224      	movs	r2, #36	@ 0x24
 8004992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fb24 	bl	8004ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f825 	bl	8004a04 <UART_SetConfig>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01b      	b.n	80049fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fba3 	bl	8005140 <UART_CheckIdleState>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b08c      	sub	sp, #48	@ 0x30
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4baa      	ldr	r3, [pc, #680]	@ (8004cdc <UART_SetConfig+0x2d8>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a9f      	ldr	r2, [pc, #636]	@ (8004ce0 <UART_SetConfig+0x2dc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	f023 010f 	bic.w	r1, r3, #15
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a90      	ldr	r2, [pc, #576]	@ (8004ce4 <UART_SetConfig+0x2e0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d125      	bne.n	8004af4 <UART_SetConfig+0xf0>
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d81a      	bhi.n	8004aec <UART_SetConfig+0xe8>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0xb8>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad2:	e116      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	e112      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	e10e      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e10a      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e106      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7c      	ldr	r2, [pc, #496]	@ (8004cec <UART_SetConfig+0x2e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d138      	bne.n	8004b70 <UART_SetConfig+0x16c>
 8004afe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d82d      	bhi.n	8004b68 <UART_SetConfig+0x164>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <UART_SetConfig+0x110>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b69 	.word	0x08004b69
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b69 	.word	0x08004b69
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b61 	.word	0x08004b61
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e0d8      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e0d4      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e0d0      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004b60:	2308      	movs	r3, #8
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e0cc      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6e:	e0c8      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf0 <UART_SetConfig+0x2ec>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d125      	bne.n	8004bc6 <UART_SetConfig+0x1c2>
 8004b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b84:	2b30      	cmp	r3, #48	@ 0x30
 8004b86:	d016      	beq.n	8004bb6 <UART_SetConfig+0x1b2>
 8004b88:	2b30      	cmp	r3, #48	@ 0x30
 8004b8a:	d818      	bhi.n	8004bbe <UART_SetConfig+0x1ba>
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d00a      	beq.n	8004ba6 <UART_SetConfig+0x1a2>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d814      	bhi.n	8004bbe <UART_SetConfig+0x1ba>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <UART_SetConfig+0x19a>
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d008      	beq.n	8004bae <UART_SetConfig+0x1aa>
 8004b9c:	e00f      	b.n	8004bbe <UART_SetConfig+0x1ba>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba4:	e0ad      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bac:	e0a9      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb4:	e0a5      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbc:	e0a1      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc4:	e09d      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf4 <UART_SetConfig+0x2f0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d125      	bne.n	8004c1c <UART_SetConfig+0x218>
 8004bd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bdc:	d016      	beq.n	8004c0c <UART_SetConfig+0x208>
 8004bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004be0:	d818      	bhi.n	8004c14 <UART_SetConfig+0x210>
 8004be2:	2b80      	cmp	r3, #128	@ 0x80
 8004be4:	d00a      	beq.n	8004bfc <UART_SetConfig+0x1f8>
 8004be6:	2b80      	cmp	r3, #128	@ 0x80
 8004be8:	d814      	bhi.n	8004c14 <UART_SetConfig+0x210>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <UART_SetConfig+0x1f0>
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d008      	beq.n	8004c04 <UART_SetConfig+0x200>
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x210>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e082      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c02:	e07e      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0a:	e07a      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c12:	e076      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1a:	e072      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a35      	ldr	r2, [pc, #212]	@ (8004cf8 <UART_SetConfig+0x2f4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d12a      	bne.n	8004c7c <UART_SetConfig+0x278>
 8004c26:	4b30      	ldr	r3, [pc, #192]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c34:	d01a      	beq.n	8004c6c <UART_SetConfig+0x268>
 8004c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c3a:	d81b      	bhi.n	8004c74 <UART_SetConfig+0x270>
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c40:	d00c      	beq.n	8004c5c <UART_SetConfig+0x258>
 8004c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c46:	d815      	bhi.n	8004c74 <UART_SetConfig+0x270>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <UART_SetConfig+0x250>
 8004c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c50:	d008      	beq.n	8004c64 <UART_SetConfig+0x260>
 8004c52:	e00f      	b.n	8004c74 <UART_SetConfig+0x270>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5a:	e052      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c62:	e04e      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6a:	e04a      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c72:	e046      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7a:	e042      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a17      	ldr	r2, [pc, #92]	@ (8004ce0 <UART_SetConfig+0x2dc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d13a      	bne.n	8004cfc <UART_SetConfig+0x2f8>
 8004c86:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <UART_SetConfig+0x2e4>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c94:	d01a      	beq.n	8004ccc <UART_SetConfig+0x2c8>
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9a:	d81b      	bhi.n	8004cd4 <UART_SetConfig+0x2d0>
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca0:	d00c      	beq.n	8004cbc <UART_SetConfig+0x2b8>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d815      	bhi.n	8004cd4 <UART_SetConfig+0x2d0>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <UART_SetConfig+0x2b0>
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb0:	d008      	beq.n	8004cc4 <UART_SetConfig+0x2c0>
 8004cb2:	e00f      	b.n	8004cd4 <UART_SetConfig+0x2d0>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cba:	e022      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc2:	e01e      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cca:	e01a      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e016      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e012      	b.n	8004d02 <UART_SetConfig+0x2fe>
 8004cdc:	cfff69f3 	.word	0xcfff69f3
 8004ce0:	40008000 	.word	0x40008000
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	40005000 	.word	0x40005000
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4aae      	ldr	r2, [pc, #696]	@ (8004fc0 <UART_SetConfig+0x5bc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f040 8097 	bne.w	8004e3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d823      	bhi.n	8004d5e <UART_SetConfig+0x35a>
 8004d16:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <UART_SetConfig+0x318>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d4f 	.word	0x08004d4f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d5f 	.word	0x08004d5f
 8004d3c:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d40:	f7fd feba 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d46:	e010      	b.n	8004d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b9e      	ldr	r3, [pc, #632]	@ (8004fc4 <UART_SetConfig+0x5c0>)
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fd fe45 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8004d52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d5c:	e005      	b.n	8004d6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8130 	beq.w	8004fd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	4a94      	ldr	r2, [pc, #592]	@ (8004fc8 <UART_SetConfig+0x5c4>)
 8004d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d305      	bcc.n	8004da2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d903      	bls.n	8004daa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004da8:	e113      	b.n	8004fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	2200      	movs	r2, #0
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	60fa      	str	r2, [r7, #12]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	4a84      	ldr	r2, [pc, #528]	@ (8004fc8 <UART_SetConfig+0x5c4>)
 8004db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dcc:	f7fb fe42 	bl	8000a54 <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	020b      	lsls	r3, r1, #8
 8004de2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004de6:	0202      	lsls	r2, r0, #8
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	6849      	ldr	r1, [r1, #4]
 8004dec:	0849      	lsrs	r1, r1, #1
 8004dee:	2000      	movs	r0, #0
 8004df0:	460c      	mov	r4, r1
 8004df2:	4605      	mov	r5, r0
 8004df4:	eb12 0804 	adds.w	r8, r2, r4
 8004df8:	eb43 0905 	adc.w	r9, r3, r5
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	469a      	mov	sl, r3
 8004e04:	4693      	mov	fp, r2
 8004e06:	4652      	mov	r2, sl
 8004e08:	465b      	mov	r3, fp
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	f7fb fe21 	bl	8000a54 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e20:	d308      	bcc.n	8004e34 <UART_SetConfig+0x430>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e28:	d204      	bcs.n	8004e34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e0ce      	b.n	8004fd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e3a:	e0ca      	b.n	8004fd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e44:	d166      	bne.n	8004f14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d827      	bhi.n	8004e9e <UART_SetConfig+0x49a>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <UART_SetConfig+0x450>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	08004e9f 	.word	0x08004e9f
 8004e64:	08004e8f 	.word	0x08004e8f
 8004e68:	08004e9f 	.word	0x08004e9f
 8004e6c:	08004e9f 	.word	0x08004e9f
 8004e70:	08004e9f 	.word	0x08004e9f
 8004e74:	08004e97 	.word	0x08004e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7fd fe1e 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e7e:	e014      	b.n	8004eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fd fe30 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004e84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e86:	e010      	b.n	8004eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e88:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc4 <UART_SetConfig+0x5c0>)
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e8c:	e00d      	b.n	8004eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8e:	f7fd fda5 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8004e92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e94:	e009      	b.n	8004eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e9c:	e005      	b.n	8004eaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8090 	beq.w	8004fd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	4a44      	ldr	r2, [pc, #272]	@ (8004fc8 <UART_SetConfig+0x5c4>)
 8004eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	441a      	add	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	d916      	bls.n	8004f0c <UART_SetConfig+0x508>
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee4:	d212      	bcs.n	8004f0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f023 030f 	bic.w	r3, r3, #15
 8004eee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	8bfb      	ldrh	r3, [r7, #30]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	8bfa      	ldrh	r2, [r7, #30]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	e062      	b.n	8004fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f12:	e05e      	b.n	8004fd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d828      	bhi.n	8004f6e <UART_SetConfig+0x56a>
 8004f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <UART_SetConfig+0x520>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f6f 	.word	0x08004f6f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fd fdb6 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f4e:	e014      	b.n	8004f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fd fdc8 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004f54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f56:	e010      	b.n	8004f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <UART_SetConfig+0x5c0>)
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f5c:	e00d      	b.n	8004f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fd fd3d 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8004f62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f64:	e009      	b.n	8004f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f6c:	e005      	b.n	8004f7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f78:	bf00      	nop
    }

    if (pclk != 0U)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d028      	beq.n	8004fd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	4a10      	ldr	r2, [pc, #64]	@ (8004fc8 <UART_SetConfig+0x5c4>)
 8004f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	441a      	add	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d910      	bls.n	8004fcc <UART_SetConfig+0x5c8>
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d20c      	bcs.n	8004fcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x5ce>
 8004fbe:	bf00      	nop
 8004fc0:	40008000 	.word	0x40008000
 8004fc4:	00f42400 	.word	0x00f42400
 8004fc8:	080056c8 	.word	0x080056c8
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3730      	adds	r7, #48	@ 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01a      	beq.n	8005112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fa:	d10a      	bne.n	8005112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b098      	sub	sp, #96	@ 0x60
 8005144:	af02      	add	r7, sp, #8
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005150:	f7fc fc46 	bl	80019e0 <HAL_GetTick>
 8005154:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d12f      	bne.n	80051c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f88e 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d022      	beq.n	80051c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005192:	653b      	str	r3, [r7, #80]	@ 0x50
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800519c:	647b      	str	r3, [r7, #68]	@ 0x44
 800519e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e6      	bne.n	800517e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e063      	b.n	800528c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d149      	bne.n	8005266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051da:	2200      	movs	r2, #0
 80051dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f857 	bl	8005294 <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03c      	beq.n	8005266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	623b      	str	r3, [r7, #32]
   return(result);
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
 800520c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e6      	bne.n	80051ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60fb      	str	r3, [r7, #12]
   return(result);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800523e:	61fa      	str	r2, [r7, #28]
 8005240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	69b9      	ldr	r1, [r7, #24]
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	617b      	str	r3, [r7, #20]
   return(result);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e012      	b.n	800528c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3758      	adds	r7, #88	@ 0x58
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a4:	e04f      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ac:	d04b      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ae:	f7fc fb97 	bl	80019e0 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d302      	bcc.n	80052c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e04e      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d037      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b80      	cmp	r3, #128	@ 0x80
 80052da:	d034      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d031      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d110      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2208      	movs	r2, #8
 80052f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f838 	bl	800536e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2208      	movs	r2, #8
 8005302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e029      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005320:	d111      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800532a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f81e 	bl	800536e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e00f      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	429a      	cmp	r2, r3
 8005362:	d0a0      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800536e:	b480      	push	{r7}
 8005370:	b095      	sub	sp, #84	@ 0x54
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005394:	643b      	str	r3, [r7, #64]	@ 0x40
 8005396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800539a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e3      	bne.n	80053a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d118      	bne.n	800541a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f023 0310 	bic.w	r3, r3, #16
 80053fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6979      	ldr	r1, [r7, #20]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e6      	bne.n	80053e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800542e:	bf00      	nop
 8005430:	3754      	adds	r7, #84	@ 0x54
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_UARTEx_DisableFifoMode+0x16>
 800544c:	2302      	movs	r3, #2
 800544e:	e027      	b.n	80054a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2224      	movs	r2, #36	@ 0x24
 800545c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800547e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e02d      	b.n	8005520 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2224      	movs	r2, #36	@ 0x24
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f84f 	bl	80055a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e02d      	b.n	800559c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	@ 0x24
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f811 	bl	80055a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055c4:	e031      	b.n	800562a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055c6:	2308      	movs	r3, #8
 80055c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055ca:	2308      	movs	r3, #8
 80055cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	0e5b      	lsrs	r3, r3, #25
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	0f5b      	lsrs	r3, r3, #29
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	7b3a      	ldrb	r2, [r7, #12]
 80055f2:	4911      	ldr	r1, [pc, #68]	@ (8005638 <UARTEx_SetNbDataToProcess+0x94>)
 80055f4:	5c8a      	ldrb	r2, [r1, r2]
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055fa:	7b3a      	ldrb	r2, [r7, #12]
 80055fc:	490f      	ldr	r1, [pc, #60]	@ (800563c <UARTEx_SetNbDataToProcess+0x98>)
 80055fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005600:	fb93 f3f2 	sdiv	r3, r3, r2
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	7b7a      	ldrb	r2, [r7, #13]
 8005610:	4909      	ldr	r1, [pc, #36]	@ (8005638 <UARTEx_SetNbDataToProcess+0x94>)
 8005612:	5c8a      	ldrb	r2, [r1, r2]
 8005614:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005618:	7b7a      	ldrb	r2, [r7, #13]
 800561a:	4908      	ldr	r1, [pc, #32]	@ (800563c <UARTEx_SetNbDataToProcess+0x98>)
 800561c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800561e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005622:	b29a      	uxth	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	080056e0 	.word	0x080056e0
 800563c:	080056e8 	.word	0x080056e8

08005640 <memset>:
 8005640:	4402      	add	r2, r0
 8005642:	4603      	mov	r3, r0
 8005644:	4293      	cmp	r3, r2
 8005646:	d100      	bne.n	800564a <memset+0xa>
 8005648:	4770      	bx	lr
 800564a:	f803 1b01 	strb.w	r1, [r3], #1
 800564e:	e7f9      	b.n	8005644 <memset+0x4>

08005650 <__libc_init_array>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4d0d      	ldr	r5, [pc, #52]	@ (8005688 <__libc_init_array+0x38>)
 8005654:	4c0d      	ldr	r4, [pc, #52]	@ (800568c <__libc_init_array+0x3c>)
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	2600      	movs	r6, #0
 800565c:	42a6      	cmp	r6, r4
 800565e:	d109      	bne.n	8005674 <__libc_init_array+0x24>
 8005660:	4d0b      	ldr	r5, [pc, #44]	@ (8005690 <__libc_init_array+0x40>)
 8005662:	4c0c      	ldr	r4, [pc, #48]	@ (8005694 <__libc_init_array+0x44>)
 8005664:	f000 f818 	bl	8005698 <_init>
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	2600      	movs	r6, #0
 800566e:	42a6      	cmp	r6, r4
 8005670:	d105      	bne.n	800567e <__libc_init_array+0x2e>
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f855 3b04 	ldr.w	r3, [r5], #4
 8005678:	4798      	blx	r3
 800567a:	3601      	adds	r6, #1
 800567c:	e7ee      	b.n	800565c <__libc_init_array+0xc>
 800567e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005682:	4798      	blx	r3
 8005684:	3601      	adds	r6, #1
 8005686:	e7f2      	b.n	800566e <__libc_init_array+0x1e>
 8005688:	080056f8 	.word	0x080056f8
 800568c:	080056f8 	.word	0x080056f8
 8005690:	080056f8 	.word	0x080056f8
 8005694:	080056fc 	.word	0x080056fc

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
