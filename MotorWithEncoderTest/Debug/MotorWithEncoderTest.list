
MotorWithEncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005598  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005770  08005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  0000701c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b8  080057b8  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080057c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000001c  080057dc  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080057dc  0000721c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145f5  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b77  00000000  00000000  0001b641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  0001f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000310a  00000000  00000000  0001ff5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c8c  00000000  00000000  00023068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbcf5  00000000  00000000  00036cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001329e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004680  00000000  00000000  00132a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001370ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005758 	.word	0x08005758

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08005758 	.word	0x08005758

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	ed87 0a00 	vstr	s0, [r7]
 8000d90:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	213c      	movs	r1, #60	@ 0x3c
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fc88 	bl	80036cc <HAL_TIM_Encoder_Start>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 8000dda:	8afa      	ldrh	r2, [r7, #22]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	085b      	lsrs	r3, r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd0b      	ble.n	8000e1a <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	81da      	strh	r2, [r3, #14]
 8000e18:	e016      	b.n	8000e48 <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	0fda      	lsrs	r2, r3, #31
 8000e28:	4413      	add	r3, r2
 8000e2a:	105b      	asrs	r3, r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	da0a      	bge.n	8000e48 <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	889b      	ldrh	r3, [r3, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb34 	bl	80004bc <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <Encoder_AngularVelocity+0xf0>)
 8000e5a:	f7ff fb99 	bl	8000590 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4614      	mov	r4, r2
 8000e64:	461d      	mov	r5, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	889b      	ldrh	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb26 	bl	80004bc <__aeabi_i2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4620      	mov	r0, r4
 8000e76:	4629      	mov	r1, r5
 8000e78:	f7ff fcb4 	bl	80007e4 <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd96 	bl	80009b4 <__aeabi_d2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	edd3 6a00 	vldr	s13, [r3]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8afa      	ldrh	r2, [r7, #22]
 8000ea8:	819a      	strh	r2, [r3, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40768000 	.word	0x40768000

08000eb8 <PID_Init>:
 *      Author: jakub
 */
#include "PID.h"

void PID_Init(PID_t *Pid, float P, float I, float D, float SampleTime, float MaxValue, float MinValue)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	61f8      	str	r0, [r7, #28]
 8000ec0:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ec4:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ec8:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ecc:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ed0:	ed87 2a02 	vstr	s4, [r7, #8]
 8000ed4:	edc7 2a01 	vstr	s5, [r7, #4]
	Pid->P = P;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	601a      	str	r2, [r3, #0]
	Pid->I = I;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	605a      	str	r2, [r3, #4]
	Pid->D = D;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	609a      	str	r2, [r3, #8]

	Pid->SampleTime = SampleTime;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	60da      	str	r2, [r3, #12]
	Pid->MaxValue = MaxValue;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	615a      	str	r2, [r3, #20]
	Pid->MinValue = MinValue;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]

	Pid->Integrator = 0;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	Pid->LastError = 0;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
	Pid->Clamp = 0;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000f14:	bf00      	nop
 8000f16:	3724      	adds	r7, #36	@ 0x24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a39      	ldr	r2, [pc, #228]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a33      	ldr	r2, [pc, #204]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b2e      	ldr	r3, [pc, #184]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_DIR1_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f001 f83e 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	481e      	ldr	r0, [pc, #120]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000faa:	f001 f839 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4817      	ldr	r0, [pc, #92]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000fc6:	f000 fea9 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_DIR1_Pin;
 8000fca:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe6:	f000 fe99 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR2_Pin;
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <MX_GPIO_Init+0x104>)
 8001002:	f000 fe8b 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2028      	movs	r0, #40	@ 0x28
 800100c:	f000 fe51 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f000 fe68 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fcd2 	bl	80019d6 <HAL_Init>
// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f887 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f7ff ff73 	bl	8000f20 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800103a:	f000 fc01 	bl	8001840 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 800103e:	f000 fad9 	bl	80015f4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001042:	f000 fa81 	bl	8001548 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001046:	f000 fa2b 	bl	80014a0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800104a:	f000 f8c6 	bl	80011da <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_DIR1_GPIO_Port,  MOTOR_DIR1_Pin, MOTOR_DIR2_GPIO_Port,  MOTOR_DIR2_Pin);
 800104e:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <main+0xe0>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	9203      	str	r2, [sp, #12]
 800105a:	4a2c      	ldr	r2, [pc, #176]	@ (800110c <main+0xe4>)
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	4928      	ldr	r1, [pc, #160]	@ (8001110 <main+0xe8>)
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <main+0xec>)
 8001070:	f000 f979 	bl	8001366 <Motor_Init>
  Encoder_Init(&Encoder, &htim3, EncoderResolution, EncoderSampleTime);
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <main+0xf0>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4a28      	ldr	r2, [pc, #160]	@ (800111c <main+0xf4>)
 800107a:	edd2 7a00 	vldr	s15, [r2]
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	461a      	mov	r2, r3
 8001084:	4926      	ldr	r1, [pc, #152]	@ (8001120 <main+0xf8>)
 8001086:	4827      	ldr	r0, [pc, #156]	@ (8001124 <main+0xfc>)
 8001088:	f7ff fe7a 	bl	8000d80 <Encoder_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800108c:	4826      	ldr	r0, [pc, #152]	@ (8001128 <main+0x100>)
 800108e:	f002 f88b 	bl	80031a8 <HAL_TIM_Base_Start_IT>

  PID_Init(&PID_Speed, P, I, D, PID_SpeedSampleTime, PID_MinValue, PID_MinValue);
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <main+0x104>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <main+0x108>)
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <main+0x10c>)
 80010a0:	edd3 6a00 	vldr	s13, [r3]
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <main+0x110>)
 80010a6:	ed93 6a00 	vldr	s12, [r3]
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <main+0x114>)
 80010ac:	edd3 5a00 	vldr	s11, [r3]
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <main+0x114>)
 80010b2:	ed93 5a00 	vldr	s10, [r3]
 80010b6:	eef0 2a45 	vmov.f32	s5, s10
 80010ba:	eeb0 2a65 	vmov.f32	s4, s11
 80010be:	eef0 1a46 	vmov.f32	s3, s12
 80010c2:	eeb0 1a66 	vmov.f32	s2, s13
 80010c6:	eef0 0a47 	vmov.f32	s1, s14
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	481c      	ldr	r0, [pc, #112]	@ (8001140 <main+0x118>)
 80010d0:	f7ff fef2 	bl	8000eb8 <PID_Init>
	  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, 1);
	  TIM4->CCR1 = 80;
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  HAL_Delay(3000);
	  */
	  Motor_SetRideParameters(&Motor, 50, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2132      	movs	r1, #50	@ 0x32
 80010d8:	480e      	ldr	r0, [pc, #56]	@ (8001114 <main+0xec>)
 80010da:	f000 f8b3 	bl	8001244 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <main+0xec>)
 80010e0:	f000 f8f5 	bl	80012ce <Motor_Ride>
	  HAL_Delay(5000);
 80010e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010e8:	f000 fce6 	bl	8001ab8 <HAL_Delay>

	  Motor_SetRideParameters(&Motor, 70, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2146      	movs	r1, #70	@ 0x46
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <main+0xec>)
 80010f2:	f000 f8a7 	bl	8001244 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 80010f6:	4807      	ldr	r0, [pc, #28]	@ (8001114 <main+0xec>)
 80010f8:	f000 f8e9 	bl	80012ce <Motor_Ride>
	  HAL_Delay(5000);
 80010fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001100:	f000 fcda 	bl	8001ab8 <HAL_Delay>
	  Motor_SetRideParameters(&Motor, 50, 1);
 8001104:	bf00      	nop
 8001106:	e7e5      	b.n	80010d4 <main+0xac>
 8001108:	20000000 	.word	0x20000000
 800110c:	48000800 	.word	0x48000800
 8001110:	20000138 	.word	0x20000138
 8001114:	20000038 	.word	0x20000038
 8001118:	20000002 	.word	0x20000002
 800111c:	20000004 	.word	0x20000004
 8001120:	200000ec 	.word	0x200000ec
 8001124:	20000050 	.word	0x20000050
 8001128:	200000a0 	.word	0x200000a0
 800112c:	20000008 	.word	0x20000008
 8001130:	20000094 	.word	0x20000094
 8001134:	20000098 	.word	0x20000098
 8001138:	2000000c 	.word	0x2000000c
 800113c:	2000009c 	.word	0x2000009c
 8001140:	20000070 	.word	0x20000070

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2238      	movs	r2, #56	@ 0x38
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fad4 	bl	8005700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 ff96 	bl	8002098 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2340      	movs	r3, #64	@ 0x40
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001182:	2304      	movs	r3, #4
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001186:	2355      	movs	r3, #85	@ 0x55
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f830 	bl	8002200 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011a6:	f000 f847 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2104      	movs	r1, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fb2e 	bl	8002824 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ce:	f000 f833 	bl	8001238 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3750      	adds	r7, #80	@ 0x50
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2019      	movs	r0, #25
 80011e4:	f000 fd65 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011e8:	2019      	movs	r0, #25
 80011ea:	f000 fd7c 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10c      	bne.n	8001220 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		EncoderAngle = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
		EncoderAngularVelocity = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
		Encoder_AngularVelocity(&Encoder, &EncoderAngle, &EncoderAngularVelocity);
 8001216:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001218:	4904      	ldr	r1, [pc, #16]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800121c:	f7ff fdd2 	bl	8000dc4 <Encoder_AngularVelocity>
	}
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40012c00 	.word	0x40012c00
 800122c:	20000068 	.word	0x20000068
 8001230:	2000006c 	.word	0x2000006c
 8001234:	20000050 	.word	0x20000050

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d902      	bls.n	8001260 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2264      	movs	r2, #100	@ 0x64
 800125e:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	78fa      	ldrb	r2, [r7, #3]
 8001264:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	899b      	ldrh	r3, [r3, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f000 fed2 	bl	8002020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6918      	ldr	r0, [r3, #16]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8a9b      	ldrh	r3, [r3, #20]
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	f000 feca 	bl	8002020 <HAL_GPIO_WritePin>
 800128c:	e00f      	b.n	80012ae <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	899b      	ldrh	r3, [r3, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f000 fec1 	bl	8002020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6918      	ldr	r0, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	8a9b      	ldrh	r3, [r3, #20]
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	f000 feb9 	bl	8002020 <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f002 f84c 	bl	800335c <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <Motor_Ride+0x1e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7d9a      	ldrb	r2, [r3, #22]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012ea:	e036      	b.n	800135a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d107      	bne.n	8001304 <Motor_Ride+0x36>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7d99      	ldrb	r1, [r3, #22]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	460b      	mov	r3, r1
 8001300:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001302:	e02a      	b.n	800135a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d107      	bne.n	800131c <Motor_Ride+0x4e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7d99      	ldrb	r1, [r3, #22]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	460b      	mov	r3, r1
 8001318:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800131a:	e01e      	b.n	800135a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d107      	bne.n	8001334 <Motor_Ride+0x66>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7d99      	ldrb	r1, [r3, #22]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	460b      	mov	r3, r1
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001332:	e012      	b.n	800135a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b10      	cmp	r3, #16
 800133a:	d107      	bne.n	800134c <Motor_Ride+0x7e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7d99      	ldrb	r1, [r3, #22]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800134a:	e006      	b.n	800135a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7d99      	ldrb	r1, [r3, #22]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	460b      	mov	r3, r1
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8bba      	ldrh	r2, [r7, #28]
 8001392:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a3a      	ldr	r2, [r7, #32]
 8001398:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800139e:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013e6:	f000 fefb 	bl	80021e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 fb15 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800145e:	f002 f9c3 	bl	80037e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000a0 	.word	0x200000a0

0800146c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001470:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001474:	f000 fdec 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014c0:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <MX_TIM1_Init+0xa4>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014c6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80014ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014ee:	f001 fe03 	bl	80030f8 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f7ff fe9e 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_TIM1_Init+0xa0>)
 800150a:	f002 fbd1 	bl	8003cb0 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001514:	f7ff fe90 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_TIM1_Init+0xa0>)
 800152a:	f003 f99f 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001534:	f7ff fe80 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000a0 	.word	0x200000a0
 8001544:	40012c00 	.word	0x40012c00

08001548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	@ 0x30
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2224      	movs	r2, #36	@ 0x24
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f8d2 	bl	8005700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <MX_TIM3_Init+0xa4>)
 8001568:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <MX_TIM3_Init+0xa8>)
 800156a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <MX_TIM3_Init+0xa4>)
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <MX_TIM3_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_TIM3_Init+0xa4>)
 800157a:	f640 62ff 	movw	r2, #3839	@ 0xeff
 800157e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_TIM3_Init+0xa4>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <MX_TIM3_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800158c:	2301      	movs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001594:	2301      	movs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	@ (80015ec <MX_TIM3_Init+0xa4>)
 80015b8:	f001 ffe2 	bl	8003580 <HAL_TIM_Encoder_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80015c2:	f7ff fe39 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ce:	463b      	mov	r3, r7
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <MX_TIM3_Init+0xa4>)
 80015d4:	f003 f94a 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015de:	f7ff fe2b 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000ec 	.word	0x200000ec
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	@ 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001626:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001628:	4a2d      	ldr	r2, [pc, #180]	@ (80016e0 <MX_TIM4_Init+0xec>)
 800162a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <MX_TIM4_Init+0xe8>)
 800162e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <MX_TIM4_Init+0xe8>)
 800163c:	2263      	movs	r2, #99	@ 0x63
 800163e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164c:	4823      	ldr	r0, [pc, #140]	@ (80016dc <MX_TIM4_Init+0xe8>)
 800164e:	f001 fd53 	bl	80030f8 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001658:	f7ff fdee 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001666:	4619      	mov	r1, r3
 8001668:	481c      	ldr	r0, [pc, #112]	@ (80016dc <MX_TIM4_Init+0xe8>)
 800166a:	f002 fb21 	bl	8003cb0 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001674:	f7ff fde0 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001678:	4818      	ldr	r0, [pc, #96]	@ (80016dc <MX_TIM4_Init+0xe8>)
 800167a:	f001 fe0d 	bl	8003298 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001684:	f7ff fdd8 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001698:	f003 f8e8 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016a2:	f7ff fdc9 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	@ 0x60
 80016a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	@ (80016dc <MX_TIM4_Init+0xe8>)
 80016be:	f002 f9e3 	bl	8003a88 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016c8:	f7ff fdb6 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016cc:	4803      	ldr	r0, [pc, #12]	@ (80016dc <MX_TIM4_Init+0xe8>)
 80016ce:	f000 f87f 	bl	80017d0 <HAL_TIM_MspPostInit>

}
 80016d2:	bf00      	nop
 80016d4:	3738      	adds	r7, #56	@ 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000138 	.word	0x20000138
 80016e0:	40000800 	.word	0x40000800

080016e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <HAL_TIM_Base_MspInit+0x5c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10c      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 80016fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001700:	6613      	str	r3, [r2, #96]	@ 0x60
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800170e:	e010      	b.n	8001732 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x64>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10b      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6593      	str	r3, [r2, #88]	@ 0x58
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_TIM_Base_MspInit+0x60>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40000800 	.word	0x40000800

0800174c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d128      	bne.n	80017c0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6593      	str	r3, [r2, #88]	@ 0x58
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a10      	ldr	r2, [pc, #64]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_TIM_Encoder_MspInit+0x80>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179e:	23c0      	movs	r3, #192	@ 0xc0
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ae:	2302      	movs	r3, #2
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017bc:	f000 faae 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_TIM_MspPostInit+0x64>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d11b      	bne.n	800182a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_TIM_MspPostInit+0x68>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <HAL_TIM_MspPostInit+0x68>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_TIM_MspPostInit+0x68>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180a:	2340      	movs	r3, #64	@ 0x40
 800180c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800181a:	2302      	movs	r3, #2
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_TIM_MspPostInit+0x6c>)
 8001826:	f000 fa79 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40000800 	.word	0x40000800
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400

08001840 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001846:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <MX_LPUART1_UART_Init+0x8c>)
 8001848:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 800184c:	4a20      	ldr	r2, [pc, #128]	@ (80018d0 <MX_LPUART1_UART_Init+0x90>)
 800184e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001864:	220c      	movs	r2, #12
 8001866:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001882:	f003 f8cf 	bl	8004a24 <HAL_UART_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800188c:	f7ff fcd4 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 8001894:	f003 fe6a 	bl	800556c <HAL_UARTEx_SetTxFifoThreshold>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800189e:	f7ff fccb 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 80018a6:	f003 fe9f 	bl	80055e8 <HAL_UARTEx_SetRxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80018b0:	f7ff fcc2 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_LPUART1_UART_Init+0x88>)
 80018b6:	f003 fe20 	bl	80054fa <HAL_UARTEx_DisableFifoMode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80018c0:	f7ff fcba 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000184 	.word	0x20000184
 80018cc:	40008000 	.word	0x40008000
 80018d0:	00033324 	.word	0x00033324

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b09e      	sub	sp, #120	@ 0x78
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2254      	movs	r2, #84	@ 0x54
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 ff03 	bl	8005700 <memset>
  if(uartHandle->Instance==LPUART1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_UART_MspInit+0xa8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d136      	bne.n	8001972 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001904:	2320      	movs	r3, #32
 8001906:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f9a3 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800191c:	f7ff fc8c 	bl	8001238 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_UART_MspInit+0xac>)
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	4a16      	ldr	r2, [pc, #88]	@ (8001980 <HAL_UART_MspInit+0xac>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_UART_MspInit+0xac>)
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_UART_MspInit+0xac>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193c:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <HAL_UART_MspInit+0xac>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_UART_MspInit+0xac>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001950:	230c      	movs	r3, #12
 8001952:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001960:	230c      	movs	r3, #12
 8001962:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196e:	f000 f9d5 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	3778      	adds	r7, #120	@ 0x78
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40008000 	.word	0x40008000
 8001980:	40021000 	.word	0x40021000

08001984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001984:	480d      	ldr	r0, [pc, #52]	@ (80019bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001986:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001988:	f7ff fd78 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	@ (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f003 fead 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b6:	f7ff fb37 	bl	8001028 <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   r0, =_estack
 80019bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80019c8:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 80019cc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80019d0:	2000021c 	.word	0x2000021c

080019d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_2_IRQHandler>

080019d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f95b 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f80e 	bl	8001a08 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	e001      	b.n	80019fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f8:	f7ff fcda 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019fc:	79fb      	ldrb	r3, [r7, #7]

}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a14:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_InitTick+0x68>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d022      	beq.n	8001a62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_InitTick+0x6c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <HAL_InitTick+0x68>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f966 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10f      	bne.n	8001a5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	d809      	bhi.n	8001a56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a42:	2200      	movs	r2, #0
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a4a:	f000 f932 	bl	8001cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_InitTick+0x70>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e004      	b.n	8001a66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e001      	b.n	8001a66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000018 	.word	0x20000018
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000014 	.word	0x20000014

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x1c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a03      	ldr	r2, [pc, #12]	@ (8001a98 <HAL_IncTick+0x1c>)
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	20000218 	.word	0x20000218
 8001a9c:	20000018 	.word	0x20000018

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000218 	.word	0x20000218

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ad0:	d004      	beq.n	8001adc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_Delay+0x40>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001adc:	bf00      	nop
 8001ade:	f7ff ffdf 	bl	8001aa0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8f7      	bhi.n	8001ade <HAL_Delay+0x26>
  {
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000018 	.word	0x20000018

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	@ (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff40 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff33 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa4 	bl	8001c58 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d2a:	e15a      	b.n	8001fe2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 814c 	beq.w	8001fdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d017      	beq.n	8001dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d123      	bne.n	8001e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0203 	and.w	r2, r3, #3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <HAL_GPIO_Init+0x2e4>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e94:	4a5a      	ldr	r2, [pc, #360]	@ (8002000 <HAL_GPIO_Init+0x2e4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e9c:	4b58      	ldr	r3, [pc, #352]	@ (8002000 <HAL_GPIO_Init+0x2e4>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea8:	4a56      	ldr	r2, [pc, #344]	@ (8002004 <HAL_GPIO_Init+0x2e8>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ed2:	d01f      	beq.n	8001f14 <HAL_GPIO_Init+0x1f8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d019      	beq.n	8001f10 <HAL_GPIO_Init+0x1f4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4b      	ldr	r2, [pc, #300]	@ (800200c <HAL_GPIO_Init+0x2f0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_GPIO_Init+0x1f0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_GPIO_Init+0x2f4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00d      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_GPIO_Init+0x2f8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a48      	ldr	r2, [pc, #288]	@ (8002018 <HAL_GPIO_Init+0x2fc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001efc:	2305      	movs	r3, #5
 8001efe:	e00a      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f00:	2306      	movs	r3, #6
 8001f02:	e008      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e006      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e004      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001f14:	2300      	movs	r3, #0
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	f002 0203 	and.w	r2, r2, #3
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f26:	4937      	ldr	r1, [pc, #220]	@ (8002004 <HAL_GPIO_Init+0x2e8>)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f34:	4b39      	ldr	r3, [pc, #228]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f58:	4a30      	ldr	r2, [pc, #192]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f82:	4a26      	ldr	r2, [pc, #152]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f ae9d 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000
 8002004:	40010000 	.word	0x40010000
 8002008:	48000400 	.word	0x48000400
 800200c:	48000800 	.word	0x48000800
 8002010:	48000c00 	.word	0x48000c00
 8002014:	48001000 	.word	0x48001000
 8002018:	48001400 	.word	0x48001400
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e002      	b.n	8002044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f806 	bl	8002080 <HAL_GPIO_EXTI_Callback>
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d141      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a6:	4b4b      	ldr	r3, [pc, #300]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b2:	d131      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b4:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ba:	4a46      	ldr	r2, [pc, #280]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c4:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020cc:	4a41      	ldr	r2, [pc, #260]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d4:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2232      	movs	r2, #50	@ 0x32
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a3f      	ldr	r2, [pc, #252]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	3301      	adds	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ea:	e002      	b.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f2:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d102      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f2      	bne.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002106:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002112:	d158      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e057      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002118:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800211e:	4a2d      	ldr	r2, [pc, #180]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002128:	e04d      	b.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d141      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d131      	bne.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002140:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002146:	4a23      	ldr	r2, [pc, #140]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002150:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002158:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002160:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2232      	movs	r2, #50	@ 0x32
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002176:	e002      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3b01      	subs	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218a:	d102      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f2      	bne.n	8002178 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219e:	d112      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e011      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021b4:	e007      	b.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40007000 	.word	0x40007000
 80021d8:	20000010 	.word	0x20000010
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ee:	6093      	str	r3, [r2, #8]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e2fe      	b.n	8002810 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b97      	ldr	r3, [pc, #604]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b94      	ldr	r3, [pc, #592]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d102      	bne.n	800223e <HAL_RCC_OscConfig+0x3e>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d002      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b8d      	ldr	r3, [pc, #564]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e2d9      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b85      	ldr	r3, [pc, #532]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a84      	ldr	r2, [pc, #528]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7e      	ldr	r2, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7b      	ldr	r2, [pc, #492]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b78      	ldr	r3, [pc, #480]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a77      	ldr	r2, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b75      	ldr	r3, [pc, #468]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a74      	ldr	r2, [pc, #464]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fbf2 	bl	8001aa0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fbee 	bl	8001aa0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e29e      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d2:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fbde 	bl	8001aa0 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fbda 	bl	8001aa0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e28a      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	4b60      	ldr	r3, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d075      	beq.n	8002402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002316:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002320:	4b56      	ldr	r3, [pc, #344]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d102      	bne.n	8002336 <HAL_RCC_OscConfig+0x136>
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d002      	beq.n	800233c <HAL_RCC_OscConfig+0x13c>
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d11f      	bne.n	800237c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x154>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e25d      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b49      	ldr	r3, [pc, #292]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4946      	ldr	r1, [pc, #280]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <HAL_RCC_OscConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fb4b 	bl	8001a08 <HAL_InitTick>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d043      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e249      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d023      	beq.n	80023cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3c      	ldr	r2, [pc, #240]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fb86 	bl	8001aa0 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fb82 	bl	8001aa0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e232      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	492d      	ldr	r1, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 80023ca:	e01a      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2a      	ldr	r2, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb62 	bl	8001aa0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff fb5e 	bl	8001aa0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e20e      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1e0>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d041      	beq.n	8002492 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01c      	beq.n	8002450 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241c:	4a17      	ldr	r2, [pc, #92]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7ff fb3b 	bl	8001aa0 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7ff fb37 	bl	8001aa0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1e7      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ef      	beq.n	800242e <HAL_RCC_OscConfig+0x22e>
 800244e:	e020      	b.n	8002492 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002456:	4a09      	ldr	r2, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x27c>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff fb1e 	bl	8001aa0 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002466:	e00d      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fb1a 	bl	8001aa0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d906      	bls.n	8002484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1ca      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	4b8c      	ldr	r3, [pc, #560]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ea      	bne.n	8002468 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a6 	beq.w	80025ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a4:	4b84      	ldr	r3, [pc, #528]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2b4>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	4a7e      	ldr	r2, [pc, #504]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d6:	4b79      	ldr	r3, [pc, #484]	@ (80026bc <HAL_RCC_OscConfig+0x4bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d118      	bne.n	8002514 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e2:	4b76      	ldr	r3, [pc, #472]	@ (80026bc <HAL_RCC_OscConfig+0x4bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a75      	ldr	r2, [pc, #468]	@ (80026bc <HAL_RCC_OscConfig+0x4bc>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ee:	f7ff fad7 	bl	8001aa0 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7ff fad3 	bl	8001aa0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e183      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002508:	4b6c      	ldr	r3, [pc, #432]	@ (80026bc <HAL_RCC_OscConfig+0x4bc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_RCC_OscConfig+0x32e>
 800251c:	4b66      	ldr	r3, [pc, #408]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	4a65      	ldr	r2, [pc, #404]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800252c:	e024      	b.n	8002578 <HAL_RCC_OscConfig+0x378>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d110      	bne.n	8002558 <HAL_RCC_OscConfig+0x358>
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253c:	4a5e      	ldr	r2, [pc, #376]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002546:	4b5c      	ldr	r3, [pc, #368]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	4a5a      	ldr	r2, [pc, #360]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002556:	e00f      	b.n	8002578 <HAL_RCC_OscConfig+0x378>
 8002558:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	4a56      	ldr	r2, [pc, #344]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a52      	ldr	r2, [pc, #328]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff fa8e 	bl	8001aa0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff fa8a 	bl	8001aa0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e138      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	4b46      	ldr	r3, [pc, #280]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ed      	beq.n	8002588 <HAL_RCC_OscConfig+0x388>
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff fa77 	bl	8001aa0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff fa73 	bl	8001aa0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e121      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025cc:	4b3a      	ldr	r3, [pc, #232]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ed      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	4a34      	ldr	r2, [pc, #208]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03c      	beq.n	8002672 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01c      	beq.n	800263a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002600:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002606:	4a2c      	ldr	r2, [pc, #176]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7ff fa46 	bl	8001aa0 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002618:	f7ff fa42 	bl	8001aa0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0f2      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800262c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ef      	beq.n	8002618 <HAL_RCC_OscConfig+0x418>
 8002638:	e01b      	b.n	8002672 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800263a:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800263c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002640:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7ff fa29 	bl	8001aa0 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002652:	f7ff fa25 	bl	8001aa0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0d5      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ef      	bne.n	8002652 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80c9 	beq.w	800280e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b0c      	cmp	r3, #12
 8002686:	f000 8083 	beq.w	8002790 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d15e      	bne.n	8002750 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff f9ff 	bl	8001aa0 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a4:	e00c      	b.n	80026c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7ff f9fb 	bl	8001aa0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d905      	bls.n	80026c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0ab      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	4b55      	ldr	r3, [pc, #340]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ec      	bne.n	80026a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_RCC_OscConfig+0x61c>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a11      	ldr	r1, [r2, #32]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026dc:	3a01      	subs	r2, #1
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026e6:	0212      	lsls	r2, r2, #8
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026ee:	0852      	lsrs	r2, r2, #1
 80026f0:	3a01      	subs	r2, #1
 80026f2:	0552      	lsls	r2, r2, #21
 80026f4:	4311      	orrs	r1, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026fa:	0852      	lsrs	r2, r2, #1
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0652      	lsls	r2, r2, #25
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002706:	06d2      	lsls	r2, r2, #27
 8002708:	430a      	orrs	r2, r1
 800270a:	4943      	ldr	r1, [pc, #268]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 800270c:	4313      	orrs	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800271c:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a3d      	ldr	r2, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002726:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff f9ba 	bl	8001aa0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff f9b6 	bl	8001aa0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e066      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002742:	4b35      	ldr	r3, [pc, #212]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x530>
 800274e:	e05e      	b.n	800280e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b31      	ldr	r3, [pc, #196]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a30      	ldr	r2, [pc, #192]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f9a0 	bl	8001aa0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff f99c 	bl	8001aa0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04c      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4924      	ldr	r1, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 8002788:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <HAL_RCC_OscConfig+0x620>)
 800278a:	4013      	ands	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
 800278e:	e03e      	b.n	800280e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e039      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_OscConfig+0x618>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d12c      	bne.n	800280a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	3b01      	subs	r3, #1
 80027bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d123      	bne.n	800280a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d11b      	bne.n	800280a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d109      	bne.n	800280a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	3b01      	subs	r3, #1
 8002804:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	019f800c 	.word	0x019f800c
 8002820:	feeefffc 	.word	0xfeeefffc

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e11e      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b91      	ldr	r3, [pc, #580]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d910      	bls.n	800286c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b8e      	ldr	r3, [pc, #568]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	498c      	ldr	r1, [pc, #560]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e106      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d073      	beq.n	8002960 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d129      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002880:	4b81      	ldr	r3, [pc, #516]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0f4      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002890:	f000 f99e 	bl	8002bd0 <RCC_GetSysClockFreqFromPLLSource>
 8002894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4a7c      	ldr	r2, [pc, #496]	@ (8002a8c <HAL_RCC_ClockConfig+0x268>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d93f      	bls.n	800291e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800289e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d033      	beq.n	800291e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12f      	bne.n	800291e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028be:	4b72      	ldr	r3, [pc, #456]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028c6:	4a70      	ldr	r2, [pc, #448]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e024      	b.n	800291e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d107      	bne.n	80028ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0c6      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0be      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028fc:	f000 f8ce 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4a61      	ldr	r2, [pc, #388]	@ (8002a8c <HAL_RCC_ClockConfig+0x268>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d909      	bls.n	800291e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002912:	4a5d      	ldr	r2, [pc, #372]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002918:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4957      	ldr	r1, [pc, #348]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7ff f8b6 	bl	8001aa0 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7ff f8b2 	bl	8001aa0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e095      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a42      	ldr	r2, [pc, #264]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 800297e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002982:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002990:	4b3d      	ldr	r3, [pc, #244]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002998:	4a3b      	ldr	r2, [pc, #236]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 800299a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800299e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4936      	ldr	r1, [pc, #216]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b80      	cmp	r3, #128	@ 0x80
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ba:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 80029c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d21d      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 020f 	bic.w	r2, r3, #15
 80029dc:	4929      	ldr	r1, [pc, #164]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029e4:	f7ff f85c 	bl	8001aa0 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7ff f858 	bl	8001aa0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e03b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	@ (8002a84 <HAL_RCC_ClockConfig+0x260>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1ed      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4917      	ldr	r1, [pc, #92]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490f      	ldr	r1, [pc, #60]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a4e:	f000 f825 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_RCC_ClockConfig+0x264>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490c      	ldr	r1, [pc, #48]	@ (8002a90 <HAL_RCC_ClockConfig+0x26c>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x270>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_RCC_ClockConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe ffc8 	bl	8001a08 <HAL_InitTick>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	04c4b400 	.word	0x04c4b400
 8002a90:	08005770 	.word	0x08005770
 8002a94:	20000010 	.word	0x20000010
 8002a98:	20000014 	.word	0x20000014

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d102      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e047      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d102      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	e03e      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ac6:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d136      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	4a16      	ldr	r2, [pc, #88]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afa:	68d2      	ldr	r2, [r2, #12]
 8002afc:	0a12      	lsrs	r2, r2, #8
 8002afe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
      break;
 8002b08:	e00c      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0a:	4a13      	ldr	r2, [pc, #76]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	0a12      	lsrs	r2, r2, #8
 8002b18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
      break;
 8002b22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0e5b      	lsrs	r3, r3, #25
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	016e3600 	.word	0x016e3600

08002b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4904      	ldr	r1, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08005780 	.word	0x08005780

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ba8:	f7ff ffda 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0adb      	lsrs	r3, r3, #11
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4904      	ldr	r1, [pc, #16]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08005780 	.word	0x08005780

08002bd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3301      	adds	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d10c      	bne.n	8002c0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf4:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bfe:	68d2      	ldr	r2, [r2, #12]
 8002c00:	0a12      	lsrs	r2, r2, #8
 8002c02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
    break;
 8002c0c:	e00c      	b.n	8002c28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c0e:	4a12      	ldr	r2, [pc, #72]	@ (8002c58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	4a0e      	ldr	r2, [pc, #56]	@ (8002c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	0a12      	lsrs	r2, r2, #8
 8002c1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    break;
 8002c26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0e5b      	lsrs	r3, r3, #25
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c42:	687b      	ldr	r3, [r7, #4]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	016e3600 	.word	0x016e3600
 8002c58:	00f42400 	.word	0x00f42400

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c64:	2300      	movs	r3, #0
 8002c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8098 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7e:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10d      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c96:	4b3d      	ldr	r3, [pc, #244]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a39      	ldr	r2, [pc, #228]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fef5 	bl	8001aa0 <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb8:	e009      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fef1 	bl	8001aa0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	74fb      	strb	r3, [r7, #19]
        break;
 8002ccc:	e005      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cce:	4b30      	ldr	r3, [pc, #192]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ef      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d159      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01e      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d019      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d18:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d28:	4a18      	ldr	r2, [pc, #96]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe feb1 	bl	8001aa0 <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d40:	e00b      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe fead 	bl	8001aa0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d902      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	74fb      	strb	r3, [r7, #19]
            break;
 8002d58:	e006      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ec      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7c:	4903      	ldr	r1, [pc, #12]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d86:	7cfb      	ldrb	r3, [r7, #19]
 8002d88:	74bb      	strb	r3, [r7, #18]
 8002d8a:	e005      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d98:	7c7b      	ldrb	r3, [r7, #17]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4ba7      	ldr	r3, [pc, #668]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	4aa6      	ldr	r2, [pc, #664]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002db6:	4ba1      	ldr	r3, [pc, #644]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f023 0203 	bic.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	499d      	ldr	r1, [pc, #628]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dd8:	4b98      	ldr	r3, [pc, #608]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 020c 	bic.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4995      	ldr	r1, [pc, #596]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfa:	4b90      	ldr	r3, [pc, #576]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	498c      	ldr	r1, [pc, #560]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e1c:	4b87      	ldr	r3, [pc, #540]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	4984      	ldr	r1, [pc, #528]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	497b      	ldr	r1, [pc, #492]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e60:	4b76      	ldr	r3, [pc, #472]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	4973      	ldr	r1, [pc, #460]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e82:	4b6e      	ldr	r3, [pc, #440]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	496a      	ldr	r1, [pc, #424]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea4:	4b65      	ldr	r3, [pc, #404]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4962      	ldr	r1, [pc, #392]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	4959      	ldr	r1, [pc, #356]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ee8:	4b54      	ldr	r3, [pc, #336]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	4951      	ldr	r1, [pc, #324]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	4948      	ldr	r1, [pc, #288]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4940      	ldr	r1, [pc, #256]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f64:	4b35      	ldr	r3, [pc, #212]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	4932      	ldr	r1, [pc, #200]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f9c:	4b27      	ldr	r3, [pc, #156]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	4924      	ldr	r1, [pc, #144]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	4916      	ldr	r1, [pc, #88]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a10      	ldr	r2, [pc, #64]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d019      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	4908      	ldr	r1, [pc, #32]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302a:	d109      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a02      	ldr	r2, [pc, #8]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
 8003038:	e002      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800304c:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	4926      	ldr	r1, [pc, #152]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800306c:	4b21      	ldr	r3, [pc, #132]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a20      	ldr	r2, [pc, #128]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003076:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003092:	4918      	ldr	r1, [pc, #96]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030bc:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	490a      	ldr	r1, [pc, #40]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030da:	d105      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a04      	ldr	r2, [pc, #16]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e049      	b.n	800319e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fae0 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 fef8 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d001      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e054      	b.n	800326a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <HAL_TIM_Base_Start_IT+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d022      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ea:	d01d      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a22      	ldr	r2, [pc, #136]	@ (800327c <HAL_TIM_Base_Start_IT+0xd4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d018      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	@ (8003280 <HAL_TIM_Base_Start_IT+0xd8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <HAL_TIM_Base_Start_IT+0xdc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00e      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	@ (8003288 <HAL_TIM_Base_Start_IT+0xe0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <HAL_TIM_Base_Start_IT+0xe4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <HAL_TIM_Base_Start_IT+0xe8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d115      	bne.n	8003254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_TIM_Base_Start_IT+0xec>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d015      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d011      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e008      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e000      	b.n	8003268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40013400 	.word	0x40013400
 800328c:	40014000 	.word	0x40014000
 8003290:	40015000 	.word	0x40015000
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f841 	bl	8003346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fe28 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_TIM_PWM_Start+0x24>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e03c      	b.n	80033fa <HAL_TIM_PWM_Start+0x9e>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d109      	bne.n	800339a <HAL_TIM_PWM_Start+0x3e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e02f      	b.n	80033fa <HAL_TIM_PWM_Start+0x9e>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d109      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x58>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e022      	b.n	80033fa <HAL_TIM_PWM_Start+0x9e>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d109      	bne.n	80033ce <HAL_TIM_PWM_Start+0x72>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e015      	b.n	80033fa <HAL_TIM_PWM_Start+0x9e>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x8c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e008      	b.n	80033fa <HAL_TIM_PWM_Start+0x9e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0a6      	b.n	8003550 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xb6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003410:	e023      	b.n	800345a <HAL_TIM_PWM_Start+0xfe>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0xc6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003420:	e01b      	b.n	800345a <HAL_TIM_PWM_Start+0xfe>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xd6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003430:	e013      	b.n	800345a <HAL_TIM_PWM_Start+0xfe>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xe6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003440:	e00b      	b.n	800345a <HAL_TIM_PWM_Start+0xfe>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b10      	cmp	r3, #16
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0xf6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003450:	e003      	b.n	800345a <HAL_TIM_PWM_Start+0xfe>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f9dc 	bl	8004820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3a      	ldr	r2, [pc, #232]	@ (8003558 <HAL_TIM_PWM_Start+0x1fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_TIM_PWM_Start+0x148>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a39      	ldr	r2, [pc, #228]	@ (800355c <HAL_TIM_PWM_Start+0x200>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_TIM_PWM_Start+0x148>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_TIM_PWM_Start+0x204>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_TIM_PWM_Start+0x148>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a36      	ldr	r2, [pc, #216]	@ (8003564 <HAL_TIM_PWM_Start+0x208>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_TIM_PWM_Start+0x148>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_TIM_PWM_Start+0x20c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_TIM_PWM_Start+0x148>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a33      	ldr	r2, [pc, #204]	@ (800356c <HAL_TIM_PWM_Start+0x210>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_PWM_Start+0x14c>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_TIM_PWM_Start+0x14e>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a25      	ldr	r2, [pc, #148]	@ (8003558 <HAL_TIM_PWM_Start+0x1fc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d0:	d01d      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <HAL_TIM_PWM_Start+0x214>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d018      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a24      	ldr	r2, [pc, #144]	@ (8003574 <HAL_TIM_PWM_Start+0x218>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a23      	ldr	r2, [pc, #140]	@ (8003578 <HAL_TIM_PWM_Start+0x21c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_TIM_PWM_Start+0x200>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_TIM_PWM_Start+0x204>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIM_PWM_Start+0x1b2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_TIM_PWM_Start+0x210>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d115      	bne.n	800353a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_TIM_PWM_Start+0x220>)
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d015      	beq.n	800354c <HAL_TIM_PWM_Start+0x1f0>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003526:	d011      	beq.n	800354c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	e008      	b.n	800354c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e000      	b.n	800354e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40013400 	.word	0x40013400
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800
 800356c:	40015000 	.word	0x40015000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	00010007 	.word	0x00010007

08003580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e097      	b.n	80036c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fe f8cf 	bl	800174c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80035c4:	f023 0307 	bic.w	r3, r3, #7
 80035c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 fca9 	bl	8003f2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	4313      	orrs	r3, r2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003620:	f023 030c 	bic.w	r3, r3, #12
 8003624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800362c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4313      	orrs	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	011a      	lsls	r2, r3, #4
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	031b      	lsls	r3, r3, #12
 8003650:	4313      	orrs	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4313      	orrs	r3, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d110      	bne.n	800371e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003702:	7b7b      	ldrb	r3, [r7, #13]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e069      	b.n	80037e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800371c:	e031      	b.n	8003782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d110      	bne.n	8003746 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800372a:	7b3b      	ldrb	r3, [r7, #12]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d001      	beq.n	8003734 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e055      	b.n	80037e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003744:	e01d      	b.n	8003782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d105      	bne.n	800375e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003758:	7b3b      	ldrb	r3, [r7, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e03e      	b.n	80037e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_TIM_Encoder_Start+0xc4>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d008      	beq.n	80037a0 <HAL_TIM_Encoder_Start+0xd4>
 800378e:	e00f      	b.n	80037b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f841 	bl	8004820 <TIM_CCxChannelCmd>
      break;
 800379e:	e016      	b.n	80037ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	2104      	movs	r1, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 f839 	bl	8004820 <TIM_CCxChannelCmd>
      break;
 80037ae:	e00e      	b.n	80037ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f831 	bl	8004820 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	2104      	movs	r1, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 f82a 	bl	8004820 <TIM_CCxChannelCmd>
      break;
 80037cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d020      	beq.n	800384c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0202 	mvn.w	r2, #2
 800381c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fb5c 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb4e 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fb5f 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d020      	beq.n	8003898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0204 	mvn.w	r2, #4
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fb36 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb28 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb39 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d020      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0208 	mvn.w	r2, #8
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2204      	movs	r2, #4
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fb10 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb02 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb13 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 faea 	bl	8003ef0 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fadc 	bl	8003edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 faed 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0201 	mvn.w	r2, #1
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fc50 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 f815 	bl	80049ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800399e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f001 f80d 	bl	80049c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 faa7 	bl	8003f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00c      	beq.n	80039ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0220 	mvn.w	r2, #32
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 ffd5 	bl	8004998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 ffe1 	bl	80049d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00c      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 ffd9 	bl	80049e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 ffd1 	bl	80049fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 ffc9 	bl	8004a10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e0ff      	b.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b14      	cmp	r3, #20
 8003ab2:	f200 80f0 	bhi.w	8003c96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003b11 	.word	0x08003b11
 8003ac0:	08003c97 	.word	0x08003c97
 8003ac4:	08003c97 	.word	0x08003c97
 8003ac8:	08003c97 	.word	0x08003c97
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003c97 	.word	0x08003c97
 8003ad4:	08003c97 	.word	0x08003c97
 8003ad8:	08003c97 	.word	0x08003c97
 8003adc:	08003b93 	.word	0x08003b93
 8003ae0:	08003c97 	.word	0x08003c97
 8003ae4:	08003c97 	.word	0x08003c97
 8003ae8:	08003c97 	.word	0x08003c97
 8003aec:	08003bd3 	.word	0x08003bd3
 8003af0:	08003c97 	.word	0x08003c97
 8003af4:	08003c97 	.word	0x08003c97
 8003af8:	08003c97 	.word	0x08003c97
 8003afc:	08003c15 	.word	0x08003c15
 8003b00:	08003c97 	.word	0x08003c97
 8003b04:	08003c97 	.word	0x08003c97
 8003b08:	08003c97 	.word	0x08003c97
 8003b0c:	08003c55 	.word	0x08003c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fabc 	bl	8004094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0208 	orr.w	r2, r2, #8
 8003b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6999      	ldr	r1, [r3, #24]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	619a      	str	r2, [r3, #24]
      break;
 8003b4e:	e0a5      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb36 	bl	80041c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6999      	ldr	r1, [r3, #24]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	619a      	str	r2, [r3, #24]
      break;
 8003b90:	e084      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fba9 	bl	80042f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0208 	orr.w	r2, r2, #8
 8003bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0204 	bic.w	r2, r2, #4
 8003bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69d9      	ldr	r1, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	61da      	str	r2, [r3, #28]
      break;
 8003bd0:	e064      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fc1b 	bl	8004414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69d9      	ldr	r1, [r3, #28]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	61da      	str	r2, [r3, #28]
      break;
 8003c12:	e043      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fc8e 	bl	800453c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0208 	orr.w	r2, r2, #8
 8003c2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
 8003c3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003c52:	e023      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fcd8 	bl	8004610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	021a      	lsls	r2, r3, #8
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
      break;
 8003c9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop

08003cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_ConfigClockSource+0x1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0f6      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x20a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003cea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f000 80c1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f200 80c6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d14:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f000 80b9 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f200 80be 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d24:	4a69      	ldr	r2, [pc, #420]	@ (8003ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f000 80b1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d2c:	4a67      	ldr	r2, [pc, #412]	@ (8003ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f200 80b6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d34:	4a66      	ldr	r2, [pc, #408]	@ (8003ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f000 80a9 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d3c:	4a64      	ldr	r2, [pc, #400]	@ (8003ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f200 80ae 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d44:	4a63      	ldr	r2, [pc, #396]	@ (8003ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f000 80a1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d4c:	4a61      	ldr	r2, [pc, #388]	@ (8003ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f200 80a6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d54:	4a60      	ldr	r2, [pc, #384]	@ (8003ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f000 8099 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f200 809e 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003d68:	f000 8091 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003d70:	f200 8096 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d78:	f000 8089 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d80:	f200 808e 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d88:	d03e      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0x158>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8e:	f200 8087 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d96:	f000 8086 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1f6>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9e:	d87f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da0:	2b70      	cmp	r3, #112	@ 0x70
 8003da2:	d01a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x12a>
 8003da4:	2b70      	cmp	r3, #112	@ 0x70
 8003da6:	d87b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da8:	2b60      	cmp	r3, #96	@ 0x60
 8003daa:	d050      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x19e>
 8003dac:	2b60      	cmp	r3, #96	@ 0x60
 8003dae:	d877      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db0:	2b50      	cmp	r3, #80	@ 0x50
 8003db2:	d03c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x17e>
 8003db4:	2b50      	cmp	r3, #80	@ 0x50
 8003db6:	d873      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d058      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x1be>
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d86f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc0:	2b30      	cmp	r3, #48	@ 0x30
 8003dc2:	d064      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dc4:	2b30      	cmp	r3, #48	@ 0x30
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d060      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d867      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d05a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dd8:	e062      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	f000 fcf9 	bl	80047e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
      break;
 8003e06:	e04f      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	f000 fce2 	bl	80047e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e03c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fc54 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	@ 0x50
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fcad 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e02c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 fc73 	bl	8004746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	@ 0x60
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fc9d 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e01c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fc34 	bl	80046e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	@ 0x40
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fc8d 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e00c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f000 fc84 	bl	80047a6 <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e003      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	00100070 	.word	0x00100070
 8003ec8:	00100060 	.word	0x00100060
 8003ecc:	00100050 	.word	0x00100050
 8003ed0:	00100040 	.word	0x00100040
 8003ed4:	00100030 	.word	0x00100030
 8003ed8:	00100020 	.word	0x00100020

08003edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8004070 <TIM_Base_SetConfig+0x144>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d017      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d013      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a49      	ldr	r2, [pc, #292]	@ (8004074 <TIM_Base_SetConfig+0x148>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00f      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a48      	ldr	r2, [pc, #288]	@ (8004078 <TIM_Base_SetConfig+0x14c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a47      	ldr	r2, [pc, #284]	@ (800407c <TIM_Base_SetConfig+0x150>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a46      	ldr	r2, [pc, #280]	@ (8004080 <TIM_Base_SetConfig+0x154>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0x48>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a45      	ldr	r2, [pc, #276]	@ (8004084 <TIM_Base_SetConfig+0x158>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a39      	ldr	r2, [pc, #228]	@ (8004070 <TIM_Base_SetConfig+0x144>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d023      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f94:	d01f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a36      	ldr	r2, [pc, #216]	@ (8004074 <TIM_Base_SetConfig+0x148>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a35      	ldr	r2, [pc, #212]	@ (8004078 <TIM_Base_SetConfig+0x14c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d017      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a34      	ldr	r2, [pc, #208]	@ (800407c <TIM_Base_SetConfig+0x150>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a33      	ldr	r2, [pc, #204]	@ (8004080 <TIM_Base_SetConfig+0x154>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a33      	ldr	r2, [pc, #204]	@ (8004088 <TIM_Base_SetConfig+0x15c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a32      	ldr	r2, [pc, #200]	@ (800408c <TIM_Base_SetConfig+0x160>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	@ (8004090 <TIM_Base_SetConfig+0x164>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0xaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004084 <TIM_Base_SetConfig+0x158>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <TIM_Base_SetConfig+0x144>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <TIM_Base_SetConfig+0x154>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1a      	ldr	r2, [pc, #104]	@ (8004088 <TIM_Base_SetConfig+0x15c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a19      	ldr	r2, [pc, #100]	@ (800408c <TIM_Base_SetConfig+0x160>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a18      	ldr	r2, [pc, #96]	@ (8004090 <TIM_Base_SetConfig+0x164>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x110>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a13      	ldr	r2, [pc, #76]	@ (8004084 <TIM_Base_SetConfig+0x158>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]
  }
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40015000 	.word	0x40015000
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 0201 	bic.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 0302 	bic.w	r3, r3, #2
 80040e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a30      	ldr	r2, [pc, #192]	@ (80041b0 <TIM_OC1_SetConfig+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <TIM_OC1_SetConfig+0x88>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	@ (80041b4 <TIM_OC1_SetConfig+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00f      	beq.n	800411c <TIM_OC1_SetConfig+0x88>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2e      	ldr	r2, [pc, #184]	@ (80041b8 <TIM_OC1_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_OC1_SetConfig+0x88>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a2d      	ldr	r2, [pc, #180]	@ (80041bc <TIM_OC1_SetConfig+0x128>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_OC1_SetConfig+0x88>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <TIM_OC1_SetConfig+0x12c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC1_SetConfig+0x88>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2b      	ldr	r2, [pc, #172]	@ (80041c4 <TIM_OC1_SetConfig+0x130>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10c      	bne.n	8004136 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0308 	bic.w	r3, r3, #8
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <TIM_OC1_SetConfig+0x11c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <TIM_OC1_SetConfig+0xd2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <TIM_OC1_SetConfig+0x120>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_OC1_SetConfig+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <TIM_OC1_SetConfig+0x124>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_OC1_SetConfig+0xd2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1a      	ldr	r2, [pc, #104]	@ (80041bc <TIM_OC1_SetConfig+0x128>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC1_SetConfig+0xd2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <TIM_OC1_SetConfig+0x12c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC1_SetConfig+0xd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <TIM_OC1_SetConfig+0x130>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40013400 	.word	0x40013400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800
 80041c4:	40015000 	.word	0x40015000

080041c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f023 0210 	bic.w	r2, r3, #16
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <TIM_OC2_SetConfig+0x110>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <TIM_OC2_SetConfig+0x74>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <TIM_OC2_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC2_SetConfig+0x74>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a2a      	ldr	r2, [pc, #168]	@ (80042e0 <TIM_OC2_SetConfig+0x118>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10d      	bne.n	8004258 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <TIM_OC2_SetConfig+0x110>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <TIM_OC2_SetConfig+0xc0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <TIM_OC2_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00f      	beq.n	8004288 <TIM_OC2_SetConfig+0xc0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <TIM_OC2_SetConfig+0x11c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00b      	beq.n	8004288 <TIM_OC2_SetConfig+0xc0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <TIM_OC2_SetConfig+0x120>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <TIM_OC2_SetConfig+0xc0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <TIM_OC2_SetConfig+0x124>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_OC2_SetConfig+0xc0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <TIM_OC2_SetConfig+0x118>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d113      	bne.n	80042b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800428e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40015000 	.word	0x40015000
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800

080042f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <TIM_OC3_SetConfig+0x10c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_OC3_SetConfig+0x72>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2a      	ldr	r2, [pc, #168]	@ (8004400 <TIM_OC3_SetConfig+0x110>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_OC3_SetConfig+0x72>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a29      	ldr	r2, [pc, #164]	@ (8004404 <TIM_OC3_SetConfig+0x114>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10d      	bne.n	800437e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <TIM_OC3_SetConfig+0x10c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <TIM_OC3_SetConfig+0xbe>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <TIM_OC3_SetConfig+0x110>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00f      	beq.n	80043ae <TIM_OC3_SetConfig+0xbe>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1d      	ldr	r2, [pc, #116]	@ (8004408 <TIM_OC3_SetConfig+0x118>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00b      	beq.n	80043ae <TIM_OC3_SetConfig+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <TIM_OC3_SetConfig+0x11c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <TIM_OC3_SetConfig+0xbe>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <TIM_OC3_SetConfig+0x120>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_OC3_SetConfig+0xbe>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <TIM_OC3_SetConfig+0x114>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40015000 	.word	0x40015000
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a2c      	ldr	r2, [pc, #176]	@ (8004524 <TIM_OC4_SetConfig+0x110>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_OC4_SetConfig+0x74>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a2b      	ldr	r2, [pc, #172]	@ (8004528 <TIM_OC4_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_OC4_SetConfig+0x74>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a2a      	ldr	r2, [pc, #168]	@ (800452c <TIM_OC4_SetConfig+0x118>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d10d      	bne.n	80044a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800448e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <TIM_OC4_SetConfig+0x110>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <TIM_OC4_SetConfig+0xc0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004528 <TIM_OC4_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <TIM_OC4_SetConfig+0xc0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004530 <TIM_OC4_SetConfig+0x11c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_OC4_SetConfig+0xc0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <TIM_OC4_SetConfig+0x120>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_OC4_SetConfig+0xc0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <TIM_OC4_SetConfig+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC4_SetConfig+0xc0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <TIM_OC4_SetConfig+0x118>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d113      	bne.n	80044fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40013400 	.word	0x40013400
 800452c:	40015000 	.word	0x40015000
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800

0800453c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004580:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <TIM_OC5_SetConfig+0xbc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <TIM_OC5_SetConfig+0x82>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <TIM_OC5_SetConfig+0xc0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_OC5_SetConfig+0x82>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_OC5_SetConfig+0xc4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_OC5_SetConfig+0x82>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_OC5_SetConfig+0xc8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_OC5_SetConfig+0x82>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <TIM_OC5_SetConfig+0xcc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_OC5_SetConfig+0x82>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a14      	ldr	r2, [pc, #80]	@ (800460c <TIM_OC5_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d109      	bne.n	80045d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800
 800460c:	40015000 	.word	0x40015000

08004610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	051b      	lsls	r3, r3, #20
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1a      	ldr	r2, [pc, #104]	@ (80046d0 <TIM_OC6_SetConfig+0xc0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_OC6_SetConfig+0x84>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <TIM_OC6_SetConfig+0xc4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00f      	beq.n	8004694 <TIM_OC6_SetConfig+0x84>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <TIM_OC6_SetConfig+0xc8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_OC6_SetConfig+0x84>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a17      	ldr	r2, [pc, #92]	@ (80046dc <TIM_OC6_SetConfig+0xcc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_OC6_SetConfig+0x84>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <TIM_OC6_SetConfig+0xd0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC6_SetConfig+0x84>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a15      	ldr	r2, [pc, #84]	@ (80046e4 <TIM_OC6_SetConfig+0xd4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d109      	bne.n	80046a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	029b      	lsls	r3, r3, #10
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40012c00 	.word	0x40012c00
 80046d4:	40013400 	.word	0x40013400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800
 80046e4:	40015000 	.word	0x40015000

080046e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 030a 	bic.w	r3, r3, #10
 8004724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004746:	b480      	push	{r7}
 8004748:	b087      	sub	sp, #28
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0210 	bic.w	r2, r3, #16
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f043 0307 	orr.w	r3, r3, #7
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	431a      	orrs	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e074      	b.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a34      	ldr	r2, [pc, #208]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a33      	ldr	r2, [pc, #204]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a31      	ldr	r2, [pc, #196]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a21      	ldr	r2, [pc, #132]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004904:	d01d      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10c      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40015000 	.word	0x40015000
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000

08004998 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e042      	b.n	8004abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fc ff43 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	@ 0x24
 8004a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fb24 	bl	80050bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f825 	bl	8004ac4 <UART_SetConfig>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e01b      	b.n	8004abc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fba3 	bl	8005200 <UART_CheckIdleState>
 8004aba:	4603      	mov	r3, r0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac8:	b08c      	sub	sp, #48	@ 0x30
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4baa      	ldr	r3, [pc, #680]	@ (8004d9c <UART_SetConfig+0x2d8>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a9f      	ldr	r2, [pc, #636]	@ (8004da0 <UART_SetConfig+0x2dc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	f023 010f 	bic.w	r1, r3, #15
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a90      	ldr	r2, [pc, #576]	@ (8004da4 <UART_SetConfig+0x2e0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d125      	bne.n	8004bb4 <UART_SetConfig+0xf0>
 8004b68:	4b8f      	ldr	r3, [pc, #572]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d81a      	bhi.n	8004bac <UART_SetConfig+0xe8>
 8004b76:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <UART_SetConfig+0xb8>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e116      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e112      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e10e      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004baa:	e10a      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	e106      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7c      	ldr	r2, [pc, #496]	@ (8004dac <UART_SetConfig+0x2e8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d138      	bne.n	8004c30 <UART_SetConfig+0x16c>
 8004bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d82d      	bhi.n	8004c28 <UART_SetConfig+0x164>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x110>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c29 	.word	0x08004c29
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e0d8      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e0d4      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e0d0      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e0cc      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e0c8      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a5e      	ldr	r2, [pc, #376]	@ (8004db0 <UART_SetConfig+0x2ec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d125      	bne.n	8004c86 <UART_SetConfig+0x1c2>
 8004c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d016      	beq.n	8004c76 <UART_SetConfig+0x1b2>
 8004c48:	2b30      	cmp	r3, #48	@ 0x30
 8004c4a:	d818      	bhi.n	8004c7e <UART_SetConfig+0x1ba>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d00a      	beq.n	8004c66 <UART_SetConfig+0x1a2>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d814      	bhi.n	8004c7e <UART_SetConfig+0x1ba>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <UART_SetConfig+0x19a>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d008      	beq.n	8004c6e <UART_SetConfig+0x1aa>
 8004c5c:	e00f      	b.n	8004c7e <UART_SetConfig+0x1ba>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c64:	e0ad      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c66:	2302      	movs	r3, #2
 8004c68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6c:	e0a9      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c6e:	2304      	movs	r3, #4
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c74:	e0a5      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c76:	2308      	movs	r3, #8
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7c:	e0a1      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c84:	e09d      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004db4 <UART_SetConfig+0x2f0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d125      	bne.n	8004cdc <UART_SetConfig+0x218>
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9c:	d016      	beq.n	8004ccc <UART_SetConfig+0x208>
 8004c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ca0:	d818      	bhi.n	8004cd4 <UART_SetConfig+0x210>
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d00a      	beq.n	8004cbc <UART_SetConfig+0x1f8>
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d814      	bhi.n	8004cd4 <UART_SetConfig+0x210>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x1f0>
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d008      	beq.n	8004cc4 <UART_SetConfig+0x200>
 8004cb2:	e00f      	b.n	8004cd4 <UART_SetConfig+0x210>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cba:	e082      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc2:	e07e      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cca:	e07a      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e076      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e072      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a35      	ldr	r2, [pc, #212]	@ (8004db8 <UART_SetConfig+0x2f4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d12a      	bne.n	8004d3c <UART_SetConfig+0x278>
 8004ce6:	4b30      	ldr	r3, [pc, #192]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf4:	d01a      	beq.n	8004d2c <UART_SetConfig+0x268>
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfa:	d81b      	bhi.n	8004d34 <UART_SetConfig+0x270>
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d00c      	beq.n	8004d1c <UART_SetConfig+0x258>
 8004d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d06:	d815      	bhi.n	8004d34 <UART_SetConfig+0x270>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <UART_SetConfig+0x250>
 8004d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d10:	d008      	beq.n	8004d24 <UART_SetConfig+0x260>
 8004d12:	e00f      	b.n	8004d34 <UART_SetConfig+0x270>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e052      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d22:	e04e      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	e04a      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d32:	e046      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3a:	e042      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a17      	ldr	r2, [pc, #92]	@ (8004da0 <UART_SetConfig+0x2dc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d13a      	bne.n	8004dbc <UART_SetConfig+0x2f8>
 8004d46:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <UART_SetConfig+0x2e4>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d54:	d01a      	beq.n	8004d8c <UART_SetConfig+0x2c8>
 8004d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d5a:	d81b      	bhi.n	8004d94 <UART_SetConfig+0x2d0>
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d60:	d00c      	beq.n	8004d7c <UART_SetConfig+0x2b8>
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d66:	d815      	bhi.n	8004d94 <UART_SetConfig+0x2d0>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <UART_SetConfig+0x2b0>
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d70:	d008      	beq.n	8004d84 <UART_SetConfig+0x2c0>
 8004d72:	e00f      	b.n	8004d94 <UART_SetConfig+0x2d0>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e022      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d82:	e01e      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	e01a      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	e016      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9a:	e012      	b.n	8004dc2 <UART_SetConfig+0x2fe>
 8004d9c:	cfff69f3 	.word	0xcfff69f3
 8004da0:	40008000 	.word	0x40008000
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40004400 	.word	0x40004400
 8004db0:	40004800 	.word	0x40004800
 8004db4:	40004c00 	.word	0x40004c00
 8004db8:	40005000 	.word	0x40005000
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4aae      	ldr	r2, [pc, #696]	@ (8005080 <UART_SetConfig+0x5bc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	f040 8097 	bne.w	8004efc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d823      	bhi.n	8004e1e <UART_SetConfig+0x35a>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0x318>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e1f 	.word	0x08004e1f
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e1f 	.word	0x08004e1f
 8004dec:	08004e0f 	.word	0x08004e0f
 8004df0:	08004e1f 	.word	0x08004e1f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e1f 	.word	0x08004e1f
 8004dfc:	08004e17 	.word	0x08004e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fd feba 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8004e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e06:	e010      	b.n	8004e2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e08:	4b9e      	ldr	r3, [pc, #632]	@ (8005084 <UART_SetConfig+0x5c0>)
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e0c:	e00d      	b.n	8004e2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0e:	f7fd fe45 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8004e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e14:	e009      	b.n	8004e2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e1c:	e005      	b.n	8004e2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8130 	beq.w	8005092 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	4a94      	ldr	r2, [pc, #592]	@ (8005088 <UART_SetConfig+0x5c4>)
 8004e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d305      	bcc.n	8004e62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d903      	bls.n	8004e6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e68:	e113      	b.n	8005092 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	60fa      	str	r2, [r7, #12]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	4a84      	ldr	r2, [pc, #528]	@ (8005088 <UART_SetConfig+0x5c4>)
 8004e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2200      	movs	r2, #0
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e8c:	f7fb fde2 	bl	8000a54 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	020b      	lsls	r3, r1, #8
 8004ea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ea6:	0202      	lsls	r2, r0, #8
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	6849      	ldr	r1, [r1, #4]
 8004eac:	0849      	lsrs	r1, r1, #1
 8004eae:	2000      	movs	r0, #0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	eb12 0804 	adds.w	r8, r2, r4
 8004eb8:	eb43 0905 	adc.w	r9, r3, r5
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	469a      	mov	sl, r3
 8004ec4:	4693      	mov	fp, r2
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	465b      	mov	r3, fp
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fb fdc1 	bl	8000a54 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee0:	d308      	bcc.n	8004ef4 <UART_SetConfig+0x430>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ee8:	d204      	bcs.n	8004ef4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e0ce      	b.n	8005092 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004efa:	e0ca      	b.n	8005092 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f04:	d166      	bne.n	8004fd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d827      	bhi.n	8004f5e <UART_SetConfig+0x49a>
 8004f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f14 <UART_SetConfig+0x450>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	08004f5f 	.word	0x08004f5f
 8004f24:	08004f4f 	.word	0x08004f4f
 8004f28:	08004f5f 	.word	0x08004f5f
 8004f2c:	08004f5f 	.word	0x08004f5f
 8004f30:	08004f5f 	.word	0x08004f5f
 8004f34:	08004f57 	.word	0x08004f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fd fe1e 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f3e:	e014      	b.n	8004f6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f40:	f7fd fe30 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f46:	e010      	b.n	8004f6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f48:	4b4e      	ldr	r3, [pc, #312]	@ (8005084 <UART_SetConfig+0x5c0>)
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4e:	f7fd fda5 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8004f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f5c:	e005      	b.n	8004f6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8090 	beq.w	8005092 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	4a44      	ldr	r2, [pc, #272]	@ (8005088 <UART_SetConfig+0x5c4>)
 8004f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	441a      	add	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d916      	bls.n	8004fcc <UART_SetConfig+0x508>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa4:	d212      	bcs.n	8004fcc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f023 030f 	bic.w	r3, r3, #15
 8004fae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	8bfb      	ldrh	r3, [r7, #30]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	8bfa      	ldrh	r2, [r7, #30]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e062      	b.n	8005092 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fd2:	e05e      	b.n	8005092 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d828      	bhi.n	800502e <UART_SetConfig+0x56a>
 8004fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <UART_SetConfig+0x520>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	0800502f 	.word	0x0800502f
 8004ff4:	0800501f 	.word	0x0800501f
 8004ff8:	0800502f 	.word	0x0800502f
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	0800502f 	.word	0x0800502f
 8005004:	08005027 	.word	0x08005027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005008:	f7fd fdb6 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 800500c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800500e:	e014      	b.n	800503a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fd fdc8 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8005014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005016:	e010      	b.n	800503a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005018:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <UART_SetConfig+0x5c0>)
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800501c:	e00d      	b.n	800503a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501e:	f7fd fd3d 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8005022:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005024:	e009      	b.n	800503a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800502c:	e005      	b.n	800503a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005038:	bf00      	nop
    }

    if (pclk != 0U)
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d028      	beq.n	8005092 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	4a10      	ldr	r2, [pc, #64]	@ (8005088 <UART_SetConfig+0x5c4>)
 8005046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800504a:	461a      	mov	r2, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d910      	bls.n	800508c <UART_SetConfig+0x5c8>
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d20c      	bcs.n	800508c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	b29a      	uxth	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60da      	str	r2, [r3, #12]
 800507c:	e009      	b.n	8005092 <UART_SetConfig+0x5ce>
 800507e:	bf00      	nop
 8005080:	40008000 	.word	0x40008000
 8005084:	00f42400 	.word	0x00f42400
 8005088:	08005788 	.word	0x08005788
      }
      else
      {
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2201      	movs	r2, #1
 8005096:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2201      	movs	r2, #1
 800509e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3730      	adds	r7, #48	@ 0x30
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ba:	d10a      	bne.n	80051d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b098      	sub	sp, #96	@ 0x60
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005210:	f7fc fc46 	bl	8001aa0 <HAL_GetTick>
 8005214:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d12f      	bne.n	8005284 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f88e 	bl	8005354 <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d022      	beq.n	8005284 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005252:	653b      	str	r3, [r7, #80]	@ 0x50
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800525c:	647b      	str	r3, [r7, #68]	@ 0x44
 800525e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e063      	b.n	800534c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d149      	bne.n	8005326 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005292:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f857 	bl	8005354 <UART_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03c      	beq.n	8005326 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80052cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e6      	bne.n	80052ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3308      	adds	r3, #8
 80052e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fe:	61fa      	str	r2, [r7, #28]
 8005300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	617b      	str	r3, [r7, #20]
   return(result);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e012      	b.n	800534c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3758      	adds	r7, #88	@ 0x58
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005364:	e04f      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536c:	d04b      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fc fb97 	bl	8001aa0 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <UART_WaitOnFlagUntilTimeout+0x30>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e04e      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d037      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d034      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b40      	cmp	r3, #64	@ 0x40
 80053a0:	d031      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d110      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f838 	bl	800542e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2208      	movs	r2, #8
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e029      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e0:	d111      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f81e 	bl	800542e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00f      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d0a0      	beq.n	8005366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b095      	sub	sp, #84	@ 0x54
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800544a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005454:	643b      	str	r3, [r7, #64]	@ 0x40
 8005456:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800545a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	61fb      	str	r3, [r7, #28]
   return(result);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800548c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e3      	bne.n	8005468 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d118      	bne.n	80054da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0310 	bic.w	r3, r3, #16
 80054bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6979      	ldr	r1, [r7, #20]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054ee:	bf00      	nop
 80054f0:	3754      	adds	r7, #84	@ 0x54
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_UARTEx_DisableFifoMode+0x16>
 800550c:	2302      	movs	r3, #2
 800550e:	e027      	b.n	8005560 <HAL_UARTEx_DisableFifoMode+0x66>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	@ 0x24
 800551c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800553e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005580:	2302      	movs	r3, #2
 8005582:	e02d      	b.n	80055e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2224      	movs	r2, #36	@ 0x24
 8005590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f84f 	bl	8005664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e02d      	b.n	800565c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f811 	bl	8005664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005670:	2b00      	cmp	r3, #0
 8005672:	d108      	bne.n	8005686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005684:	e031      	b.n	80056ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005686:	2308      	movs	r3, #8
 8005688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800568a:	2308      	movs	r3, #8
 800568c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	0e5b      	lsrs	r3, r3, #25
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	0f5b      	lsrs	r3, r3, #29
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	7b3a      	ldrb	r2, [r7, #12]
 80056b2:	4911      	ldr	r1, [pc, #68]	@ (80056f8 <UARTEx_SetNbDataToProcess+0x94>)
 80056b4:	5c8a      	ldrb	r2, [r1, r2]
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ba:	7b3a      	ldrb	r2, [r7, #12]
 80056bc:	490f      	ldr	r1, [pc, #60]	@ (80056fc <UARTEx_SetNbDataToProcess+0x98>)
 80056be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	7b7a      	ldrb	r2, [r7, #13]
 80056d0:	4909      	ldr	r1, [pc, #36]	@ (80056f8 <UARTEx_SetNbDataToProcess+0x94>)
 80056d2:	5c8a      	ldrb	r2, [r1, r2]
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056d8:	7b7a      	ldrb	r2, [r7, #13]
 80056da:	4908      	ldr	r1, [pc, #32]	@ (80056fc <UARTEx_SetNbDataToProcess+0x98>)
 80056dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056de:	fb93 f3f2 	sdiv	r3, r3, r2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	080057a0 	.word	0x080057a0
 80056fc:	080057a8 	.word	0x080057a8

08005700 <memset>:
 8005700:	4402      	add	r2, r0
 8005702:	4603      	mov	r3, r0
 8005704:	4293      	cmp	r3, r2
 8005706:	d100      	bne.n	800570a <memset+0xa>
 8005708:	4770      	bx	lr
 800570a:	f803 1b01 	strb.w	r1, [r3], #1
 800570e:	e7f9      	b.n	8005704 <memset+0x4>

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	@ (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	@ (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	@ (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	@ (8005754 <__libc_init_array+0x44>)
 8005724:	f000 f818 	bl	8005758 <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	080057b8 	.word	0x080057b8
 800574c:	080057b8 	.word	0x080057b8
 8005750:	080057b8 	.word	0x080057b8
 8005754:	080057bc 	.word	0x080057bc

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
