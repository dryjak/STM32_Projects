
MotorWithEncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005774  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800598c  0800598c  00007024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005994  08005994  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800599c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000024  080059c0  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080059c0  00007230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014696  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcf  00000000  00000000  0001b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfc  00000000  00000000  0001f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000310a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cc7  00000000  00000000  0002317e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbd2e  00000000  00000000  00036e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  00132bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00137260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005934 	.word	0x08005934

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08005934 	.word	0x08005934

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	ed87 0a00 	vstr	s0, [r7]
 8000d90:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	213c      	movs	r1, #60	@ 0x3c
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fd76 	bl	80038a8 <HAL_TIM_Encoder_Start>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 8000dda:	8afa      	ldrh	r2, [r7, #22]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	085b      	lsrs	r3, r3, #1
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd0b      	ble.n	8000e1a <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	889b      	ldrh	r3, [r3, #4]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	81da      	strh	r2, [r3, #14]
 8000e18:	e016      	b.n	8000e48 <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	0fda      	lsrs	r2, r3, #31
 8000e28:	4413      	add	r3, r2
 8000e2a:	105b      	asrs	r3, r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	da0a      	bge.n	8000e48 <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	889b      	ldrh	r3, [r3, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb34 	bl	80004bc <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <Encoder_AngularVelocity+0xf0>)
 8000e5a:	f7ff fb99 	bl	8000590 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4614      	mov	r4, r2
 8000e64:	461d      	mov	r5, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	889b      	ldrh	r3, [r3, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb26 	bl	80004bc <__aeabi_i2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4620      	mov	r0, r4
 8000e76:	4629      	mov	r1, r5
 8000e78:	f7ff fcb4 	bl	80007e4 <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd96 	bl	80009b4 <__aeabi_d2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	edd3 6a00 	vldr	s13, [r3]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8afa      	ldrh	r2, [r7, #22]
 8000ea8:	819a      	strh	r2, [r3, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40768000 	.word	0x40768000

08000eb8 <PID_Init>:
 *      Author: jakub
 */
#include "PID.h"

void PID_Init(PID_t *Pid, float P, float I, float D, float SampleTime, float MaxValue, float MinValue)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	61f8      	str	r0, [r7, #28]
 8000ec0:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ec4:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ec8:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ecc:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ed0:	ed87 2a02 	vstr	s4, [r7, #8]
 8000ed4:	edc7 2a01 	vstr	s5, [r7, #4]
	Pid->P = P;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	601a      	str	r2, [r3, #0]
	Pid->I = I;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	605a      	str	r2, [r3, #4]
	Pid->D = D;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	609a      	str	r2, [r3, #8]

	Pid->SampleTime = SampleTime;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	60da      	str	r2, [r3, #12]
	Pid->MaxValue = MaxValue;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	615a      	str	r2, [r3, #20]
	Pid->MinValue = MinValue;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]

	Pid->Integrator = 0;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	Pid->LastError = 0;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
	Pid->Clamp = 0;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000f14:	bf00      	nop
 8000f16:	3724      	adds	r7, #36	@ 0x24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <PID_Compute>:

float PID_Compute(PID_t *Pid, float MeasuredValue, float SetValue)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f2c:	edc7 0a01 	vstr	s1, [r7, #4]
	float Error = SetValue - MeasuredValue;
 8000f30:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	edc7 7a08 	vstr	s15, [r7, #32]

	//proportional value
	float P = Pid->P * Error;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	edc7 7a07 	vstr	s15, [r7, #28]

	//Integrator value
	if(Pid->Clamp == 0)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d113      	bne.n	8000f84 <PID_Compute+0x64>
	{
	Pid->Integrator += Pid->SampleTime * Pid->I * Error;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f72:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edc3 7a04 	vstr	s15, [r3, #16]
	}


	//Deriative value
	float D = ((Error - Pid->LastError) / Pid->SampleTime) * Pid->D;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa6:	edc7 7a06 	vstr	s15, [r7, #24]

	float Output = P + Pid->Integrator + D;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float OutputLast = Output;
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	617b      	str	r3, [r7, #20]

	//checking limits
	if (Output > Pid->MaxValue)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd03      	ble.n	8000fe4 <PID_Compute+0xc4>
	{
		Output = Pid->MaxValue;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe2:	e00c      	b.n	8000ffe <PID_Compute+0xde>
	}
	else if (Output < Pid->MinValue)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	d502      	bpl.n	8000ffe <PID_Compute+0xde>
	{
		Output = Pid->MinValue;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	uint8_t ClampigSaturationCheck = (Output != OutputLast) ? 1 : 0;
 8000ffe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb4 7a67 	vcmp.f32	s14, s15
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	74fb      	strb	r3, [r7, #19]

	int8_t ErrorSign = Signum(Error);
 8001018:	ed97 0a08 	vldr	s0, [r7, #32]
 800101c:	f000 f825 	bl	800106a <Signum>
 8001020:	4603      	mov	r3, r0
 8001022:	74bb      	strb	r3, [r7, #18]
	int8_t OutputSign = Signum(Output);
 8001024:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001028:	f000 f81f 	bl	800106a <Signum>
 800102c:	4603      	mov	r3, r0
 800102e:	747b      	strb	r3, [r7, #17]

	if ((ErrorSign == OutputSign) && (ClampigSaturationCheck == 1))
 8001030:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8001034:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001038:	429a      	cmp	r2, r3
 800103a:	d107      	bne.n	800104c <PID_Compute+0x12c>
 800103c:	7cfb      	ldrb	r3, [r7, #19]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d104      	bne.n	800104c <PID_Compute+0x12c>
	{
		Pid->Clamp = 1;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
 800104a:	e003      	b.n	8001054 <PID_Compute+0x134>
	}
	else
	{
		Pid->Clamp = 0;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2020 	strb.w	r2, [r3, #32]
	}

	//Update LastError
	Pid->LastError = Error;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a3a      	ldr	r2, [r7, #32]
 8001058:	61da      	str	r2, [r3, #28]

	return Output;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	ee07 3a90 	vmov	s15, r3

}
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	3728      	adds	r7, #40	@ 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <Signum>:

int8_t Signum(float Value)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	ed87 0a01 	vstr	s0, [r7, #4]
	if (Value > 0.0) return 1;
 8001074:	edd7 7a01 	vldr	s15, [r7, #4]
 8001078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	dd01      	ble.n	8001086 <Signum+0x1c>
 8001082:	2301      	movs	r3, #1
 8001084:	e00a      	b.n	800109c <Signum+0x32>
	if (Value < 0.0) return -1;
 8001086:	edd7 7a01 	vldr	s15, [r7, #4]
 800108a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	d502      	bpl.n	800109a <Signum+0x30>
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001098:	e000      	b.n	800109c <Signum+0x32>
	return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b3a      	ldr	r3, [pc, #232]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a39      	ldr	r2, [pc, #228]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d6:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a33      	ldr	r2, [pc, #204]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b31      	ldr	r3, [pc, #196]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	4a2d      	ldr	r2, [pc, #180]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fa:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_GPIO_Init+0x100>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_GPIO_Init+0x100>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	4a27      	ldr	r2, [pc, #156]	@ (80011a8 <MX_GPIO_Init+0x100>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_GPIO_Init+0x100>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_DIR1_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f001 f868 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	481e      	ldr	r0, [pc, #120]	@ (80011ac <MX_GPIO_Init+0x104>)
 8001132:	f001 f863 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4817      	ldr	r0, [pc, #92]	@ (80011ac <MX_GPIO_Init+0x104>)
 800114e:	f000 fed3 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_DIR1_Pin;
 8001152:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f000 fec3 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR2_Pin;
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR2_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4808      	ldr	r0, [pc, #32]	@ (80011ac <MX_GPIO_Init+0x104>)
 800118a:	f000 feb5 	bl	8001ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f000 fe7b 	bl	8001e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001198:	2028      	movs	r0, #40	@ 0x28
 800119a:	f000 fe92 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000800 	.word	0x48000800

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fd1e 	bl	8001bf6 <HAL_Init>
// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f8b5 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f7ff ff73 	bl	80010a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80011c2:	f000 fc4d 	bl	8001a60 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 80011c6:	f000 fb25 	bl	8001814 <MX_TIM4_Init>
  MX_TIM3_Init();
 80011ca:	f000 facd 	bl	8001768 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011ce:	f000 fa77 	bl	80016c0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011d2:	f000 f8f4 	bl	80013be <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_DIR1_GPIO_Port,  MOTOR_DIR1_Pin, MOTOR_DIR2_GPIO_Port,  MOTOR_DIR2_Pin);
 80011d6:	4b3e      	ldr	r3, [pc, #248]	@ (80012d0 <main+0x120>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	9203      	str	r2, [sp, #12]
 80011e2:	4a3c      	ldr	r2, [pc, #240]	@ (80012d4 <main+0x124>)
 80011e4:	9202      	str	r2, [sp, #8]
 80011e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011f0:	9200      	str	r2, [sp, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	4938      	ldr	r1, [pc, #224]	@ (80012d8 <main+0x128>)
 80011f6:	4839      	ldr	r0, [pc, #228]	@ (80012dc <main+0x12c>)
 80011f8:	f000 f9c5 	bl	8001586 <Motor_Init>
  Encoder_Init(&Encoder, &htim3, EncoderResolution, EncoderSampleTime);
 80011fc:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <main+0x130>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4a38      	ldr	r2, [pc, #224]	@ (80012e4 <main+0x134>)
 8001202:	edd2 7a00 	vldr	s15, [r2]
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	461a      	mov	r2, r3
 800120c:	4936      	ldr	r1, [pc, #216]	@ (80012e8 <main+0x138>)
 800120e:	4837      	ldr	r0, [pc, #220]	@ (80012ec <main+0x13c>)
 8001210:	f7ff fdb6 	bl	8000d80 <Encoder_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001214:	4836      	ldr	r0, [pc, #216]	@ (80012f0 <main+0x140>)
 8001216:	f002 f8b5 	bl	8003384 <HAL_TIM_Base_Start_IT>

  PID_Init(&PID_Speed, P, I, D, PID_SpeedSampleTime, MaxAngularVelocity, PID_MinValue);
 800121a:	4b36      	ldr	r3, [pc, #216]	@ (80012f4 <main+0x144>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <main+0x148>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <main+0x14c>)
 8001228:	edd3 6a00 	vldr	s13, [r3]
 800122c:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <main+0x150>)
 800122e:	ed93 6a00 	vldr	s12, [r3]
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <main+0x154>)
 8001234:	edd3 5a00 	vldr	s11, [r3]
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <main+0x158>)
 800123a:	ed93 5a00 	vldr	s10, [r3]
 800123e:	eef0 2a45 	vmov.f32	s5, s10
 8001242:	eeb0 2a65 	vmov.f32	s4, s11
 8001246:	eef0 1a46 	vmov.f32	s3, s12
 800124a:	eeb0 1a66 	vmov.f32	s2, s13
 800124e:	eef0 0a47 	vmov.f32	s1, s14
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	482d      	ldr	r0, [pc, #180]	@ (800130c <main+0x15c>)
 8001258:	f7ff fe2e 	bl	8000eb8 <PID_Init>
	  HAL_Delay(5000);
*/



	  if (flag == 1)
 800125c:	4b2c      	ldr	r3, [pc, #176]	@ (8001310 <main+0x160>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1fb      	bne.n	800125c <main+0xac>
	  {
		  flag = 0;
 8001264:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <main+0x160>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		  PID_Output = PID_Compute(&PID_Speed, EncoderAngularVelocity, AngularVelocitySet);
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <main+0x164>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <main+0x168>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	eef0 0a47 	vmov.f32	s1, s14
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	4823      	ldr	r0, [pc, #140]	@ (800130c <main+0x15c>)
 8001280:	f7ff fe4e 	bl	8000f20 <PID_Compute>
 8001284:	eef0 7a40 	vmov.f32	s15, s0
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <main+0x16c>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
		  PID_Output_Angle = MapValues(960.0, PID_Output);
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <main+0x16c>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	eef0 0a67 	vmov.f32	s1, s15
 8001298:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001320 <main+0x170>
 800129c:	f000 f89c 	bl	80013d8 <MapValues>
 80012a0:	eef0 7a40 	vmov.f32	s15, s0
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <main+0x174>)
 80012a6:	edc3 7a00 	vstr	s15, [r3]

		  Motor_SetRideParameters(&Motor, PID_Output_Angle, 1);
 80012aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <main+0x174>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012b8:	793b      	ldrb	r3, [r7, #4]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <main+0x12c>)
 80012c2:	f000 f8cf 	bl	8001464 <Motor_SetRideParameters>

		  Motor_Ride(&Motor);
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <main+0x12c>)
 80012c8:	f000 f911 	bl	80014ee <Motor_Ride>
	  if (flag == 1)
 80012cc:	e7c6      	b.n	800125c <main+0xac>
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	48000800 	.word	0x48000800
 80012d8:	2000014c 	.word	0x2000014c
 80012dc:	20000040 	.word	0x20000040
 80012e0:	20000002 	.word	0x20000002
 80012e4:	20000004 	.word	0x20000004
 80012e8:	20000100 	.word	0x20000100
 80012ec:	20000058 	.word	0x20000058
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000009c 	.word	0x2000009c
 80012fc:	200000a0 	.word	0x200000a0
 8001300:	20000010 	.word	0x20000010
 8001304:	20000014 	.word	0x20000014
 8001308:	200000a4 	.word	0x200000a4
 800130c:	20000078 	.word	0x20000078
 8001310:	200000a8 	.word	0x200000a8
 8001314:	20000074 	.word	0x20000074
 8001318:	2000000c 	.word	0x2000000c
 800131c:	200000ac 	.word	0x200000ac
 8001320:	44700000 	.word	0x44700000
 8001324:	200000b0 	.word	0x200000b0

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2238      	movs	r2, #56	@ 0x38
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fad0 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 ff92 	bl	8002274 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	2340      	movs	r3, #64	@ 0x40
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001366:	2304      	movs	r3, #4
 8001368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800136a:	2355      	movs	r3, #85	@ 0x55
 800136c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f82c 	bl	80023dc <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800138a:	f000 f865 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2303      	movs	r3, #3
 8001394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fb2a 	bl	8002a00 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013b2:	f000 f851 	bl	8001458 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	@ 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2019      	movs	r0, #25
 80013c8:	f000 fd61 	bl	8001e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013cc:	2019      	movs	r0, #25
 80013ce:	f000 fd78 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MapValues>:

/* USER CODE BEGIN 4 */
float MapValues(float MaxValue, float Value)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
 80013e2:	edc7 0a00 	vstr	s1, [r7]
	float X = (float)(Value * 100.0) / (float)MaxValue;
 80013e6:	edd7 7a00 	vldr	s15, [r7]
 80013ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001414 <MapValues+0x3c>
 80013ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fa:	edc7 7a03 	vstr	s15, [r7, #12]
	return X;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	ee07 3a90 	vmov	s15, r3
}
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	42c80000 	.word	0x42c80000

08001418 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d107      	bne.n	800143a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		//EncoderAngle = 0;
		//EncoderAngularVelocity = 0;
		Encoder_AngularVelocity(&Encoder, &EncoderAngle, &EncoderAngularVelocity);
 800142a:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800142c:	4907      	ldr	r1, [pc, #28]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800142e:	4808      	ldr	r0, [pc, #32]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001430:	f7ff fcc8 	bl	8000dc4 <Encoder_AngularVelocity>

		flag = 1;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]

	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012c00 	.word	0x40012c00
 8001448:	20000074 	.word	0x20000074
 800144c:	20000070 	.word	0x20000070
 8001450:	20000058 	.word	0x20000058
 8001454:	200000a8 	.word	0x200000a8

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <Error_Handler+0x8>

08001464 <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
 8001470:	4613      	mov	r3, r2
 8001472:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d902      	bls.n	8001480 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2264      	movs	r2, #100	@ 0x64
 800147e:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 8001486:	78bb      	ldrb	r3, [r7, #2]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d110      	bne.n	80014ae <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6898      	ldr	r0, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	899b      	ldrh	r3, [r3, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	4619      	mov	r1, r3
 8001498:	f000 feb0 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6918      	ldr	r0, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a9b      	ldrh	r3, [r3, #20]
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f000 fea8 	bl	80021fc <HAL_GPIO_WritePin>
 80014ac:	e00f      	b.n	80014ce <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6898      	ldr	r0, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	899b      	ldrh	r3, [r3, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	f000 fe9f 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6918      	ldr	r0, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8a9b      	ldrh	r3, [r3, #20]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f000 fe97 	bl	80021fc <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	78ba      	ldrb	r2, [r7, #2]
 80014d2:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f002 f82a 	bl	8003538 <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <Motor_Ride+0x1e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7d9a      	ldrb	r2, [r3, #22]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800150a:	e036      	b.n	800157a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b04      	cmp	r3, #4
 8001512:	d107      	bne.n	8001524 <Motor_Ride+0x36>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7d99      	ldrb	r1, [r3, #22]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	460b      	mov	r3, r1
 8001520:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001522:	e02a      	b.n	800157a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d107      	bne.n	800153c <Motor_Ride+0x4e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7d99      	ldrb	r1, [r3, #22]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	460b      	mov	r3, r1
 8001538:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800153a:	e01e      	b.n	800157a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d107      	bne.n	8001554 <Motor_Ride+0x66>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7d99      	ldrb	r1, [r3, #22]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	460b      	mov	r3, r1
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001552:	e012      	b.n	800157a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b10      	cmp	r3, #16
 800155a:	d107      	bne.n	800156c <Motor_Ride+0x7e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d99      	ldrb	r1, [r3, #22]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	460b      	mov	r3, r1
 8001568:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800156a:	e006      	b.n	800157a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7d99      	ldrb	r1, [r3, #22]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	460b      	mov	r3, r1
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8bba      	ldrh	r2, [r7, #28]
 80015b2:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015be:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	4a0e      	ldr	r2, [pc, #56]	@ (8001614 <HAL_MspInit+0x44>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_MspInit+0x44>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_MspInit+0x44>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001606:	f000 fed9 	bl	80023bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 fb15 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800167e:	f002 f9a1 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000b4 	.word	0x200000b4

0800168c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001690:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001694:	f000 fdca 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <MX_TIM1_Init+0xa0>)
 80016e0:	4a20      	ldr	r2, [pc, #128]	@ (8001764 <MX_TIM1_Init+0xa4>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM1_Init+0xa0>)
 80016e6:	f244 2267 	movw	r2, #16999	@ 0x4267
 80016ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM1_Init+0xa0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM1_Init+0xa0>)
 80016f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM1_Init+0xa0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_TIM1_Init+0xa0>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_TIM1_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800170c:	4814      	ldr	r0, [pc, #80]	@ (8001760 <MX_TIM1_Init+0xa0>)
 800170e:	f001 fde1 	bl	80032d4 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001718:	f7ff fe9e 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001720:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4619      	mov	r1, r3
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_TIM1_Init+0xa0>)
 800172a:	f002 fbaf 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001734:	f7ff fe90 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM1_Init+0xa0>)
 800174a:	f003 f97d 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001754:	f7ff fe80 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200000b4 	.word	0x200000b4
 8001764:	40012c00 	.word	0x40012c00

08001768 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	@ 0x30
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2224      	movs	r2, #36	@ 0x24
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f004 f8b0 	bl	80058dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <MX_TIM3_Init+0xa4>)
 8001788:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <MX_TIM3_Init+0xa8>)
 800178a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <MX_TIM3_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <MX_TIM3_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 8001798:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <MX_TIM3_Init+0xa4>)
 800179a:	f640 62ff 	movw	r2, #3839	@ 0xeff
 800179e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_TIM3_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <MX_TIM3_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c4:	2301      	movs	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_TIM3_Init+0xa4>)
 80017d8:	f001 ffc0 	bl	800375c <HAL_TIM_Encoder_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017e2:	f7ff fe39 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <MX_TIM3_Init+0xa4>)
 80017f4:	f003 f928 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017fe:	f7ff fe2b 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	@ 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000100 	.word	0x20000100
 8001810:	40000400 	.word	0x40000400

08001814 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001846:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <MX_TIM4_Init+0xe8>)
 8001848:	4a2d      	ldr	r2, [pc, #180]	@ (8001900 <MX_TIM4_Init+0xec>)
 800184a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <MX_TIM4_Init+0xe8>)
 800184e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001852:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <MX_TIM4_Init+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800185a:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <MX_TIM4_Init+0xe8>)
 800185c:	2263      	movs	r2, #99	@ 0x63
 800185e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <MX_TIM4_Init+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <MX_TIM4_Init+0xe8>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800186c:	4823      	ldr	r0, [pc, #140]	@ (80018fc <MX_TIM4_Init+0xe8>)
 800186e:	f001 fd31 	bl	80032d4 <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001878:	f7ff fdee 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001886:	4619      	mov	r1, r3
 8001888:	481c      	ldr	r0, [pc, #112]	@ (80018fc <MX_TIM4_Init+0xe8>)
 800188a:	f002 faff 	bl	8003e8c <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001894:	f7ff fde0 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001898:	4818      	ldr	r0, [pc, #96]	@ (80018fc <MX_TIM4_Init+0xe8>)
 800189a:	f001 fdeb 	bl	8003474 <HAL_TIM_PWM_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80018a4:	f7ff fdd8 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4811      	ldr	r0, [pc, #68]	@ (80018fc <MX_TIM4_Init+0xe8>)
 80018b8:	f003 f8c6 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018c2:	f7ff fdc9 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	@ 0x60
 80018c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	4807      	ldr	r0, [pc, #28]	@ (80018fc <MX_TIM4_Init+0xe8>)
 80018de:	f002 f9c1 	bl	8003c64 <HAL_TIM_PWM_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80018e8:	f7ff fdb6 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <MX_TIM4_Init+0xe8>)
 80018ee:	f000 f87f 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 80018f2:	bf00      	nop
 80018f4:	3738      	adds	r7, #56	@ 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000014c 	.word	0x2000014c
 8001900:	40000800 	.word	0x40000800

08001904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <HAL_TIM_Base_MspInit+0x5c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10c      	bne.n	8001930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 800191c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001920:	6613      	str	r3, [r2, #96]	@ 0x60
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800192e:	e010      	b.n	8001952 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_TIM_Base_MspInit+0x64>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10b      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6593      	str	r3, [r2, #88]	@ 0x58
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_TIM_Base_MspInit+0x60>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40000800 	.word	0x40000800

0800196c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d128      	bne.n	80019e0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	4a16      	ldr	r2, [pc, #88]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6593      	str	r3, [r2, #88]	@ 0x58
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a10      	ldr	r2, [pc, #64]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x80>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019be:	23c0      	movs	r3, #192	@ 0xc0
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ce:	2302      	movs	r3, #2
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019dc:	f000 fa8c 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_TIM_MspPostInit+0x64>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11b      	bne.n	8001a4a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a2a:	2340      	movs	r3, #64	@ 0x40
 8001a2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a46:	f000 fa57 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a64:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <MX_LPUART1_UART_Init+0x8c>)
 8001a68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a6c:	4a20      	ldr	r2, [pc, #128]	@ (8001af0 <MX_LPUART1_UART_Init+0x90>)
 8001a6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a84:	220c      	movs	r2, #12
 8001a86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001aa2:	f003 f8ad 	bl	8004c00 <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001aac:	f7ff fcd4 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001ab4:	f003 fe48 	bl	8005748 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001abe:	f7ff fccb 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001ac6:	f003 fe7d 	bl	80057c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001ad0:	f7ff fcc2 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_LPUART1_UART_Init+0x88>)
 8001ad6:	f003 fdfe 	bl	80056d6 <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001ae0:	f7ff fcba 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000198 	.word	0x20000198
 8001aec:	40008000 	.word	0x40008000
 8001af0:	00033324 	.word	0x00033324

08001af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b09e      	sub	sp, #120	@ 0x78
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2254      	movs	r2, #84	@ 0x54
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fee1 	bl	80058dc <memset>
  if(uartHandle->Instance==LPUART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_UART_MspInit+0xa8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d136      	bne.n	8001b92 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b24:	2320      	movs	r3, #32
 8001b26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 f981 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b3c:	f7ff fc8c 	bl	8001458 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b44:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_UART_MspInit+0xac>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b70:	230c      	movs	r3, #12
 8001b72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b80:	230c      	movs	r3, #12
 8001b82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8e:	f000 f9b3 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b92:	bf00      	nop
 8001b94:	3778      	adds	r7, #120	@ 0x78
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40008000 	.word	0x40008000
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba4:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fd78 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f003 fe8b 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd6:	f7ff faeb 	bl	80011b0 <main>

08001bda <LoopForever>:

LoopForever:
    b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   r0, =_estack
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001be8:	0800599c 	.word	0x0800599c
  ldr r2, =_sbss
 8001bec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001bf0:	20000230 	.word	0x20000230

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>

08001bf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 f939 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f80e 	bl	8001c28 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e001      	b.n	8001c1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c18:	f7ff fcda 	bl	80015d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_InitTick+0x68>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d022      	beq.n	8001c82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_InitTick+0x6c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_InitTick+0x68>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f944 	bl	8001ede <HAL_SYSTICK_Config>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10f      	bne.n	8001c7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d809      	bhi.n	8001c76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c62:	2200      	movs	r2, #0
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c6a:	f000 f910 	bl	8001e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_InitTick+0x70>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e007      	b.n	8001c86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e004      	b.n	8001c86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000020 	.word	0x20000020
 8001c94:	20000018 	.word	0x20000018
 8001c98:	2000001c 	.word	0x2000001c

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000022c 	.word	0x2000022c
 8001cbc:	20000020 	.word	0x20000020

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	2000022c 	.word	0x2000022c

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	@ (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	@ (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff40 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff33 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa4 	bl	8001e34 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f06:	e15a      	b.n	80021be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 814c 	beq.w	80021b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d005      	beq.n	8001f38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d130      	bne.n	8001f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f6e:	2201      	movs	r2, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 0201 	and.w	r2, r3, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d017      	beq.n	8001fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d123      	bne.n	800202a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0203 	and.w	r2, r3, #3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a6 	beq.w	80021b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	4b5b      	ldr	r3, [pc, #364]	@ (80021dc <HAL_GPIO_Init+0x2e4>)
 800206e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002070:	4a5a      	ldr	r2, [pc, #360]	@ (80021dc <HAL_GPIO_Init+0x2e4>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6613      	str	r3, [r2, #96]	@ 0x60
 8002078:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <HAL_GPIO_Init+0x2e4>)
 800207a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002084:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020ae:	d01f      	beq.n	80020f0 <HAL_GPIO_Init+0x1f8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4c      	ldr	r2, [pc, #304]	@ (80021e4 <HAL_GPIO_Init+0x2ec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d019      	beq.n	80020ec <HAL_GPIO_Init+0x1f4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4b      	ldr	r2, [pc, #300]	@ (80021e8 <HAL_GPIO_Init+0x2f0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_GPIO_Init+0x1f0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_GPIO_Init+0x2f4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a49      	ldr	r2, [pc, #292]	@ (80021f0 <HAL_GPIO_Init+0x2f8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a48      	ldr	r2, [pc, #288]	@ (80021f4 <HAL_GPIO_Init+0x2fc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_GPIO_Init+0x1e4>
 80020d8:	2305      	movs	r3, #5
 80020da:	e00a      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020dc:	2306      	movs	r3, #6
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1fa>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	@ (80021e0 <HAL_GPIO_Init+0x2e8>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002110:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002134:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800213a:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800215e:	4a26      	ldr	r2, [pc, #152]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002188:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b2:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_GPIO_Init+0x300>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f ae9d 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	48001400 	.word	0x48001400
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002218:	e002      	b.n	8002220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f806 	bl	800225c <HAL_GPIO_EXTI_Callback>
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d141      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002282:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228e:	d131      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002290:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002296:	4a46      	ldr	r2, [pc, #280]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800229c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a8:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022b0:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2232      	movs	r2, #50	@ 0x32
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a3f      	ldr	r2, [pc, #252]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	3301      	adds	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c6:	e002      	b.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022da:	d102      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e2:	4b33      	ldr	r3, [pc, #204]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ee:	d158      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e057      	b.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f4:	4b2e      	ldr	r3, [pc, #184]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022fa:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002304:	e04d      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800230c:	d141      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230e:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231a:	d131      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800231c:	4b24      	ldr	r3, [pc, #144]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002334:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800233a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2232      	movs	r2, #50	@ 0x32
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	3301      	adds	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002352:	e002      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3b01      	subs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002366:	d102      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f2      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d112      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e011      	b.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002390:	e007      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40007000 	.word	0x40007000
 80023b4:	20000018 	.word	0x20000018
 80023b8:	431bde83 	.word	0x431bde83

080023bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ca:	6093      	str	r3, [r2, #8]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e2fe      	b.n	80029ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d075      	beq.n	80024e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b97      	ldr	r3, [pc, #604]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b94      	ldr	r3, [pc, #592]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d102      	bne.n	800241a <HAL_RCC_OscConfig+0x3e>
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d002      	beq.n	8002420 <HAL_RCC_OscConfig+0x44>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d10b      	bne.n	8002438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x108>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d157      	bne.n	80024e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e2d9      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x74>
 8002442:	4b85      	ldr	r3, [pc, #532]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a84      	ldr	r2, [pc, #528]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b7f      	ldr	r3, [pc, #508]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b7c      	ldr	r3, [pc, #496]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7b      	ldr	r2, [pc, #492]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002474:	4b78      	ldr	r3, [pc, #480]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a77      	ldr	r2, [pc, #476]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a74      	ldr	r2, [pc, #464]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff fc14 	bl	8001cc0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fc10 	bl	8001cc0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e29e      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xc0>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff fc00 	bl	8001cc0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fbfc 	bl	8001cc0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e28a      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	4b60      	ldr	r3, [pc, #384]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0xe8>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b56      	ldr	r3, [pc, #344]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x136>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d002      	beq.n	8002518 <HAL_RCC_OscConfig+0x13c>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d11f      	bne.n	8002558 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	4b4f      	ldr	r3, [pc, #316]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x154>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e25d      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b49      	ldr	r3, [pc, #292]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	4946      	ldr	r1, [pc, #280]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002544:	4b45      	ldr	r3, [pc, #276]	@ (800265c <HAL_RCC_OscConfig+0x280>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb6d 	bl	8001c28 <HAL_InitTick>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d043      	beq.n	80025dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e249      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fba8 	bl	8001cc0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fba4 	bl	8001cc0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e232      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002586:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	492d      	ldr	r1, [pc, #180]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
 80025a6:	e01a      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fb84 	bl	8001cc0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff fb80 	bl	8001cc0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e20e      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ce:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1e0>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d041      	beq.n	800266e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f8:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fb5d 	bl	8001cc0 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7ff fb59 	bl	8001cc0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1e7      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ef      	beq.n	800260a <HAL_RCC_OscConfig+0x22e>
 800262a:	e020      	b.n	800266e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff fb40 	bl	8001cc0 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002642:	e00d      	b.n	8002660 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7ff fb3c 	bl	8001cc0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d906      	bls.n	8002660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1ca      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ea      	bne.n	8002644 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a6 	beq.w	80027c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002680:	4b84      	ldr	r3, [pc, #528]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x2b4>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x2b6>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	4a7e      	ldr	r2, [pc, #504]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b79      	ldr	r3, [pc, #484]	@ (8002898 <HAL_RCC_OscConfig+0x4bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026be:	4b76      	ldr	r3, [pc, #472]	@ (8002898 <HAL_RCC_OscConfig+0x4bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a75      	ldr	r2, [pc, #468]	@ (8002898 <HAL_RCC_OscConfig+0x4bc>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff faf9 	bl	8001cc0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff faf5 	bl	8001cc0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e183      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002898 <HAL_RCC_OscConfig+0x4bc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_RCC_OscConfig+0x32e>
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a65      	ldr	r2, [pc, #404]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002708:	e024      	b.n	8002754 <HAL_RCC_OscConfig+0x378>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d110      	bne.n	8002734 <HAL_RCC_OscConfig+0x358>
 8002712:	4b60      	ldr	r3, [pc, #384]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002718:	4a5e      	ldr	r2, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002722:	4b5c      	ldr	r3, [pc, #368]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	4a5a      	ldr	r2, [pc, #360]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x378>
 8002734:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002744:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff fab0 	bl	8001cc0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7ff faac 	bl	8001cc0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e138      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ed      	beq.n	8002764 <HAL_RCC_OscConfig+0x388>
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff fa99 	bl	8001cc0 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff fa95 	bl	8001cc0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e121      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ed      	bne.n	8002792 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b35      	ldr	r3, [pc, #212]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03c      	beq.n	800284e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01c      	beq.n	8002816 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80027de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7ff fa68 	bl	8001cc0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7ff fa64 	bl	8001cc0 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0f2      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCC_OscConfig+0x418>
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002816:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800281c:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff fa4b 	bl	8001cc0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282e:	f7ff fa47 	bl	8001cc0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0d5      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ef      	bne.n	800282e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80c9 	beq.w	80029ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002858:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b0c      	cmp	r3, #12
 8002862:	f000 8083 	beq.w	800296c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d15e      	bne.n	800292c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HAL_RCC_OscConfig+0x4b8>)
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff fa21 	bl	8001cc0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	e00c      	b.n	800289c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff fa1d 	bl	8001cc0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d905      	bls.n	800289c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0ab      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4b52      	ldr	r3, [pc, #328]	@ (80029f8 <HAL_RCC_OscConfig+0x61c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6a11      	ldr	r1, [r2, #32]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028c2:	0212      	lsls	r2, r2, #8
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0552      	lsls	r2, r2, #21
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028d6:	0852      	lsrs	r2, r2, #1
 80028d8:	3a01      	subs	r2, #1
 80028da:	0652      	lsls	r2, r2, #25
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028e2:	06d2      	lsls	r2, r2, #27
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4943      	ldr	r1, [pc, #268]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f8:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a3d      	ldr	r2, [pc, #244]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff f9dc 	bl	8001cc0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f9d8 	bl	8001cc0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e066      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x530>
 800292a:	e05e      	b.n	80029ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a30      	ldr	r2, [pc, #192]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 8002932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff f9c2 	bl	8001cc0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7ff f9be 	bl	8001cc0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04c      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4924      	ldr	r1, [pc, #144]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 8002964:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <HAL_RCC_OscConfig+0x620>)
 8002966:	4013      	ands	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
 800296a:	e03e      	b.n	80029ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e039      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_RCC_OscConfig+0x618>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	429a      	cmp	r2, r3
 800298a:	d12c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	3b01      	subs	r3, #1
 8002998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d123      	bne.n	80029e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11b      	bne.n	80029e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d113      	bne.n	80029e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	019f800c 	.word	0x019f800c
 80029fc:	feeefffc 	.word	0xfeeefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e11e      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b91      	ldr	r3, [pc, #580]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b8e      	ldr	r3, [pc, #568]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020f 	bic.w	r2, r3, #15
 8002a2e:	498c      	ldr	r1, [pc, #560]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b8a      	ldr	r3, [pc, #552]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e106      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d073      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d129      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b81      	ldr	r3, [pc, #516]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0f4      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a6c:	f000 f99e 	bl	8002dac <RCC_GetSysClockFreqFromPLLSource>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4a7c      	ldr	r2, [pc, #496]	@ (8002c68 <HAL_RCC_ClockConfig+0x268>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d93f      	bls.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d033      	beq.n	8002afa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12f      	bne.n	8002afa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a9a:	4b72      	ldr	r3, [pc, #456]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aa2:	4a70      	ldr	r2, [pc, #448]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e024      	b.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0c6      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0be      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ad8:	f000 f8ce 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <HAL_RCC_ClockConfig+0x268>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d909      	bls.n	8002afa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aee:	4a5d      	ldr	r2, [pc, #372]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b5a      	ldr	r3, [pc, #360]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4957      	ldr	r1, [pc, #348]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0c:	f7ff f8d8 	bl	8001cc0 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7ff f8d4 	bl	8001cc0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e095      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a42      	ldr	r2, [pc, #264]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b74:	4a3b      	ldr	r2, [pc, #236]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4936      	ldr	r1, [pc, #216]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b80      	cmp	r3, #128	@ 0x80
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b96:	4b33      	ldr	r3, [pc, #204]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a32      	ldr	r2, [pc, #200]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d21d      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	4929      	ldr	r1, [pc, #164]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f87e 	bl	8001cc0 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7ff f87a 	bl	8001cc0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e03b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ed      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4917      	ldr	r1, [pc, #92]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b13      	ldr	r3, [pc, #76]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	490f      	ldr	r1, [pc, #60]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2a:	f000 f825 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <HAL_RCC_ClockConfig+0x264>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490c      	ldr	r1, [pc, #48]	@ (8002c6c <HAL_RCC_ClockConfig+0x26c>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_RCC_ClockConfig+0x270>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ffea 	bl	8001c28 <HAL_InitTick>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	04c4b400 	.word	0x04c4b400
 8002c6c:	0800594c 	.word	0x0800594c
 8002c70:	20000018 	.word	0x20000018
 8002c74:	2000001c 	.word	0x2000001c

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e047      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c90:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e03e      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ca2:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d136      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	0a12      	lsrs	r2, r2, #8
 8002cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	0a12      	lsrs	r2, r2, #8
 8002cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0e5b      	lsrs	r3, r3, #25
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e001      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d20:	693b      	ldr	r3, [r7, #16]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	016e3600 	.word	0x016e3600

08002d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000018 	.word	0x20000018

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	0800595c 	.word	0x0800595c

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d84:	f7ff ffda 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	0800595c 	.word	0x0800595c

08002dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002db2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d10c      	bne.n	8002dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dd0:	4a17      	ldr	r2, [pc, #92]	@ (8002e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	4a14      	ldr	r2, [pc, #80]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dda:	68d2      	ldr	r2, [r2, #12]
 8002ddc:	0a12      	lsrs	r2, r2, #8
 8002dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
    break;
 8002de8:	e00c      	b.n	8002e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dea:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	0a12      	lsrs	r2, r2, #8
 8002df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    break;
 8002e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0e5b      	lsrs	r3, r3, #25
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	016e3600 	.word	0x016e3600
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e40:	2300      	movs	r3, #0
 8002e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e44:	2300      	movs	r3, #0
 8002e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8098 	beq.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b43      	ldr	r3, [pc, #268]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b40      	ldr	r3, [pc, #256]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e72:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e82:	4b3a      	ldr	r3, [pc, #232]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a39      	ldr	r2, [pc, #228]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe ff17 	bl	8001cc0 <HAL_GetTick>
 8002e92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e94:	e009      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe ff13 	bl	8001cc0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d902      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea8:	e005      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eaa:	4b30      	ldr	r3, [pc, #192]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0ef      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d159      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01e      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee4:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	4a1f      	ldr	r2, [pc, #124]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe fed3 	bl	8001cc0 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fecf 	bl	8001cc0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d902      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	74fb      	strb	r3, [r7, #19]
            break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ec      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4a:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f58:	4903      	ldr	r1, [pc, #12]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f60:	e008      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f74:	7c7b      	ldrb	r3, [r7, #17]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4ba7      	ldr	r3, [pc, #668]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	4aa6      	ldr	r2, [pc, #664]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f92:	4ba1      	ldr	r3, [pc, #644]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f98:	f023 0203 	bic.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	499d      	ldr	r1, [pc, #628]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb4:	4b98      	ldr	r3, [pc, #608]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f023 020c 	bic.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4995      	ldr	r1, [pc, #596]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd6:	4b90      	ldr	r3, [pc, #576]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	498c      	ldr	r1, [pc, #560]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ff8:	4b87      	ldr	r3, [pc, #540]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	4984      	ldr	r1, [pc, #528]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800301a:	4b7f      	ldr	r3, [pc, #508]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	497b      	ldr	r1, [pc, #492]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303c:	4b76      	ldr	r3, [pc, #472]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4973      	ldr	r1, [pc, #460]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305e:	4b6e      	ldr	r3, [pc, #440]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003064:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	496a      	ldr	r1, [pc, #424]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003080:	4b65      	ldr	r3, [pc, #404]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4962      	ldr	r1, [pc, #392]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	4959      	ldr	r1, [pc, #356]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030c4:	4b54      	ldr	r3, [pc, #336]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d2:	4951      	ldr	r1, [pc, #324]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	4948      	ldr	r1, [pc, #288]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003108:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4940      	ldr	r1, [pc, #256]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003128:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a3a      	ldr	r2, [pc, #232]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003132:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003140:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	4932      	ldr	r1, [pc, #200]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003160:	4b2d      	ldr	r3, [pc, #180]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800316a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	4924      	ldr	r1, [pc, #144]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003196:	d105      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003198:	4b1f      	ldr	r3, [pc, #124]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031be:	4916      	ldr	r1, [pc, #88]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d019      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	4908      	ldr	r1, [pc, #32]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003206:	d109      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003208:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a02      	ldr	r2, [pc, #8]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003212:	60d3      	str	r3, [r2, #12]
 8003214:	e002      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003228:	4b29      	ldr	r3, [pc, #164]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	4926      	ldr	r1, [pc, #152]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003248:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003252:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	4918      	ldr	r1, [pc, #96]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003280:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003298:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800329e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	490a      	ldr	r1, [pc, #40]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e049      	b.n	800337a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fb02 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 fef8 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e054      	b.n	8003446 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d022      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c6:	d01d      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <HAL_TIM_Base_Start_IT+0xd4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a21      	ldr	r2, [pc, #132]	@ (800345c <HAL_TIM_Base_Start_IT+0xd8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_TIM_Base_Start_IT+0xdc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <HAL_TIM_Base_Start_IT+0xe0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <HAL_TIM_Base_Start_IT+0xe4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_TIM_Base_Start_IT+0xe8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d115      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_TIM_Base_Start_IT+0xec>)
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d015      	beq.n	8003442 <HAL_TIM_Base_Start_IT+0xbe>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341c:	d011      	beq.n	8003442 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e008      	b.n	8003442 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e000      	b.n	8003444 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40000c00 	.word	0x40000c00
 8003464:	40013400 	.word	0x40013400
 8003468:	40014000 	.word	0x40014000
 800346c:	40015000 	.word	0x40015000
 8003470:	00010007 	.word	0x00010007

08003474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e049      	b.n	800351a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f841 	bl	8003522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fe28 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_TIM_PWM_Start+0x24>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e03c      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d109      	bne.n	8003576 <HAL_TIM_PWM_Start+0x3e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e02f      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d109      	bne.n	8003590 <HAL_TIM_PWM_Start+0x58>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e022      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d109      	bne.n	80035aa <HAL_TIM_PWM_Start+0x72>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e015      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d109      	bne.n	80035c4 <HAL_TIM_PWM_Start+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e008      	b.n	80035d6 <HAL_TIM_PWM_Start+0x9e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0a6      	b.n	800372c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Start+0xb6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ec:	e023      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start+0xc6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035fc:	e01b      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0xd6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0xe6>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b10      	cmp	r3, #16
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xf6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start+0xfe>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f001 f9dc 	bl	80049fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3a      	ldr	r2, [pc, #232]	@ (8003734 <HAL_TIM_PWM_Start+0x1fc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d018      	beq.n	8003680 <HAL_TIM_PWM_Start+0x148>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a39      	ldr	r2, [pc, #228]	@ (8003738 <HAL_TIM_PWM_Start+0x200>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_TIM_PWM_Start+0x148>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a37      	ldr	r2, [pc, #220]	@ (800373c <HAL_TIM_PWM_Start+0x204>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_PWM_Start+0x148>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a36      	ldr	r2, [pc, #216]	@ (8003740 <HAL_TIM_PWM_Start+0x208>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_TIM_PWM_Start+0x148>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_TIM_PWM_Start+0x20c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0x148>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a33      	ldr	r2, [pc, #204]	@ (8003748 <HAL_TIM_PWM_Start+0x210>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PWM_Start+0x14c>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_Start+0x14e>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_TIM_PWM_Start+0x1fc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d01d      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a26      	ldr	r2, [pc, #152]	@ (800374c <HAL_TIM_PWM_Start+0x214>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <HAL_TIM_PWM_Start+0x218>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <HAL_TIM_PWM_Start+0x21c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <HAL_TIM_PWM_Start+0x200>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_TIM_PWM_Start+0x204>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIM_PWM_Start+0x1b2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_TIM_PWM_Start+0x210>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_TIM_PWM_Start+0x220>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d015      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1f0>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003702:	d011      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e008      	b.n	8003728 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e000      	b.n	800372a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40013400 	.word	0x40013400
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800
 8003748:	40015000 	.word	0x40015000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	00010007 	.word	0x00010007

0800375c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e097      	b.n	80038a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fe f8f1 	bl	800196c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80037a0:	f023 0307 	bic.w	r3, r3, #7
 80037a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f000 fca9 	bl	8004108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4313      	orrs	r3, r2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037fc:	f023 030c 	bic.w	r3, r3, #12
 8003800:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003808:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800380c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	4313      	orrs	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	011a      	lsls	r2, r3, #4
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	031b      	lsls	r3, r3, #12
 800382c:	4313      	orrs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	4313      	orrs	r3, r2
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d110      	bne.n	80038fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038de:	7b7b      	ldrb	r3, [r7, #13]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e069      	b.n	80039bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f8:	e031      	b.n	800395e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d110      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003900:	7bbb      	ldrb	r3, [r7, #14]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003906:	7b3b      	ldrb	r3, [r7, #12]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e055      	b.n	80039bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003920:	e01d      	b.n	800395e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d108      	bne.n	800393a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800392e:	7b7b      	ldrb	r3, [r7, #13]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003934:	7b3b      	ldrb	r3, [r7, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e03e      	b.n	80039bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_TIM_Encoder_Start+0xc4>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d008      	beq.n	800397c <HAL_TIM_Encoder_Start+0xd4>
 800396a:	e00f      	b.n	800398c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f841 	bl	80049fc <TIM_CCxChannelCmd>
      break;
 800397a:	e016      	b.n	80039aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2104      	movs	r1, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f839 	bl	80049fc <TIM_CCxChannelCmd>
      break;
 800398a:	e00e      	b.n	80039aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f831 	bl	80049fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 f82a 	bl	80049fc <TIM_CCxChannelCmd>
      break;
 80039a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d020      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01b      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0202 	mvn.w	r2, #2
 80039f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb5c 	bl	80040cc <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb4e 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb5f 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d020      	beq.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0204 	mvn.w	r2, #4
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fb36 	bl	80040cc <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fb28 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb39 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d020      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0208 	mvn.w	r2, #8
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fb10 	bl	80040cc <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fb02 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb13 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d020      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0210 	mvn.w	r2, #16
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 faea 	bl	80040cc <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fadc 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 faed 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0201 	mvn.w	r2, #1
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fc74 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 f815 	bl	8004b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f001 f80d 	bl	8004b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 faa7 	bl	80040f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f06f 0220 	mvn.w	r2, #32
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 ffd5 	bl	8004b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 ffe1 	bl	8004bb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 ffd9 	bl	8004bc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 ffd1 	bl	8004bd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00c      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 ffc9 	bl	8004bec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0ff      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	f200 80f0 	bhi.w	8003e72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c92:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003e73 	.word	0x08003e73
 8003ca0:	08003e73 	.word	0x08003e73
 8003ca4:	08003e73 	.word	0x08003e73
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003e73 	.word	0x08003e73
 8003cb0:	08003e73 	.word	0x08003e73
 8003cb4:	08003e73 	.word	0x08003e73
 8003cb8:	08003d6f 	.word	0x08003d6f
 8003cbc:	08003e73 	.word	0x08003e73
 8003cc0:	08003e73 	.word	0x08003e73
 8003cc4:	08003e73 	.word	0x08003e73
 8003cc8:	08003daf 	.word	0x08003daf
 8003ccc:	08003e73 	.word	0x08003e73
 8003cd0:	08003e73 	.word	0x08003e73
 8003cd4:	08003e73 	.word	0x08003e73
 8003cd8:	08003df1 	.word	0x08003df1
 8003cdc:	08003e73 	.word	0x08003e73
 8003ce0:	08003e73 	.word	0x08003e73
 8003ce4:	08003e73 	.word	0x08003e73
 8003ce8:	08003e31 	.word	0x08003e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fabc 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e0a5      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fb36 	bl	80043a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e084      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fba9 	bl	80044cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e064      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fc1b 	bl	80045f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e043      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fc8e 	bl	8004718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e2e:	e023      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fcd8 	bl	80047ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e70:	e002      	b.n	8003e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      break;
 8003e76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop

08003e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e0f6      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x20a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6f      	ldr	r2, [pc, #444]	@ (80040a0 <HAL_TIM_ConfigClockSource+0x214>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f000 80c1 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003ee8:	4a6d      	ldr	r2, [pc, #436]	@ (80040a0 <HAL_TIM_ConfigClockSource+0x214>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	f200 80c6 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003ef0:	4a6c      	ldr	r2, [pc, #432]	@ (80040a4 <HAL_TIM_ConfigClockSource+0x218>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f000 80b9 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80040a4 <HAL_TIM_ConfigClockSource+0x218>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f200 80be 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f00:	4a69      	ldr	r2, [pc, #420]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	f000 80b1 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f08:	4a67      	ldr	r2, [pc, #412]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	f200 80b6 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f10:	4a66      	ldr	r2, [pc, #408]	@ (80040ac <HAL_TIM_ConfigClockSource+0x220>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f000 80a9 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f18:	4a64      	ldr	r2, [pc, #400]	@ (80040ac <HAL_TIM_ConfigClockSource+0x220>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f200 80ae 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f20:	4a63      	ldr	r2, [pc, #396]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x224>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f000 80a1 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f28:	4a61      	ldr	r2, [pc, #388]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x224>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	f200 80a6 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f30:	4a60      	ldr	r2, [pc, #384]	@ (80040b4 <HAL_TIM_ConfigClockSource+0x228>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f000 8099 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f38:	4a5e      	ldr	r2, [pc, #376]	@ (80040b4 <HAL_TIM_ConfigClockSource+0x228>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f200 809e 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f44:	f000 8091 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f4c:	f200 8096 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f54:	f000 8089 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f5c:	f200 808e 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f64:	d03e      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x158>
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6a:	f200 8087 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f72:	f000 8086 	beq.w	8004082 <HAL_TIM_ConfigClockSource+0x1f6>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d87f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f7c:	2b70      	cmp	r3, #112	@ 0x70
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x12a>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d87b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f84:	2b60      	cmp	r3, #96	@ 0x60
 8003f86:	d050      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x19e>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d877      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f8c:	2b50      	cmp	r3, #80	@ 0x50
 8003f8e:	d03c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17e>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d873      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d058      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x1be>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d86f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003f9c:	2b30      	cmp	r3, #48	@ 0x30
 8003f9e:	d064      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d86b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d060      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d867      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d05a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x1de>
 8003fb4:	e062      	b.n	800407c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	f000 fcf9 	bl	80049bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
      break;
 8003fe2:	e04f      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	f000 fce2 	bl	80049bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e03c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 fc54 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2150      	movs	r1, #80	@ 0x50
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fcad 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004028:	e02c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 fc73 	bl	8004922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2160      	movs	r1, #96	@ 0x60
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fc9d 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004048:	e01c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fc34 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2140      	movs	r1, #64	@ 0x40
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fc8d 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004068:	e00c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f000 fc84 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 800407a:	e003      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e000      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	00100070 	.word	0x00100070
 80040a4:	00100060 	.word	0x00100060
 80040a8:	00100050 	.word	0x00100050
 80040ac:	00100040 	.word	0x00100040
 80040b0:	00100030 	.word	0x00100030
 80040b4:	00100020 	.word	0x00100020

080040b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a4c      	ldr	r2, [pc, #304]	@ (800424c <TIM_Base_SetConfig+0x144>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d017      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d013      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a49      	ldr	r2, [pc, #292]	@ (8004250 <TIM_Base_SetConfig+0x148>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00f      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a48      	ldr	r2, [pc, #288]	@ (8004254 <TIM_Base_SetConfig+0x14c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00b      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a47      	ldr	r2, [pc, #284]	@ (8004258 <TIM_Base_SetConfig+0x150>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a46      	ldr	r2, [pc, #280]	@ (800425c <TIM_Base_SetConfig+0x154>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_Base_SetConfig+0x48>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a45      	ldr	r2, [pc, #276]	@ (8004260 <TIM_Base_SetConfig+0x158>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a39      	ldr	r2, [pc, #228]	@ (800424c <TIM_Base_SetConfig+0x144>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d023      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d01f      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a36      	ldr	r2, [pc, #216]	@ (8004250 <TIM_Base_SetConfig+0x148>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01b      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <TIM_Base_SetConfig+0x14c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d017      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a34      	ldr	r2, [pc, #208]	@ (8004258 <TIM_Base_SetConfig+0x150>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a33      	ldr	r2, [pc, #204]	@ (800425c <TIM_Base_SetConfig+0x154>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <TIM_Base_SetConfig+0x15c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a32      	ldr	r2, [pc, #200]	@ (8004268 <TIM_Base_SetConfig+0x160>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <TIM_Base_SetConfig+0x164>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xaa>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <TIM_Base_SetConfig+0x158>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a18      	ldr	r2, [pc, #96]	@ (800424c <TIM_Base_SetConfig+0x144>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <TIM_Base_SetConfig+0x110>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1a      	ldr	r2, [pc, #104]	@ (800425c <TIM_Base_SetConfig+0x154>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0x110>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <TIM_Base_SetConfig+0x15c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0x110>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <TIM_Base_SetConfig+0x160>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0x110>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a18      	ldr	r2, [pc, #96]	@ (800426c <TIM_Base_SetConfig+0x164>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0x110>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <TIM_Base_SetConfig+0x158>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]
  }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40013400 	.word	0x40013400
 8004260:	40015000 	.word	0x40015000
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f023 0201 	bic.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a30      	ldr	r2, [pc, #192]	@ (800438c <TIM_OC1_SetConfig+0x11c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <TIM_OC1_SetConfig+0x88>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004390 <TIM_OC1_SetConfig+0x120>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <TIM_OC1_SetConfig+0x88>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <TIM_OC1_SetConfig+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_OC1_SetConfig+0x88>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <TIM_OC1_SetConfig+0x128>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_OC1_SetConfig+0x88>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <TIM_OC1_SetConfig+0x12c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC1_SetConfig+0x88>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <TIM_OC1_SetConfig+0x130>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10c      	bne.n	8004312 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0308 	bic.w	r3, r3, #8
 80042fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <TIM_OC1_SetConfig+0x11c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <TIM_OC1_SetConfig+0xd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <TIM_OC1_SetConfig+0x120>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00f      	beq.n	8004342 <TIM_OC1_SetConfig+0xd2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <TIM_OC1_SetConfig+0x124>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00b      	beq.n	8004342 <TIM_OC1_SetConfig+0xd2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <TIM_OC1_SetConfig+0x128>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_OC1_SetConfig+0xd2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a19      	ldr	r2, [pc, #100]	@ (800439c <TIM_OC1_SetConfig+0x12c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC1_SetConfig+0xd2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <TIM_OC1_SetConfig+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d111      	bne.n	8004366 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800
 80043a0:	40015000 	.word	0x40015000

080043a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f023 0210 	bic.w	r2, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0320 	bic.w	r3, r3, #32
 80043f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <TIM_OC2_SetConfig+0x110>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_OC2_SetConfig+0x74>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <TIM_OC2_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC2_SetConfig+0x74>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <TIM_OC2_SetConfig+0x118>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10d      	bne.n	8004434 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <TIM_OC2_SetConfig+0x110>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <TIM_OC2_SetConfig+0xc0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <TIM_OC2_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_OC2_SetConfig+0xc0>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <TIM_OC2_SetConfig+0x11c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_OC2_SetConfig+0xc0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <TIM_OC2_SetConfig+0x120>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_OC2_SetConfig+0xc0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <TIM_OC2_SetConfig+0x124>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC2_SetConfig+0xc0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <TIM_OC2_SetConfig+0x118>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d113      	bne.n	800448c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800446a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40015000 	.word	0x40015000
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2b      	ldr	r2, [pc, #172]	@ (80045d8 <TIM_OC3_SetConfig+0x10c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d007      	beq.n	800453e <TIM_OC3_SetConfig+0x72>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2a      	ldr	r2, [pc, #168]	@ (80045dc <TIM_OC3_SetConfig+0x110>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <TIM_OC3_SetConfig+0x72>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <TIM_OC3_SetConfig+0x114>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10d      	bne.n	800455a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1e      	ldr	r2, [pc, #120]	@ (80045d8 <TIM_OC3_SetConfig+0x10c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <TIM_OC3_SetConfig+0xbe>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <TIM_OC3_SetConfig+0x110>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_OC3_SetConfig+0xbe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1d      	ldr	r2, [pc, #116]	@ (80045e4 <TIM_OC3_SetConfig+0x118>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_OC3_SetConfig+0xbe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1c      	ldr	r2, [pc, #112]	@ (80045e8 <TIM_OC3_SetConfig+0x11c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_OC3_SetConfig+0xbe>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <TIM_OC3_SetConfig+0x120>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC3_SetConfig+0xbe>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <TIM_OC3_SetConfig+0x114>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40015000 	.word	0x40015000
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800463e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <TIM_OC4_SetConfig+0x110>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_OC4_SetConfig+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <TIM_OC4_SetConfig+0x114>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC4_SetConfig+0x74>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2a      	ldr	r2, [pc, #168]	@ (8004708 <TIM_OC4_SetConfig+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10d      	bne.n	8004680 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1f      	ldr	r2, [pc, #124]	@ (8004700 <TIM_OC4_SetConfig+0x110>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <TIM_OC4_SetConfig+0xc0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a1e      	ldr	r2, [pc, #120]	@ (8004704 <TIM_OC4_SetConfig+0x114>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_OC4_SetConfig+0xc0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <TIM_OC4_SetConfig+0x11c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_OC4_SetConfig+0xc0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <TIM_OC4_SetConfig+0x120>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_OC4_SetConfig+0xc0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <TIM_OC4_SetConfig+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC4_SetConfig+0xc0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <TIM_OC4_SetConfig+0x118>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d113      	bne.n	80046d8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40015000 	.word	0x40015000
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800475c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <TIM_OC5_SetConfig+0xbc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <TIM_OC5_SetConfig+0x82>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <TIM_OC5_SetConfig+0xc0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00f      	beq.n	800479a <TIM_OC5_SetConfig+0x82>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a17      	ldr	r2, [pc, #92]	@ (80047dc <TIM_OC5_SetConfig+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_OC5_SetConfig+0x82>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a16      	ldr	r2, [pc, #88]	@ (80047e0 <TIM_OC5_SetConfig+0xc8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <TIM_OC5_SetConfig+0x82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <TIM_OC5_SetConfig+0xcc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC5_SetConfig+0x82>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <TIM_OC5_SetConfig+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d109      	bne.n	80047ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40013400 	.word	0x40013400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800
 80047e8:	40015000 	.word	0x40015000

080047ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	051b      	lsls	r3, r3, #20
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <TIM_OC6_SetConfig+0xc0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <TIM_OC6_SetConfig+0x84>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <TIM_OC6_SetConfig+0xc4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_OC6_SetConfig+0x84>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <TIM_OC6_SetConfig+0xc8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_OC6_SetConfig+0x84>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <TIM_OC6_SetConfig+0xcc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_OC6_SetConfig+0x84>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <TIM_OC6_SetConfig+0xd0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC6_SetConfig+0x84>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <TIM_OC6_SetConfig+0xd4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d109      	bne.n	8004884 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40013400 	.word	0x40013400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40015000 	.word	0x40015000

080048c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 030a 	bic.w	r3, r3, #10
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004922:	b480      	push	{r7}
 8004924:	b087      	sub	sp, #28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f023 0210 	bic.w	r2, r3, #16
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800494c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800495e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f043 0307 	orr.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2201      	movs	r2, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e074      	b.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a31      	ldr	r2, [pc, #196]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004aa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a21      	ldr	r2, [pc, #132]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d01d      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a11      	ldr	r2, [pc, #68]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10c      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40015000 	.word	0x40015000
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800
 8004b6c:	40000c00 	.word	0x40000c00
 8004b70:	40014000 	.word	0x40014000

08004b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e042      	b.n	8004c98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fc ff65 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2224      	movs	r2, #36	@ 0x24
 8004c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb24 	bl	8005298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f825 	bl	8004ca0 <UART_SetConfig>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e01b      	b.n	8004c98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fba3 	bl	80053dc <UART_CheckIdleState>
 8004c96:	4603      	mov	r3, r0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b08c      	sub	sp, #48	@ 0x30
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4baa      	ldr	r3, [pc, #680]	@ (8004f78 <UART_SetConfig+0x2d8>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a9f      	ldr	r2, [pc, #636]	@ (8004f7c <UART_SetConfig+0x2dc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	f023 010f 	bic.w	r1, r3, #15
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a90      	ldr	r2, [pc, #576]	@ (8004f80 <UART_SetConfig+0x2e0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d125      	bne.n	8004d90 <UART_SetConfig+0xf0>
 8004d44:	4b8f      	ldr	r3, [pc, #572]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d81a      	bhi.n	8004d88 <UART_SetConfig+0xe8>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0xb8>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d79 	.word	0x08004d79
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e116      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e112      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e10e      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e10a      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e106      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7c      	ldr	r2, [pc, #496]	@ (8004f88 <UART_SetConfig+0x2e8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d138      	bne.n	8004e0c <UART_SetConfig+0x16c>
 8004d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d82d      	bhi.n	8004e04 <UART_SetConfig+0x164>
 8004da8:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0x110>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e05 	.word	0x08004e05
 8004dbc:	08004e05 	.word	0x08004e05
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e05 	.word	0x08004e05
 8004dc8:	08004e05 	.word	0x08004e05
 8004dcc:	08004e05 	.word	0x08004e05
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	08004e05 	.word	0x08004e05
 8004dd8:	08004e05 	.word	0x08004e05
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dea:	e0d8      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df2:	e0d4      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfa:	e0d0      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e02:	e0cc      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0a:	e0c8      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a5e      	ldr	r2, [pc, #376]	@ (8004f8c <UART_SetConfig+0x2ec>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d125      	bne.n	8004e62 <UART_SetConfig+0x1c2>
 8004e16:	4b5b      	ldr	r3, [pc, #364]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e20:	2b30      	cmp	r3, #48	@ 0x30
 8004e22:	d016      	beq.n	8004e52 <UART_SetConfig+0x1b2>
 8004e24:	2b30      	cmp	r3, #48	@ 0x30
 8004e26:	d818      	bhi.n	8004e5a <UART_SetConfig+0x1ba>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d00a      	beq.n	8004e42 <UART_SetConfig+0x1a2>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d814      	bhi.n	8004e5a <UART_SetConfig+0x1ba>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <UART_SetConfig+0x19a>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d008      	beq.n	8004e4a <UART_SetConfig+0x1aa>
 8004e38:	e00f      	b.n	8004e5a <UART_SetConfig+0x1ba>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e40:	e0ad      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e42:	2302      	movs	r3, #2
 8004e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e48:	e0a9      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e50:	e0a5      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e52:	2308      	movs	r3, #8
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e58:	e0a1      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e60:	e09d      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a4a      	ldr	r2, [pc, #296]	@ (8004f90 <UART_SetConfig+0x2f0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d125      	bne.n	8004eb8 <UART_SetConfig+0x218>
 8004e6c:	4b45      	ldr	r3, [pc, #276]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e78:	d016      	beq.n	8004ea8 <UART_SetConfig+0x208>
 8004e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e7c:	d818      	bhi.n	8004eb0 <UART_SetConfig+0x210>
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d00a      	beq.n	8004e98 <UART_SetConfig+0x1f8>
 8004e82:	2b80      	cmp	r3, #128	@ 0x80
 8004e84:	d814      	bhi.n	8004eb0 <UART_SetConfig+0x210>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <UART_SetConfig+0x1f0>
 8004e8a:	2b40      	cmp	r3, #64	@ 0x40
 8004e8c:	d008      	beq.n	8004ea0 <UART_SetConfig+0x200>
 8004e8e:	e00f      	b.n	8004eb0 <UART_SetConfig+0x210>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e082      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e07e      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e07a      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e076      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e072      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <UART_SetConfig+0x2f4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d12a      	bne.n	8004f18 <UART_SetConfig+0x278>
 8004ec2:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed0:	d01a      	beq.n	8004f08 <UART_SetConfig+0x268>
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed6:	d81b      	bhi.n	8004f10 <UART_SetConfig+0x270>
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d00c      	beq.n	8004ef8 <UART_SetConfig+0x258>
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee2:	d815      	bhi.n	8004f10 <UART_SetConfig+0x270>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <UART_SetConfig+0x250>
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eec:	d008      	beq.n	8004f00 <UART_SetConfig+0x260>
 8004eee:	e00f      	b.n	8004f10 <UART_SetConfig+0x270>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef6:	e052      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	e04e      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e04a      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0e:	e046      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f16:	e042      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <UART_SetConfig+0x2dc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d13a      	bne.n	8004f98 <UART_SetConfig+0x2f8>
 8004f22:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <UART_SetConfig+0x2e4>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f30:	d01a      	beq.n	8004f68 <UART_SetConfig+0x2c8>
 8004f32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f36:	d81b      	bhi.n	8004f70 <UART_SetConfig+0x2d0>
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3c:	d00c      	beq.n	8004f58 <UART_SetConfig+0x2b8>
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f42:	d815      	bhi.n	8004f70 <UART_SetConfig+0x2d0>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <UART_SetConfig+0x2b0>
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4c:	d008      	beq.n	8004f60 <UART_SetConfig+0x2c0>
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x2d0>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f56:	e022      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5e:	e01e      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f66:	e01a      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6e:	e016      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f76:	e012      	b.n	8004f9e <UART_SetConfig+0x2fe>
 8004f78:	cfff69f3 	.word	0xcfff69f3
 8004f7c:	40008000 	.word	0x40008000
 8004f80:	40013800 	.word	0x40013800
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	40004800 	.word	0x40004800
 8004f90:	40004c00 	.word	0x40004c00
 8004f94:	40005000 	.word	0x40005000
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4aae      	ldr	r2, [pc, #696]	@ (800525c <UART_SetConfig+0x5bc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f040 8097 	bne.w	80050d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004faa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d823      	bhi.n	8004ffa <UART_SetConfig+0x35a>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0x318>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004feb 	.word	0x08004feb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	08004ffb 	.word	0x08004ffb
 8004fd8:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fdc:	f7fd feba 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8005260 <UART_SetConfig+0x5c0>)
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fd fe45 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8004fee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005004:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8130 	beq.w	800526e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	4a94      	ldr	r2, [pc, #592]	@ (8005264 <UART_SetConfig+0x5c4>)
 8005014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005018:	461a      	mov	r2, r3
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005020:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	d305      	bcc.n	800503e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	429a      	cmp	r2, r3
 800503c:	d903      	bls.n	8005046 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005044:	e113      	b.n	800526e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	2200      	movs	r2, #0
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	60fa      	str	r2, [r7, #12]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	4a84      	ldr	r2, [pc, #528]	@ (8005264 <UART_SetConfig+0x5c4>)
 8005054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005058:	b29b      	uxth	r3, r3
 800505a:	2200      	movs	r2, #0
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005064:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005068:	f7fb fcf4 	bl	8000a54 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	020b      	lsls	r3, r1, #8
 800507e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005082:	0202      	lsls	r2, r0, #8
 8005084:	6979      	ldr	r1, [r7, #20]
 8005086:	6849      	ldr	r1, [r1, #4]
 8005088:	0849      	lsrs	r1, r1, #1
 800508a:	2000      	movs	r0, #0
 800508c:	460c      	mov	r4, r1
 800508e:	4605      	mov	r5, r0
 8005090:	eb12 0804 	adds.w	r8, r2, r4
 8005094:	eb43 0905 	adc.w	r9, r3, r5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	469a      	mov	sl, r3
 80050a0:	4693      	mov	fp, r2
 80050a2:	4652      	mov	r2, sl
 80050a4:	465b      	mov	r3, fp
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fcd3 	bl	8000a54 <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4613      	mov	r3, r2
 80050b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050bc:	d308      	bcc.n	80050d0 <UART_SetConfig+0x430>
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c4:	d204      	bcs.n	80050d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	e0ce      	b.n	800526e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050d6:	e0ca      	b.n	800526e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e0:	d166      	bne.n	80051b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80050e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d827      	bhi.n	800513a <UART_SetConfig+0x49a>
 80050ea:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <UART_SetConfig+0x450>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005125 	.word	0x08005125
 80050fc:	0800513b 	.word	0x0800513b
 8005100:	0800512b 	.word	0x0800512b
 8005104:	0800513b 	.word	0x0800513b
 8005108:	0800513b 	.word	0x0800513b
 800510c:	0800513b 	.word	0x0800513b
 8005110:	08005133 	.word	0x08005133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fd fe1e 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511a:	e014      	b.n	8005146 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7fd fe30 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005122:	e010      	b.n	8005146 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b4e      	ldr	r3, [pc, #312]	@ (8005260 <UART_SetConfig+0x5c0>)
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005128:	e00d      	b.n	8005146 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fd fda5 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 800512e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005130:	e009      	b.n	8005146 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005138:	e005      	b.n	8005146 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8090 	beq.w	800526e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	4a44      	ldr	r2, [pc, #272]	@ (8005264 <UART_SetConfig+0x5c4>)
 8005154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005158:	461a      	mov	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005160:	005a      	lsls	r2, r3, #1
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	441a      	add	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d916      	bls.n	80051a8 <UART_SetConfig+0x508>
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005180:	d212      	bcs.n	80051a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f023 030f 	bic.w	r3, r3, #15
 800518a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	b29a      	uxth	r2, r3
 8005198:	8bfb      	ldrh	r3, [r7, #30]
 800519a:	4313      	orrs	r3, r2
 800519c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	8bfa      	ldrh	r2, [r7, #30]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	e062      	b.n	800526e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051ae:	e05e      	b.n	800526e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d828      	bhi.n	800520a <UART_SetConfig+0x56a>
 80051b8:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <UART_SetConfig+0x520>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fd fdb6 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80051e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ea:	e014      	b.n	8005216 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fd fdc8 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 80051f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051f2:	e010      	b.n	8005216 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005260 <UART_SetConfig+0x5c0>)
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051f8:	e00d      	b.n	8005216 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fd fd3d 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 80051fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005200:	e009      	b.n	8005216 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005208:	e005      	b.n	8005216 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005214:	bf00      	nop
    }

    if (pclk != 0U)
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d028      	beq.n	800526e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	4a10      	ldr	r2, [pc, #64]	@ (8005264 <UART_SetConfig+0x5c4>)
 8005222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005226:	461a      	mov	r2, r3
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	fbb3 f2f2 	udiv	r2, r3, r2
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	441a      	add	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d910      	bls.n	8005268 <UART_SetConfig+0x5c8>
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524c:	d20c      	bcs.n	8005268 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	b29a      	uxth	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	e009      	b.n	800526e <UART_SetConfig+0x5ce>
 800525a:	bf00      	nop
 800525c:	40008000 	.word	0x40008000
 8005260:	00f42400 	.word	0x00f42400
 8005264:	08005964 	.word	0x08005964
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2201      	movs	r2, #1
 8005272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2201      	movs	r2, #1
 800527a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800528a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	@ 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005396:	d10a      	bne.n	80053ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b098      	sub	sp, #96	@ 0x60
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fc fc68 	bl	8001cc0 <HAL_GetTick>
 80053f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d12f      	bne.n	8005460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f88e 	bl	8005530 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d022      	beq.n	8005460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800542e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005438:	647b      	str	r3, [r7, #68]	@ 0x44
 800543a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800543e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e063      	b.n	8005528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b04      	cmp	r3, #4
 800546c:	d149      	bne.n	8005502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005476:	2200      	movs	r2, #0
 8005478:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f857 	bl	8005530 <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d03c      	beq.n	8005502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	623b      	str	r3, [r7, #32]
   return(result);
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054da:	61fa      	str	r2, [r7, #28]
 80054dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	617b      	str	r3, [r7, #20]
   return(result);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e012      	b.n	8005528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3758      	adds	r7, #88	@ 0x58
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005540:	e04f      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005548:	d04b      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fc fbb9 	bl	8001cc0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <UART_WaitOnFlagUntilTimeout+0x30>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e04e      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d037      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b80      	cmp	r3, #128	@ 0x80
 8005576:	d034      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	d031      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b08      	cmp	r3, #8
 800558a:	d110      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f838 	bl	800560a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2208      	movs	r2, #8
 800559e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e029      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055bc:	d111      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f81e 	bl	800560a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e00f      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d0a0      	beq.n	8005542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b095      	sub	sp, #84	@ 0x54
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005630:	643b      	str	r3, [r7, #64]	@ 0x40
 8005632:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005636:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	61fb      	str	r3, [r7, #28]
   return(result);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005668:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800566a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e3      	bne.n	8005644 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d118      	bne.n	80056b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	60bb      	str	r3, [r7, #8]
   return(result);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	647b      	str	r3, [r7, #68]	@ 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	613b      	str	r3, [r7, #16]
   return(result);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e6      	bne.n	8005684 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056ca:	bf00      	nop
 80056cc:	3754      	adds	r7, #84	@ 0x54
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_UARTEx_DisableFifoMode+0x16>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e027      	b.n	800573c <HAL_UARTEx_DisableFifoMode+0x66>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	@ 0x24
 80056f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800571a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e02d      	b.n	80057bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f84f 	bl	8005840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e02d      	b.n	8005838 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	@ 0x24
 80057e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f811 	bl	8005840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005860:	e031      	b.n	80058c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005862:	2308      	movs	r3, #8
 8005864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005866:	2308      	movs	r3, #8
 8005868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	0e5b      	lsrs	r3, r3, #25
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	0f5b      	lsrs	r3, r3, #29
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800588a:	7bbb      	ldrb	r3, [r7, #14]
 800588c:	7b3a      	ldrb	r2, [r7, #12]
 800588e:	4911      	ldr	r1, [pc, #68]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005890:	5c8a      	ldrb	r2, [r1, r2]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005896:	7b3a      	ldrb	r2, [r7, #12]
 8005898:	490f      	ldr	r1, [pc, #60]	@ (80058d8 <UARTEx_SetNbDataToProcess+0x98>)
 800589a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800589c:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	7b7a      	ldrb	r2, [r7, #13]
 80058ac:	4909      	ldr	r1, [pc, #36]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x94>)
 80058ae:	5c8a      	ldrb	r2, [r1, r2]
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058b4:	7b7a      	ldrb	r2, [r7, #13]
 80058b6:	4908      	ldr	r1, [pc, #32]	@ (80058d8 <UARTEx_SetNbDataToProcess+0x98>)
 80058b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	0800597c 	.word	0x0800597c
 80058d8:	08005984 	.word	0x08005984

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	@ (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005930 <__libc_init_array+0x44>)
 8005900:	f000 f818 	bl	8005934 <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08005994 	.word	0x08005994
 8005928:	08005994 	.word	0x08005994
 800592c:	08005994 	.word	0x08005994
 8005930:	08005998 	.word	0x08005998

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
