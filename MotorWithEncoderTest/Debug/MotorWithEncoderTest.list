
MotorWithEncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004630  08004630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004678  08004678  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004680  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  08004690  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004690  00006174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ff  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f6  00000000  00000000  00018a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000228b  00000000  00000000  0001ce13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ab4  00000000  00000000  0001f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8197  00000000  00000000  00031b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  00129d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004618 	.word	0x08004618

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004618 	.word	0x08004618

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_GPIO_Init+0x100>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_GPIO_Init+0x100>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4a2d      	ldr	r2, [pc, #180]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_GPIO_Init+0x100>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <MX_GPIO_Init+0x100>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <MX_GPIO_Init+0x100>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <MX_GPIO_Init+0x100>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_DIR1_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f000 ff52 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_GPIO_Init+0x104>)
 80005ce:	f000 ff4d 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4817      	ldr	r0, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x104>)
 80005ea:	f000 fdbd 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_DIR1_Pin;
 80005ee:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f000 fdad 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR2_Pin;
 800060e:	2380      	movs	r3, #128	@ 0x80
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR2_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x104>)
 8000626:	f000 fd9f 	bl	8001168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f000 fd65 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000634:	2028      	movs	r0, #40	@ 0x28
 8000636:	f000 fd7c 	bl	8001132 <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	48000800 	.word	0x48000800

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fbe6 	bl	8000e22 <HAL_Init>
// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f83d 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f7ff ff73 	bl	8000544 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800065e:	f000 fb15 	bl	8000c8c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8000662:	f000 fa01 	bl	8000a68 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000666:	f000 f9a9 	bl	80009bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_DIR1_GPIO_Port,  MOTOR_DIR1_Pin, MOTOR_DIR2_GPIO_Port,  MOTOR_DIR2_Pin);
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <main+0x78>)
 800066c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000670:	b29b      	uxth	r3, r3
 8000672:	2280      	movs	r2, #128	@ 0x80
 8000674:	9203      	str	r2, [sp, #12]
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <main+0x7c>)
 8000678:	9202      	str	r2, [sp, #8]
 800067a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	4910      	ldr	r1, [pc, #64]	@ (80006cc <main+0x80>)
 800068a:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <main+0x84>)
 800068c:	f000 f904 	bl	8000898 <Motor_Init>
	  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, 1);
	  TIM4->CCR1 = 80;
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  HAL_Delay(3000);
	  */
	  Motor_SetRideParameters(&Motor, 70, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2146      	movs	r1, #70	@ 0x46
 8000694:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <main+0x84>)
 8000696:	f000 f86e 	bl	8000776 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 800069a:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <main+0x84>)
 800069c:	f000 f8b0 	bl	8000800 <Motor_Ride>
	  HAL_Delay(3000);
 80006a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006a4:	f000 fc2e 	bl	8000f04 <HAL_Delay>

	  Motor_SetRideParameters(&Motor, 80, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2150      	movs	r1, #80	@ 0x50
 80006ac:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <main+0x84>)
 80006ae:	f000 f862 	bl	8000776 <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <main+0x84>)
 80006b4:	f000 f8a4 	bl	8000800 <Motor_Ride>
	  HAL_Delay(3000);
 80006b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006bc:	f000 fc22 	bl	8000f04 <HAL_Delay>
	  Motor_SetRideParameters(&Motor, 70, 1);
 80006c0:	bf00      	nop
 80006c2:	e7e5      	b.n	8000690 <main+0x44>
 80006c4:	20000000 	.word	0x20000000
 80006c8:	48000800 	.word	0x48000800
 80006cc:	20000090 	.word	0x20000090
 80006d0:	2000002c 	.word	0x2000002c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2238      	movs	r2, #56	@ 0x38
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 ff6c 	bl	80045c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fef4 	bl	80014e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000716:	2355      	movs	r3, #85	@ 0x55
 8000718:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff8e 	bl	800164c <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000736:	f000 f818 	bl	800076a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fa8c 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800075e:	f000 f804 	bl	800076a <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076e:	b672      	cpsid	i
}
 8000770:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <Error_Handler+0x8>

08000776 <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	70fb      	strb	r3, [r7, #3]
 8000782:	4613      	mov	r3, r2
 8000784:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 8000786:	78fb      	ldrb	r3, [r7, #3]
 8000788:	2b64      	cmp	r3, #100	@ 0x64
 800078a:	d902      	bls.n	8000792 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2264      	movs	r2, #100	@ 0x64
 8000790:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 8000798:	78bb      	ldrb	r3, [r7, #2]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d110      	bne.n	80007c0 <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6898      	ldr	r0, [r3, #8]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	f000 fe5f 	bl	800146c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6918      	ldr	r0, [r3, #16]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8a9b      	ldrh	r3, [r3, #20]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	f000 fe57 	bl	800146c <HAL_GPIO_WritePin>
 80007be:	e00f      	b.n	80007e0 <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	899b      	ldrh	r3, [r3, #12]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f000 fe4e 	bl	800146c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6918      	ldr	r0, [r3, #16]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	8a9b      	ldrh	r3, [r3, #20]
 80007d8:	2201      	movs	r2, #1
 80007da:	4619      	mov	r1, r3
 80007dc:	f000 fe46 	bl	800146c <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	78ba      	ldrb	r2, [r7, #2]
 80007e4:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4619      	mov	r1, r3
 80007f0:	4610      	mov	r0, r2
 80007f2:	f001 ff5f 	bl	80026b4 <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <Motor_Ride+0x1e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7d9a      	ldrb	r2, [r3, #22]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800081c:	e036      	b.n	800088c <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d107      	bne.n	8000836 <Motor_Ride+0x36>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7d99      	ldrb	r1, [r3, #22]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	460b      	mov	r3, r1
 8000832:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000834:	e02a      	b.n	800088c <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b08      	cmp	r3, #8
 800083c:	d107      	bne.n	800084e <Motor_Ride+0x4e>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7d99      	ldrb	r1, [r3, #22]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	460b      	mov	r3, r1
 800084a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800084c:	e01e      	b.n	800088c <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d107      	bne.n	8000866 <Motor_Ride+0x66>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7d99      	ldrb	r1, [r3, #22]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	460b      	mov	r3, r1
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000864:	e012      	b.n	800088c <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b10      	cmp	r3, #16
 800086c:	d107      	bne.n	800087e <Motor_Ride+0x7e>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7d99      	ldrb	r1, [r3, #22]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	460b      	mov	r3, r1
 800087a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800087c:	e006      	b.n	800088c <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7d99      	ldrb	r1, [r3, #22]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	460b      	mov	r3, r1
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	8bba      	ldrh	r2, [r7, #28]
 80008c4:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6a3a      	ldr	r2, [r7, #32]
 80008ca:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80008d0:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000916:	f000 fe89 	bl	800162c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 faa3 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}

08000986 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800098a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800098e:	f000 fd85 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2224      	movs	r2, #36	@ 0x24
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fdf8 	bl	80045c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009dc:	4a21      	ldr	r2, [pc, #132]	@ (8000a64 <MX_TIM3_Init+0xa8>)
 80009de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009ee:	f640 62ff 	movw	r2, #3839	@ 0xeff
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 8000a2c:	f001 ff54 	bl	80028d8 <HAL_TIM_Encoder_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000a36:	f7ff fe98 	bl	800076a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 8000a48:	f002 feb6 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a52:	f7ff fe8a 	bl	800076a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000044 	.word	0x20000044
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b54 <MX_TIM4_Init+0xec>)
 8000a9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000aa2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000aa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000aae:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000ab0:	2263      	movs	r2, #99	@ 0x63
 8000ab2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b25      	ldr	r3, [pc, #148]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac0:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000ac2:	f001 fd3f 	bl	8002544 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000acc:	f7ff fe4d 	bl	800076a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ada:	4619      	mov	r1, r3
 8000adc:	481c      	ldr	r0, [pc, #112]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000ade:	f002 f8b5 	bl	8002c4c <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ae8:	f7ff fe3f 	bl	800076a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aec:	4818      	ldr	r0, [pc, #96]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000aee:	f001 fd80 	bl	80025f2 <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000af8:	f7ff fe37 	bl	800076a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000b0c:	f002 fe54 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b16:	f7ff fe28 	bl	800076a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1a:	2360      	movs	r3, #96	@ 0x60
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000b32:	f001 ff77 	bl	8002a24 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b3c:	f7ff fe15 	bl	800076a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <MX_TIM4_Init+0xe8>)
 8000b42:	f000 f86b 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	@ 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000090 	.word	0x20000090
 8000b54:	40000800 	.word	0x40000800

08000b58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a16      	ldr	r2, [pc, #88]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 face 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40000800 	.word	0x40000800
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a11      	ldr	r2, [pc, #68]	@ (8000c80 <HAL_TIM_MspPostInit+0x64>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11b      	bne.n	8000c76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c56:	2340      	movs	r3, #64	@ 0x40
 8000c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c72:	f000 fa79 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40000800 	.word	0x40000800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c90:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <MX_LPUART1_UART_Init+0x8c>)
 8000c94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000c98:	4a20      	ldr	r2, [pc, #128]	@ (8000d1c <MX_LPUART1_UART_Init+0x90>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cce:	f002 fe09 	bl	80038e4 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000cd8:	f7ff fd47 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000ce0:	f003 fba4 	bl	800442c <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000cea:	f7ff fd3e 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000cf2:	f003 fbd9 	bl	80044a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000cfc:	f7ff fd35 	bl	800076a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_LPUART1_UART_Init+0x88>)
 8000d02:	f003 fb5a 	bl	80043ba <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000d0c:	f7ff fd2d 	bl	800076a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000dc 	.word	0x200000dc
 8000d18:	40008000 	.word	0x40008000
 8000d1c:	00033324 	.word	0x00033324

08000d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b09e      	sub	sp, #120	@ 0x78
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2254      	movs	r2, #84	@ 0x54
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 fc3d 	bl	80045c0 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <HAL_UART_MspInit+0xa8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d136      	bne.n	8000dbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d50:	2320      	movs	r3, #32
 8000d52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 f9a3 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d68:	f7ff fcff 	bl	800076a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d70:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_UART_MspInit+0xac>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000dac:	230c      	movs	r3, #12
 8000dae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f000 f9d5 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3778      	adds	r7, #120	@ 0x78
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40008000 	.word	0x40008000
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff fde0 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 fbe7 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fc23 	bl	800064c <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e14:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8000e18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e1c:	20000174 	.word	0x20000174

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>

08000e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f95b 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f80e 	bl	8000e54 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e44:	f7ff fd4c 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e48:	79fb      	ldrb	r3, [r7, #7]

}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_InitTick+0x68>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d022      	beq.n	8000eae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_InitTick+0x6c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_InitTick+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f966 	bl	800114e <HAL_SYSTICK_Config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d809      	bhi.n	8000ea2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e96:	f000 f932 	bl	80010fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_InitTick+0x70>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a03      	ldr	r2, [pc, #12]	@ (8000ee4 <HAL_IncTick+0x1c>)
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000170 	.word	0x20000170
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000170 	.word	0x20000170

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f1c:	d004      	beq.n	8000f28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <HAL_Delay+0x40>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f28:	bf00      	nop
 8000f2a:	f7ff ffdf 	bl	8000eec <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d8f7      	bhi.n	8000f2a <HAL_Delay+0x26>
  {
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000000c 	.word	0x2000000c

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff40 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff33 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa4 	bl	80010a4 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001176:	e15a      	b.n	800142e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 814c 	beq.w	8001428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 0201 	and.w	r2, r3, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	6939      	ldr	r1, [r7, #16]
 8001296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0203 	and.w	r2, r3, #3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80a6 	beq.w	8001428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b5b      	ldr	r3, [pc, #364]	@ (800144c <HAL_GPIO_Init+0x2e4>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e0:	4a5a      	ldr	r2, [pc, #360]	@ (800144c <HAL_GPIO_Init+0x2e4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e8:	4b58      	ldr	r3, [pc, #352]	@ (800144c <HAL_GPIO_Init+0x2e4>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f4:	4a56      	ldr	r2, [pc, #344]	@ (8001450 <HAL_GPIO_Init+0x2e8>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131e:	d01f      	beq.n	8001360 <HAL_GPIO_Init+0x1f8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4c      	ldr	r2, [pc, #304]	@ (8001454 <HAL_GPIO_Init+0x2ec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d019      	beq.n	800135c <HAL_GPIO_Init+0x1f4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4b      	ldr	r2, [pc, #300]	@ (8001458 <HAL_GPIO_Init+0x2f0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1f0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4a      	ldr	r2, [pc, #296]	@ (800145c <HAL_GPIO_Init+0x2f4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a49      	ldr	r2, [pc, #292]	@ (8001460 <HAL_GPIO_Init+0x2f8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <HAL_GPIO_Init+0x2fc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1e4>
 8001348:	2305      	movs	r3, #5
 800134a:	e00a      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 800134c:	2306      	movs	r3, #6
 800134e:	e008      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001350:	2304      	movs	r3, #4
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001354:	2303      	movs	r3, #3
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1fa>
 8001360:	2300      	movs	r3, #0
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001372:	4937      	ldr	r1, [pc, #220]	@ (8001450 <HAL_GPIO_Init+0x2e8>)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001380:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a4:	4a30      	ldr	r2, [pc, #192]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ce:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001422:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f ae9d 	bne.w	8001178 <HAL_GPIO_Init+0x10>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	48000c00 	.word	0x48000c00
 8001460:	48001000 	.word	0x48001000
 8001464:	48001400 	.word	0x48001400
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001488:	e002      	b.n	8001490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f806 	bl	80014cc <HAL_GPIO_EXTI_Callback>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d141      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d131      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001500:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001506:	4a46      	ldr	r2, [pc, #280]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800150c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001518:	4a41      	ldr	r2, [pc, #260]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001520:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2232      	movs	r2, #50	@ 0x32
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a3f      	ldr	r2, [pc, #252]	@ (8001628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001536:	e002      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3b01      	subs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d102      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f2      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155e:	d158      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e057      	b.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156a:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001574:	e04d      	b.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800157c:	d141      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d131      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001592:	4a23      	ldr	r2, [pc, #140]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2232      	movs	r2, #50	@ 0x32
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c2:	e002      	b.n	80015ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d6:	d102      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f2      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ea:	d112      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e011      	b.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001600:	e007      	b.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001610:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40007000 	.word	0x40007000
 8001624:	20000004 	.word	0x20000004
 8001628:	431bde83 	.word	0x431bde83

0800162c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163a:	6093      	str	r3, [r2, #8]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40007000 	.word	0x40007000

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e2fe      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b97      	ldr	r3, [pc, #604]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b94      	ldr	r3, [pc, #592]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x3e>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d002      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b8d      	ldr	r3, [pc, #564]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e2d9      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b85      	ldr	r3, [pc, #532]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a84      	ldr	r2, [pc, #528]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b7f      	ldr	r3, [pc, #508]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7e      	ldr	r2, [pc, #504]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a7b      	ldr	r2, [pc, #492]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b78      	ldr	r3, [pc, #480]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a77      	ldr	r2, [pc, #476]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b75      	ldr	r3, [pc, #468]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a74      	ldr	r2, [pc, #464]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fbf2 	bl	8000eec <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fbee 	bl	8000eec <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e29e      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fbde 	bl	8000eec <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fbda 	bl	8000eec <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e28a      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001746:	4b60      	ldr	r3, [pc, #384]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001762:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d102      	bne.n	8001782 <HAL_RCC_OscConfig+0x136>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d002      	beq.n	8001788 <HAL_RCC_OscConfig+0x13c>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d11f      	bne.n	80017c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	4b4f      	ldr	r3, [pc, #316]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x154>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e25d      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b49      	ldr	r3, [pc, #292]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4946      	ldr	r1, [pc, #280]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017b4:	4b45      	ldr	r3, [pc, #276]	@ (80018cc <HAL_RCC_OscConfig+0x280>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb4b 	bl	8000e54 <HAL_InitTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d043      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e249      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d023      	beq.n	8001818 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3c      	ldr	r2, [pc, #240]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb86 	bl	8000eec <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fb82 	bl	8000eec <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e232      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f6:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	492d      	ldr	r1, [pc, #180]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e01a      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001818:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2a      	ldr	r2, [pc, #168]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800181e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fb62 	bl	8000eec <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fb5e 	bl	8000eec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e20e      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183e:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1e0>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d041      	beq.n	80018de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01c      	beq.n	800189c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001868:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fb3b 	bl	8000eec <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fb37 	bl	8000eec <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1e7      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ef      	beq.n	800187a <HAL_RCC_OscConfig+0x22e>
 800189a:	e020      	b.n	80018de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb1e 	bl	8000eec <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b2:	e00d      	b.n	80018d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb1a 	bl	8000eec <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d906      	bls.n	80018d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1ca      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ea      	bne.n	80018b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80a6 	beq.w	8001a38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018f0:	4b84      	ldr	r3, [pc, #528]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x2b4>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x2b6>
 8001900:	2300      	movs	r3, #0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b7f      	ldr	r3, [pc, #508]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b7c      	ldr	r3, [pc, #496]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <HAL_RCC_OscConfig+0x4bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192e:	4b76      	ldr	r3, [pc, #472]	@ (8001b08 <HAL_RCC_OscConfig+0x4bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a75      	ldr	r2, [pc, #468]	@ (8001b08 <HAL_RCC_OscConfig+0x4bc>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fad7 	bl	8000eec <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fad3 	bl	8000eec <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e183      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	4b6c      	ldr	r3, [pc, #432]	@ (8001b08 <HAL_RCC_OscConfig+0x4bc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_RCC_OscConfig+0x32e>
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196e:	4a65      	ldr	r2, [pc, #404]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001978:	e024      	b.n	80019c4 <HAL_RCC_OscConfig+0x378>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d110      	bne.n	80019a4 <HAL_RCC_OscConfig+0x358>
 8001982:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001988:	4a5e      	ldr	r2, [pc, #376]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001998:	4a5a      	ldr	r2, [pc, #360]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a2:	e00f      	b.n	80019c4 <HAL_RCC_OscConfig+0x378>
 80019a4:	4b57      	ldr	r3, [pc, #348]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019aa:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b4:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d016      	beq.n	80019fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa8e 	bl	8000eec <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff fa8a 	bl	8000eec <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e138      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ed      	beq.n	80019d4 <HAL_RCC_OscConfig+0x388>
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa77 	bl	8000eec <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fa73 	bl	8000eec <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e121      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ed      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	4a34      	ldr	r2, [pc, #208]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a52:	4a2c      	ldr	r2, [pc, #176]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa46 	bl	8000eec <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a64:	f7ff fa42 	bl	8000eec <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0f2      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ef      	beq.n	8001a64 <HAL_RCC_OscConfig+0x418>
 8001a84:	e01b      	b.n	8001abe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa29 	bl	8000eec <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9e:	f7ff fa25 	bl	8000eec <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0d5      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80c9 	beq.w	8001c5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	f000 8083 	beq.w	8001bdc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d15e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f9ff 	bl	8000eec <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	e00c      	b.n	8001b0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f9fb 	bl	8000eec <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d905      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0ab      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	4b55      	ldr	r3, [pc, #340]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ec      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b18:	4b52      	ldr	r3, [pc, #328]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4b52      	ldr	r3, [pc, #328]	@ (8001c68 <HAL_RCC_OscConfig+0x61c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6a11      	ldr	r1, [r2, #32]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	4311      	orrs	r1, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b32:	0212      	lsls	r2, r2, #8
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b3a:	0852      	lsrs	r2, r2, #1
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	0552      	lsls	r2, r2, #21
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0652      	lsls	r2, r2, #25
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b52:	06d2      	lsls	r2, r2, #27
 8001b54:	430a      	orrs	r2, r1
 8001b56:	4943      	ldr	r1, [pc, #268]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a40      	ldr	r2, [pc, #256]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b68:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f9ba 	bl	8000eec <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff f9b6 	bl	8000eec <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e066      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x530>
 8001b9a:	e05e      	b.n	8001c5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f9a0 	bl	8000eec <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f99c 	bl	8000eec <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04c      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc2:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	4924      	ldr	r1, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_RCC_OscConfig+0x620>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
 8001bda:	e03e      	b.n	8001c5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e039      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_RCC_OscConfig+0x618>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d12c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	3b01      	subs	r3, #1
 8001c08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d123      	bne.n	8001c56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d11b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d113      	bne.n	8001c56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	019f800c 	.word	0x019f800c
 8001c6c:	feeefffc 	.word	0xfeeefffc

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e11e      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b91      	ldr	r3, [pc, #580]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b8e      	ldr	r3, [pc, #568]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	498c      	ldr	r1, [pc, #560]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e106      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d073      	beq.n	8001dac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d129      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	4b81      	ldr	r3, [pc, #516]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0f4      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cdc:	f000 f99e 	bl	800201c <RCC_GetSysClockFreqFromPLLSource>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed8 <HAL_RCC_ClockConfig+0x268>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d93f      	bls.n	8001d6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cea:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d033      	beq.n	8001d6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d12f      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d0a:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d12:	4a70      	ldr	r2, [pc, #448]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e024      	b.n	8001d6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d28:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0c6      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0be      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d48:	f000 f8ce 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4a61      	ldr	r2, [pc, #388]	@ (8001ed8 <HAL_RCC_ClockConfig+0x268>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d909      	bls.n	8001d6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d56:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 0203 	bic.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4957      	ldr	r1, [pc, #348]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7c:	f7ff f8b6 	bl	8000eec <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7ff f8b2 	bl	8000eec <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e095      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1eb      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001de4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4936      	ldr	r1, [pc, #216]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b80      	cmp	r3, #128	@ 0x80
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e06:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d21d      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 020f 	bic.w	r2, r3, #15
 8001e28:	4929      	ldr	r1, [pc, #164]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f85c 	bl	8000eec <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f858 	bl	8000eec <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e03b      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1ed      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4917      	ldr	r1, [pc, #92]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	490f      	ldr	r1, [pc, #60]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e9a:	f000 f825 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	490c      	ldr	r1, [pc, #48]	@ (8001edc <HAL_RCC_ClockConfig+0x26c>)
 8001eac:	5ccb      	ldrb	r3, [r1, r3]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe ffc8 	bl	8000e54 <HAL_InitTick>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	04c4b400 	.word	0x04c4b400
 8001edc:	08004630 	.word	0x08004630
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eee:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001efa:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e047      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f00:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f0c:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e03e      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d136      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3301      	adds	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f46:	68d2      	ldr	r2, [r2, #12]
 8001f48:	0a12      	lsrs	r2, r2, #8
 8001f4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
      break;
 8001f54:	e00c      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f56:	4a13      	ldr	r2, [pc, #76]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	0a12      	lsrs	r2, r2, #8
 8001f64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
      break;
 8001f6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0e5b      	lsrs	r3, r3, #25
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e001      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f90:	693b      	ldr	r3, [r7, #16]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	016e3600 	.word	0x016e3600

08001fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08004640 	.word	0x08004640

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ff4:	f7ff ffda 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08004640 	.word	0x08004640

0800201c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d10c      	bne.n	800205a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002040:	4a17      	ldr	r2, [pc, #92]	@ (80020a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	4a14      	ldr	r2, [pc, #80]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800204a:	68d2      	ldr	r2, [r2, #12]
 800204c:	0a12      	lsrs	r2, r2, #8
 800204e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
    break;
 8002058:	e00c      	b.n	8002074 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	0a12      	lsrs	r2, r2, #8
 8002068:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    break;
 8002072:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0e5b      	lsrs	r3, r3, #25
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	016e3600 	.word	0x016e3600
 80020a4:	00f42400 	.word	0x00f42400

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b4:	2300      	movs	r3, #0
 80020b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8098 	beq.w	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a3f      	ldr	r2, [pc, #252]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f2:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a39      	ldr	r2, [pc, #228]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020fe:	f7fe fef5 	bl	8000eec <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002104:	e009      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe fef1 	bl	8000eec <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d902      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	74fb      	strb	r3, [r7, #19]
        break;
 8002118:	e005      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211a:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ef      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d159      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002136:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01e      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d019      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002148:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002154:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	4a1f      	ldr	r2, [pc, #124]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002164:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216a:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002174:	4a18      	ldr	r2, [pc, #96]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe feb1 	bl	8000eec <HAL_GetTick>
 800218a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	e00b      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fead 	bl	8000eec <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d902      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	74fb      	strb	r3, [r7, #19]
            break;
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ec      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c8:	4903      	ldr	r1, [pc, #12]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021d0:	e008      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	74bb      	strb	r3, [r7, #18]
 80021d6:	e005      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e4:	7c7b      	ldrb	r3, [r7, #17]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4ba7      	ldr	r3, [pc, #668]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	4aa6      	ldr	r2, [pc, #664]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002202:	4ba1      	ldr	r3, [pc, #644]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f023 0203 	bic.w	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	499d      	ldr	r1, [pc, #628]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002224:	4b98      	ldr	r3, [pc, #608]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f023 020c 	bic.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4995      	ldr	r1, [pc, #596]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002246:	4b90      	ldr	r3, [pc, #576]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	498c      	ldr	r1, [pc, #560]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002268:	4b87      	ldr	r3, [pc, #540]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	4984      	ldr	r1, [pc, #528]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800228a:	4b7f      	ldr	r3, [pc, #508]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	497b      	ldr	r1, [pc, #492]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ac:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	4973      	ldr	r1, [pc, #460]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	496a      	ldr	r1, [pc, #424]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f0:	4b65      	ldr	r3, [pc, #404]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4962      	ldr	r1, [pc, #392]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002312:	4b5d      	ldr	r3, [pc, #372]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002318:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	4959      	ldr	r1, [pc, #356]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002334:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	4951      	ldr	r1, [pc, #324]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002356:	4b4c      	ldr	r3, [pc, #304]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	4948      	ldr	r1, [pc, #288]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002378:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4940      	ldr	r1, [pc, #256]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002398:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023b0:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	4932      	ldr	r1, [pc, #200]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d105      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	4924      	ldr	r1, [pc, #144]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	4916      	ldr	r1, [pc, #88]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243e:	d105      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800244a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d019      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002476:	d109      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a02      	ldr	r2, [pc, #8]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002482:	60d3      	str	r3, [r2, #12]
 8002484:	e002      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002498:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	4926      	ldr	r1, [pc, #152]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024b8:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a20      	ldr	r2, [pc, #128]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80024d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	4918      	ldr	r1, [pc, #96]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800250a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	490a      	ldr	r1, [pc, #40]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002532:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002534:	7cbb      	ldrb	r3, [r7, #18]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e049      	b.n	80025ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fb36 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 fc78 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e049      	b.n	8002698 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f841 	bl	80026a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 fc21 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_TIM_PWM_Start+0x24>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e03c      	b.n	8002752 <HAL_TIM_PWM_Start+0x9e>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d109      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x3e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e02f      	b.n	8002752 <HAL_TIM_PWM_Start+0x9e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d109      	bne.n	800270c <HAL_TIM_PWM_Start+0x58>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e022      	b.n	8002752 <HAL_TIM_PWM_Start+0x9e>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d109      	bne.n	8002726 <HAL_TIM_PWM_Start+0x72>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e015      	b.n	8002752 <HAL_TIM_PWM_Start+0x9e>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b10      	cmp	r3, #16
 800272a:	d109      	bne.n	8002740 <HAL_TIM_PWM_Start+0x8c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e008      	b.n	8002752 <HAL_TIM_PWM_Start+0x9e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0a6      	b.n	80028a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0xb6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002768:	e023      	b.n	80027b2 <HAL_TIM_PWM_Start+0xfe>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0xc6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002778:	e01b      	b.n	80027b2 <HAL_TIM_PWM_Start+0xfe>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002788:	e013      	b.n	80027b2 <HAL_TIM_PWM_Start+0xfe>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0xe6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_PWM_Start+0xfe>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b10      	cmp	r3, #16
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0xf6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027a8:	e003      	b.n	80027b2 <HAL_TIM_PWM_Start+0xfe>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 ffd6 	bl	800376c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3a      	ldr	r2, [pc, #232]	@ (80028b0 <HAL_TIM_PWM_Start+0x1fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d018      	beq.n	80027fc <HAL_TIM_PWM_Start+0x148>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a39      	ldr	r2, [pc, #228]	@ (80028b4 <HAL_TIM_PWM_Start+0x200>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_TIM_PWM_Start+0x148>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a37      	ldr	r2, [pc, #220]	@ (80028b8 <HAL_TIM_PWM_Start+0x204>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00e      	beq.n	80027fc <HAL_TIM_PWM_Start+0x148>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a36      	ldr	r2, [pc, #216]	@ (80028bc <HAL_TIM_PWM_Start+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_TIM_PWM_Start+0x148>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a34      	ldr	r2, [pc, #208]	@ (80028c0 <HAL_TIM_PWM_Start+0x20c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_TIM_PWM_Start+0x148>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a33      	ldr	r2, [pc, #204]	@ (80028c4 <HAL_TIM_PWM_Start+0x210>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_PWM_Start+0x14c>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_TIM_PWM_Start+0x14e>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <HAL_TIM_PWM_Start+0x1fc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002828:	d01d      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a26      	ldr	r2, [pc, #152]	@ (80028c8 <HAL_TIM_PWM_Start+0x214>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <HAL_TIM_PWM_Start+0x218>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a23      	ldr	r2, [pc, #140]	@ (80028d0 <HAL_TIM_PWM_Start+0x21c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_TIM_PWM_Start+0x200>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_TIM_PWM_Start+0x204>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIM_PWM_Start+0x1b2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_TIM_PWM_Start+0x210>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d115      	bne.n	8002892 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_TIM_PWM_Start+0x220>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d015      	beq.n	80028a4 <HAL_TIM_PWM_Start+0x1f0>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d011      	beq.n	80028a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	e008      	b.n	80028a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e000      	b.n	80028a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40013400 	.word	0x40013400
 80028b8:	40014000 	.word	0x40014000
 80028bc:	40014400 	.word	0x40014400
 80028c0:	40014800 	.word	0x40014800
 80028c4:	40015000 	.word	0x40015000
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40000c00 	.word	0x40000c00
 80028d4:	00010007 	.word	0x00010007

080028d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e097      	b.n	8002a1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe f929 	bl	8000b58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800291c:	f023 0307 	bic.w	r3, r3, #7
 8002920:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 faa3 	bl	8002e78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	4313      	orrs	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002978:	f023 030c 	bic.w	r3, r3, #12
 800297c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002984:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	4313      	orrs	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	011a      	lsls	r2, r3, #4
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	4313      	orrs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4313      	orrs	r3, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0ff      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b14      	cmp	r3, #20
 8002a4e:	f200 80f0 	bhi.w	8002c32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a52:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002aad 	.word	0x08002aad
 8002a5c:	08002c33 	.word	0x08002c33
 8002a60:	08002c33 	.word	0x08002c33
 8002a64:	08002c33 	.word	0x08002c33
 8002a68:	08002aed 	.word	0x08002aed
 8002a6c:	08002c33 	.word	0x08002c33
 8002a70:	08002c33 	.word	0x08002c33
 8002a74:	08002c33 	.word	0x08002c33
 8002a78:	08002b2f 	.word	0x08002b2f
 8002a7c:	08002c33 	.word	0x08002c33
 8002a80:	08002c33 	.word	0x08002c33
 8002a84:	08002c33 	.word	0x08002c33
 8002a88:	08002b6f 	.word	0x08002b6f
 8002a8c:	08002c33 	.word	0x08002c33
 8002a90:	08002c33 	.word	0x08002c33
 8002a94:	08002c33 	.word	0x08002c33
 8002a98:	08002bb1 	.word	0x08002bb1
 8002a9c:	08002c33 	.word	0x08002c33
 8002aa0:	08002c33 	.word	0x08002c33
 8002aa4:	08002c33 	.word	0x08002c33
 8002aa8:	08002bf1 	.word	0x08002bf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa94 	bl	8002fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0208 	orr.w	r2, r2, #8
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	619a      	str	r2, [r3, #24]
      break;
 8002aea:	e0a5      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb0e 	bl	8003114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6999      	ldr	r1, [r3, #24]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	619a      	str	r2, [r3, #24]
      break;
 8002b2c:	e084      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fb81 	bl	800323c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0208 	orr.w	r2, r2, #8
 8002b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0204 	bic.w	r2, r2, #4
 8002b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
      break;
 8002b6c:	e064      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fbf3 	bl	8003360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69d9      	ldr	r1, [r3, #28]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	021a      	lsls	r2, r3, #8
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	61da      	str	r2, [r3, #28]
      break;
 8002bae:	e043      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fc66 	bl	8003488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002bee:	e023      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fcb0 	bl	800355c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
      break;
 8002c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop

08002c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_ConfigClockSource+0x1c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e0f6      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x20a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6f      	ldr	r2, [pc, #444]	@ (8002e60 <HAL_TIM_ConfigClockSource+0x214>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	f000 80c1 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8002e60 <HAL_TIM_ConfigClockSource+0x214>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f200 80c6 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8002e64 <HAL_TIM_ConfigClockSource+0x218>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f000 80b9 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <HAL_TIM_ConfigClockSource+0x218>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f200 80be 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002cc0:	4a69      	ldr	r2, [pc, #420]	@ (8002e68 <HAL_TIM_ConfigClockSource+0x21c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f000 80b1 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002cc8:	4a67      	ldr	r2, [pc, #412]	@ (8002e68 <HAL_TIM_ConfigClockSource+0x21c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f200 80b6 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002cd0:	4a66      	ldr	r2, [pc, #408]	@ (8002e6c <HAL_TIM_ConfigClockSource+0x220>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f000 80a9 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002cd8:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <HAL_TIM_ConfigClockSource+0x220>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	f200 80ae 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002ce0:	4a63      	ldr	r2, [pc, #396]	@ (8002e70 <HAL_TIM_ConfigClockSource+0x224>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f000 80a1 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002ce8:	4a61      	ldr	r2, [pc, #388]	@ (8002e70 <HAL_TIM_ConfigClockSource+0x224>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f200 80a6 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_TIM_ConfigClockSource+0x228>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f000 8099 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <HAL_TIM_ConfigClockSource+0x228>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f200 809e 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d04:	f000 8091 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d0c:	f200 8096 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d14:	f000 8089 	beq.w	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d1c:	f200 808e 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d24:	d03e      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0x158>
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2a:	f200 8087 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d32:	f000 8086 	beq.w	8002e42 <HAL_TIM_ConfigClockSource+0x1f6>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3a:	d87f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d3c:	2b70      	cmp	r3, #112	@ 0x70
 8002d3e:	d01a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x12a>
 8002d40:	2b70      	cmp	r3, #112	@ 0x70
 8002d42:	d87b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d44:	2b60      	cmp	r3, #96	@ 0x60
 8002d46:	d050      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x19e>
 8002d48:	2b60      	cmp	r3, #96	@ 0x60
 8002d4a:	d877      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d4c:	2b50      	cmp	r3, #80	@ 0x50
 8002d4e:	d03c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x17e>
 8002d50:	2b50      	cmp	r3, #80	@ 0x50
 8002d52:	d873      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d058      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x1be>
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	d86f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d5c:	2b30      	cmp	r3, #48	@ 0x30
 8002d5e:	d064      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d60:	2b30      	cmp	r3, #48	@ 0x30
 8002d62:	d86b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d060      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d867      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d05a      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x1de>
 8002d74:	e062      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	f000 fcd1 	bl	800372c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	609a      	str	r2, [r3, #8]
      break;
 8002da2:	e04f      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	f000 fcba 	bl	800372c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dc6:	609a      	str	r2, [r3, #8]
      break;
 8002dc8:	e03c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fc2c 	bl	8003634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2150      	movs	r1, #80	@ 0x50
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc85 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 8002de8:	e02c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 fc4b 	bl	8003692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2160      	movs	r1, #96	@ 0x60
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc75 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e01c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fc0c 	bl	8003634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2140      	movs	r1, #64	@ 0x40
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fc65 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f000 fc5c 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 8002e3a:	e003      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	00100070 	.word	0x00100070
 8002e64:	00100060 	.word	0x00100060
 8002e68:	00100050 	.word	0x00100050
 8002e6c:	00100040 	.word	0x00100040
 8002e70:	00100030 	.word	0x00100030
 8002e74:	00100020 	.word	0x00100020

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <TIM_Base_SetConfig+0x144>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d017      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e96:	d013      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a49      	ldr	r2, [pc, #292]	@ (8002fc0 <TIM_Base_SetConfig+0x148>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a48      	ldr	r2, [pc, #288]	@ (8002fc4 <TIM_Base_SetConfig+0x14c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a47      	ldr	r2, [pc, #284]	@ (8002fc8 <TIM_Base_SetConfig+0x150>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a46      	ldr	r2, [pc, #280]	@ (8002fcc <TIM_Base_SetConfig+0x154>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x48>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a45      	ldr	r2, [pc, #276]	@ (8002fd0 <TIM_Base_SetConfig+0x158>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a39      	ldr	r2, [pc, #228]	@ (8002fbc <TIM_Base_SetConfig+0x144>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d023      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee0:	d01f      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a36      	ldr	r2, [pc, #216]	@ (8002fc0 <TIM_Base_SetConfig+0x148>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01b      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a35      	ldr	r2, [pc, #212]	@ (8002fc4 <TIM_Base_SetConfig+0x14c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d017      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a34      	ldr	r2, [pc, #208]	@ (8002fc8 <TIM_Base_SetConfig+0x150>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a33      	ldr	r2, [pc, #204]	@ (8002fcc <TIM_Base_SetConfig+0x154>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a33      	ldr	r2, [pc, #204]	@ (8002fd4 <TIM_Base_SetConfig+0x15c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a32      	ldr	r2, [pc, #200]	@ (8002fd8 <TIM_Base_SetConfig+0x160>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <TIM_Base_SetConfig+0x164>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0xaa>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd0 <TIM_Base_SetConfig+0x158>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <TIM_Base_SetConfig+0x144>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <TIM_Base_SetConfig+0x110>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <TIM_Base_SetConfig+0x154>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00f      	beq.n	8002f88 <TIM_Base_SetConfig+0x110>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd4 <TIM_Base_SetConfig+0x15c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00b      	beq.n	8002f88 <TIM_Base_SetConfig+0x110>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a19      	ldr	r2, [pc, #100]	@ (8002fd8 <TIM_Base_SetConfig+0x160>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <TIM_Base_SetConfig+0x110>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <TIM_Base_SetConfig+0x164>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0x110>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <TIM_Base_SetConfig+0x158>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	611a      	str	r2, [r3, #16]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	40013400 	.word	0x40013400
 8002fd0:	40015000 	.word	0x40015000
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400
 8002fdc:	40014800 	.word	0x40014800

08002fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f023 0201 	bic.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <TIM_OC1_SetConfig+0x11c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <TIM_OC1_SetConfig+0x88>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <TIM_OC1_SetConfig+0x120>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00f      	beq.n	8003068 <TIM_OC1_SetConfig+0x88>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <TIM_OC1_SetConfig+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_OC1_SetConfig+0x88>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <TIM_OC1_SetConfig+0x128>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_OC1_SetConfig+0x88>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2c      	ldr	r2, [pc, #176]	@ (800310c <TIM_OC1_SetConfig+0x12c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_OC1_SetConfig+0x88>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a2b      	ldr	r2, [pc, #172]	@ (8003110 <TIM_OC1_SetConfig+0x130>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10c      	bne.n	8003082 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0308 	bic.w	r3, r3, #8
 800306e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <TIM_OC1_SetConfig+0x11c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <TIM_OC1_SetConfig+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <TIM_OC1_SetConfig+0x120>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00f      	beq.n	80030b2 <TIM_OC1_SetConfig+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <TIM_OC1_SetConfig+0x124>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00b      	beq.n	80030b2 <TIM_OC1_SetConfig+0xd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1a      	ldr	r2, [pc, #104]	@ (8003108 <TIM_OC1_SetConfig+0x128>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_OC1_SetConfig+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <TIM_OC1_SetConfig+0x12c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_OC1_SetConfig+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <TIM_OC1_SetConfig+0x130>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	621a      	str	r2, [r3, #32]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40015000 	.word	0x40015000

08003114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 0210 	bic.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800314e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0320 	bic.w	r3, r3, #32
 8003162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <TIM_OC2_SetConfig+0x110>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_OC2_SetConfig+0x74>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <TIM_OC2_SetConfig+0x114>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC2_SetConfig+0x74>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a2a      	ldr	r2, [pc, #168]	@ (800322c <TIM_OC2_SetConfig+0x118>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10d      	bne.n	80031a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800318e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003224 <TIM_OC2_SetConfig+0x110>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <TIM_OC2_SetConfig+0xc0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003228 <TIM_OC2_SetConfig+0x114>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_OC2_SetConfig+0xc0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <TIM_OC2_SetConfig+0x11c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_OC2_SetConfig+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <TIM_OC2_SetConfig+0x120>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_OC2_SetConfig+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <TIM_OC2_SetConfig+0x124>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_OC2_SetConfig+0xc0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <TIM_OC2_SetConfig+0x118>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d113      	bne.n	80031fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40013400 	.word	0x40013400
 800322c:	40015000 	.word	0x40015000
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <TIM_OC3_SetConfig+0x10c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC3_SetConfig+0x72>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <TIM_OC3_SetConfig+0x110>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC3_SetConfig+0x72>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a29      	ldr	r2, [pc, #164]	@ (8003350 <TIM_OC3_SetConfig+0x114>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10d      	bne.n	80032ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <TIM_OC3_SetConfig+0x10c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <TIM_OC3_SetConfig+0xbe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <TIM_OC3_SetConfig+0x110>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00f      	beq.n	80032fa <TIM_OC3_SetConfig+0xbe>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <TIM_OC3_SetConfig+0x118>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_OC3_SetConfig+0xbe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <TIM_OC3_SetConfig+0x11c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <TIM_OC3_SetConfig+0xbe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <TIM_OC3_SetConfig+0x120>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0xbe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <TIM_OC3_SetConfig+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d113      	bne.n	8003322 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40013400 	.word	0x40013400
 8003350:	40015000 	.word	0x40015000
 8003354:	40014000 	.word	0x40014000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800

08003360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	031b      	lsls	r3, r3, #12
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a2c      	ldr	r2, [pc, #176]	@ (8003470 <TIM_OC4_SetConfig+0x110>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_OC4_SetConfig+0x74>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003474 <TIM_OC4_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_OC4_SetConfig+0x74>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003478 <TIM_OC4_SetConfig+0x118>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10d      	bne.n	80033f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	031b      	lsls	r3, r3, #12
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003470 <TIM_OC4_SetConfig+0x110>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <TIM_OC4_SetConfig+0xc0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <TIM_OC4_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00f      	beq.n	8003420 <TIM_OC4_SetConfig+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <TIM_OC4_SetConfig+0x11c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00b      	beq.n	8003420 <TIM_OC4_SetConfig+0xc0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <TIM_OC4_SetConfig+0x120>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_OC4_SetConfig+0xc0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1c      	ldr	r2, [pc, #112]	@ (8003484 <TIM_OC4_SetConfig+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC4_SetConfig+0xc0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <TIM_OC4_SetConfig+0x118>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d113      	bne.n	8003448 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003426:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800342e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40013400 	.word	0x40013400
 8003478:	40015000 	.word	0x40015000
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800

08003488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <TIM_OC5_SetConfig+0xbc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <TIM_OC5_SetConfig+0x82>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <TIM_OC5_SetConfig+0xc0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00f      	beq.n	800350a <TIM_OC5_SetConfig+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a17      	ldr	r2, [pc, #92]	@ (800354c <TIM_OC5_SetConfig+0xc4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC5_SetConfig+0x82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <TIM_OC5_SetConfig+0xc8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC5_SetConfig+0x82>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <TIM_OC5_SetConfig+0xcc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC5_SetConfig+0x82>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_OC5_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d109      	bne.n	800351e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	40015000 	.word	0x40015000

0800355c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	051b      	lsls	r3, r3, #20
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	@ (800361c <TIM_OC6_SetConfig+0xc0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <TIM_OC6_SetConfig+0x84>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a19      	ldr	r2, [pc, #100]	@ (8003620 <TIM_OC6_SetConfig+0xc4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00f      	beq.n	80035e0 <TIM_OC6_SetConfig+0x84>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <TIM_OC6_SetConfig+0xc8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_OC6_SetConfig+0x84>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <TIM_OC6_SetConfig+0xcc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_OC6_SetConfig+0x84>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a16      	ldr	r2, [pc, #88]	@ (800362c <TIM_OC6_SetConfig+0xd0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_OC6_SetConfig+0x84>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <TIM_OC6_SetConfig+0xd4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d109      	bne.n	80035f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40013400 	.word	0x40013400
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40015000 	.word	0x40015000

08003634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 030a 	bic.w	r3, r3, #10
 8003670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 0210 	bic.w	r2, r3, #16
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	031b      	lsls	r3, r3, #12
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 0307 	orr.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	431a      	orrs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2201      	movs	r2, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e074      	b.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a34      	ldr	r2, [pc, #208]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a31      	ldr	r2, [pc, #196]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003814:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d01d      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40013400 	.word	0x40013400
 80038d0:	40015000 	.word	0x40015000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e042      	b.n	800397c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd fa09 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2224      	movs	r2, #36	@ 0x24
 8003912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fb24 	bl	8003f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f825 	bl	8003984 <UART_SetConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e01b      	b.n	800397c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fba3 	bl	80040c0 <UART_CheckIdleState>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003988:	b08c      	sub	sp, #48	@ 0x30
 800398a:	af00      	add	r7, sp, #0
 800398c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4baa      	ldr	r3, [pc, #680]	@ (8003c5c <UART_SetConfig+0x2d8>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039bc:	430b      	orrs	r3, r1
 80039be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003c60 <UART_SetConfig+0x2dc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ec:	4313      	orrs	r3, r2
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	f023 010f 	bic.w	r1, r3, #15
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a90      	ldr	r2, [pc, #576]	@ (8003c64 <UART_SetConfig+0x2e0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d125      	bne.n	8003a74 <UART_SetConfig+0xf0>
 8003a28:	4b8f      	ldr	r3, [pc, #572]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d81a      	bhi.n	8003a6c <UART_SetConfig+0xe8>
 8003a36:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <UART_SetConfig+0xb8>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a65 	.word	0x08003a65
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a52:	e116      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a5a:	e112      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a62:	e10e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6a:	e10a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a72:	e106      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7c      	ldr	r2, [pc, #496]	@ (8003c6c <UART_SetConfig+0x2e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d138      	bne.n	8003af0 <UART_SetConfig+0x16c>
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d82d      	bhi.n	8003ae8 <UART_SetConfig+0x164>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <UART_SetConfig+0x110>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003ae9 	.word	0x08003ae9
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ae9 	.word	0x08003ae9
 8003aac:	08003ae9 	.word	0x08003ae9
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e0d8      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e0d4      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ade:	e0d0      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	e0cc      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aee:	e0c8      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c70 <UART_SetConfig+0x2ec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d125      	bne.n	8003b46 <UART_SetConfig+0x1c2>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b04:	2b30      	cmp	r3, #48	@ 0x30
 8003b06:	d016      	beq.n	8003b36 <UART_SetConfig+0x1b2>
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d818      	bhi.n	8003b3e <UART_SetConfig+0x1ba>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d00a      	beq.n	8003b26 <UART_SetConfig+0x1a2>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d814      	bhi.n	8003b3e <UART_SetConfig+0x1ba>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <UART_SetConfig+0x19a>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d008      	beq.n	8003b2e <UART_SetConfig+0x1aa>
 8003b1c:	e00f      	b.n	8003b3e <UART_SetConfig+0x1ba>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b24:	e0ad      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b26:	2302      	movs	r3, #2
 8003b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2c:	e0a9      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b34:	e0a5      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b36:	2308      	movs	r3, #8
 8003b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3c:	e0a1      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b3e:	2310      	movs	r3, #16
 8003b40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b44:	e09d      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c74 <UART_SetConfig+0x2f0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x218>
 8003b50:	4b45      	ldr	r3, [pc, #276]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b5c:	d016      	beq.n	8003b8c <UART_SetConfig+0x208>
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d818      	bhi.n	8003b94 <UART_SetConfig+0x210>
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d00a      	beq.n	8003b7c <UART_SetConfig+0x1f8>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d814      	bhi.n	8003b94 <UART_SetConfig+0x210>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <UART_SetConfig+0x1f0>
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d008      	beq.n	8003b84 <UART_SetConfig+0x200>
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x210>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e082      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e07e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8a:	e07a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	e076      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9a:	e072      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a35      	ldr	r2, [pc, #212]	@ (8003c78 <UART_SetConfig+0x2f4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d12a      	bne.n	8003bfc <UART_SetConfig+0x278>
 8003ba6:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb4:	d01a      	beq.n	8003bec <UART_SetConfig+0x268>
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bba:	d81b      	bhi.n	8003bf4 <UART_SetConfig+0x270>
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc0:	d00c      	beq.n	8003bdc <UART_SetConfig+0x258>
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc6:	d815      	bhi.n	8003bf4 <UART_SetConfig+0x270>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x250>
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd0:	d008      	beq.n	8003be4 <UART_SetConfig+0x260>
 8003bd2:	e00f      	b.n	8003bf4 <UART_SetConfig+0x270>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e052      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e04e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e04a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e046      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	e042      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <UART_SetConfig+0x2dc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d13a      	bne.n	8003c7c <UART_SetConfig+0x2f8>
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <UART_SetConfig+0x2e4>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c14:	d01a      	beq.n	8003c4c <UART_SetConfig+0x2c8>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c1a:	d81b      	bhi.n	8003c54 <UART_SetConfig+0x2d0>
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c20:	d00c      	beq.n	8003c3c <UART_SetConfig+0x2b8>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c26:	d815      	bhi.n	8003c54 <UART_SetConfig+0x2d0>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0x2b0>
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c30:	d008      	beq.n	8003c44 <UART_SetConfig+0x2c0>
 8003c32:	e00f      	b.n	8003c54 <UART_SetConfig+0x2d0>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c3a:	e022      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c42:	e01e      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4a:	e01a      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c52:	e016      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5a:	e012      	b.n	8003c82 <UART_SetConfig+0x2fe>
 8003c5c:	cfff69f3 	.word	0xcfff69f3
 8003c60:	40008000 	.word	0x40008000
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	40004800 	.word	0x40004800
 8003c74:	40004c00 	.word	0x40004c00
 8003c78:	40005000 	.word	0x40005000
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4aae      	ldr	r2, [pc, #696]	@ (8003f40 <UART_SetConfig+0x5bc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f040 8097 	bne.w	8003dbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d823      	bhi.n	8003cde <UART_SetConfig+0x35a>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <UART_SetConfig+0x318>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003ccf 	.word	0x08003ccf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cdf 	.word	0x08003cdf
 8003cbc:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7fe f980 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe f90b 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8130 	beq.w	8003f52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	4a94      	ldr	r2, [pc, #592]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d305      	bcc.n	8003d22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d903      	bls.n	8003d2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d28:	e113      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	60fa      	str	r2, [r7, #12]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	4a84      	ldr	r2, [pc, #528]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2200      	movs	r2, #0
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d4c:	f7fc fa64 	bl	8000218 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	020b      	lsls	r3, r1, #8
 8003d62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d66:	0202      	lsls	r2, r0, #8
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	6849      	ldr	r1, [r1, #4]
 8003d6c:	0849      	lsrs	r1, r1, #1
 8003d6e:	2000      	movs	r0, #0
 8003d70:	460c      	mov	r4, r1
 8003d72:	4605      	mov	r5, r0
 8003d74:	eb12 0804 	adds.w	r8, r2, r4
 8003d78:	eb43 0905 	adc.w	r9, r3, r5
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	469a      	mov	sl, r3
 8003d84:	4693      	mov	fp, r2
 8003d86:	4652      	mov	r2, sl
 8003d88:	465b      	mov	r3, fp
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fa43 	bl	8000218 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4613      	mov	r3, r2
 8003d98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da0:	d308      	bcc.n	8003db4 <UART_SetConfig+0x430>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da8:	d204      	bcs.n	8003db4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	e0ce      	b.n	8003f52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dba:	e0ca      	b.n	8003f52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	d166      	bne.n	8003e94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d827      	bhi.n	8003e1e <UART_SetConfig+0x49a>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0x450>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe f8e4 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dfe:	e014      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe f8f6 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b4e      	ldr	r3, [pc, #312]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe f86b 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8090 	beq.w	8003f52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	4a44      	ldr	r2, [pc, #272]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	441a      	add	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d916      	bls.n	8003e8c <UART_SetConfig+0x508>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d212      	bcs.n	8003e8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	8bfb      	ldrh	r3, [r7, #30]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	8bfa      	ldrh	r2, [r7, #30]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e062      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e92:	e05e      	b.n	8003f52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d828      	bhi.n	8003eee <UART_SetConfig+0x56a>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <UART_SetConfig+0x520>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe f87c 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ece:	e014      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe f88e 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ed6:	e010      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <UART_SetConfig+0x5c0>)
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003edc:	e00d      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe f803 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8003ee2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ee4:	e009      	b.n	8003efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d028      	beq.n	8003f52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <UART_SetConfig+0x5c4>)
 8003f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	441a      	add	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	d910      	bls.n	8003f4c <UART_SetConfig+0x5c8>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d20c      	bcs.n	8003f4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0x5ce>
 8003f3e:	bf00      	nop
 8003f40:	40008000 	.word	0x40008000
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	08004648 	.word	0x08004648
      }
      else
      {
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	@ 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01a      	beq.n	8004092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d10a      	bne.n	8004092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b098      	sub	sp, #96	@ 0x60
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d0:	f7fc ff0c 	bl	8000eec <HAL_GetTick>
 80040d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d12f      	bne.n	8004144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f88e 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d022      	beq.n	8004144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	653b      	str	r3, [r7, #80]	@ 0x50
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e063      	b.n	800420c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d149      	bne.n	80041e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004152:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f857 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03c      	beq.n	80041e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	623b      	str	r3, [r7, #32]
   return(result);
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
 800418c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041be:	61fa      	str	r2, [r7, #28]
 80041c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	69b9      	ldr	r1, [r7, #24]
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	617b      	str	r3, [r7, #20]
   return(result);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e012      	b.n	800420c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3758      	adds	r7, #88	@ 0x58
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	e04f      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800422c:	d04b      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fc fe5d 	bl	8000eec <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <UART_WaitOnFlagUntilTimeout+0x30>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e04e      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d037      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b80      	cmp	r3, #128	@ 0x80
 800425a:	d034      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d031      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d110      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f838 	bl	80042ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2208      	movs	r2, #8
 8004282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e029      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a0:	d111      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f81e 	bl	80042ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e00f      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d0a0      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b095      	sub	sp, #84	@ 0x54
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004314:	643b      	str	r3, [r7, #64]	@ 0x40
 8004316:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e6      	bne.n	80042f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	61fb      	str	r3, [r7, #28]
   return(result);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e3      	bne.n	8004328 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d118      	bne.n	800439a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	60bb      	str	r3, [r7, #8]
   return(result);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	647b      	str	r3, [r7, #68]	@ 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6979      	ldr	r1, [r7, #20]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e6      	bne.n	8004368 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043ae:	bf00      	nop
 80043b0:	3754      	adds	r7, #84	@ 0x54
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e027      	b.n	8004420 <HAL_UARTEx_DisableFifoMode+0x66>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	@ 0x24
 80043dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004440:	2302      	movs	r3, #2
 8004442:	e02d      	b.n	80044a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	@ 0x24
 8004450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f84f 	bl	8004524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e02d      	b.n	800451c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f811 	bl	8004524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004544:	e031      	b.n	80045aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004546:	2308      	movs	r3, #8
 8004548:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800454a:	2308      	movs	r3, #8
 800454c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	0e5b      	lsrs	r3, r3, #25
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	0f5b      	lsrs	r3, r3, #29
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	7b3a      	ldrb	r2, [r7, #12]
 8004572:	4911      	ldr	r1, [pc, #68]	@ (80045b8 <UARTEx_SetNbDataToProcess+0x94>)
 8004574:	5c8a      	ldrb	r2, [r1, r2]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800457a:	7b3a      	ldrb	r2, [r7, #12]
 800457c:	490f      	ldr	r1, [pc, #60]	@ (80045bc <UARTEx_SetNbDataToProcess+0x98>)
 800457e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004580:	fb93 f3f2 	sdiv	r3, r3, r2
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	7b7a      	ldrb	r2, [r7, #13]
 8004590:	4909      	ldr	r1, [pc, #36]	@ (80045b8 <UARTEx_SetNbDataToProcess+0x94>)
 8004592:	5c8a      	ldrb	r2, [r1, r2]
 8004594:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004598:	7b7a      	ldrb	r2, [r7, #13]
 800459a:	4908      	ldr	r1, [pc, #32]	@ (80045bc <UARTEx_SetNbDataToProcess+0x98>)
 800459c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800459e:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	08004660 	.word	0x08004660
 80045bc:	08004668 	.word	0x08004668

080045c0 <memset>:
 80045c0:	4402      	add	r2, r0
 80045c2:	4603      	mov	r3, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d100      	bne.n	80045ca <memset+0xa>
 80045c8:	4770      	bx	lr
 80045ca:	f803 1b01 	strb.w	r1, [r3], #1
 80045ce:	e7f9      	b.n	80045c4 <memset+0x4>

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	@ (800460c <__libc_init_array+0x3c>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2600      	movs	r6, #0
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 f818 	bl	8004618 <_init>
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2600      	movs	r6, #0
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	08004678 	.word	0x08004678
 800460c:	08004678 	.word	0x08004678
 8004610:	08004678 	.word	0x08004678
 8004614:	0800467c 	.word	0x0800467c

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
