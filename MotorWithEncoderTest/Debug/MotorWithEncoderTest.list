
MotorWithEncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08008bd0  08008bd0  00009bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f8c  08008f8c  0000a1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f8c  08008f8c  00009f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f94  08008f94  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008f9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200001f0  08009188  0000a1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  08009188  0000a6ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001551c  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f35  00000000  00000000  0001f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00022670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  00023818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028211  00000000  00000000  000245ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150f6  00000000  00000000  0004c7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe570  00000000  00000000  000618c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fe31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a54  00000000  00000000  0015fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001658c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008bb8 	.word	0x08008bb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08008bb8 	.word	0x08008bb8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Average_Init>:


#include "AverageFilter.h"

void Average_Init(Average_t *Average)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	Average->Sum = 0;
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	Average->Filled = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
	for(uint8_t i = 0; i < Average->Sum; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e009      	b.n	8000ffc <Average_Init+0x38>
	{
		Average->Buffer[i] = 0.0;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < Average->Sum; i++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fab8 	bl	8000574 <__aeabi_i2d>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800100a:	f7ff fd8f 	bl	8000b2c <__aeabi_dcmplt>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e9      	bne.n	8000fe8 <Average_Init+0x24>
	}

}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Average_Calculate>:


void Average_Calculate(Average_t *Average, float Input, float *Output)
{
 800101e:	b5b0      	push	{r4, r5, r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	ed87 0a02 	vstr	s0, [r7, #8]
 800102a:	6079      	str	r1, [r7, #4]


	Average->Sum -= Average->Buffer[Average->CurrentSample];
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	@ 0xc8
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff faa9 	bl	8000598 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4620      	mov	r0, r4
 800104c:	4629      	mov	r1, r5
 800104e:	f7ff f943 	bl	80002d8 <__aeabi_dsub>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	Average->Buffer[Average->CurrentSample] = Input;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	601a      	str	r2, [r3, #0]

	Average->Sum += Input;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	@ 0xc8
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f7ff fa90 	bl	8000598 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff f92c 	bl	80002dc <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8

	Average->CurrentSample++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0


	uint8_t Divisor = Average->Filled ? AVERAGE_SIZE : Average->CurrentSample;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <Average_Calculate+0x92>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80010ae:	e000      	b.n	80010b2 <Average_Calculate+0x94>
 80010b0:	2332      	movs	r3, #50	@ 0x32
 80010b2:	75fb      	strb	r3, [r7, #23]

	if(Divisor == 0)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <Average_Calculate+0xa0>
		Divisor = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]

	//return (float)Average->Sum / Divisor;
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}

080010c6 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	4613      	mov	r3, r2
 80010d2:	ed87 0a00 	vstr	s0, [r7]
 80010d6:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	88fa      	ldrh	r2, [r7, #6]
 80010e2:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	213c      	movs	r1, #60	@ 0x3c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fe69 	bl	8003dd4 <HAL_TIM_Encoder_Start>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 8001122:	8afa      	ldrh	r2, [r7, #22]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	b21a      	sxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	889b      	ldrh	r3, [r3, #4]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	429a      	cmp	r2, r3
 8001148:	dd0b      	ble.n	8001162 <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	889b      	ldrh	r3, [r3, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	81da      	strh	r2, [r3, #14]
 8001160:	e016      	b.n	8001190 <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001168:	4619      	mov	r1, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	0fda      	lsrs	r2, r3, #31
 8001170:	4413      	add	r3, r2
 8001172:	105b      	asrs	r3, r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	4299      	cmp	r1, r3
 8001178:	da0a      	bge.n	8001190 <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	b21a      	sxth	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ec 	bl	8000574 <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <Encoder_AngularVelocity+0xf0>)
 80011a2:	f7ff fa51 	bl	8000648 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9de 	bl	8000574 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fd14 	bl	8000bf8 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8afa      	ldrh	r2, [r7, #22]
 80011f0:	819a      	strh	r2, [r3, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40768000 	.word	0x40768000

08001200 <PID_Init>:
 *      Author: jakub
 */
#include "PID.h"

void PID_Init(PID_t *Pid, float P, float I, float D, float SampleTime, float MaxValue, float MinValue)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	61f8      	str	r0, [r7, #28]
 8001208:	ed87 0a06 	vstr	s0, [r7, #24]
 800120c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001210:	ed87 1a04 	vstr	s2, [r7, #16]
 8001214:	edc7 1a03 	vstr	s3, [r7, #12]
 8001218:	ed87 2a02 	vstr	s4, [r7, #8]
 800121c:	edc7 2a01 	vstr	s5, [r7, #4]
	Pid->P = P;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	601a      	str	r2, [r3, #0]
	Pid->I = I;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	605a      	str	r2, [r3, #4]
	Pid->D = D;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	609a      	str	r2, [r3, #8]

	Pid->SampleTime = SampleTime;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	60da      	str	r2, [r3, #12]
	Pid->MaxValue = MaxValue;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	615a      	str	r2, [r3, #20]
	Pid->MinValue = MinValue;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]

	Pid->Integrator = 0;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
	Pid->LastError = 0;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
	Pid->Clamp = 0;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2020 	strb.w	r2, [r3, #32]
}
 800125c:	bf00      	nop
 800125e:	3724      	adds	r7, #36	@ 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PID_Compute>:

float PID_Compute(PID_t *Pid, float MeasuredValue, float SetValue)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	ed87 0a02 	vstr	s0, [r7, #8]
 8001274:	edc7 0a01 	vstr	s1, [r7, #4]
	float Error = SetValue - MeasuredValue;
 8001278:	ed97 7a01 	vldr	s14, [r7, #4]
 800127c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	edc7 7a08 	vstr	s15, [r7, #32]

	//proportional value
	float P = Pid->P * Error;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	edc7 7a07 	vstr	s15, [r7, #28]

	//Integrator value
	if(Pid->Clamp == 0)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d113      	bne.n	80012cc <PID_Compute+0x64>
	{
	Pid->Integrator += Pid->SampleTime * Pid->I * Error;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	edc3 7a04 	vstr	s15, [r3, #16]
	}


	//Deriative value
	float D = ((Error - Pid->LastError) / Pid->SampleTime) * Pid->D;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80012d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ee:	edc7 7a06 	vstr	s15, [r7, #24]

	float Output = P + Pid->Integrator + D;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80012f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	ed97 7a06 	vldr	s14, [r7, #24]
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float OutputLast = Output;
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	617b      	str	r3, [r7, #20]

	//checking limits
	if (Output > Pid->MaxValue)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	edd3 7a05 	vldr	s15, [r3, #20]
 8001316:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800131a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd03      	ble.n	800132c <PID_Compute+0xc4>
	{
		Output = Pid->MaxValue;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	e00c      	b.n	8001346 <PID_Compute+0xde>
	}
	else if (Output < Pid->MinValue)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001332:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d502      	bpl.n	8001346 <PID_Compute+0xde>
	{
		Output = Pid->MinValue;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	uint8_t ClampigSaturationCheck = (Output != OutputLast) ? 1 : 0;
 8001346:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800134a:	edd7 7a05 	vldr	s15, [r7, #20]
 800134e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	bf14      	ite	ne
 8001358:	2301      	movne	r3, #1
 800135a:	2300      	moveq	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	74fb      	strb	r3, [r7, #19]

	int8_t ErrorSign = Signum(Error);
 8001360:	ed97 0a08 	vldr	s0, [r7, #32]
 8001364:	f000 f825 	bl	80013b2 <Signum>
 8001368:	4603      	mov	r3, r0
 800136a:	74bb      	strb	r3, [r7, #18]
	int8_t OutputSign = Signum(Output);
 800136c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001370:	f000 f81f 	bl	80013b2 <Signum>
 8001374:	4603      	mov	r3, r0
 8001376:	747b      	strb	r3, [r7, #17]

	if ((ErrorSign == OutputSign) && (ClampigSaturationCheck == 1))
 8001378:	f997 2012 	ldrsb.w	r2, [r7, #18]
 800137c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <PID_Compute+0x12c>
 8001384:	7cfb      	ldrb	r3, [r7, #19]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d104      	bne.n	8001394 <PID_Compute+0x12c>
	{
		Pid->Clamp = 1;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
 8001392:	e003      	b.n	800139c <PID_Compute+0x134>
	}
	else
	{
		Pid->Clamp = 0;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
	}

	//Update LastError
	Pid->LastError = Error;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a3a      	ldr	r2, [r7, #32]
 80013a0:	61da      	str	r2, [r3, #28]

	return Output;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	ee07 3a90 	vmov	s15, r3

}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <Signum>:

int8_t Signum(float Value)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	ed87 0a01 	vstr	s0, [r7, #4]
	if (Value > 0.0) return 1;
 80013bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd01      	ble.n	80013ce <Signum+0x1c>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00a      	b.n	80013e4 <Signum+0x32>
	if (Value < 0.0) return -1;
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d502      	bpl.n	80013e2 <Signum+0x30>
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e0:	e000      	b.n	80013e4 <Signum+0x32>
	return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b3a      	ldr	r3, [pc, #232]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a39      	ldr	r2, [pc, #228]	@ (80014f0 <MX_GPIO_Init+0x100>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141e:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <MX_GPIO_Init+0x100>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <MX_GPIO_Init+0x100>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a27      	ldr	r2, [pc, #156]	@ (80014f0 <MX_GPIO_Init+0x100>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <MX_GPIO_Init+0x100>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_DIR1_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f001 f95a 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR2_GPIO_Port, MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	481e      	ldr	r0, [pc, #120]	@ (80014f4 <MX_GPIO_Init+0x104>)
 800147a:	f001 f955 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001484:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4817      	ldr	r0, [pc, #92]	@ (80014f4 <MX_GPIO_Init+0x104>)
 8001496:	f000 ffc5 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_DIR1_Pin;
 800149a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b6:	f000 ffb5 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR2_Pin;
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR2_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <MX_GPIO_Init+0x104>)
 80014d2:	f000 ffa7 	bl	8002424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2028      	movs	r0, #40	@ 0x28
 80014dc:	f000 ff6d 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014e0:	2028      	movs	r0, #40	@ 0x28
 80014e2:	f000 ff84 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f000 fe10 	bl	8002122 <HAL_Init>
// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 f8e1 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f7ff ff73 	bl	80013f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800150a:	f000 fd3f 	bl	8001f8c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 800150e:	f000 fc17 	bl	8001d40 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001512:	f000 fbbf 	bl	8001c94 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001516:	f000 fb69 	bl	8001bec <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800151a:	f000 f920 	bl	800175e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_DIR1_GPIO_Port,  MOTOR_DIR1_Pin, MOTOR_DIR2_GPIO_Port,  MOTOR_DIR2_Pin);
 800151e:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <main+0x164>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	b29b      	uxth	r3, r3
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	9203      	str	r2, [sp, #12]
 800152a:	4a4d      	ldr	r2, [pc, #308]	@ (8001660 <main+0x168>)
 800152c:	9202      	str	r2, [sp, #8]
 800152e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4949      	ldr	r1, [pc, #292]	@ (8001664 <main+0x16c>)
 800153e:	484a      	ldr	r0, [pc, #296]	@ (8001668 <main+0x170>)
 8001540:	f000 f9f1 	bl	8001926 <Motor_Init>
  Encoder_Init(&Encoder, &htim3, EncoderResolution, EncoderSampleTime);
 8001544:	4b49      	ldr	r3, [pc, #292]	@ (800166c <main+0x174>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4a49      	ldr	r2, [pc, #292]	@ (8001670 <main+0x178>)
 800154a:	edd2 7a00 	vldr	s15, [r2]
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	461a      	mov	r2, r3
 8001554:	4947      	ldr	r1, [pc, #284]	@ (8001674 <main+0x17c>)
 8001556:	4848      	ldr	r0, [pc, #288]	@ (8001678 <main+0x180>)
 8001558:	f7ff fdb5 	bl	80010c6 <Encoder_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800155c:	4847      	ldr	r0, [pc, #284]	@ (800167c <main+0x184>)
 800155e:	f002 f9a7 	bl	80038b0 <HAL_TIM_Base_Start_IT>

  PID_Init(&PID_Speed, P, I, D, PID_SpeedSampleTime, MaxAngularVelocity, PID_MinValue);
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <main+0x188>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <main+0x18c>)
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <main+0x190>)
 8001570:	edd3 6a00 	vldr	s13, [r3]
 8001574:	4b45      	ldr	r3, [pc, #276]	@ (800168c <main+0x194>)
 8001576:	ed93 6a00 	vldr	s12, [r3]
 800157a:	4b45      	ldr	r3, [pc, #276]	@ (8001690 <main+0x198>)
 800157c:	edd3 5a00 	vldr	s11, [r3]
 8001580:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <main+0x19c>)
 8001582:	ed93 5a00 	vldr	s10, [r3]
 8001586:	eef0 2a45 	vmov.f32	s5, s10
 800158a:	eeb0 2a65 	vmov.f32	s4, s11
 800158e:	eef0 1a46 	vmov.f32	s3, s12
 8001592:	eeb0 1a66 	vmov.f32	s2, s13
 8001596:	eef0 0a47 	vmov.f32	s1, s14
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	483e      	ldr	r0, [pc, #248]	@ (8001698 <main+0x1a0>)
 80015a0:	f7ff fe2e 	bl	8001200 <PID_Init>

  Average_Init(&Average);
 80015a4:	483d      	ldr	r0, [pc, #244]	@ (800169c <main+0x1a4>)
 80015a6:	f7ff fd0d 	bl	8000fc4 <Average_Init>
	  HAL_Delay(5000);
*/



	  if (flag == 1)
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <main+0x1a8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d1fb      	bne.n	80015aa <main+0xb2>
	  {
		  flag = 0;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <main+0x1a8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
		  PID_Output = PID_Compute(&PID_Speed, EncoderAngularVelocity, AngularVelocitySet);
 80015b8:	4b3a      	ldr	r3, [pc, #232]	@ (80016a4 <main+0x1ac>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	4b3a      	ldr	r3, [pc, #232]	@ (80016a8 <main+0x1b0>)
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	eef0 0a47 	vmov.f32	s1, s14
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	4832      	ldr	r0, [pc, #200]	@ (8001698 <main+0x1a0>)
 80015ce:	f7ff fe4b 	bl	8001268 <PID_Compute>
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <main+0x1b4>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]

		  Average_Calculate(&Average, PID_Output, &PID_Output_Filtered);
 80015dc:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <main+0x1b4>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	4933      	ldr	r1, [pc, #204]	@ (80016b0 <main+0x1b8>)
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	482c      	ldr	r0, [pc, #176]	@ (800169c <main+0x1a4>)
 80015ea:	f7ff fd18 	bl	800101e <Average_Calculate>

		  PID_Output_Angle = MapValues(960.0, PID_Output_Filtered);
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <main+0x1b8>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80016b4 <main+0x1bc>
 80015fc:	f000 f8bc 	bl	8001778 <MapValues>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <main+0x1c0>)
 8001606:	edc3 7a00 	vstr	s15, [r3]

		  Motor_SetRideParameters(&Motor, PID_Output_Angle, 1);
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <main+0x1c0>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001614:	edc7 7a01 	vstr	s15, [r7, #4]
 8001618:	793b      	ldrb	r3, [r7, #4]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	4811      	ldr	r0, [pc, #68]	@ (8001668 <main+0x170>)
 8001622:	f000 f8ef 	bl	8001804 <Motor_SetRideParameters>

		  Motor_Ride(&Motor);
 8001626:	4810      	ldr	r0, [pc, #64]	@ (8001668 <main+0x170>)
 8001628:	f000 f931 	bl	800188e <Motor_Ride>

		  sprintf(Message, "%.3f \n", PID_Output_Filtered);
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <main+0x1b8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ffb1 	bl	8000598 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4920      	ldr	r1, [pc, #128]	@ (80016bc <main+0x1c4>)
 800163c:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <main+0x1c8>)
 800163e:	f005 f989 	bl	8006954 <siprintf>
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
 8001642:	481f      	ldr	r0, [pc, #124]	@ (80016c0 <main+0x1c8>)
 8001644:	f7fe fe3c 	bl	80002c0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001650:	491b      	ldr	r1, [pc, #108]	@ (80016c0 <main+0x1c8>)
 8001652:	481c      	ldr	r0, [pc, #112]	@ (80016c4 <main+0x1cc>)
 8001654:	f003 fdba 	bl	80051cc <HAL_UART_Transmit>
	  if (flag == 1)
 8001658:	e7a7      	b.n	80015aa <main+0xb2>
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	48000800 	.word	0x48000800
 8001664:	2000047c 	.word	0x2000047c
 8001668:	2000020c 	.word	0x2000020c
 800166c:	20000002 	.word	0x20000002
 8001670:	20000004 	.word	0x20000004
 8001674:	20000430 	.word	0x20000430
 8001678:	20000224 	.word	0x20000224
 800167c:	200003e4 	.word	0x200003e4
 8001680:	20000008 	.word	0x20000008
 8001684:	20000268 	.word	0x20000268
 8001688:	2000026c 	.word	0x2000026c
 800168c:	20000010 	.word	0x20000010
 8001690:	20000014 	.word	0x20000014
 8001694:	20000270 	.word	0x20000270
 8001698:	20000244 	.word	0x20000244
 800169c:	20000288 	.word	0x20000288
 80016a0:	20000274 	.word	0x20000274
 80016a4:	20000240 	.word	0x20000240
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	20000278 	.word	0x20000278
 80016b0:	20000280 	.word	0x20000280
 80016b4:	44700000 	.word	0x44700000
 80016b8:	2000027c 	.word	0x2000027c
 80016bc:	08008bd0 	.word	0x08008bd0
 80016c0:	20000360 	.word	0x20000360
 80016c4:	200004c8 	.word	0x200004c8

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	@ 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2238      	movs	r2, #56	@ 0x38
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 f9a1 	bl	8006a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f001 f858 	bl	80027a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001706:	2304      	movs	r3, #4
 8001708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800170a:	2355      	movs	r3, #85	@ 0x55
 800170c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	4618      	mov	r0, r3
 8001720:	f001 f8f2 	bl	8002908 <HAL_RCC_OscConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800172a:	f000 f865 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172e:	230f      	movs	r3, #15
 8001730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001732:	2303      	movs	r3, #3
 8001734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2104      	movs	r1, #4
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fbf0 	bl	8002f2c <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001752:	f000 f851 	bl	80017f8 <Error_Handler>
  }
}
 8001756:	bf00      	nop
 8001758:	3750      	adds	r7, #80	@ 0x50
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2019      	movs	r0, #25
 8001768:	f000 fe27 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f000 fe3e 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <MapValues>:

/* USER CODE BEGIN 4 */
float MapValues(float MaxValue, float Value)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001782:	edc7 0a00 	vstr	s1, [r7]
	float X = (float)(Value * 100.0) / (float)MaxValue;
 8001786:	edd7 7a00 	vldr	s15, [r7]
 800178a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80017b4 <MapValues+0x3c>
 800178e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001792:	ed97 7a01 	vldr	s14, [r7, #4]
 8001796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179a:	edc7 7a03 	vstr	s15, [r7, #12]
	return X;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	42c80000 	.word	0x42c80000

080017b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d107      	bne.n	80017da <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		//EncoderAngle = 0;
		//EncoderAngularVelocity = 0;
		Encoder_AngularVelocity(&Encoder, &EncoderAngle, &EncoderAngularVelocity);
 80017ca:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017ce:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017d0:	f7ff fc9c 	bl	800110c <Encoder_AngularVelocity>

		flag = 1;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]

	}
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	20000240 	.word	0x20000240
 80017ec:	2000023c 	.word	0x2000023c
 80017f0:	20000224 	.word	0x20000224
 80017f4:	20000274 	.word	0x20000274

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
 8001810:	4613      	mov	r3, r2
 8001812:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d902      	bls.n	8001820 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2264      	movs	r2, #100	@ 0x64
 800181e:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 8001826:	78bb      	ldrb	r3, [r7, #2]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d110      	bne.n	800184e <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6898      	ldr	r0, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	899b      	ldrh	r3, [r3, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	f000 ff76 	bl	8002728 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6918      	ldr	r0, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8a9b      	ldrh	r3, [r3, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	f000 ff6e 	bl	8002728 <HAL_GPIO_WritePin>
 800184c:	e00f      	b.n	800186e <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6898      	ldr	r0, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	899b      	ldrh	r3, [r3, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	f000 ff65 	bl	8002728 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6918      	ldr	r0, [r3, #16]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	8a9b      	ldrh	r3, [r3, #20]
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f000 ff5d 	bl	8002728 <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	78ba      	ldrb	r2, [r7, #2]
 8001872:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f002 f8f0 	bl	8003a64 <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <Motor_Ride+0x1e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7d9a      	ldrb	r2, [r3, #22]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018aa:	e036      	b.n	800191a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <Motor_Ride+0x36>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7d99      	ldrb	r1, [r3, #22]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018c2:	e02a      	b.n	800191a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d107      	bne.n	80018dc <Motor_Ride+0x4e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7d99      	ldrb	r1, [r3, #22]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018da:	e01e      	b.n	800191a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d107      	bne.n	80018f4 <Motor_Ride+0x66>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7d99      	ldrb	r1, [r3, #22]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	460b      	mov	r3, r1
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018f2:	e012      	b.n	800191a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d107      	bne.n	800190c <Motor_Ride+0x7e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7d99      	ldrb	r1, [r3, #22]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	460b      	mov	r3, r1
 8001908:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800190a:	e006      	b.n	800191a <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7d99      	ldrb	r1, [r3, #22]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	460b      	mov	r3, r1
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8bba      	ldrh	r2, [r7, #28]
 8001952:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a3a      	ldr	r2, [r7, #32]
 8001958:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800195e:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	@ 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	@ (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	@ 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019a6:	f000 ff9f 	bl	80028e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 fbdb 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a1e:	f002 fa67 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200003e4 	.word	0x200003e4

08001a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a34:	f000 fe90 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a56:	f005 f835 	bl	8006ac4 <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7e:	bf00      	nop
 8001a80:	e7fd      	b.n	8001a7e <_exit+0x12>

08001a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e00a      	b.n	8001aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a94:	f3af 8000 	nop.w
 8001a98:	4601      	mov	r1, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	60ba      	str	r2, [r7, #8]
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf0      	blt.n	8001a94 <_read+0x12>
  }

  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e009      	b.n	8001ae2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf1      	blt.n	8001ace <_write+0x12>
  }
  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_close>:

int _close(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_isatty>:

int _isatty(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f004 ff9a 	bl	8006ac4 <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20020000 	.word	0x20020000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	200003e0 	.word	0x200003e0
 8001bc4:	200006b0 	.word	0x200006b0

08001bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c0c:	4a20      	ldr	r2, [pc, #128]	@ (8001c90 <MX_TIM1_Init+0xa4>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c12:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c38:	4814      	ldr	r0, [pc, #80]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c3a:	f001 fde1 	bl	8003800 <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001c44:	f7ff fdd8 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c56:	f002 fbaf 	bl	80043b8 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c60:	f7ff fdca 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_TIM1_Init+0xa0>)
 8001c76:	f003 f97d 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c80:	f7ff fdba 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200003e4 	.word	0x200003e4
 8001c90:	40012c00 	.word	0x40012c00

08001c94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	@ 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 febb 	bl	8006a1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cb4:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <MX_TIM3_Init+0xa8>)
 8001cb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cc6:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8001cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	480d      	ldr	r0, [pc, #52]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001d04:	f001 ffc0 	bl	8003c88 <HAL_TIM_Encoder_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d0e:	f7ff fd73 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001d20:	f003 f928 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d2a:	f7ff fd65 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3730      	adds	r7, #48	@ 0x30
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000430 	.word	0x20000430
 8001d3c:	40000400 	.word	0x40000400

08001d40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d74:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <MX_TIM4_Init+0xec>)
 8001d76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1699;
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d7a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001d86:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d88:	2263      	movs	r2, #99	@ 0x63
 8001d8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d98:	4823      	ldr	r0, [pc, #140]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001d9a:	f001 fd31 	bl	8003800 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001da4:	f7ff fd28 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001db2:	4619      	mov	r1, r3
 8001db4:	481c      	ldr	r0, [pc, #112]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001db6:	f002 faff 	bl	80043b8 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001dc0:	f7ff fd1a 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dc4:	4818      	ldr	r0, [pc, #96]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001dc6:	f001 fdeb 	bl	80039a0 <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001dd0:	f7ff fd12 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4811      	ldr	r0, [pc, #68]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001de4:	f003 f8c6 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001dee:	f7ff fd03 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	@ 0x60
 8001df4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001e0a:	f002 f9c1 	bl	8004190 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f7ff fcf0 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MX_TIM4_Init+0xe8>)
 8001e1a:	f000 f87f 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	@ 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000047c 	.word	0x2000047c
 8001e2c:	40000800 	.word	0x40000800

08001e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <HAL_TIM_Base_MspInit+0x5c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10c      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e5a:	e010      	b.n	8001e7e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0c      	ldr	r2, [pc, #48]	@ (8001e94 <HAL_TIM_Base_MspInit+0x64>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10b      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_TIM_Base_MspInit+0x60>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d128      	bne.n	8001f0c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eea:	23c0      	movs	r3, #192	@ 0xc0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efa:	2302      	movs	r3, #2
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f08:	f000 fa8c 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_TIM_MspPostInit+0x64>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f56:	2340      	movs	r3, #64	@ 0x40
 8001f58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <HAL_TIM_MspPostInit+0x6c>)
 8001f72:	f000 fa57 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48000400 	.word	0x48000400

08001f8c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f90:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001f92:	4a22      	ldr	r2, [pc, #136]	@ (800201c <MX_LPUART1_UART_Init+0x90>)
 8001f94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f96:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001fce:	4812      	ldr	r0, [pc, #72]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fd0:	f003 f8ac 	bl	800512c <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fda:	f7ff fc0d 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	480d      	ldr	r0, [pc, #52]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001fe2:	f003 fed5 	bl	8005d90 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001fec:	f7ff fc04 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4809      	ldr	r0, [pc, #36]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8001ff4:	f003 ff0a 	bl	8005e0c <HAL_UARTEx_SetRxFifoThreshold>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001ffe:	f7ff fbfb 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_LPUART1_UART_Init+0x8c>)
 8002004:	f003 fe8b 	bl	8005d1e <HAL_UARTEx_DisableFifoMode>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800200e:	f7ff fbf3 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004c8 	.word	0x200004c8
 800201c:	40008000 	.word	0x40008000

08002020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09e      	sub	sp, #120	@ 0x78
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2254      	movs	r2, #84	@ 0x54
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fcec 	bl	8006a1e <memset>
  if(uartHandle->Instance==LPUART1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <HAL_UART_MspInit+0xa8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d136      	bne.n	80020be <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002050:	2320      	movs	r3, #32
 8002052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f981 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002068:	f7ff fbc6 	bl	80017f8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <HAL_UART_MspInit+0xac>)
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <HAL_UART_MspInit+0xac>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_UART_MspInit+0xac>)
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_UART_MspInit+0xac>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002088:	4a10      	ldr	r2, [pc, #64]	@ (80020cc <HAL_UART_MspInit+0xac>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002090:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <HAL_UART_MspInit+0xac>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800209c:	230c      	movs	r3, #12
 800209e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80020ac:	230c      	movs	r3, #12
 80020ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020b4:	4619      	mov	r1, r3
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ba:	f000 f9b3 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3778      	adds	r7, #120	@ 0x78
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40008000 	.word	0x40008000
 80020cc:	40021000 	.word	0x40021000

080020d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d0:	480d      	ldr	r0, [pc, #52]	@ (8002108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d4:	f7ff fd78 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <LoopForever+0x6>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	@ (8002110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <LoopForever+0xe>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	@ (800211c <LoopForever+0x16>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fe:	f004 fce7 	bl	8006ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002102:	f7ff f9f9 	bl	80014f8 <main>

08002106 <LoopForever>:

LoopForever:
    b LoopForever
 8002106:	e7fe      	b.n	8002106 <LoopForever>
  ldr   r0, =_estack
 8002108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002114:	08008f9c 	.word	0x08008f9c
  ldr r2, =_sbss
 8002118:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800211c:	200006ac 	.word	0x200006ac

08002120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC1_2_IRQHandler>

08002122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f939 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002132:	2000      	movs	r0, #0
 8002134:	f000 f80e 	bl	8002154 <HAL_InitTick>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	e001      	b.n	8002148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002144:	f7ff fc14 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002148:	79fb      	ldrb	r3, [r7, #7]

}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002160:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <HAL_InitTick+0x68>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d022      	beq.n	80021ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <HAL_InitTick+0x6c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_InitTick+0x68>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f944 	bl	800240a <HAL_SYSTICK_Config>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10f      	bne.n	80021a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d809      	bhi.n	80021a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218e:	2200      	movs	r2, #0
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002196:	f000 f910 	bl	80023ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_InitTick+0x70>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e004      	b.n	80021b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000020 	.word	0x20000020
 80021c0:	20000018 	.word	0x20000018
 80021c4:	2000001c 	.word	0x2000001c

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_IncTick+0x20>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a03      	ldr	r2, [pc, #12]	@ (80021e4 <HAL_IncTick+0x1c>)
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	2000055c 	.word	0x2000055c
 80021e8:	20000020 	.word	0x20000020

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000055c 	.word	0x2000055c

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	@ (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff29 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff40 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff90 	bl	80022f8 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5f 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff33 	bl	8002268 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa4 	bl	8002360 <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002432:	e15a      	b.n	80026ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 814c 	beq.w	80026e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d005      	beq.n	8002464 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002460:	2b02      	cmp	r3, #2
 8002462:	d130      	bne.n	80024c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249a:	2201      	movs	r2, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 0201 	and.w	r2, r3, #1
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d017      	beq.n	8002502 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d123      	bne.n	8002556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	6939      	ldr	r1, [r7, #16]
 8002552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80a6 	beq.w	80026e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002598:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <HAL_GPIO_Init+0x2e4>)
 800259a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259c:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <HAL_GPIO_Init+0x2e4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80025a4:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HAL_GPIO_Init+0x2e4>)
 80025a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b0:	4a56      	ldr	r2, [pc, #344]	@ (800270c <HAL_GPIO_Init+0x2e8>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025da:	d01f      	beq.n	800261c <HAL_GPIO_Init+0x1f8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_GPIO_Init+0x2ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d019      	beq.n	8002618 <HAL_GPIO_Init+0x1f4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002714 <HAL_GPIO_Init+0x2f0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_GPIO_Init+0x1f0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002718 <HAL_GPIO_Init+0x2f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1ec>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a49      	ldr	r2, [pc, #292]	@ (800271c <HAL_GPIO_Init+0x2f8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1e8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a48      	ldr	r2, [pc, #288]	@ (8002720 <HAL_GPIO_Init+0x2fc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1e4>
 8002604:	2305      	movs	r3, #5
 8002606:	e00a      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002608:	2306      	movs	r3, #6
 800260a:	e008      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 800260c:	2304      	movs	r3, #4
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002610:	2303      	movs	r3, #3
 8002612:	e004      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002614:	2302      	movs	r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_GPIO_Init+0x1fa>
 800261c:	2300      	movs	r3, #0
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	f002 0203 	and.w	r2, r2, #3
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	4093      	lsls	r3, r2
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262e:	4937      	ldr	r1, [pc, #220]	@ (800270c <HAL_GPIO_Init+0x2e8>)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800263c:	4b39      	ldr	r3, [pc, #228]	@ (8002724 <HAL_GPIO_Init+0x300>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002660:	4a30      	ldr	r2, [pc, #192]	@ (8002724 <HAL_GPIO_Init+0x300>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002666:	4b2f      	ldr	r3, [pc, #188]	@ (8002724 <HAL_GPIO_Init+0x300>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800268a:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <HAL_GPIO_Init+0x300>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002690:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <HAL_GPIO_Init+0x300>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026de:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <HAL_GPIO_Init+0x300>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f ae9d 	bne.w	8002434 <HAL_GPIO_Init+0x10>
  }
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	48000c00 	.word	0x48000c00
 800271c:	48001000 	.word	0x48001000
 8002720:	48001400 	.word	0x48001400
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e002      	b.n	800274c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f806 	bl	8002788 <HAL_GPIO_EXTI_Callback>
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d141      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ae:	4b4b      	ldr	r3, [pc, #300]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ba:	d131      	bne.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027bc:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027c2:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027cc:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027d4:	4a41      	ldr	r2, [pc, #260]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027dc:	4b40      	ldr	r3, [pc, #256]	@ (80028e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2232      	movs	r2, #50	@ 0x32
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a3f      	ldr	r2, [pc, #252]	@ (80028e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f2:	e002      	b.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027fa:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002806:	d102      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f2      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800280e:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	d158      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e057      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002820:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002826:	4a2d      	ldr	r2, [pc, #180]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800282c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002830:	e04d      	b.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002838:	d141      	bne.n	80028be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800283a:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002846:	d131      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002848:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800284e:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002858:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002860:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2232      	movs	r2, #50	@ 0x32
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287e:	e002      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b01      	subs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002892:	d102      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f2      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a6:	d112      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e011      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028bc:	e007      	b.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028c6:	4a05      	ldr	r2, [pc, #20]	@ (80028dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40007000 	.word	0x40007000
 80028e0:	20000018 	.word	0x20000018
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40007000 	.word	0x40007000

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e2fe      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4b97      	ldr	r3, [pc, #604]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002930:	4b94      	ldr	r3, [pc, #592]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0x3e>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d002      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e2d9      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b85      	ldr	r3, [pc, #532]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a84      	ldr	r2, [pc, #528]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b7f      	ldr	r3, [pc, #508]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b7c      	ldr	r3, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7b      	ldr	r2, [pc, #492]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b78      	ldr	r3, [pc, #480]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a77      	ldr	r2, [pc, #476]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b75      	ldr	r3, [pc, #468]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a74      	ldr	r2, [pc, #464]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff fc14 	bl	80021ec <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fc10 	bl	80021ec <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e29e      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b6a      	ldr	r3, [pc, #424]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff fc00 	bl	80021ec <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fbfc 	bl	80021ec <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e28a      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	4b60      	ldr	r3, [pc, #384]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1e:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a28:	4b56      	ldr	r3, [pc, #344]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0x136>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_OscConfig+0x13c>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d11f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	4b4f      	ldr	r3, [pc, #316]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x154>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e25d      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4946      	ldr	r1, [pc, #280]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a70:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fb6d 	bl	8002154 <HAL_InitTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d043      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e249      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3c      	ldr	r2, [pc, #240]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff fba8 	bl	80021ec <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7ff fba4 	bl	80021ec <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e232      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b31      	ldr	r3, [pc, #196]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	492d      	ldr	r1, [pc, #180]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 8002ad2:	e01a      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fb84 	bl	80021ec <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fb80 	bl	80021ec <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e20e      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1e0>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d041      	beq.n	8002b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b24:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fb5d 	bl	80021ec <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff fb59 	bl	80021ec <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1e7      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ef      	beq.n	8002b36 <HAL_RCC_OscConfig+0x22e>
 8002b56:	e020      	b.n	8002b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fb40 	bl	80021ec <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6e:	e00d      	b.n	8002b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff fb3c 	bl	80021ec <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d906      	bls.n	8002b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1ca      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ea      	bne.n	8002b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a6 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bac:	4b84      	ldr	r3, [pc, #528]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2b4>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bce:	4b7c      	ldr	r3, [pc, #496]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_OscConfig+0x4bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bea:	4b76      	ldr	r3, [pc, #472]	@ (8002dc4 <HAL_RCC_OscConfig+0x4bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	@ (8002dc4 <HAL_RCC_OscConfig+0x4bc>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff faf9 	bl	80021ec <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7ff faf5 	bl	80021ec <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e183      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc4 <HAL_RCC_OscConfig+0x4bc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d108      	bne.n	8002c36 <HAL_RCC_OscConfig+0x32e>
 8002c24:	4b66      	ldr	r3, [pc, #408]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2a:	4a65      	ldr	r2, [pc, #404]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c34:	e024      	b.n	8002c80 <HAL_RCC_OscConfig+0x378>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d110      	bne.n	8002c60 <HAL_RCC_OscConfig+0x358>
 8002c3e:	4b60      	ldr	r3, [pc, #384]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	4a5e      	ldr	r2, [pc, #376]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x378>
 8002c60:	4b57      	ldr	r3, [pc, #348]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	4a56      	ldr	r2, [pc, #344]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7ff fab0 	bl	80021ec <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7ff faac 	bl	80021ec <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e138      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b46      	ldr	r3, [pc, #280]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ed      	beq.n	8002c90 <HAL_RCC_OscConfig+0x388>
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa99 	bl	80021ec <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7ff fa95 	bl	80021ec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e121      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ed      	bne.n	8002cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7ff fa68 	bl	80021ec <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d20:	f7ff fa64 	bl	80021ec <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0f2      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d32:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x418>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d42:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d48:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7ff fa4b 	bl	80021ec <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d5a:	f7ff fa47 	bl	80021ec <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0d5      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80c9 	beq.w	8002f16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	f000 8083 	beq.w	8002e98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d15e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <HAL_RCC_OscConfig+0x4b8>)
 8002da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7ff fa21 	bl	80021ec <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7ff fa1d 	bl	80021ec <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d905      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ab      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	4b55      	ldr	r3, [pc, #340]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ec      	bne.n	8002dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd4:	4b52      	ldr	r3, [pc, #328]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4b52      	ldr	r3, [pc, #328]	@ (8002f24 <HAL_RCC_OscConfig+0x61c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6a11      	ldr	r1, [r2, #32]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002dee:	0212      	lsls	r2, r2, #8
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0652      	lsls	r2, r2, #25
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e0e:	06d2      	lsls	r2, r2, #27
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4943      	ldr	r1, [pc, #268]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a40      	ldr	r2, [pc, #256]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e24:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a3d      	ldr	r2, [pc, #244]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7ff f9dc 	bl	80021ec <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff f9d8 	bl	80021ec <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e066      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x530>
 8002e56:	e05e      	b.n	8002f16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a30      	ldr	r2, [pc, #192]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff f9c2 	bl	80021ec <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff f9be 	bl	80021ec <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e04c      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7e:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e8a:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	4924      	ldr	r1, [pc, #144]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <HAL_RCC_OscConfig+0x620>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	60cb      	str	r3, [r1, #12]
 8002e96:	e03e      	b.n	8002f16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e039      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_RCC_OscConfig+0x618>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d12c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d123      	bne.n	8002f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11b      	bne.n	8002f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d113      	bne.n	8002f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	019f800c 	.word	0x019f800c
 8002f28:	feeefffc 	.word	0xfeeefffc

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e11e      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b91      	ldr	r3, [pc, #580]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b8e      	ldr	r3, [pc, #568]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 020f 	bic.w	r2, r3, #15
 8002f5a:	498c      	ldr	r1, [pc, #560]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b8a      	ldr	r3, [pc, #552]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e106      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d073      	beq.n	8003068 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d129      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f88:	4b81      	ldr	r3, [pc, #516]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0f4      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f98:	f000 f99e 	bl	80032d8 <RCC_GetSysClockFreqFromPLLSource>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8003194 <HAL_RCC_ClockConfig+0x268>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d93f      	bls.n	8003026 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d033      	beq.n	8003026 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d12f      	bne.n	8003026 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fc6:	4b72      	ldr	r3, [pc, #456]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fce:	4a70      	ldr	r2, [pc, #448]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e024      	b.n	8003026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0c6      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0be      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003004:	f000 f8ce 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4a61      	ldr	r2, [pc, #388]	@ (8003194 <HAL_RCC_ClockConfig+0x268>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d909      	bls.n	8003026 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003012:	4b5f      	ldr	r3, [pc, #380]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800301a:	4a5d      	ldr	r2, [pc, #372]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 800301c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003020:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003022:	2380      	movs	r3, #128	@ 0x80
 8003024:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b5a      	ldr	r3, [pc, #360]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4957      	ldr	r1, [pc, #348]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7ff f8d8 	bl	80021ec <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7ff f8d4 	bl	80021ec <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e095      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a42      	ldr	r2, [pc, #264]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800308a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003098:	4b3d      	ldr	r3, [pc, #244]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 80030a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b39      	ldr	r3, [pc, #228]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4936      	ldr	r1, [pc, #216]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
 80030ba:	e008      	b.n	80030ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b80      	cmp	r3, #128	@ 0x80
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030c2:	4b33      	ldr	r3, [pc, #204]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4a32      	ldr	r2, [pc, #200]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 80030c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ce:	4b2f      	ldr	r3, [pc, #188]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d21d      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 020f 	bic.w	r2, r3, #15
 80030e4:	4929      	ldr	r1, [pc, #164]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030ec:	f7ff f87e 	bl	80021ec <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7ff f87a 	bl	80021ec <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e03b      	b.n	8003182 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	@ (800318c <HAL_RCC_ClockConfig+0x260>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d1ed      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4917      	ldr	r1, [pc, #92]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490f      	ldr	r1, [pc, #60]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003156:	f000 f825 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_RCC_ClockConfig+0x264>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490c      	ldr	r1, [pc, #48]	@ (8003198 <HAL_RCC_ClockConfig+0x26c>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_RCC_ClockConfig+0x270>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003176:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_RCC_ClockConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe ffea 	bl	8002154 <HAL_InitTick>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	04c4b400 	.word	0x04c4b400
 8003198:	08008bd8 	.word	0x08008bd8
 800319c:	20000018 	.word	0x20000018
 80031a0:	2000001c 	.word	0x2000001c

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031aa:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e047      	b.n	800324c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031bc:	4b27      	ldr	r3, [pc, #156]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031c8:	4b26      	ldr	r3, [pc, #152]	@ (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e03e      	b.n	800324c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d136      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031da:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3301      	adds	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003202:	68d2      	ldr	r2, [r2, #12]
 8003204:	0a12      	lsrs	r2, r2, #8
 8003206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
      break;
 8003210:	e00c      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003212:	4a13      	ldr	r2, [pc, #76]	@ (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	4a10      	ldr	r2, [pc, #64]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	0a12      	lsrs	r2, r2, #8
 8003220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
      break;
 800322a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0e5b      	lsrs	r3, r3, #25
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e001      	b.n	800324c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800324c:	693b      	ldr	r3, [r7, #16]
}
 800324e:	4618      	mov	r0, r3
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	00f42400 	.word	0x00f42400
 8003264:	016e3600 	.word	0x016e3600

08003268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	@ (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000018 	.word	0x20000018

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08008be8 	.word	0x08008be8

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032b0:	f7ff ffda 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0adb      	lsrs	r3, r3, #11
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08008be8 	.word	0x08008be8

080032d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d10c      	bne.n	8003316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003306:	68d2      	ldr	r2, [r2, #12]
 8003308:	0a12      	lsrs	r2, r2, #8
 800330a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
    break;
 8003314:	e00c      	b.n	8003330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003316:	4a12      	ldr	r2, [pc, #72]	@ (8003360 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4a0e      	ldr	r2, [pc, #56]	@ (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	0a12      	lsrs	r2, r2, #8
 8003324:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    break;
 800332e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0e5b      	lsrs	r3, r3, #25
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800334a:	687b      	ldr	r3, [r7, #4]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000
 800335c:	016e3600 	.word	0x016e3600
 8003360:	00f42400 	.word	0x00f42400

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800336c:	2300      	movs	r3, #0
 800336e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003370:	2300      	movs	r3, #0
 8003372:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8098 	beq.w	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b40      	ldr	r3, [pc, #256]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	4a3f      	ldr	r2, [pc, #252]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6593      	str	r3, [r2, #88]	@ 0x58
 800339e:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033aa:	2301      	movs	r3, #1
 80033ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a39      	ldr	r2, [pc, #228]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ba:	f7fe ff17 	bl	80021ec <HAL_GetTick>
 80033be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033c0:	e009      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fe ff13 	bl	80021ec <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d902      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	74fb      	strb	r3, [r7, #19]
        break;
 80033d4:	e005      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d6:	4b30      	ldr	r3, [pc, #192]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ef      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d159      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01e      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	d019      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003404:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003410:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003416:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003420:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	4a1b      	ldr	r2, [pc, #108]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fed3 	bl	80021ec <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003448:	e00b      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe fecf 	bl	80021ec <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d902      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	74fb      	strb	r3, [r7, #19]
            break;
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ec      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	4903      	ldr	r1, [pc, #12]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	74bb      	strb	r3, [r7, #18]
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a0:	7c7b      	ldrb	r3, [r7, #17]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a6:	4ba7      	ldr	r3, [pc, #668]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	4aa6      	ldr	r2, [pc, #664]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034be:	4ba1      	ldr	r3, [pc, #644]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f023 0203 	bic.w	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	499d      	ldr	r1, [pc, #628]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e0:	4b98      	ldr	r3, [pc, #608]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f023 020c 	bic.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4995      	ldr	r1, [pc, #596]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003502:	4b90      	ldr	r3, [pc, #576]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	498c      	ldr	r1, [pc, #560]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003524:	4b87      	ldr	r3, [pc, #540]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4984      	ldr	r1, [pc, #528]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	497b      	ldr	r1, [pc, #492]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003568:	4b76      	ldr	r3, [pc, #472]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4973      	ldr	r1, [pc, #460]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358a:	4b6e      	ldr	r3, [pc, #440]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	496a      	ldr	r1, [pc, #424]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ac:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4962      	ldr	r1, [pc, #392]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	4959      	ldr	r1, [pc, #356]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f0:	4b54      	ldr	r3, [pc, #336]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	4951      	ldr	r1, [pc, #324]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	4948      	ldr	r1, [pc, #288]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003634:	4b43      	ldr	r3, [pc, #268]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4940      	ldr	r1, [pc, #256]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003652:	d105      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003654:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	4932      	ldr	r1, [pc, #200]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b2d      	ldr	r3, [pc, #180]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a2c      	ldr	r2, [pc, #176]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003696:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	4924      	ldr	r1, [pc, #144]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	4916      	ldr	r1, [pc, #88]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d019      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	4908      	ldr	r1, [pc, #32]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003732:	d109      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a02      	ldr	r2, [pc, #8]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d015      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003754:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	4926      	ldr	r1, [pc, #152]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003772:	d105      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a20      	ldr	r2, [pc, #128]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800378c:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379a:	4918      	ldr	r1, [pc, #96]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a12      	ldr	r2, [pc, #72]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	490a      	ldr	r1, [pc, #40]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e049      	b.n	80038a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe fb02 	bl	8001e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f000 fef8 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e054      	b.n	8003972 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <HAL_TIM_Base_Start_IT+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d01d      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a22      	ldr	r2, [pc, #136]	@ (8003984 <HAL_TIM_Base_Start_IT+0xd4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a21      	ldr	r2, [pc, #132]	@ (8003988 <HAL_TIM_Base_Start_IT+0xd8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <HAL_TIM_Base_Start_IT+0xdc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <HAL_TIM_Base_Start_IT+0xe0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <HAL_TIM_Base_Start_IT+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <HAL_TIM_Base_Start_IT+0xe8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d115      	bne.n	800395c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_TIM_Base_Start_IT+0xec>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b06      	cmp	r3, #6
 8003940:	d015      	beq.n	800396e <HAL_TIM_Base_Start_IT+0xbe>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d011      	beq.n	800396e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	e008      	b.n	800396e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e000      	b.n	8003970 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40000400 	.word	0x40000400
 8003988:	40000800 	.word	0x40000800
 800398c:	40000c00 	.word	0x40000c00
 8003990:	40013400 	.word	0x40013400
 8003994:	40014000 	.word	0x40014000
 8003998:	40015000 	.word	0x40015000
 800399c:	00010007 	.word	0x00010007

080039a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e049      	b.n	8003a46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f841 	bl	8003a4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f000 fe28 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_PWM_Start+0x24>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e03c      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d109      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x3e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e02f      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d109      	bne.n	8003abc <HAL_TIM_PWM_Start+0x58>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e022      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d109      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x72>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e015      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d109      	bne.n	8003af0 <HAL_TIM_PWM_Start+0x8c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e008      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0a6      	b.n	8003c58 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_Start+0xb6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	e023      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xc6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b28:	e01b      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start+0xd6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b38:	e013      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0xe6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b48:	e00b      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xf6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b58:	e003      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f9dc 	bl	8004f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3a      	ldr	r2, [pc, #232]	@ (8003c60 <HAL_TIM_PWM_Start+0x1fc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_TIM_PWM_Start+0x148>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a39      	ldr	r2, [pc, #228]	@ (8003c64 <HAL_TIM_PWM_Start+0x200>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_TIM_PWM_Start+0x148>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a37      	ldr	r2, [pc, #220]	@ (8003c68 <HAL_TIM_PWM_Start+0x204>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_TIM_PWM_Start+0x148>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a36      	ldr	r2, [pc, #216]	@ (8003c6c <HAL_TIM_PWM_Start+0x208>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_TIM_PWM_Start+0x148>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a34      	ldr	r2, [pc, #208]	@ (8003c70 <HAL_TIM_PWM_Start+0x20c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_PWM_Start+0x148>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a33      	ldr	r2, [pc, #204]	@ (8003c74 <HAL_TIM_PWM_Start+0x210>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0x14c>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x14e>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a25      	ldr	r2, [pc, #148]	@ (8003c60 <HAL_TIM_PWM_Start+0x1fc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd8:	d01d      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a26      	ldr	r2, [pc, #152]	@ (8003c78 <HAL_TIM_PWM_Start+0x214>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a24      	ldr	r2, [pc, #144]	@ (8003c7c <HAL_TIM_PWM_Start+0x218>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a23      	ldr	r2, [pc, #140]	@ (8003c80 <HAL_TIM_PWM_Start+0x21c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <HAL_TIM_PWM_Start+0x200>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <HAL_TIM_PWM_Start+0x204>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x1b2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_TIM_PWM_Start+0x210>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d115      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_TIM_PWM_Start+0x220>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d015      	beq.n	8003c54 <HAL_TIM_PWM_Start+0x1f0>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2e:	d011      	beq.n	8003c54 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c40:	e008      	b.n	8003c54 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e000      	b.n	8003c56 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40013400 	.word	0x40013400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800
 8003c74:	40015000 	.word	0x40015000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	00010007 	.word	0x00010007

08003c88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e097      	b.n	8003dcc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe f8f1 	bl	8001e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003ccc:	f023 0307 	bic.w	r3, r3, #7
 8003cd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 fca9 	bl	8004634 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	f023 0303 	bic.w	r3, r3, #3
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d28:	f023 030c 	bic.w	r3, r3, #12
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	4313      	orrs	r3, r2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	011a      	lsls	r2, r3, #4
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003df4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e0a:	7b7b      	ldrb	r3, [r7, #13]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d001      	beq.n	8003e14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e069      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e24:	e031      	b.n	8003e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d110      	bne.n	8003e4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e055      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e4c:	e01d      	b.n	8003e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d108      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e5a:	7b7b      	ldrb	r3, [r7, #13]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e60:	7b3b      	ldrb	r3, [r7, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e03e      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_TIM_Encoder_Start+0xc4>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d008      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0xd4>
 8003e96:	e00f      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 f841 	bl	8004f28 <TIM_CCxChannelCmd>
      break;
 8003ea6:	e016      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f839 	bl	8004f28 <TIM_CCxChannelCmd>
      break;
 8003eb6:	e00e      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f831 	bl	8004f28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 f82a 	bl	8004f28 <TIM_CCxChannelCmd>
      break;
 8003ed4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0202 	mvn.w	r2, #2
 8003f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fb5c 	bl	80045f8 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb4e 	bl	80045e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fb5f 	bl	800460c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb36 	bl	80045f8 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb28 	bl	80045e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fb39 	bl	800460c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0208 	mvn.w	r2, #8
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb10 	bl	80045f8 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb02 	bl	80045e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb13 	bl	800460c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0210 	mvn.w	r2, #16
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2208      	movs	r2, #8
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 faea 	bl	80045f8 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fadc 	bl	80045e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 faed 	bl	800460c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0201 	mvn.w	r2, #1
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fbae 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f001 f815 	bl	80050b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f001 f80d 	bl	80050c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 faa7 	bl	8004620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00c      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0220 	mvn.w	r2, #32
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 ffd5 	bl	80050a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 ffe1 	bl	80050dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 ffd9 	bl	80050f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00c      	beq.n	8004162 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 ffd1 	bl	8005104 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 ffc9 	bl	8005118 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0ff      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b14      	cmp	r3, #20
 80041ba:	f200 80f0 	bhi.w	800439e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004219 	.word	0x08004219
 80041c8:	0800439f 	.word	0x0800439f
 80041cc:	0800439f 	.word	0x0800439f
 80041d0:	0800439f 	.word	0x0800439f
 80041d4:	08004259 	.word	0x08004259
 80041d8:	0800439f 	.word	0x0800439f
 80041dc:	0800439f 	.word	0x0800439f
 80041e0:	0800439f 	.word	0x0800439f
 80041e4:	0800429b 	.word	0x0800429b
 80041e8:	0800439f 	.word	0x0800439f
 80041ec:	0800439f 	.word	0x0800439f
 80041f0:	0800439f 	.word	0x0800439f
 80041f4:	080042db 	.word	0x080042db
 80041f8:	0800439f 	.word	0x0800439f
 80041fc:	0800439f 	.word	0x0800439f
 8004200:	0800439f 	.word	0x0800439f
 8004204:	0800431d 	.word	0x0800431d
 8004208:	0800439f 	.word	0x0800439f
 800420c:	0800439f 	.word	0x0800439f
 8004210:	0800439f 	.word	0x0800439f
 8004214:	0800435d 	.word	0x0800435d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fabc 	bl	800479c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	619a      	str	r2, [r3, #24]
      break;
 8004256:	e0a5      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb36 	bl	80048d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	619a      	str	r2, [r3, #24]
      break;
 8004298:	e084      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fba9 	bl	80049f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0208 	orr.w	r2, r2, #8
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0204 	bic.w	r2, r2, #4
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	61da      	str	r2, [r3, #28]
      break;
 80042d8:	e064      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fc1b 	bl	8004b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	021a      	lsls	r2, r3, #8
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	61da      	str	r2, [r3, #28]
      break;
 800431a:	e043      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fc8e 	bl	8004c44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800435a:	e023      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fcd8 	bl	8004d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004386:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	021a      	lsls	r2, r3, #8
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800439c:	e002      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
      break;
 80043a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop

080043b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_TIM_ConfigClockSource+0x1c>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e0f6      	b.n	80045c2 <HAL_TIM_ConfigClockSource+0x20a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80043f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6f      	ldr	r2, [pc, #444]	@ (80045cc <HAL_TIM_ConfigClockSource+0x214>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f000 80c1 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004414:	4a6d      	ldr	r2, [pc, #436]	@ (80045cc <HAL_TIM_ConfigClockSource+0x214>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f200 80c6 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800441c:	4a6c      	ldr	r2, [pc, #432]	@ (80045d0 <HAL_TIM_ConfigClockSource+0x218>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f000 80b9 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004424:	4a6a      	ldr	r2, [pc, #424]	@ (80045d0 <HAL_TIM_ConfigClockSource+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f200 80be 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800442c:	4a69      	ldr	r2, [pc, #420]	@ (80045d4 <HAL_TIM_ConfigClockSource+0x21c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 80b1 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004434:	4a67      	ldr	r2, [pc, #412]	@ (80045d4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f200 80b6 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800443c:	4a66      	ldr	r2, [pc, #408]	@ (80045d8 <HAL_TIM_ConfigClockSource+0x220>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f000 80a9 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004444:	4a64      	ldr	r2, [pc, #400]	@ (80045d8 <HAL_TIM_ConfigClockSource+0x220>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f200 80ae 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800444c:	4a63      	ldr	r2, [pc, #396]	@ (80045dc <HAL_TIM_ConfigClockSource+0x224>)
 800444e:	4293      	cmp	r3, r2
 8004450:	f000 80a1 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004454:	4a61      	ldr	r2, [pc, #388]	@ (80045dc <HAL_TIM_ConfigClockSource+0x224>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f200 80a6 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800445c:	4a60      	ldr	r2, [pc, #384]	@ (80045e0 <HAL_TIM_ConfigClockSource+0x228>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f000 8099 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004464:	4a5e      	ldr	r2, [pc, #376]	@ (80045e0 <HAL_TIM_ConfigClockSource+0x228>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f200 809e 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800446c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004470:	f000 8091 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004474:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004478:	f200 8096 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004480:	f000 8089 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 8004484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004488:	f200 808e 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004490:	d03e      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x158>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004496:	f200 8087 	bhi.w	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	f000 8086 	beq.w	80045ae <HAL_TIM_ConfigClockSource+0x1f6>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a6:	d87f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044a8:	2b70      	cmp	r3, #112	@ 0x70
 80044aa:	d01a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x12a>
 80044ac:	2b70      	cmp	r3, #112	@ 0x70
 80044ae:	d87b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044b0:	2b60      	cmp	r3, #96	@ 0x60
 80044b2:	d050      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x19e>
 80044b4:	2b60      	cmp	r3, #96	@ 0x60
 80044b6:	d877      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044b8:	2b50      	cmp	r3, #80	@ 0x50
 80044ba:	d03c      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x17e>
 80044bc:	2b50      	cmp	r3, #80	@ 0x50
 80044be:	d873      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d058      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x1be>
 80044c4:	2b40      	cmp	r3, #64	@ 0x40
 80044c6:	d86f      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	d064      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 80044cc:	2b30      	cmp	r3, #48	@ 0x30
 80044ce:	d86b      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d060      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d867      	bhi.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05c      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d05a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x1de>
 80044e0:	e062      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f2:	f000 fcf9 	bl	8004ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e04f      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	f000 fce2 	bl	8004ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004532:	609a      	str	r2, [r3, #8]
      break;
 8004534:	e03c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	461a      	mov	r2, r3
 8004544:	f000 fc54 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2150      	movs	r1, #80	@ 0x50
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fcad 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004554:	e02c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004562:	461a      	mov	r2, r3
 8004564:	f000 fc73 	bl	8004e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2160      	movs	r1, #96	@ 0x60
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fc9d 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004574:	e01c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	461a      	mov	r2, r3
 8004584:	f000 fc34 	bl	8004df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2140      	movs	r1, #64	@ 0x40
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fc8d 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004594:	e00c      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f000 fc84 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80045a6:	e003      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e000      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80045ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	00100070 	.word	0x00100070
 80045d0:	00100060 	.word	0x00100060
 80045d4:	00100050 	.word	0x00100050
 80045d8:	00100040 	.word	0x00100040
 80045dc:	00100030 	.word	0x00100030
 80045e0:	00100020 	.word	0x00100020

080045e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a4c      	ldr	r2, [pc, #304]	@ (8004778 <TIM_Base_SetConfig+0x144>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d017      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004652:	d013      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a49      	ldr	r2, [pc, #292]	@ (800477c <TIM_Base_SetConfig+0x148>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a48      	ldr	r2, [pc, #288]	@ (8004780 <TIM_Base_SetConfig+0x14c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a47      	ldr	r2, [pc, #284]	@ (8004784 <TIM_Base_SetConfig+0x150>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <TIM_Base_SetConfig+0x154>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x48>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a45      	ldr	r2, [pc, #276]	@ (800478c <TIM_Base_SetConfig+0x158>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a39      	ldr	r2, [pc, #228]	@ (8004778 <TIM_Base_SetConfig+0x144>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d023      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469c:	d01f      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a36      	ldr	r2, [pc, #216]	@ (800477c <TIM_Base_SetConfig+0x148>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01b      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a35      	ldr	r2, [pc, #212]	@ (8004780 <TIM_Base_SetConfig+0x14c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d017      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a34      	ldr	r2, [pc, #208]	@ (8004784 <TIM_Base_SetConfig+0x150>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a33      	ldr	r2, [pc, #204]	@ (8004788 <TIM_Base_SetConfig+0x154>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a33      	ldr	r2, [pc, #204]	@ (8004790 <TIM_Base_SetConfig+0x15c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a32      	ldr	r2, [pc, #200]	@ (8004794 <TIM_Base_SetConfig+0x160>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a31      	ldr	r2, [pc, #196]	@ (8004798 <TIM_Base_SetConfig+0x164>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_Base_SetConfig+0xaa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <TIM_Base_SetConfig+0x158>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d108      	bne.n	80046f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <TIM_Base_SetConfig+0x144>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <TIM_Base_SetConfig+0x110>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <TIM_Base_SetConfig+0x154>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00f      	beq.n	8004744 <TIM_Base_SetConfig+0x110>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <TIM_Base_SetConfig+0x15c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_Base_SetConfig+0x110>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <TIM_Base_SetConfig+0x160>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_Base_SetConfig+0x110>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <TIM_Base_SetConfig+0x164>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_Base_SetConfig+0x110>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a13      	ldr	r2, [pc, #76]	@ (800478c <TIM_Base_SetConfig+0x158>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]
  }
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40015000 	.word	0x40015000
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f023 0201 	bic.w	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 0302 	bic.w	r3, r3, #2
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a30      	ldr	r2, [pc, #192]	@ (80048b8 <TIM_OC1_SetConfig+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <TIM_OC1_SetConfig+0x88>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a2f      	ldr	r2, [pc, #188]	@ (80048bc <TIM_OC1_SetConfig+0x120>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_OC1_SetConfig+0x88>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a2e      	ldr	r2, [pc, #184]	@ (80048c0 <TIM_OC1_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00b      	beq.n	8004824 <TIM_OC1_SetConfig+0x88>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a2d      	ldr	r2, [pc, #180]	@ (80048c4 <TIM_OC1_SetConfig+0x128>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_OC1_SetConfig+0x88>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a2c      	ldr	r2, [pc, #176]	@ (80048c8 <TIM_OC1_SetConfig+0x12c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_OC1_SetConfig+0x88>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2b      	ldr	r2, [pc, #172]	@ (80048cc <TIM_OC1_SetConfig+0x130>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d10c      	bne.n	800483e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0308 	bic.w	r3, r3, #8
 800482a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0304 	bic.w	r3, r3, #4
 800483c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1d      	ldr	r2, [pc, #116]	@ (80048b8 <TIM_OC1_SetConfig+0x11c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <TIM_OC1_SetConfig+0xd2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <TIM_OC1_SetConfig+0x120>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00f      	beq.n	800486e <TIM_OC1_SetConfig+0xd2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a1b      	ldr	r2, [pc, #108]	@ (80048c0 <TIM_OC1_SetConfig+0x124>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_OC1_SetConfig+0xd2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1a      	ldr	r2, [pc, #104]	@ (80048c4 <TIM_OC1_SetConfig+0x128>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_OC1_SetConfig+0xd2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a19      	ldr	r2, [pc, #100]	@ (80048c8 <TIM_OC1_SetConfig+0x12c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC1_SetConfig+0xd2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <TIM_OC1_SetConfig+0x130>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d111      	bne.n	8004892 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40013400 	.word	0x40013400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800
 80048cc:	40015000 	.word	0x40015000

080048d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f023 0210 	bic.w	r2, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0320 	bic.w	r3, r3, #32
 800491e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <TIM_OC2_SetConfig+0x110>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_OC2_SetConfig+0x74>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a2b      	ldr	r2, [pc, #172]	@ (80049e4 <TIM_OC2_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_OC2_SetConfig+0x74>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <TIM_OC2_SetConfig+0x118>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10d      	bne.n	8004960 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800494a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <TIM_OC2_SetConfig+0x110>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_OC2_SetConfig+0xc0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <TIM_OC2_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_OC2_SetConfig+0xc0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <TIM_OC2_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_OC2_SetConfig+0xc0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <TIM_OC2_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_OC2_SetConfig+0xc0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <TIM_OC2_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC2_SetConfig+0xc0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_OC2_SetConfig+0x118>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d113      	bne.n	80049b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40013400 	.word	0x40013400
 80049e8:	40015000 	.word	0x40015000
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2b      	ldr	r2, [pc, #172]	@ (8004b04 <TIM_OC3_SetConfig+0x10c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_OC3_SetConfig+0x72>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b08 <TIM_OC3_SetConfig+0x110>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0x72>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a29      	ldr	r2, [pc, #164]	@ (8004b0c <TIM_OC3_SetConfig+0x114>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10d      	bne.n	8004a86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <TIM_OC3_SetConfig+0x10c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xbe>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <TIM_OC3_SetConfig+0x110>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xbe>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <TIM_OC3_SetConfig+0x118>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xbe>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <TIM_OC3_SetConfig+0x11c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xbe>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <TIM_OC3_SetConfig+0x120>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xbe>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	@ (8004b0c <TIM_OC3_SetConfig+0x114>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40015000 	.word	0x40015000
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	031b      	lsls	r3, r3, #12
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <TIM_OC4_SetConfig+0x110>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_OC4_SetConfig+0x74>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a2b      	ldr	r2, [pc, #172]	@ (8004c30 <TIM_OC4_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC4_SetConfig+0x74>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <TIM_OC4_SetConfig+0x118>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10d      	bne.n	8004bac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <TIM_OC4_SetConfig+0x110>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <TIM_OC4_SetConfig+0xc0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <TIM_OC4_SetConfig+0x114>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00f      	beq.n	8004bdc <TIM_OC4_SetConfig+0xc0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c38 <TIM_OC4_SetConfig+0x11c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_OC4_SetConfig+0xc0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <TIM_OC4_SetConfig+0x120>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <TIM_OC4_SetConfig+0xc0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	@ (8004c40 <TIM_OC4_SetConfig+0x124>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC4_SetConfig+0xc0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a17      	ldr	r2, [pc, #92]	@ (8004c34 <TIM_OC4_SetConfig+0x118>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d113      	bne.n	8004c04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004be2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40015000 	.word	0x40015000
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a19      	ldr	r2, [pc, #100]	@ (8004d00 <TIM_OC5_SetConfig+0xbc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x82>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a18      	ldr	r2, [pc, #96]	@ (8004d04 <TIM_OC5_SetConfig+0xc0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x82>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	@ (8004d08 <TIM_OC5_SetConfig+0xc4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x82>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <TIM_OC5_SetConfig+0xc8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x82>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	@ (8004d10 <TIM_OC5_SetConfig+0xcc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x82>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a14      	ldr	r2, [pc, #80]	@ (8004d14 <TIM_OC5_SetConfig+0xd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d109      	bne.n	8004cda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800
 8004d14:	40015000 	.word	0x40015000

08004d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd8 <TIM_OC6_SetConfig+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d013      	beq.n	8004d9c <TIM_OC6_SetConfig+0x84>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a19      	ldr	r2, [pc, #100]	@ (8004ddc <TIM_OC6_SetConfig+0xc4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_OC6_SetConfig+0x84>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a18      	ldr	r2, [pc, #96]	@ (8004de0 <TIM_OC6_SetConfig+0xc8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC6_SetConfig+0x84>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a17      	ldr	r2, [pc, #92]	@ (8004de4 <TIM_OC6_SetConfig+0xcc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC6_SetConfig+0x84>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <TIM_OC6_SetConfig+0xd0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC6_SetConfig+0x84>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <TIM_OC6_SetConfig+0xd4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	40015000 	.word	0x40015000

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f023 0210 	bic.w	r2, r3, #16
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f043 0307 	orr.w	r3, r3, #7
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	609a      	str	r2, [r3, #8]
}
 8004edc:	bf00      	nop
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e074      	b.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a34      	ldr	r2, [pc, #208]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a31      	ldr	r2, [pc, #196]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a21      	ldr	r2, [pc, #132]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500c:	d01d      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10c      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40015000 	.word	0x40015000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40014000 	.word	0x40014000

080050a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e042      	b.n	80051c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fc ff65 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2224      	movs	r2, #36	@ 0x24
 800515a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fbb2 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f8b3 	bl	80052e8 <UART_SetConfig>
 8005182:	4603      	mov	r3, r0
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e01b      	b.n	80051c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800519a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fc31 	bl	8005a24 <UART_CheckIdleState>
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d17b      	bne.n	80052de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_UART_Transmit+0x26>
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e074      	b.n	80052e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2221      	movs	r2, #33	@ 0x21
 8005202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005206:	f7fc fff1 	bl	80021ec <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005224:	d108      	bne.n	8005238 <HAL_UART_Transmit+0x6c>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e003      	b.n	8005240 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005240:	e030      	b.n	80052a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	@ 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fc93 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e03d      	b.n	80052e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005278:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3302      	adds	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e007      	b.n	8005292 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1c8      	bne.n	8005242 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2140      	movs	r1, #64	@ 0x40
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fc5c 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e006      	b.n	80052e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ec:	b08c      	sub	sp, #48	@ 0x30
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	431a      	orrs	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	431a      	orrs	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4baa      	ldr	r3, [pc, #680]	@ (80055c0 <UART_SetConfig+0x2d8>)
 8005318:	4013      	ands	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005320:	430b      	orrs	r3, r1
 8005322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a9f      	ldr	r2, [pc, #636]	@ (80055c4 <UART_SetConfig+0x2dc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005350:	4313      	orrs	r3, r2
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800535e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005368:	430b      	orrs	r3, r1
 800536a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	f023 010f 	bic.w	r1, r3, #15
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a90      	ldr	r2, [pc, #576]	@ (80055c8 <UART_SetConfig+0x2e0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d125      	bne.n	80053d8 <UART_SetConfig+0xf0>
 800538c:	4b8f      	ldr	r3, [pc, #572]	@ (80055cc <UART_SetConfig+0x2e4>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d81a      	bhi.n	80053d0 <UART_SetConfig+0xe8>
 800539a:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <UART_SetConfig+0xb8>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053c9 	.word	0x080053c9
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b6:	e116      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053be:	e112      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e10e      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e10a      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e106      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7c      	ldr	r2, [pc, #496]	@ (80055d0 <UART_SetConfig+0x2e8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d138      	bne.n	8005454 <UART_SetConfig+0x16c>
 80053e2:	4b7a      	ldr	r3, [pc, #488]	@ (80055cc <UART_SetConfig+0x2e4>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d82d      	bhi.n	800544c <UART_SetConfig+0x164>
 80053f0:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <UART_SetConfig+0x110>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	0800544d 	.word	0x0800544d
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800543d 	.word	0x0800543d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	08005435 	.word	0x08005435
 800541c:	0800544d 	.word	0x0800544d
 8005420:	0800544d 	.word	0x0800544d
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005445 	.word	0x08005445
 800542c:	2300      	movs	r3, #0
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005432:	e0d8      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543a:	e0d4      	b.n	80055e6 <UART_SetConfig+0x2fe>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005442:	e0d0      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544a:	e0cc      	b.n	80055e6 <UART_SetConfig+0x2fe>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005452:	e0c8      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5e      	ldr	r2, [pc, #376]	@ (80055d4 <UART_SetConfig+0x2ec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d125      	bne.n	80054aa <UART_SetConfig+0x1c2>
 800545e:	4b5b      	ldr	r3, [pc, #364]	@ (80055cc <UART_SetConfig+0x2e4>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005468:	2b30      	cmp	r3, #48	@ 0x30
 800546a:	d016      	beq.n	800549a <UART_SetConfig+0x1b2>
 800546c:	2b30      	cmp	r3, #48	@ 0x30
 800546e:	d818      	bhi.n	80054a2 <UART_SetConfig+0x1ba>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d00a      	beq.n	800548a <UART_SetConfig+0x1a2>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d814      	bhi.n	80054a2 <UART_SetConfig+0x1ba>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <UART_SetConfig+0x19a>
 800547c:	2b10      	cmp	r3, #16
 800547e:	d008      	beq.n	8005492 <UART_SetConfig+0x1aa>
 8005480:	e00f      	b.n	80054a2 <UART_SetConfig+0x1ba>
 8005482:	2300      	movs	r3, #0
 8005484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005488:	e0ad      	b.n	80055e6 <UART_SetConfig+0x2fe>
 800548a:	2302      	movs	r3, #2
 800548c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005490:	e0a9      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005492:	2304      	movs	r3, #4
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005498:	e0a5      	b.n	80055e6 <UART_SetConfig+0x2fe>
 800549a:	2308      	movs	r3, #8
 800549c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a0:	e0a1      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054a2:	2310      	movs	r3, #16
 80054a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a8:	e09d      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a4a      	ldr	r2, [pc, #296]	@ (80055d8 <UART_SetConfig+0x2f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d125      	bne.n	8005500 <UART_SetConfig+0x218>
 80054b4:	4b45      	ldr	r3, [pc, #276]	@ (80055cc <UART_SetConfig+0x2e4>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054be:	2bc0      	cmp	r3, #192	@ 0xc0
 80054c0:	d016      	beq.n	80054f0 <UART_SetConfig+0x208>
 80054c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054c4:	d818      	bhi.n	80054f8 <UART_SetConfig+0x210>
 80054c6:	2b80      	cmp	r3, #128	@ 0x80
 80054c8:	d00a      	beq.n	80054e0 <UART_SetConfig+0x1f8>
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	d814      	bhi.n	80054f8 <UART_SetConfig+0x210>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <UART_SetConfig+0x1f0>
 80054d2:	2b40      	cmp	r3, #64	@ 0x40
 80054d4:	d008      	beq.n	80054e8 <UART_SetConfig+0x200>
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x210>
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e082      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e07e      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e07a      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e076      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fe:	e072      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a35      	ldr	r2, [pc, #212]	@ (80055dc <UART_SetConfig+0x2f4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d12a      	bne.n	8005560 <UART_SetConfig+0x278>
 800550a:	4b30      	ldr	r3, [pc, #192]	@ (80055cc <UART_SetConfig+0x2e4>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005518:	d01a      	beq.n	8005550 <UART_SetConfig+0x268>
 800551a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800551e:	d81b      	bhi.n	8005558 <UART_SetConfig+0x270>
 8005520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005524:	d00c      	beq.n	8005540 <UART_SetConfig+0x258>
 8005526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800552a:	d815      	bhi.n	8005558 <UART_SetConfig+0x270>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <UART_SetConfig+0x250>
 8005530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005534:	d008      	beq.n	8005548 <UART_SetConfig+0x260>
 8005536:	e00f      	b.n	8005558 <UART_SetConfig+0x270>
 8005538:	2300      	movs	r3, #0
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553e:	e052      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005540:	2302      	movs	r3, #2
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005546:	e04e      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554e:	e04a      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005556:	e046      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555e:	e042      	b.n	80055e6 <UART_SetConfig+0x2fe>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <UART_SetConfig+0x2dc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d13a      	bne.n	80055e0 <UART_SetConfig+0x2f8>
 800556a:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <UART_SetConfig+0x2e4>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005578:	d01a      	beq.n	80055b0 <UART_SetConfig+0x2c8>
 800557a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800557e:	d81b      	bhi.n	80055b8 <UART_SetConfig+0x2d0>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005584:	d00c      	beq.n	80055a0 <UART_SetConfig+0x2b8>
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800558a:	d815      	bhi.n	80055b8 <UART_SetConfig+0x2d0>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <UART_SetConfig+0x2b0>
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x2c0>
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x2d0>
 8005598:	2300      	movs	r3, #0
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e022      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e01e      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e01a      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e016      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e012      	b.n	80055e6 <UART_SetConfig+0x2fe>
 80055c0:	cfff69f3 	.word	0xcfff69f3
 80055c4:	40008000 	.word	0x40008000
 80055c8:	40013800 	.word	0x40013800
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40004400 	.word	0x40004400
 80055d4:	40004800 	.word	0x40004800
 80055d8:	40004c00 	.word	0x40004c00
 80055dc:	40005000 	.word	0x40005000
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4aae      	ldr	r2, [pc, #696]	@ (80058a4 <UART_SetConfig+0x5bc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	f040 8097 	bne.w	8005720 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d823      	bhi.n	8005642 <UART_SetConfig+0x35a>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0x318>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005625 	.word	0x08005625
 8005604:	08005643 	.word	0x08005643
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005643 	.word	0x08005643
 8005610:	08005633 	.word	0x08005633
 8005614:	08005643 	.word	0x08005643
 8005618:	08005643 	.word	0x08005643
 800561c:	08005643 	.word	0x08005643
 8005620:	0800563b 	.word	0x0800563b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fd fe2c 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8005628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800562a:	e010      	b.n	800564e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b9e      	ldr	r3, [pc, #632]	@ (80058a8 <UART_SetConfig+0x5c0>)
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005630:	e00d      	b.n	800564e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7fd fdb7 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8005636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005638:	e009      	b.n	800564e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005640:	e005      	b.n	800564e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800564c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8130 	beq.w	80058b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	4a94      	ldr	r2, [pc, #592]	@ (80058ac <UART_SetConfig+0x5c4>)
 800565c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005660:	461a      	mov	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	fbb3 f3f2 	udiv	r3, r3, r2
 8005668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d305      	bcc.n	8005686 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800568c:	e113      	b.n	80058b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	2200      	movs	r2, #0
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	60fa      	str	r2, [r7, #12]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	4a84      	ldr	r2, [pc, #528]	@ (80058ac <UART_SetConfig+0x5c4>)
 800569c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2200      	movs	r2, #0
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b0:	f7fb faf2 	bl	8000c98 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	020b      	lsls	r3, r1, #8
 80056c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056ca:	0202      	lsls	r2, r0, #8
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	6849      	ldr	r1, [r1, #4]
 80056d0:	0849      	lsrs	r1, r1, #1
 80056d2:	2000      	movs	r0, #0
 80056d4:	460c      	mov	r4, r1
 80056d6:	4605      	mov	r5, r0
 80056d8:	eb12 0804 	adds.w	r8, r2, r4
 80056dc:	eb43 0905 	adc.w	r9, r3, r5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	469a      	mov	sl, r3
 80056e8:	4693      	mov	fp, r2
 80056ea:	4652      	mov	r2, sl
 80056ec:	465b      	mov	r3, fp
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fb fad1 	bl	8000c98 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4613      	mov	r3, r2
 80056fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005704:	d308      	bcc.n	8005718 <UART_SetConfig+0x430>
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570c:	d204      	bcs.n	8005718 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e0ce      	b.n	80058b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800571e:	e0ca      	b.n	80058b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005728:	d166      	bne.n	80057f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800572a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800572e:	2b08      	cmp	r3, #8
 8005730:	d827      	bhi.n	8005782 <UART_SetConfig+0x49a>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x450>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fd fd90 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005762:	e014      	b.n	800578e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fd fda2 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b4e      	ldr	r3, [pc, #312]	@ (80058a8 <UART_SetConfig+0x5c0>)
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fd fd17 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8005776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800578c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8090 	beq.w	80058b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	4a44      	ldr	r2, [pc, #272]	@ (80058ac <UART_SetConfig+0x5c4>)
 800579c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a8:	005a      	lsls	r2, r3, #1
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	441a      	add	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d916      	bls.n	80057f0 <UART_SetConfig+0x508>
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c8:	d212      	bcs.n	80057f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f023 030f 	bic.w	r3, r3, #15
 80057d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	b29a      	uxth	r2, r3
 80057e0:	8bfb      	ldrh	r3, [r7, #30]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	8bfa      	ldrh	r2, [r7, #30]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e062      	b.n	80058b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057f6:	e05e      	b.n	80058b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d828      	bhi.n	8005852 <UART_SetConfig+0x56a>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <UART_SetConfig+0x520>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005853 	.word	0x08005853
 8005818:	08005843 	.word	0x08005843
 800581c:	08005853 	.word	0x08005853
 8005820:	08005853 	.word	0x08005853
 8005824:	08005853 	.word	0x08005853
 8005828:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fd fd28 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8005830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005832:	e014      	b.n	800585e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7fd fd3a 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800583a:	e010      	b.n	800585e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b1a      	ldr	r3, [pc, #104]	@ (80058a8 <UART_SetConfig+0x5c0>)
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005840:	e00d      	b.n	800585e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fd fcaf 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8005846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005848:	e009      	b.n	800585e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005850:	e005      	b.n	800585e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800585c:	bf00      	nop
    }

    if (pclk != 0U)
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	d028      	beq.n	80058b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	4a10      	ldr	r2, [pc, #64]	@ (80058ac <UART_SetConfig+0x5c4>)
 800586a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586e:	461a      	mov	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	fbb3 f2f2 	udiv	r2, r3, r2
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	441a      	add	r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d910      	bls.n	80058b0 <UART_SetConfig+0x5c8>
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005894:	d20c      	bcs.n	80058b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	b29a      	uxth	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	e009      	b.n	80058b6 <UART_SetConfig+0x5ce>
 80058a2:	bf00      	nop
 80058a4:	40008000 	.word	0x40008000
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	08008bf0 	.word	0x08008bf0
      }
      else
      {
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2200      	movs	r2, #0
 80058d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3730      	adds	r7, #48	@ 0x30
 80058da:	46bd      	mov	sp, r7
 80058dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b098      	sub	sp, #96	@ 0x60
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fc fbda 	bl	80021ec <HAL_GetTick>
 8005a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d12f      	bne.n	8005aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f88e 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d022      	beq.n	8005aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e063      	b.n	8005b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d149      	bne.n	8005b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f857 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d03c      	beq.n	8005b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b22:	61fa      	str	r2, [r7, #28]
 8005b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e012      	b.n	8005b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3758      	adds	r7, #88	@ 0x58
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	e04f      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b90:	d04b      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fc fb2b 	bl	80021ec <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e04e      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d037      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b80      	cmp	r3, #128	@ 0x80
 8005bbe:	d034      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d031      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d110      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f838 	bl	8005c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2208      	movs	r2, #8
 8005be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e029      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c04:	d111      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f81e 	bl	8005c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00f      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0a0      	beq.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b095      	sub	sp, #84	@ 0x54
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e3      	bne.n	8005c8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d118      	bne.n	8005cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f023 0310 	bic.w	r3, r3, #16
 8005ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d12:	bf00      	nop
 8005d14:	3754      	adds	r7, #84	@ 0x54
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e027      	b.n	8005d84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	@ 0x24
 8005d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e02d      	b.n	8005e04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	@ 0x24
 8005db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0201 	bic.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f84f 	bl	8005e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e02d      	b.n	8005e80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	@ 0x24
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f811 	bl	8005e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d108      	bne.n	8005eaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ea8:	e031      	b.n	8005f0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eaa:	2308      	movs	r3, #8
 8005eac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eae:	2308      	movs	r3, #8
 8005eb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	0e5b      	lsrs	r3, r3, #25
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	0f5b      	lsrs	r3, r3, #29
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	7b3a      	ldrb	r2, [r7, #12]
 8005ed6:	4911      	ldr	r1, [pc, #68]	@ (8005f1c <UARTEx_SetNbDataToProcess+0x94>)
 8005ed8:	5c8a      	ldrb	r2, [r1, r2]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ede:	7b3a      	ldrb	r2, [r7, #12]
 8005ee0:	490f      	ldr	r1, [pc, #60]	@ (8005f20 <UARTEx_SetNbDataToProcess+0x98>)
 8005ee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	7b7a      	ldrb	r2, [r7, #13]
 8005ef4:	4909      	ldr	r1, [pc, #36]	@ (8005f1c <UARTEx_SetNbDataToProcess+0x94>)
 8005ef6:	5c8a      	ldrb	r2, [r1, r2]
 8005ef8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005efc:	7b7a      	ldrb	r2, [r7, #13]
 8005efe:	4908      	ldr	r1, [pc, #32]	@ (8005f20 <UARTEx_SetNbDataToProcess+0x98>)
 8005f00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	08008c08 	.word	0x08008c08
 8005f20:	08008c10 	.word	0x08008c10

08005f24 <__cvt>:
 8005f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	ec57 6b10 	vmov	r6, r7, d0
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4619      	mov	r1, r3
 8005f32:	463b      	mov	r3, r7
 8005f34:	bfbb      	ittet	lt
 8005f36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f3a:	461f      	movlt	r7, r3
 8005f3c:	2300      	movge	r3, #0
 8005f3e:	232d      	movlt	r3, #45	@ 0x2d
 8005f40:	700b      	strb	r3, [r1, #0]
 8005f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f48:	4691      	mov	r9, r2
 8005f4a:	f023 0820 	bic.w	r8, r3, #32
 8005f4e:	bfbc      	itt	lt
 8005f50:	4632      	movlt	r2, r6
 8005f52:	4616      	movlt	r6, r2
 8005f54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f58:	d005      	beq.n	8005f66 <__cvt+0x42>
 8005f5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f5e:	d100      	bne.n	8005f62 <__cvt+0x3e>
 8005f60:	3401      	adds	r4, #1
 8005f62:	2102      	movs	r1, #2
 8005f64:	e000      	b.n	8005f68 <__cvt+0x44>
 8005f66:	2103      	movs	r1, #3
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	ab02      	add	r3, sp, #8
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	ec47 6b10 	vmov	d0, r6, r7
 8005f74:	4653      	mov	r3, sl
 8005f76:	4622      	mov	r2, r4
 8005f78:	f000 fe5a 	bl	8006c30 <_dtoa_r>
 8005f7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f80:	4605      	mov	r5, r0
 8005f82:	d119      	bne.n	8005fb8 <__cvt+0x94>
 8005f84:	f019 0f01 	tst.w	r9, #1
 8005f88:	d00e      	beq.n	8005fa8 <__cvt+0x84>
 8005f8a:	eb00 0904 	add.w	r9, r0, r4
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	4630      	mov	r0, r6
 8005f94:	4639      	mov	r1, r7
 8005f96:	f7fa fdbf 	bl	8000b18 <__aeabi_dcmpeq>
 8005f9a:	b108      	cbz	r0, 8005fa0 <__cvt+0x7c>
 8005f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fa0:	2230      	movs	r2, #48	@ 0x30
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	454b      	cmp	r3, r9
 8005fa6:	d31e      	bcc.n	8005fe6 <__cvt+0xc2>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fac:	1b5b      	subs	r3, r3, r5
 8005fae:	4628      	mov	r0, r5
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	b004      	add	sp, #16
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fbc:	eb00 0904 	add.w	r9, r0, r4
 8005fc0:	d1e5      	bne.n	8005f8e <__cvt+0x6a>
 8005fc2:	7803      	ldrb	r3, [r0, #0]
 8005fc4:	2b30      	cmp	r3, #48	@ 0x30
 8005fc6:	d10a      	bne.n	8005fde <__cvt+0xba>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fda2 	bl	8000b18 <__aeabi_dcmpeq>
 8005fd4:	b918      	cbnz	r0, 8005fde <__cvt+0xba>
 8005fd6:	f1c4 0401 	rsb	r4, r4, #1
 8005fda:	f8ca 4000 	str.w	r4, [sl]
 8005fde:	f8da 3000 	ldr.w	r3, [sl]
 8005fe2:	4499      	add	r9, r3
 8005fe4:	e7d3      	b.n	8005f8e <__cvt+0x6a>
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	9103      	str	r1, [sp, #12]
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e7d9      	b.n	8005fa2 <__cvt+0x7e>

08005fee <__exponent>:
 8005fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	bfba      	itte	lt
 8005ff4:	4249      	neglt	r1, r1
 8005ff6:	232d      	movlt	r3, #45	@ 0x2d
 8005ff8:	232b      	movge	r3, #43	@ 0x2b
 8005ffa:	2909      	cmp	r1, #9
 8005ffc:	7002      	strb	r2, [r0, #0]
 8005ffe:	7043      	strb	r3, [r0, #1]
 8006000:	dd29      	ble.n	8006056 <__exponent+0x68>
 8006002:	f10d 0307 	add.w	r3, sp, #7
 8006006:	461d      	mov	r5, r3
 8006008:	270a      	movs	r7, #10
 800600a:	461a      	mov	r2, r3
 800600c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006010:	fb07 1416 	mls	r4, r7, r6, r1
 8006014:	3430      	adds	r4, #48	@ 0x30
 8006016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800601a:	460c      	mov	r4, r1
 800601c:	2c63      	cmp	r4, #99	@ 0x63
 800601e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006022:	4631      	mov	r1, r6
 8006024:	dcf1      	bgt.n	800600a <__exponent+0x1c>
 8006026:	3130      	adds	r1, #48	@ 0x30
 8006028:	1e94      	subs	r4, r2, #2
 800602a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800602e:	1c41      	adds	r1, r0, #1
 8006030:	4623      	mov	r3, r4
 8006032:	42ab      	cmp	r3, r5
 8006034:	d30a      	bcc.n	800604c <__exponent+0x5e>
 8006036:	f10d 0309 	add.w	r3, sp, #9
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ac      	cmp	r4, r5
 800603e:	bf88      	it	hi
 8006040:	2300      	movhi	r3, #0
 8006042:	3302      	adds	r3, #2
 8006044:	4403      	add	r3, r0
 8006046:	1a18      	subs	r0, r3, r0
 8006048:	b003      	add	sp, #12
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006050:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006054:	e7ed      	b.n	8006032 <__exponent+0x44>
 8006056:	2330      	movs	r3, #48	@ 0x30
 8006058:	3130      	adds	r1, #48	@ 0x30
 800605a:	7083      	strb	r3, [r0, #2]
 800605c:	70c1      	strb	r1, [r0, #3]
 800605e:	1d03      	adds	r3, r0, #4
 8006060:	e7f1      	b.n	8006046 <__exponent+0x58>
	...

08006064 <_printf_float>:
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	b08d      	sub	sp, #52	@ 0x34
 800606a:	460c      	mov	r4, r1
 800606c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006070:	4616      	mov	r6, r2
 8006072:	461f      	mov	r7, r3
 8006074:	4605      	mov	r5, r0
 8006076:	f000 fcdb 	bl	8006a30 <_localeconv_r>
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa f91e 	bl	80002c0 <strlen>
 8006084:	2300      	movs	r3, #0
 8006086:	930a      	str	r3, [sp, #40]	@ 0x28
 8006088:	f8d8 3000 	ldr.w	r3, [r8]
 800608c:	9005      	str	r0, [sp, #20]
 800608e:	3307      	adds	r3, #7
 8006090:	f023 0307 	bic.w	r3, r3, #7
 8006094:	f103 0208 	add.w	r2, r3, #8
 8006098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800609c:	f8d4 b000 	ldr.w	fp, [r4]
 80060a0:	f8c8 2000 	str.w	r2, [r8]
 80060a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060ac:	9307      	str	r3, [sp, #28]
 80060ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80060b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ba:	4b9c      	ldr	r3, [pc, #624]	@ (800632c <_printf_float+0x2c8>)
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060c0:	f7fa fd5c 	bl	8000b7c <__aeabi_dcmpun>
 80060c4:	bb70      	cbnz	r0, 8006124 <_printf_float+0xc0>
 80060c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ca:	4b98      	ldr	r3, [pc, #608]	@ (800632c <_printf_float+0x2c8>)
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060d0:	f7fa fd36 	bl	8000b40 <__aeabi_dcmple>
 80060d4:	bb30      	cbnz	r0, 8006124 <_printf_float+0xc0>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2300      	movs	r3, #0
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa fd25 	bl	8000b2c <__aeabi_dcmplt>
 80060e2:	b110      	cbz	r0, 80060ea <_printf_float+0x86>
 80060e4:	232d      	movs	r3, #45	@ 0x2d
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ea:	4a91      	ldr	r2, [pc, #580]	@ (8006330 <_printf_float+0x2cc>)
 80060ec:	4b91      	ldr	r3, [pc, #580]	@ (8006334 <_printf_float+0x2d0>)
 80060ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060f2:	bf8c      	ite	hi
 80060f4:	4690      	movhi	r8, r2
 80060f6:	4698      	movls	r8, r3
 80060f8:	2303      	movs	r3, #3
 80060fa:	6123      	str	r3, [r4, #16]
 80060fc:	f02b 0304 	bic.w	r3, fp, #4
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	9700      	str	r7, [sp, #0]
 8006108:	4633      	mov	r3, r6
 800610a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800610c:	4621      	mov	r1, r4
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f9d2 	bl	80064b8 <_printf_common>
 8006114:	3001      	adds	r0, #1
 8006116:	f040 808d 	bne.w	8006234 <_printf_float+0x1d0>
 800611a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800611e:	b00d      	add	sp, #52	@ 0x34
 8006120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fd26 	bl	8000b7c <__aeabi_dcmpun>
 8006130:	b140      	cbz	r0, 8006144 <_printf_float+0xe0>
 8006132:	464b      	mov	r3, r9
 8006134:	2b00      	cmp	r3, #0
 8006136:	bfbc      	itt	lt
 8006138:	232d      	movlt	r3, #45	@ 0x2d
 800613a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800613e:	4a7e      	ldr	r2, [pc, #504]	@ (8006338 <_printf_float+0x2d4>)
 8006140:	4b7e      	ldr	r3, [pc, #504]	@ (800633c <_printf_float+0x2d8>)
 8006142:	e7d4      	b.n	80060ee <_printf_float+0x8a>
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800614a:	9206      	str	r2, [sp, #24]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	d13b      	bne.n	80061c8 <_printf_float+0x164>
 8006150:	2306      	movs	r3, #6
 8006152:	6063      	str	r3, [r4, #4]
 8006154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006158:	2300      	movs	r3, #0
 800615a:	6022      	str	r2, [r4, #0]
 800615c:	9303      	str	r3, [sp, #12]
 800615e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006164:	ab09      	add	r3, sp, #36	@ 0x24
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	6861      	ldr	r1, [r4, #4]
 800616a:	ec49 8b10 	vmov	d0, r8, r9
 800616e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006172:	4628      	mov	r0, r5
 8006174:	f7ff fed6 	bl	8005f24 <__cvt>
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800617c:	2b47      	cmp	r3, #71	@ 0x47
 800617e:	4680      	mov	r8, r0
 8006180:	d129      	bne.n	80061d6 <_printf_float+0x172>
 8006182:	1cc8      	adds	r0, r1, #3
 8006184:	db02      	blt.n	800618c <_printf_float+0x128>
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	4299      	cmp	r1, r3
 800618a:	dd41      	ble.n	8006210 <_printf_float+0x1ac>
 800618c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006190:	fa5f fa8a 	uxtb.w	sl, sl
 8006194:	3901      	subs	r1, #1
 8006196:	4652      	mov	r2, sl
 8006198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800619c:	9109      	str	r1, [sp, #36]	@ 0x24
 800619e:	f7ff ff26 	bl	8005fee <__exponent>
 80061a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061a4:	1813      	adds	r3, r2, r0
 80061a6:	2a01      	cmp	r2, #1
 80061a8:	4681      	mov	r9, r0
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	dc02      	bgt.n	80061b4 <_printf_float+0x150>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	07d2      	lsls	r2, r2, #31
 80061b2:	d501      	bpl.n	80061b8 <_printf_float+0x154>
 80061b4:	3301      	adds	r3, #1
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0a2      	beq.n	8006106 <_printf_float+0xa2>
 80061c0:	232d      	movs	r3, #45	@ 0x2d
 80061c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c6:	e79e      	b.n	8006106 <_printf_float+0xa2>
 80061c8:	9a06      	ldr	r2, [sp, #24]
 80061ca:	2a47      	cmp	r2, #71	@ 0x47
 80061cc:	d1c2      	bne.n	8006154 <_printf_float+0xf0>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1c0      	bne.n	8006154 <_printf_float+0xf0>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e7bd      	b.n	8006152 <_printf_float+0xee>
 80061d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061da:	d9db      	bls.n	8006194 <_printf_float+0x130>
 80061dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061e0:	d118      	bne.n	8006214 <_printf_float+0x1b0>
 80061e2:	2900      	cmp	r1, #0
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	dd0b      	ble.n	8006200 <_printf_float+0x19c>
 80061e8:	6121      	str	r1, [r4, #16]
 80061ea:	b913      	cbnz	r3, 80061f2 <_printf_float+0x18e>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	07d0      	lsls	r0, r2, #31
 80061f0:	d502      	bpl.n	80061f8 <_printf_float+0x194>
 80061f2:	3301      	adds	r3, #1
 80061f4:	440b      	add	r3, r1
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061fa:	f04f 0900 	mov.w	r9, #0
 80061fe:	e7db      	b.n	80061b8 <_printf_float+0x154>
 8006200:	b913      	cbnz	r3, 8006208 <_printf_float+0x1a4>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	07d2      	lsls	r2, r2, #31
 8006206:	d501      	bpl.n	800620c <_printf_float+0x1a8>
 8006208:	3302      	adds	r3, #2
 800620a:	e7f4      	b.n	80061f6 <_printf_float+0x192>
 800620c:	2301      	movs	r3, #1
 800620e:	e7f2      	b.n	80061f6 <_printf_float+0x192>
 8006210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006216:	4299      	cmp	r1, r3
 8006218:	db05      	blt.n	8006226 <_printf_float+0x1c2>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	6121      	str	r1, [r4, #16]
 800621e:	07d8      	lsls	r0, r3, #31
 8006220:	d5ea      	bpl.n	80061f8 <_printf_float+0x194>
 8006222:	1c4b      	adds	r3, r1, #1
 8006224:	e7e7      	b.n	80061f6 <_printf_float+0x192>
 8006226:	2900      	cmp	r1, #0
 8006228:	bfd4      	ite	le
 800622a:	f1c1 0202 	rsble	r2, r1, #2
 800622e:	2201      	movgt	r2, #1
 8006230:	4413      	add	r3, r2
 8006232:	e7e0      	b.n	80061f6 <_printf_float+0x192>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	055a      	lsls	r2, r3, #21
 8006238:	d407      	bmi.n	800624a <_printf_float+0x1e6>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	4642      	mov	r2, r8
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	d12b      	bne.n	80062a0 <_printf_float+0x23c>
 8006248:	e767      	b.n	800611a <_printf_float+0xb6>
 800624a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800624e:	f240 80dd 	bls.w	800640c <_printf_float+0x3a8>
 8006252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	f7fa fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 800625e:	2800      	cmp	r0, #0
 8006260:	d033      	beq.n	80062ca <_printf_float+0x266>
 8006262:	4a37      	ldr	r2, [pc, #220]	@ (8006340 <_printf_float+0x2dc>)
 8006264:	2301      	movs	r3, #1
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f af54 	beq.w	800611a <_printf_float+0xb6>
 8006272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006276:	4543      	cmp	r3, r8
 8006278:	db02      	blt.n	8006280 <_printf_float+0x21c>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	07d8      	lsls	r0, r3, #31
 800627e:	d50f      	bpl.n	80062a0 <_printf_float+0x23c>
 8006280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af45 	beq.w	800611a <_printf_float+0xb6>
 8006290:	f04f 0900 	mov.w	r9, #0
 8006294:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006298:	f104 0a1a 	add.w	sl, r4, #26
 800629c:	45c8      	cmp	r8, r9
 800629e:	dc09      	bgt.n	80062b4 <_printf_float+0x250>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	079b      	lsls	r3, r3, #30
 80062a4:	f100 8103 	bmi.w	80064ae <_printf_float+0x44a>
 80062a8:	68e0      	ldr	r0, [r4, #12]
 80062aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ac:	4298      	cmp	r0, r3
 80062ae:	bfb8      	it	lt
 80062b0:	4618      	movlt	r0, r3
 80062b2:	e734      	b.n	800611e <_printf_float+0xba>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4652      	mov	r2, sl
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	f43f af2b 	beq.w	800611a <_printf_float+0xb6>
 80062c4:	f109 0901 	add.w	r9, r9, #1
 80062c8:	e7e8      	b.n	800629c <_printf_float+0x238>
 80062ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dc39      	bgt.n	8006344 <_printf_float+0x2e0>
 80062d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006340 <_printf_float+0x2dc>)
 80062d2:	2301      	movs	r3, #1
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af1d 	beq.w	800611a <_printf_float+0xb6>
 80062e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062e4:	ea59 0303 	orrs.w	r3, r9, r3
 80062e8:	d102      	bne.n	80062f0 <_printf_float+0x28c>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07d9      	lsls	r1, r3, #31
 80062ee:	d5d7      	bpl.n	80062a0 <_printf_float+0x23c>
 80062f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af0d 	beq.w	800611a <_printf_float+0xb6>
 8006300:	f04f 0a00 	mov.w	sl, #0
 8006304:	f104 0b1a 	add.w	fp, r4, #26
 8006308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630a:	425b      	negs	r3, r3
 800630c:	4553      	cmp	r3, sl
 800630e:	dc01      	bgt.n	8006314 <_printf_float+0x2b0>
 8006310:	464b      	mov	r3, r9
 8006312:	e793      	b.n	800623c <_printf_float+0x1d8>
 8006314:	2301      	movs	r3, #1
 8006316:	465a      	mov	r2, fp
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f aefb 	beq.w	800611a <_printf_float+0xb6>
 8006324:	f10a 0a01 	add.w	sl, sl, #1
 8006328:	e7ee      	b.n	8006308 <_printf_float+0x2a4>
 800632a:	bf00      	nop
 800632c:	7fefffff 	.word	0x7fefffff
 8006330:	08008c1c 	.word	0x08008c1c
 8006334:	08008c18 	.word	0x08008c18
 8006338:	08008c24 	.word	0x08008c24
 800633c:	08008c20 	.word	0x08008c20
 8006340:	08008c28 	.word	0x08008c28
 8006344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800634a:	4553      	cmp	r3, sl
 800634c:	bfa8      	it	ge
 800634e:	4653      	movge	r3, sl
 8006350:	2b00      	cmp	r3, #0
 8006352:	4699      	mov	r9, r3
 8006354:	dc36      	bgt.n	80063c4 <_printf_float+0x360>
 8006356:	f04f 0b00 	mov.w	fp, #0
 800635a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800635e:	f104 021a 	add.w	r2, r4, #26
 8006362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006364:	9306      	str	r3, [sp, #24]
 8006366:	eba3 0309 	sub.w	r3, r3, r9
 800636a:	455b      	cmp	r3, fp
 800636c:	dc31      	bgt.n	80063d2 <_printf_float+0x36e>
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	459a      	cmp	sl, r3
 8006372:	dc3a      	bgt.n	80063ea <_printf_float+0x386>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07da      	lsls	r2, r3, #31
 8006378:	d437      	bmi.n	80063ea <_printf_float+0x386>
 800637a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637c:	ebaa 0903 	sub.w	r9, sl, r3
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	ebaa 0303 	sub.w	r3, sl, r3
 8006386:	4599      	cmp	r9, r3
 8006388:	bfa8      	it	ge
 800638a:	4699      	movge	r9, r3
 800638c:	f1b9 0f00 	cmp.w	r9, #0
 8006390:	dc33      	bgt.n	80063fa <_printf_float+0x396>
 8006392:	f04f 0800 	mov.w	r8, #0
 8006396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800639a:	f104 0b1a 	add.w	fp, r4, #26
 800639e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a0:	ebaa 0303 	sub.w	r3, sl, r3
 80063a4:	eba3 0309 	sub.w	r3, r3, r9
 80063a8:	4543      	cmp	r3, r8
 80063aa:	f77f af79 	ble.w	80062a0 <_printf_float+0x23c>
 80063ae:	2301      	movs	r3, #1
 80063b0:	465a      	mov	r2, fp
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f aeae 	beq.w	800611a <_printf_float+0xb6>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	e7ec      	b.n	800639e <_printf_float+0x33a>
 80063c4:	4642      	mov	r2, r8
 80063c6:	4631      	mov	r1, r6
 80063c8:	4628      	mov	r0, r5
 80063ca:	47b8      	blx	r7
 80063cc:	3001      	adds	r0, #1
 80063ce:	d1c2      	bne.n	8006356 <_printf_float+0x2f2>
 80063d0:	e6a3      	b.n	800611a <_printf_float+0xb6>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	9206      	str	r2, [sp, #24]
 80063da:	47b8      	blx	r7
 80063dc:	3001      	adds	r0, #1
 80063de:	f43f ae9c 	beq.w	800611a <_printf_float+0xb6>
 80063e2:	9a06      	ldr	r2, [sp, #24]
 80063e4:	f10b 0b01 	add.w	fp, fp, #1
 80063e8:	e7bb      	b.n	8006362 <_printf_float+0x2fe>
 80063ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	d1c0      	bne.n	800637a <_printf_float+0x316>
 80063f8:	e68f      	b.n	800611a <_printf_float+0xb6>
 80063fa:	9a06      	ldr	r2, [sp, #24]
 80063fc:	464b      	mov	r3, r9
 80063fe:	4442      	add	r2, r8
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	d1c3      	bne.n	8006392 <_printf_float+0x32e>
 800640a:	e686      	b.n	800611a <_printf_float+0xb6>
 800640c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006410:	f1ba 0f01 	cmp.w	sl, #1
 8006414:	dc01      	bgt.n	800641a <_printf_float+0x3b6>
 8006416:	07db      	lsls	r3, r3, #31
 8006418:	d536      	bpl.n	8006488 <_printf_float+0x424>
 800641a:	2301      	movs	r3, #1
 800641c:	4642      	mov	r2, r8
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae78 	beq.w	800611a <_printf_float+0xb6>
 800642a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae70 	beq.w	800611a <_printf_float+0xb6>
 800643a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006446:	f7fa fb67 	bl	8000b18 <__aeabi_dcmpeq>
 800644a:	b9c0      	cbnz	r0, 800647e <_printf_float+0x41a>
 800644c:	4653      	mov	r3, sl
 800644e:	f108 0201 	add.w	r2, r8, #1
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	d10c      	bne.n	8006476 <_printf_float+0x412>
 800645c:	e65d      	b.n	800611a <_printf_float+0xb6>
 800645e:	2301      	movs	r3, #1
 8006460:	465a      	mov	r2, fp
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae56 	beq.w	800611a <_printf_float+0xb6>
 800646e:	f108 0801 	add.w	r8, r8, #1
 8006472:	45d0      	cmp	r8, sl
 8006474:	dbf3      	blt.n	800645e <_printf_float+0x3fa>
 8006476:	464b      	mov	r3, r9
 8006478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800647c:	e6df      	b.n	800623e <_printf_float+0x1da>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	f104 0b1a 	add.w	fp, r4, #26
 8006486:	e7f4      	b.n	8006472 <_printf_float+0x40e>
 8006488:	2301      	movs	r3, #1
 800648a:	4642      	mov	r2, r8
 800648c:	e7e1      	b.n	8006452 <_printf_float+0x3ee>
 800648e:	2301      	movs	r3, #1
 8006490:	464a      	mov	r2, r9
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f ae3e 	beq.w	800611a <_printf_float+0xb6>
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	4543      	cmp	r3, r8
 80064aa:	dcf0      	bgt.n	800648e <_printf_float+0x42a>
 80064ac:	e6fc      	b.n	80062a8 <_printf_float+0x244>
 80064ae:	f04f 0800 	mov.w	r8, #0
 80064b2:	f104 0919 	add.w	r9, r4, #25
 80064b6:	e7f4      	b.n	80064a2 <_printf_float+0x43e>

080064b8 <_printf_common>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4616      	mov	r6, r2
 80064be:	4698      	mov	r8, r3
 80064c0:	688a      	ldr	r2, [r1, #8]
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bfb8      	it	lt
 80064cc:	4613      	movlt	r3, r2
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064d4:	4607      	mov	r7, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	b10a      	cbz	r2, 80064de <_printf_common+0x26>
 80064da:	3301      	adds	r3, #1
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	6833      	ldrmi	r3, [r6, #0]
 80064e6:	3302      	addmi	r3, #2
 80064e8:	6033      	strmi	r3, [r6, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	f015 0506 	ands.w	r5, r5, #6
 80064f0:	d106      	bne.n	8006500 <_printf_common+0x48>
 80064f2:	f104 0a19 	add.w	sl, r4, #25
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	6832      	ldr	r2, [r6, #0]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dc26      	bgt.n	800654e <_printf_common+0x96>
 8006500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	3b00      	subs	r3, #0
 8006508:	bf18      	it	ne
 800650a:	2301      	movne	r3, #1
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d42b      	bmi.n	8006568 <_printf_common+0xb0>
 8006510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006514:	4641      	mov	r1, r8
 8006516:	4638      	mov	r0, r7
 8006518:	47c8      	blx	r9
 800651a:	3001      	adds	r0, #1
 800651c:	d01e      	beq.n	800655c <_printf_common+0xa4>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	6922      	ldr	r2, [r4, #16]
 8006522:	f003 0306 	and.w	r3, r3, #6
 8006526:	2b04      	cmp	r3, #4
 8006528:	bf02      	ittt	eq
 800652a:	68e5      	ldreq	r5, [r4, #12]
 800652c:	6833      	ldreq	r3, [r6, #0]
 800652e:	1aed      	subeq	r5, r5, r3
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	bf0c      	ite	eq
 8006534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006538:	2500      	movne	r5, #0
 800653a:	4293      	cmp	r3, r2
 800653c:	bfc4      	itt	gt
 800653e:	1a9b      	subgt	r3, r3, r2
 8006540:	18ed      	addgt	r5, r5, r3
 8006542:	2600      	movs	r6, #0
 8006544:	341a      	adds	r4, #26
 8006546:	42b5      	cmp	r5, r6
 8006548:	d11a      	bne.n	8006580 <_printf_common+0xc8>
 800654a:	2000      	movs	r0, #0
 800654c:	e008      	b.n	8006560 <_printf_common+0xa8>
 800654e:	2301      	movs	r3, #1
 8006550:	4652      	mov	r2, sl
 8006552:	4641      	mov	r1, r8
 8006554:	4638      	mov	r0, r7
 8006556:	47c8      	blx	r9
 8006558:	3001      	adds	r0, #1
 800655a:	d103      	bne.n	8006564 <_printf_common+0xac>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	3501      	adds	r5, #1
 8006566:	e7c6      	b.n	80064f6 <_printf_common+0x3e>
 8006568:	18e1      	adds	r1, r4, r3
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	2030      	movs	r0, #48	@ 0x30
 800656e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006572:	4422      	add	r2, r4
 8006574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800657c:	3302      	adds	r3, #2
 800657e:	e7c7      	b.n	8006510 <_printf_common+0x58>
 8006580:	2301      	movs	r3, #1
 8006582:	4622      	mov	r2, r4
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d0e6      	beq.n	800655c <_printf_common+0xa4>
 800658e:	3601      	adds	r6, #1
 8006590:	e7d9      	b.n	8006546 <_printf_common+0x8e>
	...

08006594 <_printf_i>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	7e0f      	ldrb	r7, [r1, #24]
 800659a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800659c:	2f78      	cmp	r7, #120	@ 0x78
 800659e:	4691      	mov	r9, r2
 80065a0:	4680      	mov	r8, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	469a      	mov	sl, r3
 80065a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065aa:	d807      	bhi.n	80065bc <_printf_i+0x28>
 80065ac:	2f62      	cmp	r7, #98	@ 0x62
 80065ae:	d80a      	bhi.n	80065c6 <_printf_i+0x32>
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	f000 80d1 	beq.w	8006758 <_printf_i+0x1c4>
 80065b6:	2f58      	cmp	r7, #88	@ 0x58
 80065b8:	f000 80b8 	beq.w	800672c <_printf_i+0x198>
 80065bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065c4:	e03a      	b.n	800663c <_printf_i+0xa8>
 80065c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065ca:	2b15      	cmp	r3, #21
 80065cc:	d8f6      	bhi.n	80065bc <_printf_i+0x28>
 80065ce:	a101      	add	r1, pc, #4	@ (adr r1, 80065d4 <_printf_i+0x40>)
 80065d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	08006641 	.word	0x08006641
 80065dc:	080065bd 	.word	0x080065bd
 80065e0:	080065bd 	.word	0x080065bd
 80065e4:	080065bd 	.word	0x080065bd
 80065e8:	080065bd 	.word	0x080065bd
 80065ec:	08006641 	.word	0x08006641
 80065f0:	080065bd 	.word	0x080065bd
 80065f4:	080065bd 	.word	0x080065bd
 80065f8:	080065bd 	.word	0x080065bd
 80065fc:	080065bd 	.word	0x080065bd
 8006600:	0800673f 	.word	0x0800673f
 8006604:	0800666b 	.word	0x0800666b
 8006608:	080066f9 	.word	0x080066f9
 800660c:	080065bd 	.word	0x080065bd
 8006610:	080065bd 	.word	0x080065bd
 8006614:	08006761 	.word	0x08006761
 8006618:	080065bd 	.word	0x080065bd
 800661c:	0800666b 	.word	0x0800666b
 8006620:	080065bd 	.word	0x080065bd
 8006624:	080065bd 	.word	0x080065bd
 8006628:	08006701 	.word	0x08006701
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6032      	str	r2, [r6, #0]
 8006634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800663c:	2301      	movs	r3, #1
 800663e:	e09c      	b.n	800677a <_printf_i+0x1e6>
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	6820      	ldr	r0, [r4, #0]
 8006644:	1d19      	adds	r1, r3, #4
 8006646:	6031      	str	r1, [r6, #0]
 8006648:	0606      	lsls	r6, r0, #24
 800664a:	d501      	bpl.n	8006650 <_printf_i+0xbc>
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	e003      	b.n	8006658 <_printf_i+0xc4>
 8006650:	0645      	lsls	r5, r0, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0xb8>
 8006654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006658:	2d00      	cmp	r5, #0
 800665a:	da03      	bge.n	8006664 <_printf_i+0xd0>
 800665c:	232d      	movs	r3, #45	@ 0x2d
 800665e:	426d      	negs	r5, r5
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006664:	4858      	ldr	r0, [pc, #352]	@ (80067c8 <_printf_i+0x234>)
 8006666:	230a      	movs	r3, #10
 8006668:	e011      	b.n	800668e <_printf_i+0xfa>
 800666a:	6821      	ldr	r1, [r4, #0]
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	0608      	lsls	r0, r1, #24
 8006670:	f853 5b04 	ldr.w	r5, [r3], #4
 8006674:	d402      	bmi.n	800667c <_printf_i+0xe8>
 8006676:	0649      	lsls	r1, r1, #25
 8006678:	bf48      	it	mi
 800667a:	b2ad      	uxthmi	r5, r5
 800667c:	2f6f      	cmp	r7, #111	@ 0x6f
 800667e:	4852      	ldr	r0, [pc, #328]	@ (80067c8 <_printf_i+0x234>)
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	bf14      	ite	ne
 8006684:	230a      	movne	r3, #10
 8006686:	2308      	moveq	r3, #8
 8006688:	2100      	movs	r1, #0
 800668a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800668e:	6866      	ldr	r6, [r4, #4]
 8006690:	60a6      	str	r6, [r4, #8]
 8006692:	2e00      	cmp	r6, #0
 8006694:	db05      	blt.n	80066a2 <_printf_i+0x10e>
 8006696:	6821      	ldr	r1, [r4, #0]
 8006698:	432e      	orrs	r6, r5
 800669a:	f021 0104 	bic.w	r1, r1, #4
 800669e:	6021      	str	r1, [r4, #0]
 80066a0:	d04b      	beq.n	800673a <_printf_i+0x1a6>
 80066a2:	4616      	mov	r6, r2
 80066a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80066a8:	fb03 5711 	mls	r7, r3, r1, r5
 80066ac:	5dc7      	ldrb	r7, [r0, r7]
 80066ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066b2:	462f      	mov	r7, r5
 80066b4:	42bb      	cmp	r3, r7
 80066b6:	460d      	mov	r5, r1
 80066b8:	d9f4      	bls.n	80066a4 <_printf_i+0x110>
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d10b      	bne.n	80066d6 <_printf_i+0x142>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	07df      	lsls	r7, r3, #31
 80066c2:	d508      	bpl.n	80066d6 <_printf_i+0x142>
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	6861      	ldr	r1, [r4, #4]
 80066c8:	4299      	cmp	r1, r3
 80066ca:	bfde      	ittt	le
 80066cc:	2330      	movle	r3, #48	@ 0x30
 80066ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066d6:	1b92      	subs	r2, r2, r6
 80066d8:	6122      	str	r2, [r4, #16]
 80066da:	f8cd a000 	str.w	sl, [sp]
 80066de:	464b      	mov	r3, r9
 80066e0:	aa03      	add	r2, sp, #12
 80066e2:	4621      	mov	r1, r4
 80066e4:	4640      	mov	r0, r8
 80066e6:	f7ff fee7 	bl	80064b8 <_printf_common>
 80066ea:	3001      	adds	r0, #1
 80066ec:	d14a      	bne.n	8006784 <_printf_i+0x1f0>
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066f2:	b004      	add	sp, #16
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	f043 0320 	orr.w	r3, r3, #32
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	4832      	ldr	r0, [pc, #200]	@ (80067cc <_printf_i+0x238>)
 8006702:	2778      	movs	r7, #120	@ 0x78
 8006704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	6831      	ldr	r1, [r6, #0]
 800670c:	061f      	lsls	r7, r3, #24
 800670e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006712:	d402      	bmi.n	800671a <_printf_i+0x186>
 8006714:	065f      	lsls	r7, r3, #25
 8006716:	bf48      	it	mi
 8006718:	b2ad      	uxthmi	r5, r5
 800671a:	6031      	str	r1, [r6, #0]
 800671c:	07d9      	lsls	r1, r3, #31
 800671e:	bf44      	itt	mi
 8006720:	f043 0320 	orrmi.w	r3, r3, #32
 8006724:	6023      	strmi	r3, [r4, #0]
 8006726:	b11d      	cbz	r5, 8006730 <_printf_i+0x19c>
 8006728:	2310      	movs	r3, #16
 800672a:	e7ad      	b.n	8006688 <_printf_i+0xf4>
 800672c:	4826      	ldr	r0, [pc, #152]	@ (80067c8 <_printf_i+0x234>)
 800672e:	e7e9      	b.n	8006704 <_printf_i+0x170>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	e7f6      	b.n	8006728 <_printf_i+0x194>
 800673a:	4616      	mov	r6, r2
 800673c:	e7bd      	b.n	80066ba <_printf_i+0x126>
 800673e:	6833      	ldr	r3, [r6, #0]
 8006740:	6825      	ldr	r5, [r4, #0]
 8006742:	6961      	ldr	r1, [r4, #20]
 8006744:	1d18      	adds	r0, r3, #4
 8006746:	6030      	str	r0, [r6, #0]
 8006748:	062e      	lsls	r6, r5, #24
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	d501      	bpl.n	8006752 <_printf_i+0x1be>
 800674e:	6019      	str	r1, [r3, #0]
 8006750:	e002      	b.n	8006758 <_printf_i+0x1c4>
 8006752:	0668      	lsls	r0, r5, #25
 8006754:	d5fb      	bpl.n	800674e <_printf_i+0x1ba>
 8006756:	8019      	strh	r1, [r3, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	4616      	mov	r6, r2
 800675e:	e7bc      	b.n	80066da <_printf_i+0x146>
 8006760:	6833      	ldr	r3, [r6, #0]
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	6032      	str	r2, [r6, #0]
 8006766:	681e      	ldr	r6, [r3, #0]
 8006768:	6862      	ldr	r2, [r4, #4]
 800676a:	2100      	movs	r1, #0
 800676c:	4630      	mov	r0, r6
 800676e:	f7f9 fd57 	bl	8000220 <memchr>
 8006772:	b108      	cbz	r0, 8006778 <_printf_i+0x1e4>
 8006774:	1b80      	subs	r0, r0, r6
 8006776:	6060      	str	r0, [r4, #4]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	2300      	movs	r3, #0
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006782:	e7aa      	b.n	80066da <_printf_i+0x146>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	4632      	mov	r2, r6
 8006788:	4649      	mov	r1, r9
 800678a:	4640      	mov	r0, r8
 800678c:	47d0      	blx	sl
 800678e:	3001      	adds	r0, #1
 8006790:	d0ad      	beq.n	80066ee <_printf_i+0x15a>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	079b      	lsls	r3, r3, #30
 8006796:	d413      	bmi.n	80067c0 <_printf_i+0x22c>
 8006798:	68e0      	ldr	r0, [r4, #12]
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	4298      	cmp	r0, r3
 800679e:	bfb8      	it	lt
 80067a0:	4618      	movlt	r0, r3
 80067a2:	e7a6      	b.n	80066f2 <_printf_i+0x15e>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4632      	mov	r2, r6
 80067a8:	4649      	mov	r1, r9
 80067aa:	4640      	mov	r0, r8
 80067ac:	47d0      	blx	sl
 80067ae:	3001      	adds	r0, #1
 80067b0:	d09d      	beq.n	80066ee <_printf_i+0x15a>
 80067b2:	3501      	adds	r5, #1
 80067b4:	68e3      	ldr	r3, [r4, #12]
 80067b6:	9903      	ldr	r1, [sp, #12]
 80067b8:	1a5b      	subs	r3, r3, r1
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	dcf2      	bgt.n	80067a4 <_printf_i+0x210>
 80067be:	e7eb      	b.n	8006798 <_printf_i+0x204>
 80067c0:	2500      	movs	r5, #0
 80067c2:	f104 0619 	add.w	r6, r4, #25
 80067c6:	e7f5      	b.n	80067b4 <_printf_i+0x220>
 80067c8:	08008c2a 	.word	0x08008c2a
 80067cc:	08008c3b 	.word	0x08008c3b

080067d0 <std>:
 80067d0:	2300      	movs	r3, #0
 80067d2:	b510      	push	{r4, lr}
 80067d4:	4604      	mov	r4, r0
 80067d6:	e9c0 3300 	strd	r3, r3, [r0]
 80067da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067de:	6083      	str	r3, [r0, #8]
 80067e0:	8181      	strh	r1, [r0, #12]
 80067e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80067e4:	81c2      	strh	r2, [r0, #14]
 80067e6:	6183      	str	r3, [r0, #24]
 80067e8:	4619      	mov	r1, r3
 80067ea:	2208      	movs	r2, #8
 80067ec:	305c      	adds	r0, #92	@ 0x5c
 80067ee:	f000 f916 	bl	8006a1e <memset>
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <std+0x58>)
 80067f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <std+0x5c>)
 80067f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <std+0x60>)
 80067fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <std+0x64>)
 8006800:	6323      	str	r3, [r4, #48]	@ 0x30
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <std+0x68>)
 8006804:	6224      	str	r4, [r4, #32]
 8006806:	429c      	cmp	r4, r3
 8006808:	d006      	beq.n	8006818 <std+0x48>
 800680a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800680e:	4294      	cmp	r4, r2
 8006810:	d002      	beq.n	8006818 <std+0x48>
 8006812:	33d0      	adds	r3, #208	@ 0xd0
 8006814:	429c      	cmp	r4, r3
 8006816:	d105      	bne.n	8006824 <std+0x54>
 8006818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f000 b97a 	b.w	8006b18 <__retarget_lock_init_recursive>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	08006999 	.word	0x08006999
 800682c:	080069bb 	.word	0x080069bb
 8006830:	080069f3 	.word	0x080069f3
 8006834:	08006a17 	.word	0x08006a17
 8006838:	20000560 	.word	0x20000560

0800683c <stdio_exit_handler>:
 800683c:	4a02      	ldr	r2, [pc, #8]	@ (8006848 <stdio_exit_handler+0xc>)
 800683e:	4903      	ldr	r1, [pc, #12]	@ (800684c <stdio_exit_handler+0x10>)
 8006840:	4803      	ldr	r0, [pc, #12]	@ (8006850 <stdio_exit_handler+0x14>)
 8006842:	f000 b869 	b.w	8006918 <_fwalk_sglue>
 8006846:	bf00      	nop
 8006848:	20000024 	.word	0x20000024
 800684c:	0800847d 	.word	0x0800847d
 8006850:	20000034 	.word	0x20000034

08006854 <cleanup_stdio>:
 8006854:	6841      	ldr	r1, [r0, #4]
 8006856:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <cleanup_stdio+0x34>)
 8006858:	4299      	cmp	r1, r3
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	d001      	beq.n	8006864 <cleanup_stdio+0x10>
 8006860:	f001 fe0c 	bl	800847c <_fflush_r>
 8006864:	68a1      	ldr	r1, [r4, #8]
 8006866:	4b09      	ldr	r3, [pc, #36]	@ (800688c <cleanup_stdio+0x38>)
 8006868:	4299      	cmp	r1, r3
 800686a:	d002      	beq.n	8006872 <cleanup_stdio+0x1e>
 800686c:	4620      	mov	r0, r4
 800686e:	f001 fe05 	bl	800847c <_fflush_r>
 8006872:	68e1      	ldr	r1, [r4, #12]
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <cleanup_stdio+0x3c>)
 8006876:	4299      	cmp	r1, r3
 8006878:	d004      	beq.n	8006884 <cleanup_stdio+0x30>
 800687a:	4620      	mov	r0, r4
 800687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006880:	f001 bdfc 	b.w	800847c <_fflush_r>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	bf00      	nop
 8006888:	20000560 	.word	0x20000560
 800688c:	200005c8 	.word	0x200005c8
 8006890:	20000630 	.word	0x20000630

08006894 <global_stdio_init.part.0>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <global_stdio_init.part.0+0x30>)
 8006898:	4c0b      	ldr	r4, [pc, #44]	@ (80068c8 <global_stdio_init.part.0+0x34>)
 800689a:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <global_stdio_init.part.0+0x38>)
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	4620      	mov	r0, r4
 80068a0:	2200      	movs	r2, #0
 80068a2:	2104      	movs	r1, #4
 80068a4:	f7ff ff94 	bl	80067d0 <std>
 80068a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ac:	2201      	movs	r2, #1
 80068ae:	2109      	movs	r1, #9
 80068b0:	f7ff ff8e 	bl	80067d0 <std>
 80068b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068b8:	2202      	movs	r2, #2
 80068ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068be:	2112      	movs	r1, #18
 80068c0:	f7ff bf86 	b.w	80067d0 <std>
 80068c4:	20000698 	.word	0x20000698
 80068c8:	20000560 	.word	0x20000560
 80068cc:	0800683d 	.word	0x0800683d

080068d0 <__sfp_lock_acquire>:
 80068d0:	4801      	ldr	r0, [pc, #4]	@ (80068d8 <__sfp_lock_acquire+0x8>)
 80068d2:	f000 b922 	b.w	8006b1a <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	200006a1 	.word	0x200006a1

080068dc <__sfp_lock_release>:
 80068dc:	4801      	ldr	r0, [pc, #4]	@ (80068e4 <__sfp_lock_release+0x8>)
 80068de:	f000 b91d 	b.w	8006b1c <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	200006a1 	.word	0x200006a1

080068e8 <__sinit>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4604      	mov	r4, r0
 80068ec:	f7ff fff0 	bl	80068d0 <__sfp_lock_acquire>
 80068f0:	6a23      	ldr	r3, [r4, #32]
 80068f2:	b11b      	cbz	r3, 80068fc <__sinit+0x14>
 80068f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f8:	f7ff bff0 	b.w	80068dc <__sfp_lock_release>
 80068fc:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <__sinit+0x28>)
 80068fe:	6223      	str	r3, [r4, #32]
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <__sinit+0x2c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f5      	bne.n	80068f4 <__sinit+0xc>
 8006908:	f7ff ffc4 	bl	8006894 <global_stdio_init.part.0>
 800690c:	e7f2      	b.n	80068f4 <__sinit+0xc>
 800690e:	bf00      	nop
 8006910:	08006855 	.word	0x08006855
 8006914:	20000698 	.word	0x20000698

08006918 <_fwalk_sglue>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4607      	mov	r7, r0
 800691e:	4688      	mov	r8, r1
 8006920:	4614      	mov	r4, r2
 8006922:	2600      	movs	r6, #0
 8006924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006928:	f1b9 0901 	subs.w	r9, r9, #1
 800692c:	d505      	bpl.n	800693a <_fwalk_sglue+0x22>
 800692e:	6824      	ldr	r4, [r4, #0]
 8006930:	2c00      	cmp	r4, #0
 8006932:	d1f7      	bne.n	8006924 <_fwalk_sglue+0xc>
 8006934:	4630      	mov	r0, r6
 8006936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d907      	bls.n	8006950 <_fwalk_sglue+0x38>
 8006940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006944:	3301      	adds	r3, #1
 8006946:	d003      	beq.n	8006950 <_fwalk_sglue+0x38>
 8006948:	4629      	mov	r1, r5
 800694a:	4638      	mov	r0, r7
 800694c:	47c0      	blx	r8
 800694e:	4306      	orrs	r6, r0
 8006950:	3568      	adds	r5, #104	@ 0x68
 8006952:	e7e9      	b.n	8006928 <_fwalk_sglue+0x10>

08006954 <siprintf>:
 8006954:	b40e      	push	{r1, r2, r3}
 8006956:	b510      	push	{r4, lr}
 8006958:	b09d      	sub	sp, #116	@ 0x74
 800695a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	9006      	str	r0, [sp, #24]
 8006960:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006964:	480a      	ldr	r0, [pc, #40]	@ (8006990 <siprintf+0x3c>)
 8006966:	9107      	str	r1, [sp, #28]
 8006968:	9104      	str	r1, [sp, #16]
 800696a:	490a      	ldr	r1, [pc, #40]	@ (8006994 <siprintf+0x40>)
 800696c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006970:	9105      	str	r1, [sp, #20]
 8006972:	2400      	movs	r4, #0
 8006974:	a902      	add	r1, sp, #8
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800697c:	f001 fbfe 	bl	800817c <_svfiprintf_r>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	701c      	strb	r4, [r3, #0]
 8006984:	b01d      	add	sp, #116	@ 0x74
 8006986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698a:	b003      	add	sp, #12
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000030 	.word	0x20000030
 8006994:	ffff0208 	.word	0xffff0208

08006998 <__sread>:
 8006998:	b510      	push	{r4, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	f000 f86c 	bl	8006a7c <_read_r>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	bfab      	itete	ge
 80069a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069aa:	89a3      	ldrhlt	r3, [r4, #12]
 80069ac:	181b      	addge	r3, r3, r0
 80069ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069b2:	bfac      	ite	ge
 80069b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069b6:	81a3      	strhlt	r3, [r4, #12]
 80069b8:	bd10      	pop	{r4, pc}

080069ba <__swrite>:
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	461f      	mov	r7, r3
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	05db      	lsls	r3, r3, #23
 80069c4:	4605      	mov	r5, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	4616      	mov	r6, r2
 80069ca:	d505      	bpl.n	80069d8 <__swrite+0x1e>
 80069cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d0:	2302      	movs	r3, #2
 80069d2:	2200      	movs	r2, #0
 80069d4:	f000 f840 	bl	8006a58 <_lseek_r>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	4632      	mov	r2, r6
 80069e6:	463b      	mov	r3, r7
 80069e8:	4628      	mov	r0, r5
 80069ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	f000 b857 	b.w	8006aa0 <_write_r>

080069f2 <__sseek>:
 80069f2:	b510      	push	{r4, lr}
 80069f4:	460c      	mov	r4, r1
 80069f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fa:	f000 f82d 	bl	8006a58 <_lseek_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	bf15      	itete	ne
 8006a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a0e:	81a3      	strheq	r3, [r4, #12]
 8006a10:	bf18      	it	ne
 8006a12:	81a3      	strhne	r3, [r4, #12]
 8006a14:	bd10      	pop	{r4, pc}

08006a16 <__sclose>:
 8006a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1a:	f000 b80d 	b.w	8006a38 <_close_r>

08006a1e <memset>:
 8006a1e:	4402      	add	r2, r0
 8006a20:	4603      	mov	r3, r0
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d100      	bne.n	8006a28 <memset+0xa>
 8006a26:	4770      	bx	lr
 8006a28:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2c:	e7f9      	b.n	8006a22 <memset+0x4>
	...

08006a30 <_localeconv_r>:
 8006a30:	4800      	ldr	r0, [pc, #0]	@ (8006a34 <_localeconv_r+0x4>)
 8006a32:	4770      	bx	lr
 8006a34:	20000170 	.word	0x20000170

08006a38 <_close_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d06      	ldr	r5, [pc, #24]	@ (8006a54 <_close_r+0x1c>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	f7fb f856 	bl	8001af4 <_close>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_close_r+0x1a>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_close_r+0x1a>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	2000069c 	.word	0x2000069c

08006a58 <_lseek_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d07      	ldr	r5, [pc, #28]	@ (8006a78 <_lseek_r+0x20>)
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	4608      	mov	r0, r1
 8006a60:	4611      	mov	r1, r2
 8006a62:	2200      	movs	r2, #0
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f7fb f86b 	bl	8001b42 <_lseek>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_lseek_r+0x1e>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_lseek_r+0x1e>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	2000069c 	.word	0x2000069c

08006a7c <_read_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4d07      	ldr	r5, [pc, #28]	@ (8006a9c <_read_r+0x20>)
 8006a80:	4604      	mov	r4, r0
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	2200      	movs	r2, #0
 8006a88:	602a      	str	r2, [r5, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f7fa fff9 	bl	8001a82 <_read>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_read_r+0x1e>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_read_r+0x1e>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	2000069c 	.word	0x2000069c

08006aa0 <_write_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d07      	ldr	r5, [pc, #28]	@ (8006ac0 <_write_r+0x20>)
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	602a      	str	r2, [r5, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7fb f804 	bl	8001abc <_write>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_write_r+0x1e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_write_r+0x1e>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	2000069c 	.word	0x2000069c

08006ac4 <__errno>:
 8006ac4:	4b01      	ldr	r3, [pc, #4]	@ (8006acc <__errno+0x8>)
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000030 	.word	0x20000030

08006ad0 <__libc_init_array>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8006b08 <__libc_init_array+0x38>)
 8006ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8006b0c <__libc_init_array+0x3c>)
 8006ad6:	1b64      	subs	r4, r4, r5
 8006ad8:	10a4      	asrs	r4, r4, #2
 8006ada:	2600      	movs	r6, #0
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	d109      	bne.n	8006af4 <__libc_init_array+0x24>
 8006ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8006b10 <__libc_init_array+0x40>)
 8006ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8006b14 <__libc_init_array+0x44>)
 8006ae4:	f002 f868 	bl	8008bb8 <_init>
 8006ae8:	1b64      	subs	r4, r4, r5
 8006aea:	10a4      	asrs	r4, r4, #2
 8006aec:	2600      	movs	r6, #0
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	d105      	bne.n	8006afe <__libc_init_array+0x2e>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af8:	4798      	blx	r3
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7ee      	b.n	8006adc <__libc_init_array+0xc>
 8006afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b02:	4798      	blx	r3
 8006b04:	3601      	adds	r6, #1
 8006b06:	e7f2      	b.n	8006aee <__libc_init_array+0x1e>
 8006b08:	08008f94 	.word	0x08008f94
 8006b0c:	08008f94 	.word	0x08008f94
 8006b10:	08008f94 	.word	0x08008f94
 8006b14:	08008f98 	.word	0x08008f98

08006b18 <__retarget_lock_init_recursive>:
 8006b18:	4770      	bx	lr

08006b1a <__retarget_lock_acquire_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <__retarget_lock_release_recursive>:
 8006b1c:	4770      	bx	lr

08006b1e <quorem>:
 8006b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b22:	6903      	ldr	r3, [r0, #16]
 8006b24:	690c      	ldr	r4, [r1, #16]
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	4607      	mov	r7, r0
 8006b2a:	db7e      	blt.n	8006c2a <quorem+0x10c>
 8006b2c:	3c01      	subs	r4, #1
 8006b2e:	f101 0814 	add.w	r8, r1, #20
 8006b32:	00a3      	lsls	r3, r4, #2
 8006b34:	f100 0514 	add.w	r5, r0, #20
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b54:	d32e      	bcc.n	8006bb4 <quorem+0x96>
 8006b56:	f04f 0a00 	mov.w	sl, #0
 8006b5a:	46c4      	mov	ip, r8
 8006b5c:	46ae      	mov	lr, r5
 8006b5e:	46d3      	mov	fp, sl
 8006b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b64:	b298      	uxth	r0, r3
 8006b66:	fb06 a000 	mla	r0, r6, r0, sl
 8006b6a:	0c02      	lsrs	r2, r0, #16
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8006b72:	f8de 2000 	ldr.w	r2, [lr]
 8006b76:	b280      	uxth	r0, r0
 8006b78:	b292      	uxth	r2, r2
 8006b7a:	1a12      	subs	r2, r2, r0
 8006b7c:	445a      	add	r2, fp
 8006b7e:	f8de 0000 	ldr.w	r0, [lr]
 8006b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b90:	b292      	uxth	r2, r2
 8006b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b96:	45e1      	cmp	r9, ip
 8006b98:	f84e 2b04 	str.w	r2, [lr], #4
 8006b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ba0:	d2de      	bcs.n	8006b60 <quorem+0x42>
 8006ba2:	9b00      	ldr	r3, [sp, #0]
 8006ba4:	58eb      	ldr	r3, [r5, r3]
 8006ba6:	b92b      	cbnz	r3, 8006bb4 <quorem+0x96>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	3b04      	subs	r3, #4
 8006bac:	429d      	cmp	r5, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	d32f      	bcc.n	8006c12 <quorem+0xf4>
 8006bb2:	613c      	str	r4, [r7, #16]
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f001 f97d 	bl	8007eb4 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	db25      	blt.n	8006c0a <quorem+0xec>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8006bca:	fa1f fe82 	uxth.w	lr, r2
 8006bce:	fa1f f38c 	uxth.w	r3, ip
 8006bd2:	eba3 030e 	sub.w	r3, r3, lr
 8006bd6:	4403      	add	r3, r0
 8006bd8:	0c12      	lsrs	r2, r2, #16
 8006bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006be8:	45c1      	cmp	r9, r8
 8006bea:	f841 3b04 	str.w	r3, [r1], #4
 8006bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bf2:	d2e6      	bcs.n	8006bc2 <quorem+0xa4>
 8006bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bfc:	b922      	cbnz	r2, 8006c08 <quorem+0xea>
 8006bfe:	3b04      	subs	r3, #4
 8006c00:	429d      	cmp	r5, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	d30b      	bcc.n	8006c1e <quorem+0x100>
 8006c06:	613c      	str	r4, [r7, #16]
 8006c08:	3601      	adds	r6, #1
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	b003      	add	sp, #12
 8006c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	d1cb      	bne.n	8006bb2 <quorem+0x94>
 8006c1a:	3c01      	subs	r4, #1
 8006c1c:	e7c6      	b.n	8006bac <quorem+0x8e>
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1ef      	bne.n	8006c06 <quorem+0xe8>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	e7ea      	b.n	8006c00 <quorem+0xe2>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e7ee      	b.n	8006c0c <quorem+0xee>
	...

08006c30 <_dtoa_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	69c7      	ldr	r7, [r0, #28]
 8006c36:	b097      	sub	sp, #92	@ 0x5c
 8006c38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c3c:	ec55 4b10 	vmov	r4, r5, d0
 8006c40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006c42:	9107      	str	r1, [sp, #28]
 8006c44:	4681      	mov	r9, r0
 8006c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c4a:	b97f      	cbnz	r7, 8006c6c <_dtoa_r+0x3c>
 8006c4c:	2010      	movs	r0, #16
 8006c4e:	f000 fe09 	bl	8007864 <malloc>
 8006c52:	4602      	mov	r2, r0
 8006c54:	f8c9 001c 	str.w	r0, [r9, #28]
 8006c58:	b920      	cbnz	r0, 8006c64 <_dtoa_r+0x34>
 8006c5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006f00 <_dtoa_r+0x2d0>)
 8006c5c:	21ef      	movs	r1, #239	@ 0xef
 8006c5e:	48a9      	ldr	r0, [pc, #676]	@ (8006f04 <_dtoa_r+0x2d4>)
 8006c60:	f001 fc6c 	bl	800853c <__assert_func>
 8006c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c68:	6007      	str	r7, [r0, #0]
 8006c6a:	60c7      	str	r7, [r0, #12]
 8006c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c70:	6819      	ldr	r1, [r3, #0]
 8006c72:	b159      	cbz	r1, 8006c8c <_dtoa_r+0x5c>
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	604a      	str	r2, [r1, #4]
 8006c78:	2301      	movs	r3, #1
 8006c7a:	4093      	lsls	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
 8006c7e:	4648      	mov	r0, r9
 8006c80:	f000 fee6 	bl	8007a50 <_Bfree>
 8006c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	1e2b      	subs	r3, r5, #0
 8006c8e:	bfb9      	ittee	lt
 8006c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c94:	9305      	strlt	r3, [sp, #20]
 8006c96:	2300      	movge	r3, #0
 8006c98:	6033      	strge	r3, [r6, #0]
 8006c9a:	9f05      	ldr	r7, [sp, #20]
 8006c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006f08 <_dtoa_r+0x2d8>)
 8006c9e:	bfbc      	itt	lt
 8006ca0:	2201      	movlt	r2, #1
 8006ca2:	6032      	strlt	r2, [r6, #0]
 8006ca4:	43bb      	bics	r3, r7
 8006ca6:	d112      	bne.n	8006cce <_dtoa_r+0x9e>
 8006ca8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cb4:	4323      	orrs	r3, r4
 8006cb6:	f000 855a 	beq.w	800776e <_dtoa_r+0xb3e>
 8006cba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006f1c <_dtoa_r+0x2ec>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 855c 	beq.w	800777e <_dtoa_r+0xb4e>
 8006cc6:	f10a 0303 	add.w	r3, sl, #3
 8006cca:	f000 bd56 	b.w	800777a <_dtoa_r+0xb4a>
 8006cce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	ec51 0b17 	vmov	r0, r1, d7
 8006cd8:	2300      	movs	r3, #0
 8006cda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006cde:	f7f9 ff1b 	bl	8000b18 <__aeabi_dcmpeq>
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	b158      	cbz	r0, 8006cfe <_dtoa_r+0xce>
 8006ce6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ce8:	2301      	movs	r3, #1
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cee:	b113      	cbz	r3, 8006cf6 <_dtoa_r+0xc6>
 8006cf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006cf2:	4b86      	ldr	r3, [pc, #536]	@ (8006f0c <_dtoa_r+0x2dc>)
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006f20 <_dtoa_r+0x2f0>
 8006cfa:	f000 bd40 	b.w	800777e <_dtoa_r+0xb4e>
 8006cfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006d02:	aa14      	add	r2, sp, #80	@ 0x50
 8006d04:	a915      	add	r1, sp, #84	@ 0x54
 8006d06:	4648      	mov	r0, r9
 8006d08:	f001 f984 	bl	8008014 <__d2b>
 8006d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d10:	9002      	str	r0, [sp, #8]
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d078      	beq.n	8006e08 <_dtoa_r+0x1d8>
 8006d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d30:	4619      	mov	r1, r3
 8006d32:	2200      	movs	r2, #0
 8006d34:	4b76      	ldr	r3, [pc, #472]	@ (8006f10 <_dtoa_r+0x2e0>)
 8006d36:	f7f9 facf 	bl	80002d8 <__aeabi_dsub>
 8006d3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ee8 <_dtoa_r+0x2b8>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f7f9 fc82 	bl	8000648 <__aeabi_dmul>
 8006d44:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ef0 <_dtoa_r+0x2c0>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fac7 	bl	80002dc <__adddf3>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	460d      	mov	r5, r1
 8006d54:	f7f9 fc0e 	bl	8000574 <__aeabi_i2d>
 8006d58:	a367      	add	r3, pc, #412	@ (adr r3, 8006ef8 <_dtoa_r+0x2c8>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fc73 	bl	8000648 <__aeabi_dmul>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 fab7 	bl	80002dc <__adddf3>
 8006d6e:	4604      	mov	r4, r0
 8006d70:	460d      	mov	r5, r1
 8006d72:	f7f9 ff19 	bl	8000ba8 <__aeabi_d2iz>
 8006d76:	2200      	movs	r2, #0
 8006d78:	4607      	mov	r7, r0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fed4 	bl	8000b2c <__aeabi_dcmplt>
 8006d84:	b140      	cbz	r0, 8006d98 <_dtoa_r+0x168>
 8006d86:	4638      	mov	r0, r7
 8006d88:	f7f9 fbf4 	bl	8000574 <__aeabi_i2d>
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	462b      	mov	r3, r5
 8006d90:	f7f9 fec2 	bl	8000b18 <__aeabi_dcmpeq>
 8006d94:	b900      	cbnz	r0, 8006d98 <_dtoa_r+0x168>
 8006d96:	3f01      	subs	r7, #1
 8006d98:	2f16      	cmp	r7, #22
 8006d9a:	d852      	bhi.n	8006e42 <_dtoa_r+0x212>
 8006d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006f14 <_dtoa_r+0x2e4>)
 8006d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006daa:	f7f9 febf 	bl	8000b2c <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d049      	beq.n	8006e46 <_dtoa_r+0x216>
 8006db2:	3f01      	subs	r7, #1
 8006db4:	2300      	movs	r3, #0
 8006db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006db8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dba:	1b9b      	subs	r3, r3, r6
 8006dbc:	1e5a      	subs	r2, r3, #1
 8006dbe:	bf45      	ittet	mi
 8006dc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006dc4:	9300      	strmi	r3, [sp, #0]
 8006dc6:	2300      	movpl	r3, #0
 8006dc8:	2300      	movmi	r3, #0
 8006dca:	9206      	str	r2, [sp, #24]
 8006dcc:	bf54      	ite	pl
 8006dce:	9300      	strpl	r3, [sp, #0]
 8006dd0:	9306      	strmi	r3, [sp, #24]
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	db39      	blt.n	8006e4a <_dtoa_r+0x21a>
 8006dd6:	9b06      	ldr	r3, [sp, #24]
 8006dd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006dda:	443b      	add	r3, r7
 8006ddc:	9306      	str	r3, [sp, #24]
 8006dde:	2300      	movs	r3, #0
 8006de0:	9308      	str	r3, [sp, #32]
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d863      	bhi.n	8006eb0 <_dtoa_r+0x280>
 8006de8:	2b05      	cmp	r3, #5
 8006dea:	bfc4      	itt	gt
 8006dec:	3b04      	subgt	r3, #4
 8006dee:	9307      	strgt	r3, [sp, #28]
 8006df0:	9b07      	ldr	r3, [sp, #28]
 8006df2:	f1a3 0302 	sub.w	r3, r3, #2
 8006df6:	bfcc      	ite	gt
 8006df8:	2400      	movgt	r4, #0
 8006dfa:	2401      	movle	r4, #1
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d863      	bhi.n	8006ec8 <_dtoa_r+0x298>
 8006e00:	e8df f003 	tbb	[pc, r3]
 8006e04:	2b375452 	.word	0x2b375452
 8006e08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e0c:	441e      	add	r6, r3
 8006e0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	bfc1      	itttt	gt
 8006e16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e1a:	409f      	lslgt	r7, r3
 8006e1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e24:	bfd6      	itet	le
 8006e26:	f1c3 0320 	rsble	r3, r3, #32
 8006e2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006e32:	f7f9 fb8f 	bl	8000554 <__aeabi_ui2d>
 8006e36:	2201      	movs	r2, #1
 8006e38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e3c:	3e01      	subs	r6, #1
 8006e3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e40:	e776      	b.n	8006d30 <_dtoa_r+0x100>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e7b7      	b.n	8006db6 <_dtoa_r+0x186>
 8006e46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006e48:	e7b6      	b.n	8006db8 <_dtoa_r+0x188>
 8006e4a:	9b00      	ldr	r3, [sp, #0]
 8006e4c:	1bdb      	subs	r3, r3, r7
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	427b      	negs	r3, r7
 8006e52:	9308      	str	r3, [sp, #32]
 8006e54:	2300      	movs	r3, #0
 8006e56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e58:	e7c3      	b.n	8006de2 <_dtoa_r+0x1b2>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e60:	eb07 0b03 	add.w	fp, r7, r3
 8006e64:	f10b 0301 	add.w	r3, fp, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	9303      	str	r3, [sp, #12]
 8006e6c:	bfb8      	it	lt
 8006e6e:	2301      	movlt	r3, #1
 8006e70:	e006      	b.n	8006e80 <_dtoa_r+0x250>
 8006e72:	2301      	movs	r3, #1
 8006e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dd28      	ble.n	8006ece <_dtoa_r+0x29e>
 8006e7c:	469b      	mov	fp, r3
 8006e7e:	9303      	str	r3, [sp, #12]
 8006e80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006e84:	2100      	movs	r1, #0
 8006e86:	2204      	movs	r2, #4
 8006e88:	f102 0514 	add.w	r5, r2, #20
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	d926      	bls.n	8006ede <_dtoa_r+0x2ae>
 8006e90:	6041      	str	r1, [r0, #4]
 8006e92:	4648      	mov	r0, r9
 8006e94:	f000 fd9c 	bl	80079d0 <_Balloc>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d142      	bne.n	8006f24 <_dtoa_r+0x2f4>
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <_dtoa_r+0x2e8>)
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ea6:	e6da      	b.n	8006c5e <_dtoa_r+0x2e>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e7e3      	b.n	8006e74 <_dtoa_r+0x244>
 8006eac:	2300      	movs	r3, #0
 8006eae:	e7d5      	b.n	8006e5c <_dtoa_r+0x22c>
 8006eb0:	2401      	movs	r4, #1
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006eb8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ec2:	2312      	movs	r3, #18
 8006ec4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ec6:	e7db      	b.n	8006e80 <_dtoa_r+0x250>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ecc:	e7f4      	b.n	8006eb8 <_dtoa_r+0x288>
 8006ece:	f04f 0b01 	mov.w	fp, #1
 8006ed2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ed6:	465b      	mov	r3, fp
 8006ed8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006edc:	e7d0      	b.n	8006e80 <_dtoa_r+0x250>
 8006ede:	3101      	adds	r1, #1
 8006ee0:	0052      	lsls	r2, r2, #1
 8006ee2:	e7d1      	b.n	8006e88 <_dtoa_r+0x258>
 8006ee4:	f3af 8000 	nop.w
 8006ee8:	636f4361 	.word	0x636f4361
 8006eec:	3fd287a7 	.word	0x3fd287a7
 8006ef0:	8b60c8b3 	.word	0x8b60c8b3
 8006ef4:	3fc68a28 	.word	0x3fc68a28
 8006ef8:	509f79fb 	.word	0x509f79fb
 8006efc:	3fd34413 	.word	0x3fd34413
 8006f00:	08008c59 	.word	0x08008c59
 8006f04:	08008c70 	.word	0x08008c70
 8006f08:	7ff00000 	.word	0x7ff00000
 8006f0c:	08008c29 	.word	0x08008c29
 8006f10:	3ff80000 	.word	0x3ff80000
 8006f14:	08008dc0 	.word	0x08008dc0
 8006f18:	08008cc8 	.word	0x08008cc8
 8006f1c:	08008c55 	.word	0x08008c55
 8006f20:	08008c28 	.word	0x08008c28
 8006f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f28:	6018      	str	r0, [r3, #0]
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	2b0e      	cmp	r3, #14
 8006f2e:	f200 80a1 	bhi.w	8007074 <_dtoa_r+0x444>
 8006f32:	2c00      	cmp	r4, #0
 8006f34:	f000 809e 	beq.w	8007074 <_dtoa_r+0x444>
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	dd33      	ble.n	8006fa4 <_dtoa_r+0x374>
 8006f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80071b0 <_dtoa_r+0x580>)
 8006f3e:	f007 020f 	and.w	r2, r7, #15
 8006f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f46:	ed93 7b00 	vldr	d7, [r3]
 8006f4a:	05f8      	lsls	r0, r7, #23
 8006f4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006f50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f54:	d516      	bpl.n	8006f84 <_dtoa_r+0x354>
 8006f56:	4b97      	ldr	r3, [pc, #604]	@ (80071b4 <_dtoa_r+0x584>)
 8006f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f60:	f7f9 fc9c 	bl	800089c <__aeabi_ddiv>
 8006f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f68:	f004 040f 	and.w	r4, r4, #15
 8006f6c:	2603      	movs	r6, #3
 8006f6e:	4d91      	ldr	r5, [pc, #580]	@ (80071b4 <_dtoa_r+0x584>)
 8006f70:	b954      	cbnz	r4, 8006f88 <_dtoa_r+0x358>
 8006f72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f7a:	f7f9 fc8f 	bl	800089c <__aeabi_ddiv>
 8006f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f82:	e028      	b.n	8006fd6 <_dtoa_r+0x3a6>
 8006f84:	2602      	movs	r6, #2
 8006f86:	e7f2      	b.n	8006f6e <_dtoa_r+0x33e>
 8006f88:	07e1      	lsls	r1, r4, #31
 8006f8a:	d508      	bpl.n	8006f9e <_dtoa_r+0x36e>
 8006f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f94:	f7f9 fb58 	bl	8000648 <__aeabi_dmul>
 8006f98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	1064      	asrs	r4, r4, #1
 8006fa0:	3508      	adds	r5, #8
 8006fa2:	e7e5      	b.n	8006f70 <_dtoa_r+0x340>
 8006fa4:	f000 80af 	beq.w	8007106 <_dtoa_r+0x4d6>
 8006fa8:	427c      	negs	r4, r7
 8006faa:	4b81      	ldr	r3, [pc, #516]	@ (80071b0 <_dtoa_r+0x580>)
 8006fac:	4d81      	ldr	r5, [pc, #516]	@ (80071b4 <_dtoa_r+0x584>)
 8006fae:	f004 020f 	and.w	r2, r4, #15
 8006fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fbe:	f7f9 fb43 	bl	8000648 <__aeabi_dmul>
 8006fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc6:	1124      	asrs	r4, r4, #4
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2602      	movs	r6, #2
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	f040 808f 	bne.w	80070f0 <_dtoa_r+0x4c0>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1d3      	bne.n	8006f7e <_dtoa_r+0x34e>
 8006fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8094 	beq.w	800710a <_dtoa_r+0x4da>
 8006fe2:	4b75      	ldr	r3, [pc, #468]	@ (80071b8 <_dtoa_r+0x588>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 fd9f 	bl	8000b2c <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f000 808b 	beq.w	800710a <_dtoa_r+0x4da>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8087 	beq.w	800710a <_dtoa_r+0x4da>
 8006ffc:	f1bb 0f00 	cmp.w	fp, #0
 8007000:	dd34      	ble.n	800706c <_dtoa_r+0x43c>
 8007002:	4620      	mov	r0, r4
 8007004:	4b6d      	ldr	r3, [pc, #436]	@ (80071bc <_dtoa_r+0x58c>)
 8007006:	2200      	movs	r2, #0
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 fb1d 	bl	8000648 <__aeabi_dmul>
 800700e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007012:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007016:	3601      	adds	r6, #1
 8007018:	465c      	mov	r4, fp
 800701a:	4630      	mov	r0, r6
 800701c:	f7f9 faaa 	bl	8000574 <__aeabi_i2d>
 8007020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007024:	f7f9 fb10 	bl	8000648 <__aeabi_dmul>
 8007028:	4b65      	ldr	r3, [pc, #404]	@ (80071c0 <_dtoa_r+0x590>)
 800702a:	2200      	movs	r2, #0
 800702c:	f7f9 f956 	bl	80002dc <__adddf3>
 8007030:	4605      	mov	r5, r0
 8007032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007036:	2c00      	cmp	r4, #0
 8007038:	d16a      	bne.n	8007110 <_dtoa_r+0x4e0>
 800703a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703e:	4b61      	ldr	r3, [pc, #388]	@ (80071c4 <_dtoa_r+0x594>)
 8007040:	2200      	movs	r2, #0
 8007042:	f7f9 f949 	bl	80002d8 <__aeabi_dsub>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800704e:	462a      	mov	r2, r5
 8007050:	4633      	mov	r3, r6
 8007052:	f7f9 fd89 	bl	8000b68 <__aeabi_dcmpgt>
 8007056:	2800      	cmp	r0, #0
 8007058:	f040 8298 	bne.w	800758c <_dtoa_r+0x95c>
 800705c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007060:	462a      	mov	r2, r5
 8007062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007066:	f7f9 fd61 	bl	8000b2c <__aeabi_dcmplt>
 800706a:	bb38      	cbnz	r0, 80070bc <_dtoa_r+0x48c>
 800706c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007076:	2b00      	cmp	r3, #0
 8007078:	f2c0 8157 	blt.w	800732a <_dtoa_r+0x6fa>
 800707c:	2f0e      	cmp	r7, #14
 800707e:	f300 8154 	bgt.w	800732a <_dtoa_r+0x6fa>
 8007082:	4b4b      	ldr	r3, [pc, #300]	@ (80071b0 <_dtoa_r+0x580>)
 8007084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007088:	ed93 7b00 	vldr	d7, [r3]
 800708c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800708e:	2b00      	cmp	r3, #0
 8007090:	ed8d 7b00 	vstr	d7, [sp]
 8007094:	f280 80e5 	bge.w	8007262 <_dtoa_r+0x632>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f300 80e1 	bgt.w	8007262 <_dtoa_r+0x632>
 80070a0:	d10c      	bne.n	80070bc <_dtoa_r+0x48c>
 80070a2:	4b48      	ldr	r3, [pc, #288]	@ (80071c4 <_dtoa_r+0x594>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	ec51 0b17 	vmov	r0, r1, d7
 80070aa:	f7f9 facd 	bl	8000648 <__aeabi_dmul>
 80070ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b2:	f7f9 fd4f 	bl	8000b54 <__aeabi_dcmpge>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f000 8266 	beq.w	8007588 <_dtoa_r+0x958>
 80070bc:	2400      	movs	r4, #0
 80070be:	4625      	mov	r5, r4
 80070c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c2:	4656      	mov	r6, sl
 80070c4:	ea6f 0803 	mvn.w	r8, r3
 80070c8:	2700      	movs	r7, #0
 80070ca:	4621      	mov	r1, r4
 80070cc:	4648      	mov	r0, r9
 80070ce:	f000 fcbf 	bl	8007a50 <_Bfree>
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	f000 80bd 	beq.w	8007252 <_dtoa_r+0x622>
 80070d8:	b12f      	cbz	r7, 80070e6 <_dtoa_r+0x4b6>
 80070da:	42af      	cmp	r7, r5
 80070dc:	d003      	beq.n	80070e6 <_dtoa_r+0x4b6>
 80070de:	4639      	mov	r1, r7
 80070e0:	4648      	mov	r0, r9
 80070e2:	f000 fcb5 	bl	8007a50 <_Bfree>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4648      	mov	r0, r9
 80070ea:	f000 fcb1 	bl	8007a50 <_Bfree>
 80070ee:	e0b0      	b.n	8007252 <_dtoa_r+0x622>
 80070f0:	07e2      	lsls	r2, r4, #31
 80070f2:	d505      	bpl.n	8007100 <_dtoa_r+0x4d0>
 80070f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070f8:	f7f9 faa6 	bl	8000648 <__aeabi_dmul>
 80070fc:	3601      	adds	r6, #1
 80070fe:	2301      	movs	r3, #1
 8007100:	1064      	asrs	r4, r4, #1
 8007102:	3508      	adds	r5, #8
 8007104:	e762      	b.n	8006fcc <_dtoa_r+0x39c>
 8007106:	2602      	movs	r6, #2
 8007108:	e765      	b.n	8006fd6 <_dtoa_r+0x3a6>
 800710a:	9c03      	ldr	r4, [sp, #12]
 800710c:	46b8      	mov	r8, r7
 800710e:	e784      	b.n	800701a <_dtoa_r+0x3ea>
 8007110:	4b27      	ldr	r3, [pc, #156]	@ (80071b0 <_dtoa_r+0x580>)
 8007112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800711c:	4454      	add	r4, sl
 800711e:	2900      	cmp	r1, #0
 8007120:	d054      	beq.n	80071cc <_dtoa_r+0x59c>
 8007122:	4929      	ldr	r1, [pc, #164]	@ (80071c8 <_dtoa_r+0x598>)
 8007124:	2000      	movs	r0, #0
 8007126:	f7f9 fbb9 	bl	800089c <__aeabi_ddiv>
 800712a:	4633      	mov	r3, r6
 800712c:	462a      	mov	r2, r5
 800712e:	f7f9 f8d3 	bl	80002d8 <__aeabi_dsub>
 8007132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007136:	4656      	mov	r6, sl
 8007138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800713c:	f7f9 fd34 	bl	8000ba8 <__aeabi_d2iz>
 8007140:	4605      	mov	r5, r0
 8007142:	f7f9 fa17 	bl	8000574 <__aeabi_i2d>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800714e:	f7f9 f8c3 	bl	80002d8 <__aeabi_dsub>
 8007152:	3530      	adds	r5, #48	@ 0x30
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800715c:	f806 5b01 	strb.w	r5, [r6], #1
 8007160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007164:	f7f9 fce2 	bl	8000b2c <__aeabi_dcmplt>
 8007168:	2800      	cmp	r0, #0
 800716a:	d172      	bne.n	8007252 <_dtoa_r+0x622>
 800716c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007170:	4911      	ldr	r1, [pc, #68]	@ (80071b8 <_dtoa_r+0x588>)
 8007172:	2000      	movs	r0, #0
 8007174:	f7f9 f8b0 	bl	80002d8 <__aeabi_dsub>
 8007178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800717c:	f7f9 fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8007180:	2800      	cmp	r0, #0
 8007182:	f040 80b4 	bne.w	80072ee <_dtoa_r+0x6be>
 8007186:	42a6      	cmp	r6, r4
 8007188:	f43f af70 	beq.w	800706c <_dtoa_r+0x43c>
 800718c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007190:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <_dtoa_r+0x58c>)
 8007192:	2200      	movs	r2, #0
 8007194:	f7f9 fa58 	bl	8000648 <__aeabi_dmul>
 8007198:	4b08      	ldr	r3, [pc, #32]	@ (80071bc <_dtoa_r+0x58c>)
 800719a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800719e:	2200      	movs	r2, #0
 80071a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a4:	f7f9 fa50 	bl	8000648 <__aeabi_dmul>
 80071a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ac:	e7c4      	b.n	8007138 <_dtoa_r+0x508>
 80071ae:	bf00      	nop
 80071b0:	08008dc0 	.word	0x08008dc0
 80071b4:	08008d98 	.word	0x08008d98
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	40240000 	.word	0x40240000
 80071c0:	401c0000 	.word	0x401c0000
 80071c4:	40140000 	.word	0x40140000
 80071c8:	3fe00000 	.word	0x3fe00000
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7f9 fa3a 	bl	8000648 <__aeabi_dmul>
 80071d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80071da:	4656      	mov	r6, sl
 80071dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e0:	f7f9 fce2 	bl	8000ba8 <__aeabi_d2iz>
 80071e4:	4605      	mov	r5, r0
 80071e6:	f7f9 f9c5 	bl	8000574 <__aeabi_i2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f2:	f7f9 f871 	bl	80002d8 <__aeabi_dsub>
 80071f6:	3530      	adds	r5, #48	@ 0x30
 80071f8:	f806 5b01 	strb.w	r5, [r6], #1
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	42a6      	cmp	r6, r4
 8007202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	d124      	bne.n	8007256 <_dtoa_r+0x626>
 800720c:	4baf      	ldr	r3, [pc, #700]	@ (80074cc <_dtoa_r+0x89c>)
 800720e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007212:	f7f9 f863 	bl	80002dc <__adddf3>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800721e:	f7f9 fca3 	bl	8000b68 <__aeabi_dcmpgt>
 8007222:	2800      	cmp	r0, #0
 8007224:	d163      	bne.n	80072ee <_dtoa_r+0x6be>
 8007226:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800722a:	49a8      	ldr	r1, [pc, #672]	@ (80074cc <_dtoa_r+0x89c>)
 800722c:	2000      	movs	r0, #0
 800722e:	f7f9 f853 	bl	80002d8 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723a:	f7f9 fc77 	bl	8000b2c <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f af14 	beq.w	800706c <_dtoa_r+0x43c>
 8007244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007246:	1e73      	subs	r3, r6, #1
 8007248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800724a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800724e:	2b30      	cmp	r3, #48	@ 0x30
 8007250:	d0f8      	beq.n	8007244 <_dtoa_r+0x614>
 8007252:	4647      	mov	r7, r8
 8007254:	e03b      	b.n	80072ce <_dtoa_r+0x69e>
 8007256:	4b9e      	ldr	r3, [pc, #632]	@ (80074d0 <_dtoa_r+0x8a0>)
 8007258:	f7f9 f9f6 	bl	8000648 <__aeabi_dmul>
 800725c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007260:	e7bc      	b.n	80071dc <_dtoa_r+0x5ac>
 8007262:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007266:	4656      	mov	r6, sl
 8007268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 fb14 	bl	800089c <__aeabi_ddiv>
 8007274:	f7f9 fc98 	bl	8000ba8 <__aeabi_d2iz>
 8007278:	4680      	mov	r8, r0
 800727a:	f7f9 f97b 	bl	8000574 <__aeabi_i2d>
 800727e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007282:	f7f9 f9e1 	bl	8000648 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007292:	f7f9 f821 	bl	80002d8 <__aeabi_dsub>
 8007296:	f806 4b01 	strb.w	r4, [r6], #1
 800729a:	9d03      	ldr	r5, [sp, #12]
 800729c:	eba6 040a 	sub.w	r4, r6, sl
 80072a0:	42a5      	cmp	r5, r4
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	d133      	bne.n	8007310 <_dtoa_r+0x6e0>
 80072a8:	f7f9 f818 	bl	80002dc <__adddf3>
 80072ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b0:	4604      	mov	r4, r0
 80072b2:	460d      	mov	r5, r1
 80072b4:	f7f9 fc58 	bl	8000b68 <__aeabi_dcmpgt>
 80072b8:	b9c0      	cbnz	r0, 80072ec <_dtoa_r+0x6bc>
 80072ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80072c6:	b110      	cbz	r0, 80072ce <_dtoa_r+0x69e>
 80072c8:	f018 0f01 	tst.w	r8, #1
 80072cc:	d10e      	bne.n	80072ec <_dtoa_r+0x6bc>
 80072ce:	9902      	ldr	r1, [sp, #8]
 80072d0:	4648      	mov	r0, r9
 80072d2:	f000 fbbd 	bl	8007a50 <_Bfree>
 80072d6:	2300      	movs	r3, #0
 80072d8:	7033      	strb	r3, [r6, #0]
 80072da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072dc:	3701      	adds	r7, #1
 80072de:	601f      	str	r7, [r3, #0]
 80072e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 824b 	beq.w	800777e <_dtoa_r+0xb4e>
 80072e8:	601e      	str	r6, [r3, #0]
 80072ea:	e248      	b.n	800777e <_dtoa_r+0xb4e>
 80072ec:	46b8      	mov	r8, r7
 80072ee:	4633      	mov	r3, r6
 80072f0:	461e      	mov	r6, r3
 80072f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f6:	2a39      	cmp	r2, #57	@ 0x39
 80072f8:	d106      	bne.n	8007308 <_dtoa_r+0x6d8>
 80072fa:	459a      	cmp	sl, r3
 80072fc:	d1f8      	bne.n	80072f0 <_dtoa_r+0x6c0>
 80072fe:	2230      	movs	r2, #48	@ 0x30
 8007300:	f108 0801 	add.w	r8, r8, #1
 8007304:	f88a 2000 	strb.w	r2, [sl]
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	3201      	adds	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e7a0      	b.n	8007252 <_dtoa_r+0x622>
 8007310:	4b6f      	ldr	r3, [pc, #444]	@ (80074d0 <_dtoa_r+0x8a0>)
 8007312:	2200      	movs	r2, #0
 8007314:	f7f9 f998 	bl	8000648 <__aeabi_dmul>
 8007318:	2200      	movs	r2, #0
 800731a:	2300      	movs	r3, #0
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	f7f9 fbfa 	bl	8000b18 <__aeabi_dcmpeq>
 8007324:	2800      	cmp	r0, #0
 8007326:	d09f      	beq.n	8007268 <_dtoa_r+0x638>
 8007328:	e7d1      	b.n	80072ce <_dtoa_r+0x69e>
 800732a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732c:	2a00      	cmp	r2, #0
 800732e:	f000 80ea 	beq.w	8007506 <_dtoa_r+0x8d6>
 8007332:	9a07      	ldr	r2, [sp, #28]
 8007334:	2a01      	cmp	r2, #1
 8007336:	f300 80cd 	bgt.w	80074d4 <_dtoa_r+0x8a4>
 800733a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800733c:	2a00      	cmp	r2, #0
 800733e:	f000 80c1 	beq.w	80074c4 <_dtoa_r+0x894>
 8007342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007346:	9c08      	ldr	r4, [sp, #32]
 8007348:	9e00      	ldr	r6, [sp, #0]
 800734a:	9a00      	ldr	r2, [sp, #0]
 800734c:	441a      	add	r2, r3
 800734e:	9200      	str	r2, [sp, #0]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	2101      	movs	r1, #1
 8007354:	441a      	add	r2, r3
 8007356:	4648      	mov	r0, r9
 8007358:	9206      	str	r2, [sp, #24]
 800735a:	f000 fc2d 	bl	8007bb8 <__i2b>
 800735e:	4605      	mov	r5, r0
 8007360:	b166      	cbz	r6, 800737c <_dtoa_r+0x74c>
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd09      	ble.n	800737c <_dtoa_r+0x74c>
 8007368:	42b3      	cmp	r3, r6
 800736a:	9a00      	ldr	r2, [sp, #0]
 800736c:	bfa8      	it	ge
 800736e:	4633      	movge	r3, r6
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	9200      	str	r2, [sp, #0]
 8007374:	9a06      	ldr	r2, [sp, #24]
 8007376:	1af6      	subs	r6, r6, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	9306      	str	r3, [sp, #24]
 800737c:	9b08      	ldr	r3, [sp, #32]
 800737e:	b30b      	cbz	r3, 80073c4 <_dtoa_r+0x794>
 8007380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80c6 	beq.w	8007514 <_dtoa_r+0x8e4>
 8007388:	2c00      	cmp	r4, #0
 800738a:	f000 80c0 	beq.w	800750e <_dtoa_r+0x8de>
 800738e:	4629      	mov	r1, r5
 8007390:	4622      	mov	r2, r4
 8007392:	4648      	mov	r0, r9
 8007394:	f000 fcc8 	bl	8007d28 <__pow5mult>
 8007398:	9a02      	ldr	r2, [sp, #8]
 800739a:	4601      	mov	r1, r0
 800739c:	4605      	mov	r5, r0
 800739e:	4648      	mov	r0, r9
 80073a0:	f000 fc20 	bl	8007be4 <__multiply>
 80073a4:	9902      	ldr	r1, [sp, #8]
 80073a6:	4680      	mov	r8, r0
 80073a8:	4648      	mov	r0, r9
 80073aa:	f000 fb51 	bl	8007a50 <_Bfree>
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	1b1b      	subs	r3, r3, r4
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	f000 80b1 	beq.w	800751a <_dtoa_r+0x8ea>
 80073b8:	9a08      	ldr	r2, [sp, #32]
 80073ba:	4641      	mov	r1, r8
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fcb3 	bl	8007d28 <__pow5mult>
 80073c2:	9002      	str	r0, [sp, #8]
 80073c4:	2101      	movs	r1, #1
 80073c6:	4648      	mov	r0, r9
 80073c8:	f000 fbf6 	bl	8007bb8 <__i2b>
 80073cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073ce:	4604      	mov	r4, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 81d8 	beq.w	8007786 <_dtoa_r+0xb56>
 80073d6:	461a      	mov	r2, r3
 80073d8:	4601      	mov	r1, r0
 80073da:	4648      	mov	r0, r9
 80073dc:	f000 fca4 	bl	8007d28 <__pow5mult>
 80073e0:	9b07      	ldr	r3, [sp, #28]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	4604      	mov	r4, r0
 80073e6:	f300 809f 	bgt.w	8007528 <_dtoa_r+0x8f8>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8097 	bne.w	8007520 <_dtoa_r+0x8f0>
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 8093 	bne.w	8007524 <_dtoa_r+0x8f4>
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007404:	0d1b      	lsrs	r3, r3, #20
 8007406:	051b      	lsls	r3, r3, #20
 8007408:	b133      	cbz	r3, 8007418 <_dtoa_r+0x7e8>
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	9b06      	ldr	r3, [sp, #24]
 8007412:	3301      	adds	r3, #1
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	2301      	movs	r3, #1
 8007418:	9308      	str	r3, [sp, #32]
 800741a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 81b8 	beq.w	8007792 <_dtoa_r+0xb62>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007428:	6918      	ldr	r0, [r3, #16]
 800742a:	f000 fb79 	bl	8007b20 <__hi0bits>
 800742e:	f1c0 0020 	rsb	r0, r0, #32
 8007432:	9b06      	ldr	r3, [sp, #24]
 8007434:	4418      	add	r0, r3
 8007436:	f010 001f 	ands.w	r0, r0, #31
 800743a:	f000 8082 	beq.w	8007542 <_dtoa_r+0x912>
 800743e:	f1c0 0320 	rsb	r3, r0, #32
 8007442:	2b04      	cmp	r3, #4
 8007444:	dd73      	ble.n	800752e <_dtoa_r+0x8fe>
 8007446:	9b00      	ldr	r3, [sp, #0]
 8007448:	f1c0 001c 	rsb	r0, r0, #28
 800744c:	4403      	add	r3, r0
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	4403      	add	r3, r0
 8007454:	4406      	add	r6, r0
 8007456:	9306      	str	r3, [sp, #24]
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dd05      	ble.n	800746a <_dtoa_r+0x83a>
 800745e:	9902      	ldr	r1, [sp, #8]
 8007460:	461a      	mov	r2, r3
 8007462:	4648      	mov	r0, r9
 8007464:	f000 fcba 	bl	8007ddc <__lshift>
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd05      	ble.n	800747c <_dtoa_r+0x84c>
 8007470:	4621      	mov	r1, r4
 8007472:	461a      	mov	r2, r3
 8007474:	4648      	mov	r0, r9
 8007476:	f000 fcb1 	bl	8007ddc <__lshift>
 800747a:	4604      	mov	r4, r0
 800747c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d061      	beq.n	8007546 <_dtoa_r+0x916>
 8007482:	9802      	ldr	r0, [sp, #8]
 8007484:	4621      	mov	r1, r4
 8007486:	f000 fd15 	bl	8007eb4 <__mcmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	da5b      	bge.n	8007546 <_dtoa_r+0x916>
 800748e:	2300      	movs	r3, #0
 8007490:	9902      	ldr	r1, [sp, #8]
 8007492:	220a      	movs	r2, #10
 8007494:	4648      	mov	r0, r9
 8007496:	f000 fafd 	bl	8007a94 <__multadd>
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	9002      	str	r0, [sp, #8]
 800749e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8177 	beq.w	8007796 <_dtoa_r+0xb66>
 80074a8:	4629      	mov	r1, r5
 80074aa:	2300      	movs	r3, #0
 80074ac:	220a      	movs	r2, #10
 80074ae:	4648      	mov	r0, r9
 80074b0:	f000 faf0 	bl	8007a94 <__multadd>
 80074b4:	f1bb 0f00 	cmp.w	fp, #0
 80074b8:	4605      	mov	r5, r0
 80074ba:	dc6f      	bgt.n	800759c <_dtoa_r+0x96c>
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dc49      	bgt.n	8007556 <_dtoa_r+0x926>
 80074c2:	e06b      	b.n	800759c <_dtoa_r+0x96c>
 80074c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074ca:	e73c      	b.n	8007346 <_dtoa_r+0x716>
 80074cc:	3fe00000 	.word	0x3fe00000
 80074d0:	40240000 	.word	0x40240000
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	1e5c      	subs	r4, r3, #1
 80074d8:	9b08      	ldr	r3, [sp, #32]
 80074da:	42a3      	cmp	r3, r4
 80074dc:	db09      	blt.n	80074f2 <_dtoa_r+0x8c2>
 80074de:	1b1c      	subs	r4, r3, r4
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f6bf af30 	bge.w	8007348 <_dtoa_r+0x718>
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	9a03      	ldr	r2, [sp, #12]
 80074ec:	1a9e      	subs	r6, r3, r2
 80074ee:	2300      	movs	r3, #0
 80074f0:	e72b      	b.n	800734a <_dtoa_r+0x71a>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074f6:	9408      	str	r4, [sp, #32]
 80074f8:	1ae3      	subs	r3, r4, r3
 80074fa:	441a      	add	r2, r3
 80074fc:	9e00      	ldr	r6, [sp, #0]
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	920d      	str	r2, [sp, #52]	@ 0x34
 8007502:	2400      	movs	r4, #0
 8007504:	e721      	b.n	800734a <_dtoa_r+0x71a>
 8007506:	9c08      	ldr	r4, [sp, #32]
 8007508:	9e00      	ldr	r6, [sp, #0]
 800750a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800750c:	e728      	b.n	8007360 <_dtoa_r+0x730>
 800750e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007512:	e751      	b.n	80073b8 <_dtoa_r+0x788>
 8007514:	9a08      	ldr	r2, [sp, #32]
 8007516:	9902      	ldr	r1, [sp, #8]
 8007518:	e750      	b.n	80073bc <_dtoa_r+0x78c>
 800751a:	f8cd 8008 	str.w	r8, [sp, #8]
 800751e:	e751      	b.n	80073c4 <_dtoa_r+0x794>
 8007520:	2300      	movs	r3, #0
 8007522:	e779      	b.n	8007418 <_dtoa_r+0x7e8>
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	e777      	b.n	8007418 <_dtoa_r+0x7e8>
 8007528:	2300      	movs	r3, #0
 800752a:	9308      	str	r3, [sp, #32]
 800752c:	e779      	b.n	8007422 <_dtoa_r+0x7f2>
 800752e:	d093      	beq.n	8007458 <_dtoa_r+0x828>
 8007530:	9a00      	ldr	r2, [sp, #0]
 8007532:	331c      	adds	r3, #28
 8007534:	441a      	add	r2, r3
 8007536:	9200      	str	r2, [sp, #0]
 8007538:	9a06      	ldr	r2, [sp, #24]
 800753a:	441a      	add	r2, r3
 800753c:	441e      	add	r6, r3
 800753e:	9206      	str	r2, [sp, #24]
 8007540:	e78a      	b.n	8007458 <_dtoa_r+0x828>
 8007542:	4603      	mov	r3, r0
 8007544:	e7f4      	b.n	8007530 <_dtoa_r+0x900>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	46b8      	mov	r8, r7
 800754c:	dc20      	bgt.n	8007590 <_dtoa_r+0x960>
 800754e:	469b      	mov	fp, r3
 8007550:	9b07      	ldr	r3, [sp, #28]
 8007552:	2b02      	cmp	r3, #2
 8007554:	dd1e      	ble.n	8007594 <_dtoa_r+0x964>
 8007556:	f1bb 0f00 	cmp.w	fp, #0
 800755a:	f47f adb1 	bne.w	80070c0 <_dtoa_r+0x490>
 800755e:	4621      	mov	r1, r4
 8007560:	465b      	mov	r3, fp
 8007562:	2205      	movs	r2, #5
 8007564:	4648      	mov	r0, r9
 8007566:	f000 fa95 	bl	8007a94 <__multadd>
 800756a:	4601      	mov	r1, r0
 800756c:	4604      	mov	r4, r0
 800756e:	9802      	ldr	r0, [sp, #8]
 8007570:	f000 fca0 	bl	8007eb4 <__mcmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	f77f ada3 	ble.w	80070c0 <_dtoa_r+0x490>
 800757a:	4656      	mov	r6, sl
 800757c:	2331      	movs	r3, #49	@ 0x31
 800757e:	f806 3b01 	strb.w	r3, [r6], #1
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	e59f      	b.n	80070c8 <_dtoa_r+0x498>
 8007588:	9c03      	ldr	r4, [sp, #12]
 800758a:	46b8      	mov	r8, r7
 800758c:	4625      	mov	r5, r4
 800758e:	e7f4      	b.n	800757a <_dtoa_r+0x94a>
 8007590:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8101 	beq.w	800779e <_dtoa_r+0xb6e>
 800759c:	2e00      	cmp	r6, #0
 800759e:	dd05      	ble.n	80075ac <_dtoa_r+0x97c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4632      	mov	r2, r6
 80075a4:	4648      	mov	r0, r9
 80075a6:	f000 fc19 	bl	8007ddc <__lshift>
 80075aa:	4605      	mov	r5, r0
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d05c      	beq.n	800766c <_dtoa_r+0xa3c>
 80075b2:	6869      	ldr	r1, [r5, #4]
 80075b4:	4648      	mov	r0, r9
 80075b6:	f000 fa0b 	bl	80079d0 <_Balloc>
 80075ba:	4606      	mov	r6, r0
 80075bc:	b928      	cbnz	r0, 80075ca <_dtoa_r+0x99a>
 80075be:	4b82      	ldr	r3, [pc, #520]	@ (80077c8 <_dtoa_r+0xb98>)
 80075c0:	4602      	mov	r2, r0
 80075c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075c6:	f7ff bb4a 	b.w	8006c5e <_dtoa_r+0x2e>
 80075ca:	692a      	ldr	r2, [r5, #16]
 80075cc:	3202      	adds	r2, #2
 80075ce:	0092      	lsls	r2, r2, #2
 80075d0:	f105 010c 	add.w	r1, r5, #12
 80075d4:	300c      	adds	r0, #12
 80075d6:	f000 ffa3 	bl	8008520 <memcpy>
 80075da:	2201      	movs	r2, #1
 80075dc:	4631      	mov	r1, r6
 80075de:	4648      	mov	r0, r9
 80075e0:	f000 fbfc 	bl	8007ddc <__lshift>
 80075e4:	f10a 0301 	add.w	r3, sl, #1
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	eb0a 030b 	add.w	r3, sl, fp
 80075ee:	9308      	str	r3, [sp, #32]
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	462f      	mov	r7, r5
 80075f8:	9306      	str	r3, [sp, #24]
 80075fa:	4605      	mov	r5, r0
 80075fc:	9b00      	ldr	r3, [sp, #0]
 80075fe:	9802      	ldr	r0, [sp, #8]
 8007600:	4621      	mov	r1, r4
 8007602:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007606:	f7ff fa8a 	bl	8006b1e <quorem>
 800760a:	4603      	mov	r3, r0
 800760c:	3330      	adds	r3, #48	@ 0x30
 800760e:	9003      	str	r0, [sp, #12]
 8007610:	4639      	mov	r1, r7
 8007612:	9802      	ldr	r0, [sp, #8]
 8007614:	9309      	str	r3, [sp, #36]	@ 0x24
 8007616:	f000 fc4d 	bl	8007eb4 <__mcmp>
 800761a:	462a      	mov	r2, r5
 800761c:	9004      	str	r0, [sp, #16]
 800761e:	4621      	mov	r1, r4
 8007620:	4648      	mov	r0, r9
 8007622:	f000 fc63 	bl	8007eec <__mdiff>
 8007626:	68c2      	ldr	r2, [r0, #12]
 8007628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762a:	4606      	mov	r6, r0
 800762c:	bb02      	cbnz	r2, 8007670 <_dtoa_r+0xa40>
 800762e:	4601      	mov	r1, r0
 8007630:	9802      	ldr	r0, [sp, #8]
 8007632:	f000 fc3f 	bl	8007eb4 <__mcmp>
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	4602      	mov	r2, r0
 800763a:	4631      	mov	r1, r6
 800763c:	4648      	mov	r0, r9
 800763e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007640:	9309      	str	r3, [sp, #36]	@ 0x24
 8007642:	f000 fa05 	bl	8007a50 <_Bfree>
 8007646:	9b07      	ldr	r3, [sp, #28]
 8007648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800764a:	9e00      	ldr	r6, [sp, #0]
 800764c:	ea42 0103 	orr.w	r1, r2, r3
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	4319      	orrs	r1, r3
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	d10d      	bne.n	8007674 <_dtoa_r+0xa44>
 8007658:	2b39      	cmp	r3, #57	@ 0x39
 800765a:	d027      	beq.n	80076ac <_dtoa_r+0xa7c>
 800765c:	9a04      	ldr	r2, [sp, #16]
 800765e:	2a00      	cmp	r2, #0
 8007660:	dd01      	ble.n	8007666 <_dtoa_r+0xa36>
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	3331      	adds	r3, #49	@ 0x31
 8007666:	f88b 3000 	strb.w	r3, [fp]
 800766a:	e52e      	b.n	80070ca <_dtoa_r+0x49a>
 800766c:	4628      	mov	r0, r5
 800766e:	e7b9      	b.n	80075e4 <_dtoa_r+0x9b4>
 8007670:	2201      	movs	r2, #1
 8007672:	e7e2      	b.n	800763a <_dtoa_r+0xa0a>
 8007674:	9904      	ldr	r1, [sp, #16]
 8007676:	2900      	cmp	r1, #0
 8007678:	db04      	blt.n	8007684 <_dtoa_r+0xa54>
 800767a:	9807      	ldr	r0, [sp, #28]
 800767c:	4301      	orrs	r1, r0
 800767e:	9806      	ldr	r0, [sp, #24]
 8007680:	4301      	orrs	r1, r0
 8007682:	d120      	bne.n	80076c6 <_dtoa_r+0xa96>
 8007684:	2a00      	cmp	r2, #0
 8007686:	ddee      	ble.n	8007666 <_dtoa_r+0xa36>
 8007688:	9902      	ldr	r1, [sp, #8]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2201      	movs	r2, #1
 800768e:	4648      	mov	r0, r9
 8007690:	f000 fba4 	bl	8007ddc <__lshift>
 8007694:	4621      	mov	r1, r4
 8007696:	9002      	str	r0, [sp, #8]
 8007698:	f000 fc0c 	bl	8007eb4 <__mcmp>
 800769c:	2800      	cmp	r0, #0
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	dc02      	bgt.n	80076a8 <_dtoa_r+0xa78>
 80076a2:	d1e0      	bne.n	8007666 <_dtoa_r+0xa36>
 80076a4:	07da      	lsls	r2, r3, #31
 80076a6:	d5de      	bpl.n	8007666 <_dtoa_r+0xa36>
 80076a8:	2b39      	cmp	r3, #57	@ 0x39
 80076aa:	d1da      	bne.n	8007662 <_dtoa_r+0xa32>
 80076ac:	2339      	movs	r3, #57	@ 0x39
 80076ae:	f88b 3000 	strb.w	r3, [fp]
 80076b2:	4633      	mov	r3, r6
 80076b4:	461e      	mov	r6, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076bc:	2a39      	cmp	r2, #57	@ 0x39
 80076be:	d04e      	beq.n	800775e <_dtoa_r+0xb2e>
 80076c0:	3201      	adds	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	e501      	b.n	80070ca <_dtoa_r+0x49a>
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	dd03      	ble.n	80076d2 <_dtoa_r+0xaa2>
 80076ca:	2b39      	cmp	r3, #57	@ 0x39
 80076cc:	d0ee      	beq.n	80076ac <_dtoa_r+0xa7c>
 80076ce:	3301      	adds	r3, #1
 80076d0:	e7c9      	b.n	8007666 <_dtoa_r+0xa36>
 80076d2:	9a00      	ldr	r2, [sp, #0]
 80076d4:	9908      	ldr	r1, [sp, #32]
 80076d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076da:	428a      	cmp	r2, r1
 80076dc:	d028      	beq.n	8007730 <_dtoa_r+0xb00>
 80076de:	9902      	ldr	r1, [sp, #8]
 80076e0:	2300      	movs	r3, #0
 80076e2:	220a      	movs	r2, #10
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 f9d5 	bl	8007a94 <__multadd>
 80076ea:	42af      	cmp	r7, r5
 80076ec:	9002      	str	r0, [sp, #8]
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	f04f 020a 	mov.w	r2, #10
 80076f6:	4639      	mov	r1, r7
 80076f8:	4648      	mov	r0, r9
 80076fa:	d107      	bne.n	800770c <_dtoa_r+0xadc>
 80076fc:	f000 f9ca 	bl	8007a94 <__multadd>
 8007700:	4607      	mov	r7, r0
 8007702:	4605      	mov	r5, r0
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	3301      	adds	r3, #1
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	e777      	b.n	80075fc <_dtoa_r+0x9cc>
 800770c:	f000 f9c2 	bl	8007a94 <__multadd>
 8007710:	4629      	mov	r1, r5
 8007712:	4607      	mov	r7, r0
 8007714:	2300      	movs	r3, #0
 8007716:	220a      	movs	r2, #10
 8007718:	4648      	mov	r0, r9
 800771a:	f000 f9bb 	bl	8007a94 <__multadd>
 800771e:	4605      	mov	r5, r0
 8007720:	e7f0      	b.n	8007704 <_dtoa_r+0xad4>
 8007722:	f1bb 0f00 	cmp.w	fp, #0
 8007726:	bfcc      	ite	gt
 8007728:	465e      	movgt	r6, fp
 800772a:	2601      	movle	r6, #1
 800772c:	4456      	add	r6, sl
 800772e:	2700      	movs	r7, #0
 8007730:	9902      	ldr	r1, [sp, #8]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2201      	movs	r2, #1
 8007736:	4648      	mov	r0, r9
 8007738:	f000 fb50 	bl	8007ddc <__lshift>
 800773c:	4621      	mov	r1, r4
 800773e:	9002      	str	r0, [sp, #8]
 8007740:	f000 fbb8 	bl	8007eb4 <__mcmp>
 8007744:	2800      	cmp	r0, #0
 8007746:	dcb4      	bgt.n	80076b2 <_dtoa_r+0xa82>
 8007748:	d102      	bne.n	8007750 <_dtoa_r+0xb20>
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	07db      	lsls	r3, r3, #31
 800774e:	d4b0      	bmi.n	80076b2 <_dtoa_r+0xa82>
 8007750:	4633      	mov	r3, r6
 8007752:	461e      	mov	r6, r3
 8007754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007758:	2a30      	cmp	r2, #48	@ 0x30
 800775a:	d0fa      	beq.n	8007752 <_dtoa_r+0xb22>
 800775c:	e4b5      	b.n	80070ca <_dtoa_r+0x49a>
 800775e:	459a      	cmp	sl, r3
 8007760:	d1a8      	bne.n	80076b4 <_dtoa_r+0xa84>
 8007762:	2331      	movs	r3, #49	@ 0x31
 8007764:	f108 0801 	add.w	r8, r8, #1
 8007768:	f88a 3000 	strb.w	r3, [sl]
 800776c:	e4ad      	b.n	80070ca <_dtoa_r+0x49a>
 800776e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80077cc <_dtoa_r+0xb9c>
 8007774:	b11b      	cbz	r3, 800777e <_dtoa_r+0xb4e>
 8007776:	f10a 0308 	add.w	r3, sl, #8
 800777a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4650      	mov	r0, sl
 8007780:	b017      	add	sp, #92	@ 0x5c
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	9b07      	ldr	r3, [sp, #28]
 8007788:	2b01      	cmp	r3, #1
 800778a:	f77f ae2e 	ble.w	80073ea <_dtoa_r+0x7ba>
 800778e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007790:	9308      	str	r3, [sp, #32]
 8007792:	2001      	movs	r0, #1
 8007794:	e64d      	b.n	8007432 <_dtoa_r+0x802>
 8007796:	f1bb 0f00 	cmp.w	fp, #0
 800779a:	f77f aed9 	ble.w	8007550 <_dtoa_r+0x920>
 800779e:	4656      	mov	r6, sl
 80077a0:	9802      	ldr	r0, [sp, #8]
 80077a2:	4621      	mov	r1, r4
 80077a4:	f7ff f9bb 	bl	8006b1e <quorem>
 80077a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80077ac:	f806 3b01 	strb.w	r3, [r6], #1
 80077b0:	eba6 020a 	sub.w	r2, r6, sl
 80077b4:	4593      	cmp	fp, r2
 80077b6:	ddb4      	ble.n	8007722 <_dtoa_r+0xaf2>
 80077b8:	9902      	ldr	r1, [sp, #8]
 80077ba:	2300      	movs	r3, #0
 80077bc:	220a      	movs	r2, #10
 80077be:	4648      	mov	r0, r9
 80077c0:	f000 f968 	bl	8007a94 <__multadd>
 80077c4:	9002      	str	r0, [sp, #8]
 80077c6:	e7eb      	b.n	80077a0 <_dtoa_r+0xb70>
 80077c8:	08008cc8 	.word	0x08008cc8
 80077cc:	08008c4c 	.word	0x08008c4c

080077d0 <_free_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4605      	mov	r5, r0
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d041      	beq.n	800785c <_free_r+0x8c>
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f0c      	subs	r4, r1, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfb8      	it	lt
 80077e2:	18e4      	addlt	r4, r4, r3
 80077e4:	f000 f8e8 	bl	80079b8 <__malloc_lock>
 80077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007860 <_free_r+0x90>)
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	b933      	cbnz	r3, 80077fc <_free_r+0x2c>
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	6014      	str	r4, [r2, #0]
 80077f2:	4628      	mov	r0, r5
 80077f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f8:	f000 b8e4 	b.w	80079c4 <__malloc_unlock>
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	d908      	bls.n	8007812 <_free_r+0x42>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	1821      	adds	r1, r4, r0
 8007804:	428b      	cmp	r3, r1
 8007806:	bf01      	itttt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	1809      	addeq	r1, r1, r0
 800780e:	6021      	streq	r1, [r4, #0]
 8007810:	e7ed      	b.n	80077ee <_free_r+0x1e>
 8007812:	461a      	mov	r2, r3
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	b10b      	cbz	r3, 800781c <_free_r+0x4c>
 8007818:	42a3      	cmp	r3, r4
 800781a:	d9fa      	bls.n	8007812 <_free_r+0x42>
 800781c:	6811      	ldr	r1, [r2, #0]
 800781e:	1850      	adds	r0, r2, r1
 8007820:	42a0      	cmp	r0, r4
 8007822:	d10b      	bne.n	800783c <_free_r+0x6c>
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	4401      	add	r1, r0
 8007828:	1850      	adds	r0, r2, r1
 800782a:	4283      	cmp	r3, r0
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	d1e0      	bne.n	80077f2 <_free_r+0x22>
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	6053      	str	r3, [r2, #4]
 8007836:	4408      	add	r0, r1
 8007838:	6010      	str	r0, [r2, #0]
 800783a:	e7da      	b.n	80077f2 <_free_r+0x22>
 800783c:	d902      	bls.n	8007844 <_free_r+0x74>
 800783e:	230c      	movs	r3, #12
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	e7d6      	b.n	80077f2 <_free_r+0x22>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	1821      	adds	r1, r4, r0
 8007848:	428b      	cmp	r3, r1
 800784a:	bf04      	itt	eq
 800784c:	6819      	ldreq	r1, [r3, #0]
 800784e:	685b      	ldreq	r3, [r3, #4]
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	bf04      	itt	eq
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	6054      	str	r4, [r2, #4]
 800785a:	e7ca      	b.n	80077f2 <_free_r+0x22>
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	200006a8 	.word	0x200006a8

08007864 <malloc>:
 8007864:	4b02      	ldr	r3, [pc, #8]	@ (8007870 <malloc+0xc>)
 8007866:	4601      	mov	r1, r0
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f000 b825 	b.w	80078b8 <_malloc_r>
 800786e:	bf00      	nop
 8007870:	20000030 	.word	0x20000030

08007874 <sbrk_aligned>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	4e0f      	ldr	r6, [pc, #60]	@ (80078b4 <sbrk_aligned+0x40>)
 8007878:	460c      	mov	r4, r1
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	4605      	mov	r5, r0
 800787e:	b911      	cbnz	r1, 8007886 <sbrk_aligned+0x12>
 8007880:	f000 fe3e 	bl	8008500 <_sbrk_r>
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fe39 	bl	8008500 <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d103      	bne.n	800789a <sbrk_aligned+0x26>
 8007892:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007896:	4620      	mov	r0, r4
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0f8      	beq.n	8007896 <sbrk_aligned+0x22>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fe2a 	bl	8008500 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1f2      	bne.n	8007896 <sbrk_aligned+0x22>
 80078b0:	e7ef      	b.n	8007892 <sbrk_aligned+0x1e>
 80078b2:	bf00      	nop
 80078b4:	200006a4 	.word	0x200006a4

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d904      	bls.n	80078de <_malloc_r+0x26>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b4 <_malloc_r+0xfc>
 80078e2:	f000 f869 	bl	80079b8 <__malloc_lock>
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	461c      	mov	r4, r3
 80078ec:	bb44      	cbnz	r4, 8007940 <_malloc_r+0x88>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbf 	bl	8007874 <sbrk_aligned>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	d158      	bne.n	80079ae <_malloc_r+0xf6>
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	4627      	mov	r7, r4
 8007902:	2f00      	cmp	r7, #0
 8007904:	d143      	bne.n	800798e <_malloc_r+0xd6>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d04b      	beq.n	80079a2 <_malloc_r+0xea>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	eb04 0903 	add.w	r9, r4, r3
 8007914:	f000 fdf4 	bl	8008500 <_sbrk_r>
 8007918:	4581      	cmp	r9, r0
 800791a:	d142      	bne.n	80079a2 <_malloc_r+0xea>
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	1a6d      	subs	r5, r5, r1
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffa6 	bl	8007874 <sbrk_aligned>
 8007928:	3001      	adds	r0, #1
 800792a:	d03a      	beq.n	80079a2 <_malloc_r+0xea>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	442b      	add	r3, r5
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	bb62      	cbnz	r2, 8007994 <_malloc_r+0xdc>
 800793a:	f8c8 7000 	str.w	r7, [r8]
 800793e:	e00f      	b.n	8007960 <_malloc_r+0xa8>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1b52      	subs	r2, r2, r5
 8007944:	d420      	bmi.n	8007988 <_malloc_r+0xd0>
 8007946:	2a0b      	cmp	r2, #11
 8007948:	d917      	bls.n	800797a <_malloc_r+0xc2>
 800794a:	1961      	adds	r1, r4, r5
 800794c:	42a3      	cmp	r3, r4
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	6059      	strne	r1, [r3, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	bf08      	it	eq
 8007958:	f8c8 1000 	streq.w	r1, [r8]
 800795c:	5162      	str	r2, [r4, r5]
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f82f 	bl	80079c4 <__malloc_unlock>
 8007966:	f104 000b 	add.w	r0, r4, #11
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	f020 0007 	bic.w	r0, r0, #7
 8007970:	1ac2      	subs	r2, r0, r3
 8007972:	bf1c      	itt	ne
 8007974:	1a1b      	subne	r3, r3, r0
 8007976:	50a3      	strne	r3, [r4, r2]
 8007978:	e7af      	b.n	80078da <_malloc_r+0x22>
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	42a3      	cmp	r3, r4
 800797e:	bf0c      	ite	eq
 8007980:	f8c8 2000 	streq.w	r2, [r8]
 8007984:	605a      	strne	r2, [r3, #4]
 8007986:	e7eb      	b.n	8007960 <_malloc_r+0xa8>
 8007988:	4623      	mov	r3, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7ae      	b.n	80078ec <_malloc_r+0x34>
 800798e:	463c      	mov	r4, r7
 8007990:	687f      	ldr	r7, [r7, #4]
 8007992:	e7b6      	b.n	8007902 <_malloc_r+0x4a>
 8007994:	461a      	mov	r2, r3
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	d1fb      	bne.n	8007994 <_malloc_r+0xdc>
 800799c:	2300      	movs	r3, #0
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7de      	b.n	8007960 <_malloc_r+0xa8>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f80c 	bl	80079c4 <__malloc_unlock>
 80079ac:	e794      	b.n	80078d8 <_malloc_r+0x20>
 80079ae:	6005      	str	r5, [r0, #0]
 80079b0:	e7d6      	b.n	8007960 <_malloc_r+0xa8>
 80079b2:	bf00      	nop
 80079b4:	200006a8 	.word	0x200006a8

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff b8ae 	b.w	8006b1a <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	200006a0 	.word	0x200006a0

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff b8a9 	b.w	8006b1c <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	200006a0 	.word	0x200006a0

080079d0 <_Balloc>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	69c6      	ldr	r6, [r0, #28]
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	b976      	cbnz	r6, 80079f8 <_Balloc+0x28>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7ff ff42 	bl	8007864 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	61e0      	str	r0, [r4, #28]
 80079e4:	b920      	cbnz	r0, 80079f0 <_Balloc+0x20>
 80079e6:	4b18      	ldr	r3, [pc, #96]	@ (8007a48 <_Balloc+0x78>)
 80079e8:	4818      	ldr	r0, [pc, #96]	@ (8007a4c <_Balloc+0x7c>)
 80079ea:	216b      	movs	r1, #107	@ 0x6b
 80079ec:	f000 fda6 	bl	800853c <__assert_func>
 80079f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f4:	6006      	str	r6, [r0, #0]
 80079f6:	60c6      	str	r6, [r0, #12]
 80079f8:	69e6      	ldr	r6, [r4, #28]
 80079fa:	68f3      	ldr	r3, [r6, #12]
 80079fc:	b183      	cbz	r3, 8007a20 <_Balloc+0x50>
 80079fe:	69e3      	ldr	r3, [r4, #28]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a06:	b9b8      	cbnz	r0, 8007a38 <_Balloc+0x68>
 8007a08:	2101      	movs	r1, #1
 8007a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a0e:	1d72      	adds	r2, r6, #5
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fdb0 	bl	8008578 <_calloc_r>
 8007a18:	b160      	cbz	r0, 8007a34 <_Balloc+0x64>
 8007a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a1e:	e00e      	b.n	8007a3e <_Balloc+0x6e>
 8007a20:	2221      	movs	r2, #33	@ 0x21
 8007a22:	2104      	movs	r1, #4
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fda7 	bl	8008578 <_calloc_r>
 8007a2a:	69e3      	ldr	r3, [r4, #28]
 8007a2c:	60f0      	str	r0, [r6, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <_Balloc+0x2e>
 8007a34:	2000      	movs	r0, #0
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	6802      	ldr	r2, [r0, #0]
 8007a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a44:	e7f7      	b.n	8007a36 <_Balloc+0x66>
 8007a46:	bf00      	nop
 8007a48:	08008c59 	.word	0x08008c59
 8007a4c:	08008cd9 	.word	0x08008cd9

08007a50 <_Bfree>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	69c6      	ldr	r6, [r0, #28]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Bfree+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ff02 	bl	8007864 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	61e8      	str	r0, [r5, #28]
 8007a64:	b920      	cbnz	r0, 8007a70 <_Bfree+0x20>
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <_Bfree+0x3c>)
 8007a68:	4809      	ldr	r0, [pc, #36]	@ (8007a90 <_Bfree+0x40>)
 8007a6a:	218f      	movs	r1, #143	@ 0x8f
 8007a6c:	f000 fd66 	bl	800853c <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	b13c      	cbz	r4, 8007a8a <_Bfree+0x3a>
 8007a7a:	69eb      	ldr	r3, [r5, #28]
 8007a7c:	6862      	ldr	r2, [r4, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a84:	6021      	str	r1, [r4, #0]
 8007a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	08008c59 	.word	0x08008c59
 8007a90:	08008cd9 	.word	0x08008cd9

08007a94 <__multadd>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	690d      	ldr	r5, [r1, #16]
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461e      	mov	r6, r3
 8007aa0:	f101 0c14 	add.w	ip, r1, #20
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8007aaa:	b299      	uxth	r1, r3
 8007aac:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab0:	0c1e      	lsrs	r6, r3, #16
 8007ab2:	0c0b      	lsrs	r3, r1, #16
 8007ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ab8:	b289      	uxth	r1, r1
 8007aba:	3001      	adds	r0, #1
 8007abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac0:	4285      	cmp	r5, r0
 8007ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aca:	dcec      	bgt.n	8007aa6 <__multadd+0x12>
 8007acc:	b30e      	cbz	r6, 8007b12 <__multadd+0x7e>
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc19      	bgt.n	8007b08 <__multadd+0x74>
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	3101      	adds	r1, #1
 8007ada:	f7ff ff79 	bl	80079d0 <_Balloc>
 8007ade:	4680      	mov	r8, r0
 8007ae0:	b928      	cbnz	r0, 8007aee <__multadd+0x5a>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <__multadd+0x84>)
 8007ae6:	480d      	ldr	r0, [pc, #52]	@ (8007b1c <__multadd+0x88>)
 8007ae8:	21ba      	movs	r1, #186	@ 0xba
 8007aea:	f000 fd27 	bl	800853c <__assert_func>
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	3202      	adds	r2, #2
 8007af2:	f104 010c 	add.w	r1, r4, #12
 8007af6:	0092      	lsls	r2, r2, #2
 8007af8:	300c      	adds	r0, #12
 8007afa:	f000 fd11 	bl	8008520 <memcpy>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ffa5 	bl	8007a50 <_Bfree>
 8007b06:	4644      	mov	r4, r8
 8007b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	615e      	str	r6, [r3, #20]
 8007b10:	6125      	str	r5, [r4, #16]
 8007b12:	4620      	mov	r0, r4
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	08008cc8 	.word	0x08008cc8
 8007b1c:	08008cd9 	.word	0x08008cd9

08007b20 <__hi0bits>:
 8007b20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b24:	4603      	mov	r3, r0
 8007b26:	bf36      	itet	cc
 8007b28:	0403      	lslcc	r3, r0, #16
 8007b2a:	2000      	movcs	r0, #0
 8007b2c:	2010      	movcc	r0, #16
 8007b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b32:	bf3c      	itt	cc
 8007b34:	021b      	lslcc	r3, r3, #8
 8007b36:	3008      	addcc	r0, #8
 8007b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3c:	bf3c      	itt	cc
 8007b3e:	011b      	lslcc	r3, r3, #4
 8007b40:	3004      	addcc	r0, #4
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b46:	bf3c      	itt	cc
 8007b48:	009b      	lslcc	r3, r3, #2
 8007b4a:	3002      	addcc	r0, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db05      	blt.n	8007b5c <__hi0bits+0x3c>
 8007b50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b54:	f100 0001 	add.w	r0, r0, #1
 8007b58:	bf08      	it	eq
 8007b5a:	2020      	moveq	r0, #32
 8007b5c:	4770      	bx	lr

08007b5e <__lo0bits>:
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	4602      	mov	r2, r0
 8007b62:	f013 0007 	ands.w	r0, r3, #7
 8007b66:	d00b      	beq.n	8007b80 <__lo0bits+0x22>
 8007b68:	07d9      	lsls	r1, r3, #31
 8007b6a:	d421      	bmi.n	8007bb0 <__lo0bits+0x52>
 8007b6c:	0798      	lsls	r0, r3, #30
 8007b6e:	bf49      	itett	mi
 8007b70:	085b      	lsrmi	r3, r3, #1
 8007b72:	089b      	lsrpl	r3, r3, #2
 8007b74:	2001      	movmi	r0, #1
 8007b76:	6013      	strmi	r3, [r2, #0]
 8007b78:	bf5c      	itt	pl
 8007b7a:	6013      	strpl	r3, [r2, #0]
 8007b7c:	2002      	movpl	r0, #2
 8007b7e:	4770      	bx	lr
 8007b80:	b299      	uxth	r1, r3
 8007b82:	b909      	cbnz	r1, 8007b88 <__lo0bits+0x2a>
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	2010      	movs	r0, #16
 8007b88:	b2d9      	uxtb	r1, r3
 8007b8a:	b909      	cbnz	r1, 8007b90 <__lo0bits+0x32>
 8007b8c:	3008      	adds	r0, #8
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	bf04      	itt	eq
 8007b94:	091b      	lsreq	r3, r3, #4
 8007b96:	3004      	addeq	r0, #4
 8007b98:	0799      	lsls	r1, r3, #30
 8007b9a:	bf04      	itt	eq
 8007b9c:	089b      	lsreq	r3, r3, #2
 8007b9e:	3002      	addeq	r0, #2
 8007ba0:	07d9      	lsls	r1, r3, #31
 8007ba2:	d403      	bmi.n	8007bac <__lo0bits+0x4e>
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	f100 0001 	add.w	r0, r0, #1
 8007baa:	d003      	beq.n	8007bb4 <__lo0bits+0x56>
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	4770      	bx	lr
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4770      	bx	lr
 8007bb4:	2020      	movs	r0, #32
 8007bb6:	4770      	bx	lr

08007bb8 <__i2b>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	460c      	mov	r4, r1
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	f7ff ff07 	bl	80079d0 <_Balloc>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	b928      	cbnz	r0, 8007bd2 <__i2b+0x1a>
 8007bc6:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <__i2b+0x24>)
 8007bc8:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <__i2b+0x28>)
 8007bca:	f240 1145 	movw	r1, #325	@ 0x145
 8007bce:	f000 fcb5 	bl	800853c <__assert_func>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6144      	str	r4, [r0, #20]
 8007bd6:	6103      	str	r3, [r0, #16]
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	bf00      	nop
 8007bdc:	08008cc8 	.word	0x08008cc8
 8007be0:	08008cd9 	.word	0x08008cd9

08007be4 <__multiply>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	4617      	mov	r7, r2
 8007bea:	690a      	ldr	r2, [r1, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bfa8      	it	ge
 8007bf2:	463b      	movge	r3, r7
 8007bf4:	4689      	mov	r9, r1
 8007bf6:	bfa4      	itt	ge
 8007bf8:	460f      	movge	r7, r1
 8007bfa:	4699      	movge	r9, r3
 8007bfc:	693d      	ldr	r5, [r7, #16]
 8007bfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	eb05 060a 	add.w	r6, r5, sl
 8007c0a:	42b3      	cmp	r3, r6
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	bfb8      	it	lt
 8007c10:	3101      	addlt	r1, #1
 8007c12:	f7ff fedd 	bl	80079d0 <_Balloc>
 8007c16:	b930      	cbnz	r0, 8007c26 <__multiply+0x42>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4b41      	ldr	r3, [pc, #260]	@ (8007d20 <__multiply+0x13c>)
 8007c1c:	4841      	ldr	r0, [pc, #260]	@ (8007d24 <__multiply+0x140>)
 8007c1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c22:	f000 fc8b 	bl	800853c <__assert_func>
 8007c26:	f100 0414 	add.w	r4, r0, #20
 8007c2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007c2e:	4623      	mov	r3, r4
 8007c30:	2200      	movs	r2, #0
 8007c32:	4573      	cmp	r3, lr
 8007c34:	d320      	bcc.n	8007c78 <__multiply+0x94>
 8007c36:	f107 0814 	add.w	r8, r7, #20
 8007c3a:	f109 0114 	add.w	r1, r9, #20
 8007c3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007c42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	1beb      	subs	r3, r5, r7
 8007c4a:	3b15      	subs	r3, #21
 8007c4c:	f023 0303 	bic.w	r3, r3, #3
 8007c50:	3304      	adds	r3, #4
 8007c52:	3715      	adds	r7, #21
 8007c54:	42bd      	cmp	r5, r7
 8007c56:	bf38      	it	cc
 8007c58:	2304      	movcc	r3, #4
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	428b      	cmp	r3, r1
 8007c62:	d80c      	bhi.n	8007c7e <__multiply+0x9a>
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	dd03      	ble.n	8007c70 <__multiply+0x8c>
 8007c68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d055      	beq.n	8007d1c <__multiply+0x138>
 8007c70:	6106      	str	r6, [r0, #16]
 8007c72:	b005      	add	sp, #20
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	f843 2b04 	str.w	r2, [r3], #4
 8007c7c:	e7d9      	b.n	8007c32 <__multiply+0x4e>
 8007c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c82:	f1ba 0f00 	cmp.w	sl, #0
 8007c86:	d01f      	beq.n	8007cc8 <__multiply+0xe4>
 8007c88:	46c4      	mov	ip, r8
 8007c8a:	46a1      	mov	r9, r4
 8007c8c:	2700      	movs	r7, #0
 8007c8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c92:	f8d9 3000 	ldr.w	r3, [r9]
 8007c96:	fa1f fb82 	uxth.w	fp, r2
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ca0:	443b      	add	r3, r7
 8007ca2:	f8d9 7000 	ldr.w	r7, [r9]
 8007ca6:	0c12      	lsrs	r2, r2, #16
 8007ca8:	0c3f      	lsrs	r7, r7, #16
 8007caa:	fb0a 7202 	mla	r2, sl, r2, r7
 8007cae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cb8:	4565      	cmp	r5, ip
 8007cba:	f849 3b04 	str.w	r3, [r9], #4
 8007cbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007cc2:	d8e4      	bhi.n	8007c8e <__multiply+0xaa>
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	50e7      	str	r7, [r4, r3]
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cce:	3104      	adds	r1, #4
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	d020      	beq.n	8007d18 <__multiply+0x134>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	4647      	mov	r7, r8
 8007cda:	46a4      	mov	ip, r4
 8007cdc:	f04f 0a00 	mov.w	sl, #0
 8007ce0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ce4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8007cec:	4452      	add	r2, sl
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf4:	f84c 3b04 	str.w	r3, [ip], #4
 8007cf8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d00:	f8bc 3000 	ldrh.w	r3, [ip]
 8007d04:	fb09 330a 	mla	r3, r9, sl, r3
 8007d08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007d0c:	42bd      	cmp	r5, r7
 8007d0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d12:	d8e5      	bhi.n	8007ce0 <__multiply+0xfc>
 8007d14:	9a01      	ldr	r2, [sp, #4]
 8007d16:	50a3      	str	r3, [r4, r2]
 8007d18:	3404      	adds	r4, #4
 8007d1a:	e79f      	b.n	8007c5c <__multiply+0x78>
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	e7a1      	b.n	8007c64 <__multiply+0x80>
 8007d20:	08008cc8 	.word	0x08008cc8
 8007d24:	08008cd9 	.word	0x08008cd9

08007d28 <__pow5mult>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	f012 0203 	ands.w	r2, r2, #3
 8007d32:	4607      	mov	r7, r0
 8007d34:	460e      	mov	r6, r1
 8007d36:	d007      	beq.n	8007d48 <__pow5mult+0x20>
 8007d38:	4c25      	ldr	r4, [pc, #148]	@ (8007dd0 <__pow5mult+0xa8>)
 8007d3a:	3a01      	subs	r2, #1
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d42:	f7ff fea7 	bl	8007a94 <__multadd>
 8007d46:	4606      	mov	r6, r0
 8007d48:	10ad      	asrs	r5, r5, #2
 8007d4a:	d03d      	beq.n	8007dc8 <__pow5mult+0xa0>
 8007d4c:	69fc      	ldr	r4, [r7, #28]
 8007d4e:	b97c      	cbnz	r4, 8007d70 <__pow5mult+0x48>
 8007d50:	2010      	movs	r0, #16
 8007d52:	f7ff fd87 	bl	8007864 <malloc>
 8007d56:	4602      	mov	r2, r0
 8007d58:	61f8      	str	r0, [r7, #28]
 8007d5a:	b928      	cbnz	r0, 8007d68 <__pow5mult+0x40>
 8007d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd4 <__pow5mult+0xac>)
 8007d5e:	481e      	ldr	r0, [pc, #120]	@ (8007dd8 <__pow5mult+0xb0>)
 8007d60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d64:	f000 fbea 	bl	800853c <__assert_func>
 8007d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d6c:	6004      	str	r4, [r0, #0]
 8007d6e:	60c4      	str	r4, [r0, #12]
 8007d70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d78:	b94c      	cbnz	r4, 8007d8e <__pow5mult+0x66>
 8007d7a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f7ff ff1a 	bl	8007bb8 <__i2b>
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	07eb      	lsls	r3, r5, #31
 8007d94:	d50a      	bpl.n	8007dac <__pow5mult+0x84>
 8007d96:	4631      	mov	r1, r6
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f7ff ff22 	bl	8007be4 <__multiply>
 8007da0:	4631      	mov	r1, r6
 8007da2:	4680      	mov	r8, r0
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fe53 	bl	8007a50 <_Bfree>
 8007daa:	4646      	mov	r6, r8
 8007dac:	106d      	asrs	r5, r5, #1
 8007dae:	d00b      	beq.n	8007dc8 <__pow5mult+0xa0>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	b938      	cbnz	r0, 8007dc4 <__pow5mult+0x9c>
 8007db4:	4622      	mov	r2, r4
 8007db6:	4621      	mov	r1, r4
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ff13 	bl	8007be4 <__multiply>
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	f8c0 9000 	str.w	r9, [r0]
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	e7e4      	b.n	8007d92 <__pow5mult+0x6a>
 8007dc8:	4630      	mov	r0, r6
 8007dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dce:	bf00      	nop
 8007dd0:	08008d8c 	.word	0x08008d8c
 8007dd4:	08008c59 	.word	0x08008c59
 8007dd8:	08008cd9 	.word	0x08008cd9

08007ddc <__lshift>:
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	6849      	ldr	r1, [r1, #4]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	4607      	mov	r7, r0
 8007dee:	4691      	mov	r9, r2
 8007df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007df4:	f108 0601 	add.w	r6, r8, #1
 8007df8:	42b3      	cmp	r3, r6
 8007dfa:	db0b      	blt.n	8007e14 <__lshift+0x38>
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff fde7 	bl	80079d0 <_Balloc>
 8007e02:	4605      	mov	r5, r0
 8007e04:	b948      	cbnz	r0, 8007e1a <__lshift+0x3e>
 8007e06:	4602      	mov	r2, r0
 8007e08:	4b28      	ldr	r3, [pc, #160]	@ (8007eac <__lshift+0xd0>)
 8007e0a:	4829      	ldr	r0, [pc, #164]	@ (8007eb0 <__lshift+0xd4>)
 8007e0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e10:	f000 fb94 	bl	800853c <__assert_func>
 8007e14:	3101      	adds	r1, #1
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	e7ee      	b.n	8007df8 <__lshift+0x1c>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f100 0114 	add.w	r1, r0, #20
 8007e20:	f100 0210 	add.w	r2, r0, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	4553      	cmp	r3, sl
 8007e28:	db33      	blt.n	8007e92 <__lshift+0xb6>
 8007e2a:	6920      	ldr	r0, [r4, #16]
 8007e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e30:	f104 0314 	add.w	r3, r4, #20
 8007e34:	f019 091f 	ands.w	r9, r9, #31
 8007e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e40:	d02b      	beq.n	8007e9a <__lshift+0xbe>
 8007e42:	f1c9 0e20 	rsb	lr, r9, #32
 8007e46:	468a      	mov	sl, r1
 8007e48:	2200      	movs	r2, #0
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e50:	4310      	orrs	r0, r2
 8007e52:	f84a 0b04 	str.w	r0, [sl], #4
 8007e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5a:	459c      	cmp	ip, r3
 8007e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e60:	d8f3      	bhi.n	8007e4a <__lshift+0x6e>
 8007e62:	ebac 0304 	sub.w	r3, ip, r4
 8007e66:	3b15      	subs	r3, #21
 8007e68:	f023 0303 	bic.w	r3, r3, #3
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	f104 0015 	add.w	r0, r4, #21
 8007e72:	4560      	cmp	r0, ip
 8007e74:	bf88      	it	hi
 8007e76:	2304      	movhi	r3, #4
 8007e78:	50ca      	str	r2, [r1, r3]
 8007e7a:	b10a      	cbz	r2, 8007e80 <__lshift+0xa4>
 8007e7c:	f108 0602 	add.w	r6, r8, #2
 8007e80:	3e01      	subs	r6, #1
 8007e82:	4638      	mov	r0, r7
 8007e84:	612e      	str	r6, [r5, #16]
 8007e86:	4621      	mov	r1, r4
 8007e88:	f7ff fde2 	bl	8007a50 <_Bfree>
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e96:	3301      	adds	r3, #1
 8007e98:	e7c5      	b.n	8007e26 <__lshift+0x4a>
 8007e9a:	3904      	subs	r1, #4
 8007e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ea4:	459c      	cmp	ip, r3
 8007ea6:	d8f9      	bhi.n	8007e9c <__lshift+0xc0>
 8007ea8:	e7ea      	b.n	8007e80 <__lshift+0xa4>
 8007eaa:	bf00      	nop
 8007eac:	08008cc8 	.word	0x08008cc8
 8007eb0:	08008cd9 	.word	0x08008cd9

08007eb4 <__mcmp>:
 8007eb4:	690a      	ldr	r2, [r1, #16]
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6900      	ldr	r0, [r0, #16]
 8007eba:	1a80      	subs	r0, r0, r2
 8007ebc:	b530      	push	{r4, r5, lr}
 8007ebe:	d10e      	bne.n	8007ede <__mcmp+0x2a>
 8007ec0:	3314      	adds	r3, #20
 8007ec2:	3114      	adds	r1, #20
 8007ec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ed4:	4295      	cmp	r5, r2
 8007ed6:	d003      	beq.n	8007ee0 <__mcmp+0x2c>
 8007ed8:	d205      	bcs.n	8007ee6 <__mcmp+0x32>
 8007eda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d3f3      	bcc.n	8007ecc <__mcmp+0x18>
 8007ee4:	e7fb      	b.n	8007ede <__mcmp+0x2a>
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	e7f9      	b.n	8007ede <__mcmp+0x2a>
	...

08007eec <__mdiff>:
 8007eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4689      	mov	r9, r1
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4648      	mov	r0, r9
 8007ef8:	4614      	mov	r4, r2
 8007efa:	f7ff ffdb 	bl	8007eb4 <__mcmp>
 8007efe:	1e05      	subs	r5, r0, #0
 8007f00:	d112      	bne.n	8007f28 <__mdiff+0x3c>
 8007f02:	4629      	mov	r1, r5
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff fd63 	bl	80079d0 <_Balloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	b928      	cbnz	r0, 8007f1a <__mdiff+0x2e>
 8007f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800800c <__mdiff+0x120>)
 8007f10:	f240 2137 	movw	r1, #567	@ 0x237
 8007f14:	483e      	ldr	r0, [pc, #248]	@ (8008010 <__mdiff+0x124>)
 8007f16:	f000 fb11 	bl	800853c <__assert_func>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f20:	4610      	mov	r0, r2
 8007f22:	b003      	add	sp, #12
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	bfbc      	itt	lt
 8007f2a:	464b      	movlt	r3, r9
 8007f2c:	46a1      	movlt	r9, r4
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f34:	bfba      	itte	lt
 8007f36:	461c      	movlt	r4, r3
 8007f38:	2501      	movlt	r5, #1
 8007f3a:	2500      	movge	r5, #0
 8007f3c:	f7ff fd48 	bl	80079d0 <_Balloc>
 8007f40:	4602      	mov	r2, r0
 8007f42:	b918      	cbnz	r0, 8007f4c <__mdiff+0x60>
 8007f44:	4b31      	ldr	r3, [pc, #196]	@ (800800c <__mdiff+0x120>)
 8007f46:	f240 2145 	movw	r1, #581	@ 0x245
 8007f4a:	e7e3      	b.n	8007f14 <__mdiff+0x28>
 8007f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f50:	6926      	ldr	r6, [r4, #16]
 8007f52:	60c5      	str	r5, [r0, #12]
 8007f54:	f109 0310 	add.w	r3, r9, #16
 8007f58:	f109 0514 	add.w	r5, r9, #20
 8007f5c:	f104 0e14 	add.w	lr, r4, #20
 8007f60:	f100 0b14 	add.w	fp, r0, #20
 8007f64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	46d9      	mov	r9, fp
 8007f70:	f04f 0c00 	mov.w	ip, #0
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	fa1f f38a 	uxth.w	r3, sl
 8007f84:	4619      	mov	r1, r3
 8007f86:	b283      	uxth	r3, r0
 8007f88:	1acb      	subs	r3, r1, r3
 8007f8a:	0c00      	lsrs	r0, r0, #16
 8007f8c:	4463      	add	r3, ip
 8007f8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f9c:	4576      	cmp	r6, lr
 8007f9e:	f849 3b04 	str.w	r3, [r9], #4
 8007fa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fa6:	d8e5      	bhi.n	8007f74 <__mdiff+0x88>
 8007fa8:	1b33      	subs	r3, r6, r4
 8007faa:	3b15      	subs	r3, #21
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	3415      	adds	r4, #21
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	bf38      	it	cc
 8007fb8:	2304      	movcc	r3, #4
 8007fba:	441d      	add	r5, r3
 8007fbc:	445b      	add	r3, fp
 8007fbe:	461e      	mov	r6, r3
 8007fc0:	462c      	mov	r4, r5
 8007fc2:	4544      	cmp	r4, r8
 8007fc4:	d30e      	bcc.n	8007fe4 <__mdiff+0xf8>
 8007fc6:	f108 0103 	add.w	r1, r8, #3
 8007fca:	1b49      	subs	r1, r1, r5
 8007fcc:	f021 0103 	bic.w	r1, r1, #3
 8007fd0:	3d03      	subs	r5, #3
 8007fd2:	45a8      	cmp	r8, r5
 8007fd4:	bf38      	it	cc
 8007fd6:	2100      	movcc	r1, #0
 8007fd8:	440b      	add	r3, r1
 8007fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fde:	b191      	cbz	r1, 8008006 <__mdiff+0x11a>
 8007fe0:	6117      	str	r7, [r2, #16]
 8007fe2:	e79d      	b.n	8007f20 <__mdiff+0x34>
 8007fe4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fe8:	46e6      	mov	lr, ip
 8007fea:	0c08      	lsrs	r0, r1, #16
 8007fec:	fa1c fc81 	uxtah	ip, ip, r1
 8007ff0:	4471      	add	r1, lr
 8007ff2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ff6:	b289      	uxth	r1, r1
 8007ff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ffc:	f846 1b04 	str.w	r1, [r6], #4
 8008000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008004:	e7dd      	b.n	8007fc2 <__mdiff+0xd6>
 8008006:	3f01      	subs	r7, #1
 8008008:	e7e7      	b.n	8007fda <__mdiff+0xee>
 800800a:	bf00      	nop
 800800c:	08008cc8 	.word	0x08008cc8
 8008010:	08008cd9 	.word	0x08008cd9

08008014 <__d2b>:
 8008014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008018:	460f      	mov	r7, r1
 800801a:	2101      	movs	r1, #1
 800801c:	ec59 8b10 	vmov	r8, r9, d0
 8008020:	4616      	mov	r6, r2
 8008022:	f7ff fcd5 	bl	80079d0 <_Balloc>
 8008026:	4604      	mov	r4, r0
 8008028:	b930      	cbnz	r0, 8008038 <__d2b+0x24>
 800802a:	4602      	mov	r2, r0
 800802c:	4b23      	ldr	r3, [pc, #140]	@ (80080bc <__d2b+0xa8>)
 800802e:	4824      	ldr	r0, [pc, #144]	@ (80080c0 <__d2b+0xac>)
 8008030:	f240 310f 	movw	r1, #783	@ 0x30f
 8008034:	f000 fa82 	bl	800853c <__assert_func>
 8008038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800803c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008040:	b10d      	cbz	r5, 8008046 <__d2b+0x32>
 8008042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	f1b8 0300 	subs.w	r3, r8, #0
 800804c:	d023      	beq.n	8008096 <__d2b+0x82>
 800804e:	4668      	mov	r0, sp
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f7ff fd84 	bl	8007b5e <__lo0bits>
 8008056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800805a:	b1d0      	cbz	r0, 8008092 <__d2b+0x7e>
 800805c:	f1c0 0320 	rsb	r3, r0, #32
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	430b      	orrs	r3, r1
 8008066:	40c2      	lsrs	r2, r0
 8008068:	6163      	str	r3, [r4, #20]
 800806a:	9201      	str	r2, [sp, #4]
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	61a3      	str	r3, [r4, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bf0c      	ite	eq
 8008074:	2201      	moveq	r2, #1
 8008076:	2202      	movne	r2, #2
 8008078:	6122      	str	r2, [r4, #16]
 800807a:	b1a5      	cbz	r5, 80080a6 <__d2b+0x92>
 800807c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008080:	4405      	add	r5, r0
 8008082:	603d      	str	r5, [r7, #0]
 8008084:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008088:	6030      	str	r0, [r6, #0]
 800808a:	4620      	mov	r0, r4
 800808c:	b003      	add	sp, #12
 800808e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008092:	6161      	str	r1, [r4, #20]
 8008094:	e7ea      	b.n	800806c <__d2b+0x58>
 8008096:	a801      	add	r0, sp, #4
 8008098:	f7ff fd61 	bl	8007b5e <__lo0bits>
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	6163      	str	r3, [r4, #20]
 80080a0:	3020      	adds	r0, #32
 80080a2:	2201      	movs	r2, #1
 80080a4:	e7e8      	b.n	8008078 <__d2b+0x64>
 80080a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080ae:	6038      	str	r0, [r7, #0]
 80080b0:	6918      	ldr	r0, [r3, #16]
 80080b2:	f7ff fd35 	bl	8007b20 <__hi0bits>
 80080b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ba:	e7e5      	b.n	8008088 <__d2b+0x74>
 80080bc:	08008cc8 	.word	0x08008cc8
 80080c0:	08008cd9 	.word	0x08008cd9

080080c4 <__ssputs_r>:
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	688e      	ldr	r6, [r1, #8]
 80080ca:	461f      	mov	r7, r3
 80080cc:	42be      	cmp	r6, r7
 80080ce:	680b      	ldr	r3, [r1, #0]
 80080d0:	4682      	mov	sl, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	4690      	mov	r8, r2
 80080d6:	d82d      	bhi.n	8008134 <__ssputs_r+0x70>
 80080d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080e0:	d026      	beq.n	8008130 <__ssputs_r+0x6c>
 80080e2:	6965      	ldr	r5, [r4, #20]
 80080e4:	6909      	ldr	r1, [r1, #16]
 80080e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ea:	eba3 0901 	sub.w	r9, r3, r1
 80080ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080f2:	1c7b      	adds	r3, r7, #1
 80080f4:	444b      	add	r3, r9
 80080f6:	106d      	asrs	r5, r5, #1
 80080f8:	429d      	cmp	r5, r3
 80080fa:	bf38      	it	cc
 80080fc:	461d      	movcc	r5, r3
 80080fe:	0553      	lsls	r3, r2, #21
 8008100:	d527      	bpl.n	8008152 <__ssputs_r+0x8e>
 8008102:	4629      	mov	r1, r5
 8008104:	f7ff fbd8 	bl	80078b8 <_malloc_r>
 8008108:	4606      	mov	r6, r0
 800810a:	b360      	cbz	r0, 8008166 <__ssputs_r+0xa2>
 800810c:	6921      	ldr	r1, [r4, #16]
 800810e:	464a      	mov	r2, r9
 8008110:	f000 fa06 	bl	8008520 <memcpy>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800811a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	6126      	str	r6, [r4, #16]
 8008122:	6165      	str	r5, [r4, #20]
 8008124:	444e      	add	r6, r9
 8008126:	eba5 0509 	sub.w	r5, r5, r9
 800812a:	6026      	str	r6, [r4, #0]
 800812c:	60a5      	str	r5, [r4, #8]
 800812e:	463e      	mov	r6, r7
 8008130:	42be      	cmp	r6, r7
 8008132:	d900      	bls.n	8008136 <__ssputs_r+0x72>
 8008134:	463e      	mov	r6, r7
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	4632      	mov	r2, r6
 800813a:	4641      	mov	r1, r8
 800813c:	f000 f9c6 	bl	80084cc <memmove>
 8008140:	68a3      	ldr	r3, [r4, #8]
 8008142:	1b9b      	subs	r3, r3, r6
 8008144:	60a3      	str	r3, [r4, #8]
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	4433      	add	r3, r6
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	2000      	movs	r0, #0
 800814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008152:	462a      	mov	r2, r5
 8008154:	f000 fa36 	bl	80085c4 <_realloc_r>
 8008158:	4606      	mov	r6, r0
 800815a:	2800      	cmp	r0, #0
 800815c:	d1e0      	bne.n	8008120 <__ssputs_r+0x5c>
 800815e:	6921      	ldr	r1, [r4, #16]
 8008160:	4650      	mov	r0, sl
 8008162:	f7ff fb35 	bl	80077d0 <_free_r>
 8008166:	230c      	movs	r3, #12
 8008168:	f8ca 3000 	str.w	r3, [sl]
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008178:	e7e9      	b.n	800814e <__ssputs_r+0x8a>
	...

0800817c <_svfiprintf_r>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	4698      	mov	r8, r3
 8008182:	898b      	ldrh	r3, [r1, #12]
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	b09d      	sub	sp, #116	@ 0x74
 8008188:	4607      	mov	r7, r0
 800818a:	460d      	mov	r5, r1
 800818c:	4614      	mov	r4, r2
 800818e:	d510      	bpl.n	80081b2 <_svfiprintf_r+0x36>
 8008190:	690b      	ldr	r3, [r1, #16]
 8008192:	b973      	cbnz	r3, 80081b2 <_svfiprintf_r+0x36>
 8008194:	2140      	movs	r1, #64	@ 0x40
 8008196:	f7ff fb8f 	bl	80078b8 <_malloc_r>
 800819a:	6028      	str	r0, [r5, #0]
 800819c:	6128      	str	r0, [r5, #16]
 800819e:	b930      	cbnz	r0, 80081ae <_svfiprintf_r+0x32>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a8:	b01d      	add	sp, #116	@ 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	2340      	movs	r3, #64	@ 0x40
 80081b0:	616b      	str	r3, [r5, #20]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b6:	2320      	movs	r3, #32
 80081b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c0:	2330      	movs	r3, #48	@ 0x30
 80081c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008360 <_svfiprintf_r+0x1e4>
 80081c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081ca:	f04f 0901 	mov.w	r9, #1
 80081ce:	4623      	mov	r3, r4
 80081d0:	469a      	mov	sl, r3
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	b10a      	cbz	r2, 80081dc <_svfiprintf_r+0x60>
 80081d8:	2a25      	cmp	r2, #37	@ 0x25
 80081da:	d1f9      	bne.n	80081d0 <_svfiprintf_r+0x54>
 80081dc:	ebba 0b04 	subs.w	fp, sl, r4
 80081e0:	d00b      	beq.n	80081fa <_svfiprintf_r+0x7e>
 80081e2:	465b      	mov	r3, fp
 80081e4:	4622      	mov	r2, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	4638      	mov	r0, r7
 80081ea:	f7ff ff6b 	bl	80080c4 <__ssputs_r>
 80081ee:	3001      	adds	r0, #1
 80081f0:	f000 80a7 	beq.w	8008342 <_svfiprintf_r+0x1c6>
 80081f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f6:	445a      	add	r2, fp
 80081f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081fa:	f89a 3000 	ldrb.w	r3, [sl]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 809f 	beq.w	8008342 <_svfiprintf_r+0x1c6>
 8008204:	2300      	movs	r3, #0
 8008206:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800820a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800820e:	f10a 0a01 	add.w	sl, sl, #1
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	9307      	str	r3, [sp, #28]
 8008216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800821a:	931a      	str	r3, [sp, #104]	@ 0x68
 800821c:	4654      	mov	r4, sl
 800821e:	2205      	movs	r2, #5
 8008220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008224:	484e      	ldr	r0, [pc, #312]	@ (8008360 <_svfiprintf_r+0x1e4>)
 8008226:	f7f7 fffb 	bl	8000220 <memchr>
 800822a:	9a04      	ldr	r2, [sp, #16]
 800822c:	b9d8      	cbnz	r0, 8008266 <_svfiprintf_r+0xea>
 800822e:	06d0      	lsls	r0, r2, #27
 8008230:	bf44      	itt	mi
 8008232:	2320      	movmi	r3, #32
 8008234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008238:	0711      	lsls	r1, r2, #28
 800823a:	bf44      	itt	mi
 800823c:	232b      	movmi	r3, #43	@ 0x2b
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008242:	f89a 3000 	ldrb.w	r3, [sl]
 8008246:	2b2a      	cmp	r3, #42	@ 0x2a
 8008248:	d015      	beq.n	8008276 <_svfiprintf_r+0xfa>
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	4654      	mov	r4, sl
 800824e:	2000      	movs	r0, #0
 8008250:	f04f 0c0a 	mov.w	ip, #10
 8008254:	4621      	mov	r1, r4
 8008256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825a:	3b30      	subs	r3, #48	@ 0x30
 800825c:	2b09      	cmp	r3, #9
 800825e:	d94b      	bls.n	80082f8 <_svfiprintf_r+0x17c>
 8008260:	b1b0      	cbz	r0, 8008290 <_svfiprintf_r+0x114>
 8008262:	9207      	str	r2, [sp, #28]
 8008264:	e014      	b.n	8008290 <_svfiprintf_r+0x114>
 8008266:	eba0 0308 	sub.w	r3, r0, r8
 800826a:	fa09 f303 	lsl.w	r3, r9, r3
 800826e:	4313      	orrs	r3, r2
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	46a2      	mov	sl, r4
 8008274:	e7d2      	b.n	800821c <_svfiprintf_r+0xa0>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	1d19      	adds	r1, r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfbb      	ittet	lt
 8008282:	425b      	neglt	r3, r3
 8008284:	f042 0202 	orrlt.w	r2, r2, #2
 8008288:	9307      	strge	r3, [sp, #28]
 800828a:	9307      	strlt	r3, [sp, #28]
 800828c:	bfb8      	it	lt
 800828e:	9204      	strlt	r2, [sp, #16]
 8008290:	7823      	ldrb	r3, [r4, #0]
 8008292:	2b2e      	cmp	r3, #46	@ 0x2e
 8008294:	d10a      	bne.n	80082ac <_svfiprintf_r+0x130>
 8008296:	7863      	ldrb	r3, [r4, #1]
 8008298:	2b2a      	cmp	r3, #42	@ 0x2a
 800829a:	d132      	bne.n	8008302 <_svfiprintf_r+0x186>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	9203      	str	r2, [sp, #12]
 80082a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082a8:	3402      	adds	r4, #2
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008370 <_svfiprintf_r+0x1f4>
 80082b0:	7821      	ldrb	r1, [r4, #0]
 80082b2:	2203      	movs	r2, #3
 80082b4:	4650      	mov	r0, sl
 80082b6:	f7f7 ffb3 	bl	8000220 <memchr>
 80082ba:	b138      	cbz	r0, 80082cc <_svfiprintf_r+0x150>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	eba0 000a 	sub.w	r0, r0, sl
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	4082      	lsls	r2, r0
 80082c6:	4313      	orrs	r3, r2
 80082c8:	3401      	adds	r4, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	4824      	ldr	r0, [pc, #144]	@ (8008364 <_svfiprintf_r+0x1e8>)
 80082d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082d6:	2206      	movs	r2, #6
 80082d8:	f7f7 ffa2 	bl	8000220 <memchr>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d036      	beq.n	800834e <_svfiprintf_r+0x1d2>
 80082e0:	4b21      	ldr	r3, [pc, #132]	@ (8008368 <_svfiprintf_r+0x1ec>)
 80082e2:	bb1b      	cbnz	r3, 800832c <_svfiprintf_r+0x1b0>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	3307      	adds	r3, #7
 80082e8:	f023 0307 	bic.w	r3, r3, #7
 80082ec:	3308      	adds	r3, #8
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f2:	4433      	add	r3, r6
 80082f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f6:	e76a      	b.n	80081ce <_svfiprintf_r+0x52>
 80082f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fc:	460c      	mov	r4, r1
 80082fe:	2001      	movs	r0, #1
 8008300:	e7a8      	b.n	8008254 <_svfiprintf_r+0xd8>
 8008302:	2300      	movs	r3, #0
 8008304:	3401      	adds	r4, #1
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	4619      	mov	r1, r3
 800830a:	f04f 0c0a 	mov.w	ip, #10
 800830e:	4620      	mov	r0, r4
 8008310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008314:	3a30      	subs	r2, #48	@ 0x30
 8008316:	2a09      	cmp	r2, #9
 8008318:	d903      	bls.n	8008322 <_svfiprintf_r+0x1a6>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c6      	beq.n	80082ac <_svfiprintf_r+0x130>
 800831e:	9105      	str	r1, [sp, #20]
 8008320:	e7c4      	b.n	80082ac <_svfiprintf_r+0x130>
 8008322:	fb0c 2101 	mla	r1, ip, r1, r2
 8008326:	4604      	mov	r4, r0
 8008328:	2301      	movs	r3, #1
 800832a:	e7f0      	b.n	800830e <_svfiprintf_r+0x192>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	462a      	mov	r2, r5
 8008332:	4b0e      	ldr	r3, [pc, #56]	@ (800836c <_svfiprintf_r+0x1f0>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4638      	mov	r0, r7
 8008338:	f7fd fe94 	bl	8006064 <_printf_float>
 800833c:	1c42      	adds	r2, r0, #1
 800833e:	4606      	mov	r6, r0
 8008340:	d1d6      	bne.n	80082f0 <_svfiprintf_r+0x174>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	065b      	lsls	r3, r3, #25
 8008346:	f53f af2d 	bmi.w	80081a4 <_svfiprintf_r+0x28>
 800834a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800834c:	e72c      	b.n	80081a8 <_svfiprintf_r+0x2c>
 800834e:	ab03      	add	r3, sp, #12
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	462a      	mov	r2, r5
 8008354:	4b05      	ldr	r3, [pc, #20]	@ (800836c <_svfiprintf_r+0x1f0>)
 8008356:	a904      	add	r1, sp, #16
 8008358:	4638      	mov	r0, r7
 800835a:	f7fe f91b 	bl	8006594 <_printf_i>
 800835e:	e7ed      	b.n	800833c <_svfiprintf_r+0x1c0>
 8008360:	08008d32 	.word	0x08008d32
 8008364:	08008d3c 	.word	0x08008d3c
 8008368:	08006065 	.word	0x08006065
 800836c:	080080c5 	.word	0x080080c5
 8008370:	08008d38 	.word	0x08008d38

08008374 <__sflush_r>:
 8008374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	0716      	lsls	r6, r2, #28
 800837e:	4605      	mov	r5, r0
 8008380:	460c      	mov	r4, r1
 8008382:	d454      	bmi.n	800842e <__sflush_r+0xba>
 8008384:	684b      	ldr	r3, [r1, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	dc02      	bgt.n	8008390 <__sflush_r+0x1c>
 800838a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd48      	ble.n	8008422 <__sflush_r+0xae>
 8008390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008392:	2e00      	cmp	r6, #0
 8008394:	d045      	beq.n	8008422 <__sflush_r+0xae>
 8008396:	2300      	movs	r3, #0
 8008398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800839c:	682f      	ldr	r7, [r5, #0]
 800839e:	6a21      	ldr	r1, [r4, #32]
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	d030      	beq.n	8008406 <__sflush_r+0x92>
 80083a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	0759      	lsls	r1, r3, #29
 80083aa:	d505      	bpl.n	80083b8 <__sflush_r+0x44>
 80083ac:	6863      	ldr	r3, [r4, #4]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083b2:	b10b      	cbz	r3, 80083b8 <__sflush_r+0x44>
 80083b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083bc:	6a21      	ldr	r1, [r4, #32]
 80083be:	4628      	mov	r0, r5
 80083c0:	47b0      	blx	r6
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	d106      	bne.n	80083d6 <__sflush_r+0x62>
 80083c8:	6829      	ldr	r1, [r5, #0]
 80083ca:	291d      	cmp	r1, #29
 80083cc:	d82b      	bhi.n	8008426 <__sflush_r+0xb2>
 80083ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008478 <__sflush_r+0x104>)
 80083d0:	40ca      	lsrs	r2, r1
 80083d2:	07d6      	lsls	r6, r2, #31
 80083d4:	d527      	bpl.n	8008426 <__sflush_r+0xb2>
 80083d6:	2200      	movs	r2, #0
 80083d8:	6062      	str	r2, [r4, #4]
 80083da:	04d9      	lsls	r1, r3, #19
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	6022      	str	r2, [r4, #0]
 80083e0:	d504      	bpl.n	80083ec <__sflush_r+0x78>
 80083e2:	1c42      	adds	r2, r0, #1
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0x76>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b903      	cbnz	r3, 80083ec <__sflush_r+0x78>
 80083ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80083ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ee:	602f      	str	r7, [r5, #0]
 80083f0:	b1b9      	cbz	r1, 8008422 <__sflush_r+0xae>
 80083f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083f6:	4299      	cmp	r1, r3
 80083f8:	d002      	beq.n	8008400 <__sflush_r+0x8c>
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7ff f9e8 	bl	80077d0 <_free_r>
 8008400:	2300      	movs	r3, #0
 8008402:	6363      	str	r3, [r4, #52]	@ 0x34
 8008404:	e00d      	b.n	8008422 <__sflush_r+0xae>
 8008406:	2301      	movs	r3, #1
 8008408:	4628      	mov	r0, r5
 800840a:	47b0      	blx	r6
 800840c:	4602      	mov	r2, r0
 800840e:	1c50      	adds	r0, r2, #1
 8008410:	d1c9      	bne.n	80083a6 <__sflush_r+0x32>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0c6      	beq.n	80083a6 <__sflush_r+0x32>
 8008418:	2b1d      	cmp	r3, #29
 800841a:	d001      	beq.n	8008420 <__sflush_r+0xac>
 800841c:	2b16      	cmp	r3, #22
 800841e:	d11e      	bne.n	800845e <__sflush_r+0xea>
 8008420:	602f      	str	r7, [r5, #0]
 8008422:	2000      	movs	r0, #0
 8008424:	e022      	b.n	800846c <__sflush_r+0xf8>
 8008426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800842a:	b21b      	sxth	r3, r3
 800842c:	e01b      	b.n	8008466 <__sflush_r+0xf2>
 800842e:	690f      	ldr	r7, [r1, #16]
 8008430:	2f00      	cmp	r7, #0
 8008432:	d0f6      	beq.n	8008422 <__sflush_r+0xae>
 8008434:	0793      	lsls	r3, r2, #30
 8008436:	680e      	ldr	r6, [r1, #0]
 8008438:	bf08      	it	eq
 800843a:	694b      	ldreq	r3, [r1, #20]
 800843c:	600f      	str	r7, [r1, #0]
 800843e:	bf18      	it	ne
 8008440:	2300      	movne	r3, #0
 8008442:	eba6 0807 	sub.w	r8, r6, r7
 8008446:	608b      	str	r3, [r1, #8]
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	dde9      	ble.n	8008422 <__sflush_r+0xae>
 800844e:	6a21      	ldr	r1, [r4, #32]
 8008450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008452:	4643      	mov	r3, r8
 8008454:	463a      	mov	r2, r7
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	2800      	cmp	r0, #0
 800845c:	dc08      	bgt.n	8008470 <__sflush_r+0xfc>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	4407      	add	r7, r0
 8008472:	eba8 0800 	sub.w	r8, r8, r0
 8008476:	e7e7      	b.n	8008448 <__sflush_r+0xd4>
 8008478:	20400001 	.word	0x20400001

0800847c <_fflush_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	4605      	mov	r5, r0
 8008482:	460c      	mov	r4, r1
 8008484:	b913      	cbnz	r3, 800848c <_fflush_r+0x10>
 8008486:	2500      	movs	r5, #0
 8008488:	4628      	mov	r0, r5
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	b118      	cbz	r0, 8008496 <_fflush_r+0x1a>
 800848e:	6a03      	ldr	r3, [r0, #32]
 8008490:	b90b      	cbnz	r3, 8008496 <_fflush_r+0x1a>
 8008492:	f7fe fa29 	bl	80068e8 <__sinit>
 8008496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f3      	beq.n	8008486 <_fflush_r+0xa>
 800849e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084a0:	07d0      	lsls	r0, r2, #31
 80084a2:	d404      	bmi.n	80084ae <_fflush_r+0x32>
 80084a4:	0599      	lsls	r1, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_fflush_r+0x32>
 80084a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084aa:	f7fe fb36 	bl	8006b1a <__retarget_lock_acquire_recursive>
 80084ae:	4628      	mov	r0, r5
 80084b0:	4621      	mov	r1, r4
 80084b2:	f7ff ff5f 	bl	8008374 <__sflush_r>
 80084b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b8:	07da      	lsls	r2, r3, #31
 80084ba:	4605      	mov	r5, r0
 80084bc:	d4e4      	bmi.n	8008488 <_fflush_r+0xc>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	059b      	lsls	r3, r3, #22
 80084c2:	d4e1      	bmi.n	8008488 <_fflush_r+0xc>
 80084c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084c6:	f7fe fb29 	bl	8006b1c <__retarget_lock_release_recursive>
 80084ca:	e7dd      	b.n	8008488 <_fflush_r+0xc>

080084cc <memmove>:
 80084cc:	4288      	cmp	r0, r1
 80084ce:	b510      	push	{r4, lr}
 80084d0:	eb01 0402 	add.w	r4, r1, r2
 80084d4:	d902      	bls.n	80084dc <memmove+0x10>
 80084d6:	4284      	cmp	r4, r0
 80084d8:	4623      	mov	r3, r4
 80084da:	d807      	bhi.n	80084ec <memmove+0x20>
 80084dc:	1e43      	subs	r3, r0, #1
 80084de:	42a1      	cmp	r1, r4
 80084e0:	d008      	beq.n	80084f4 <memmove+0x28>
 80084e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ea:	e7f8      	b.n	80084de <memmove+0x12>
 80084ec:	4402      	add	r2, r0
 80084ee:	4601      	mov	r1, r0
 80084f0:	428a      	cmp	r2, r1
 80084f2:	d100      	bne.n	80084f6 <memmove+0x2a>
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084fe:	e7f7      	b.n	80084f0 <memmove+0x24>

08008500 <_sbrk_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d06      	ldr	r5, [pc, #24]	@ (800851c <_sbrk_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7f9 fb26 	bl	8001b5c <_sbrk>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_sbrk_r+0x1a>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_sbrk_r+0x1a>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	2000069c 	.word	0x2000069c

08008520 <memcpy>:
 8008520:	440a      	add	r2, r1
 8008522:	4291      	cmp	r1, r2
 8008524:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008528:	d100      	bne.n	800852c <memcpy+0xc>
 800852a:	4770      	bx	lr
 800852c:	b510      	push	{r4, lr}
 800852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008536:	4291      	cmp	r1, r2
 8008538:	d1f9      	bne.n	800852e <memcpy+0xe>
 800853a:	bd10      	pop	{r4, pc}

0800853c <__assert_func>:
 800853c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800853e:	4614      	mov	r4, r2
 8008540:	461a      	mov	r2, r3
 8008542:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <__assert_func+0x2c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4605      	mov	r5, r0
 8008548:	68d8      	ldr	r0, [r3, #12]
 800854a:	b14c      	cbz	r4, 8008560 <__assert_func+0x24>
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <__assert_func+0x30>)
 800854e:	9100      	str	r1, [sp, #0]
 8008550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008554:	4906      	ldr	r1, [pc, #24]	@ (8008570 <__assert_func+0x34>)
 8008556:	462b      	mov	r3, r5
 8008558:	f000 f870 	bl	800863c <fiprintf>
 800855c:	f000 f880 	bl	8008660 <abort>
 8008560:	4b04      	ldr	r3, [pc, #16]	@ (8008574 <__assert_func+0x38>)
 8008562:	461c      	mov	r4, r3
 8008564:	e7f3      	b.n	800854e <__assert_func+0x12>
 8008566:	bf00      	nop
 8008568:	20000030 	.word	0x20000030
 800856c:	08008d4d 	.word	0x08008d4d
 8008570:	08008d5a 	.word	0x08008d5a
 8008574:	08008d88 	.word	0x08008d88

08008578 <_calloc_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	fba1 5402 	umull	r5, r4, r1, r2
 800857e:	b934      	cbnz	r4, 800858e <_calloc_r+0x16>
 8008580:	4629      	mov	r1, r5
 8008582:	f7ff f999 	bl	80078b8 <_malloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	b928      	cbnz	r0, 8008596 <_calloc_r+0x1e>
 800858a:	4630      	mov	r0, r6
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	220c      	movs	r2, #12
 8008590:	6002      	str	r2, [r0, #0]
 8008592:	2600      	movs	r6, #0
 8008594:	e7f9      	b.n	800858a <_calloc_r+0x12>
 8008596:	462a      	mov	r2, r5
 8008598:	4621      	mov	r1, r4
 800859a:	f7fe fa40 	bl	8006a1e <memset>
 800859e:	e7f4      	b.n	800858a <_calloc_r+0x12>

080085a0 <__ascii_mbtowc>:
 80085a0:	b082      	sub	sp, #8
 80085a2:	b901      	cbnz	r1, 80085a6 <__ascii_mbtowc+0x6>
 80085a4:	a901      	add	r1, sp, #4
 80085a6:	b142      	cbz	r2, 80085ba <__ascii_mbtowc+0x1a>
 80085a8:	b14b      	cbz	r3, 80085be <__ascii_mbtowc+0x1e>
 80085aa:	7813      	ldrb	r3, [r2, #0]
 80085ac:	600b      	str	r3, [r1, #0]
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	1e10      	subs	r0, r2, #0
 80085b2:	bf18      	it	ne
 80085b4:	2001      	movne	r0, #1
 80085b6:	b002      	add	sp, #8
 80085b8:	4770      	bx	lr
 80085ba:	4610      	mov	r0, r2
 80085bc:	e7fb      	b.n	80085b6 <__ascii_mbtowc+0x16>
 80085be:	f06f 0001 	mvn.w	r0, #1
 80085c2:	e7f8      	b.n	80085b6 <__ascii_mbtowc+0x16>

080085c4 <_realloc_r>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	4607      	mov	r7, r0
 80085ca:	4614      	mov	r4, r2
 80085cc:	460d      	mov	r5, r1
 80085ce:	b921      	cbnz	r1, 80085da <_realloc_r+0x16>
 80085d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d4:	4611      	mov	r1, r2
 80085d6:	f7ff b96f 	b.w	80078b8 <_malloc_r>
 80085da:	b92a      	cbnz	r2, 80085e8 <_realloc_r+0x24>
 80085dc:	f7ff f8f8 	bl	80077d0 <_free_r>
 80085e0:	4625      	mov	r5, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e8:	f000 f841 	bl	800866e <_malloc_usable_size_r>
 80085ec:	4284      	cmp	r4, r0
 80085ee:	4606      	mov	r6, r0
 80085f0:	d802      	bhi.n	80085f8 <_realloc_r+0x34>
 80085f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085f6:	d8f4      	bhi.n	80085e2 <_realloc_r+0x1e>
 80085f8:	4621      	mov	r1, r4
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff f95c 	bl	80078b8 <_malloc_r>
 8008600:	4680      	mov	r8, r0
 8008602:	b908      	cbnz	r0, 8008608 <_realloc_r+0x44>
 8008604:	4645      	mov	r5, r8
 8008606:	e7ec      	b.n	80085e2 <_realloc_r+0x1e>
 8008608:	42b4      	cmp	r4, r6
 800860a:	4622      	mov	r2, r4
 800860c:	4629      	mov	r1, r5
 800860e:	bf28      	it	cs
 8008610:	4632      	movcs	r2, r6
 8008612:	f7ff ff85 	bl	8008520 <memcpy>
 8008616:	4629      	mov	r1, r5
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff f8d9 	bl	80077d0 <_free_r>
 800861e:	e7f1      	b.n	8008604 <_realloc_r+0x40>

08008620 <__ascii_wctomb>:
 8008620:	4603      	mov	r3, r0
 8008622:	4608      	mov	r0, r1
 8008624:	b141      	cbz	r1, 8008638 <__ascii_wctomb+0x18>
 8008626:	2aff      	cmp	r2, #255	@ 0xff
 8008628:	d904      	bls.n	8008634 <__ascii_wctomb+0x14>
 800862a:	228a      	movs	r2, #138	@ 0x8a
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008632:	4770      	bx	lr
 8008634:	700a      	strb	r2, [r1, #0]
 8008636:	2001      	movs	r0, #1
 8008638:	4770      	bx	lr
	...

0800863c <fiprintf>:
 800863c:	b40e      	push	{r1, r2, r3}
 800863e:	b503      	push	{r0, r1, lr}
 8008640:	4601      	mov	r1, r0
 8008642:	ab03      	add	r3, sp, #12
 8008644:	4805      	ldr	r0, [pc, #20]	@ (800865c <fiprintf+0x20>)
 8008646:	f853 2b04 	ldr.w	r2, [r3], #4
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	f000 f83f 	bl	80086d0 <_vfiprintf_r>
 8008652:	b002      	add	sp, #8
 8008654:	f85d eb04 	ldr.w	lr, [sp], #4
 8008658:	b003      	add	sp, #12
 800865a:	4770      	bx	lr
 800865c:	20000030 	.word	0x20000030

08008660 <abort>:
 8008660:	b508      	push	{r3, lr}
 8008662:	2006      	movs	r0, #6
 8008664:	f000 fa08 	bl	8008a78 <raise>
 8008668:	2001      	movs	r0, #1
 800866a:	f7f9 f9ff 	bl	8001a6c <_exit>

0800866e <_malloc_usable_size_r>:
 800866e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008672:	1f18      	subs	r0, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	bfbc      	itt	lt
 8008678:	580b      	ldrlt	r3, [r1, r0]
 800867a:	18c0      	addlt	r0, r0, r3
 800867c:	4770      	bx	lr

0800867e <__sfputc_r>:
 800867e:	6893      	ldr	r3, [r2, #8]
 8008680:	3b01      	subs	r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	b410      	push	{r4}
 8008686:	6093      	str	r3, [r2, #8]
 8008688:	da08      	bge.n	800869c <__sfputc_r+0x1e>
 800868a:	6994      	ldr	r4, [r2, #24]
 800868c:	42a3      	cmp	r3, r4
 800868e:	db01      	blt.n	8008694 <__sfputc_r+0x16>
 8008690:	290a      	cmp	r1, #10
 8008692:	d103      	bne.n	800869c <__sfputc_r+0x1e>
 8008694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008698:	f000 b932 	b.w	8008900 <__swbuf_r>
 800869c:	6813      	ldr	r3, [r2, #0]
 800869e:	1c58      	adds	r0, r3, #1
 80086a0:	6010      	str	r0, [r2, #0]
 80086a2:	7019      	strb	r1, [r3, #0]
 80086a4:	4608      	mov	r0, r1
 80086a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <__sfputs_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	4614      	mov	r4, r2
 80086b4:	18d5      	adds	r5, r2, r3
 80086b6:	42ac      	cmp	r4, r5
 80086b8:	d101      	bne.n	80086be <__sfputs_r+0x12>
 80086ba:	2000      	movs	r0, #0
 80086bc:	e007      	b.n	80086ce <__sfputs_r+0x22>
 80086be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c2:	463a      	mov	r2, r7
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff ffda 	bl	800867e <__sfputc_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d1f3      	bne.n	80086b6 <__sfputs_r+0xa>
 80086ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086d0 <_vfiprintf_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	460d      	mov	r5, r1
 80086d6:	b09d      	sub	sp, #116	@ 0x74
 80086d8:	4614      	mov	r4, r2
 80086da:	4698      	mov	r8, r3
 80086dc:	4606      	mov	r6, r0
 80086de:	b118      	cbz	r0, 80086e8 <_vfiprintf_r+0x18>
 80086e0:	6a03      	ldr	r3, [r0, #32]
 80086e2:	b90b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x18>
 80086e4:	f7fe f900 	bl	80068e8 <__sinit>
 80086e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_vfiprintf_r+0x2a>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_vfiprintf_r+0x2a>
 80086f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086f6:	f7fe fa10 	bl	8006b1a <__retarget_lock_acquire_recursive>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	071b      	lsls	r3, r3, #28
 80086fe:	d501      	bpl.n	8008704 <_vfiprintf_r+0x34>
 8008700:	692b      	ldr	r3, [r5, #16]
 8008702:	b99b      	cbnz	r3, 800872c <_vfiprintf_r+0x5c>
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f000 f938 	bl	800897c <__swsetup_r>
 800870c:	b170      	cbz	r0, 800872c <_vfiprintf_r+0x5c>
 800870e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008710:	07dc      	lsls	r4, r3, #31
 8008712:	d504      	bpl.n	800871e <_vfiprintf_r+0x4e>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008718:	b01d      	add	sp, #116	@ 0x74
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	0598      	lsls	r0, r3, #22
 8008722:	d4f7      	bmi.n	8008714 <_vfiprintf_r+0x44>
 8008724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008726:	f7fe f9f9 	bl	8006b1c <__retarget_lock_release_recursive>
 800872a:	e7f3      	b.n	8008714 <_vfiprintf_r+0x44>
 800872c:	2300      	movs	r3, #0
 800872e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008730:	2320      	movs	r3, #32
 8008732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008736:	f8cd 800c 	str.w	r8, [sp, #12]
 800873a:	2330      	movs	r3, #48	@ 0x30
 800873c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088ec <_vfiprintf_r+0x21c>
 8008740:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008744:	f04f 0901 	mov.w	r9, #1
 8008748:	4623      	mov	r3, r4
 800874a:	469a      	mov	sl, r3
 800874c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008750:	b10a      	cbz	r2, 8008756 <_vfiprintf_r+0x86>
 8008752:	2a25      	cmp	r2, #37	@ 0x25
 8008754:	d1f9      	bne.n	800874a <_vfiprintf_r+0x7a>
 8008756:	ebba 0b04 	subs.w	fp, sl, r4
 800875a:	d00b      	beq.n	8008774 <_vfiprintf_r+0xa4>
 800875c:	465b      	mov	r3, fp
 800875e:	4622      	mov	r2, r4
 8008760:	4629      	mov	r1, r5
 8008762:	4630      	mov	r0, r6
 8008764:	f7ff ffa2 	bl	80086ac <__sfputs_r>
 8008768:	3001      	adds	r0, #1
 800876a:	f000 80a7 	beq.w	80088bc <_vfiprintf_r+0x1ec>
 800876e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008770:	445a      	add	r2, fp
 8008772:	9209      	str	r2, [sp, #36]	@ 0x24
 8008774:	f89a 3000 	ldrb.w	r3, [sl]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 809f 	beq.w	80088bc <_vfiprintf_r+0x1ec>
 800877e:	2300      	movs	r3, #0
 8008780:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008788:	f10a 0a01 	add.w	sl, sl, #1
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	9307      	str	r3, [sp, #28]
 8008790:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008794:	931a      	str	r3, [sp, #104]	@ 0x68
 8008796:	4654      	mov	r4, sl
 8008798:	2205      	movs	r2, #5
 800879a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879e:	4853      	ldr	r0, [pc, #332]	@ (80088ec <_vfiprintf_r+0x21c>)
 80087a0:	f7f7 fd3e 	bl	8000220 <memchr>
 80087a4:	9a04      	ldr	r2, [sp, #16]
 80087a6:	b9d8      	cbnz	r0, 80087e0 <_vfiprintf_r+0x110>
 80087a8:	06d1      	lsls	r1, r2, #27
 80087aa:	bf44      	itt	mi
 80087ac:	2320      	movmi	r3, #32
 80087ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b2:	0713      	lsls	r3, r2, #28
 80087b4:	bf44      	itt	mi
 80087b6:	232b      	movmi	r3, #43	@ 0x2b
 80087b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087bc:	f89a 3000 	ldrb.w	r3, [sl]
 80087c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c2:	d015      	beq.n	80087f0 <_vfiprintf_r+0x120>
 80087c4:	9a07      	ldr	r2, [sp, #28]
 80087c6:	4654      	mov	r4, sl
 80087c8:	2000      	movs	r0, #0
 80087ca:	f04f 0c0a 	mov.w	ip, #10
 80087ce:	4621      	mov	r1, r4
 80087d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d4:	3b30      	subs	r3, #48	@ 0x30
 80087d6:	2b09      	cmp	r3, #9
 80087d8:	d94b      	bls.n	8008872 <_vfiprintf_r+0x1a2>
 80087da:	b1b0      	cbz	r0, 800880a <_vfiprintf_r+0x13a>
 80087dc:	9207      	str	r2, [sp, #28]
 80087de:	e014      	b.n	800880a <_vfiprintf_r+0x13a>
 80087e0:	eba0 0308 	sub.w	r3, r0, r8
 80087e4:	fa09 f303 	lsl.w	r3, r9, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	46a2      	mov	sl, r4
 80087ee:	e7d2      	b.n	8008796 <_vfiprintf_r+0xc6>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	1d19      	adds	r1, r3, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfbb      	ittet	lt
 80087fc:	425b      	neglt	r3, r3
 80087fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008802:	9307      	strge	r3, [sp, #28]
 8008804:	9307      	strlt	r3, [sp, #28]
 8008806:	bfb8      	it	lt
 8008808:	9204      	strlt	r2, [sp, #16]
 800880a:	7823      	ldrb	r3, [r4, #0]
 800880c:	2b2e      	cmp	r3, #46	@ 0x2e
 800880e:	d10a      	bne.n	8008826 <_vfiprintf_r+0x156>
 8008810:	7863      	ldrb	r3, [r4, #1]
 8008812:	2b2a      	cmp	r3, #42	@ 0x2a
 8008814:	d132      	bne.n	800887c <_vfiprintf_r+0x1ac>
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	9203      	str	r2, [sp, #12]
 800881e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008822:	3402      	adds	r4, #2
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088fc <_vfiprintf_r+0x22c>
 800882a:	7821      	ldrb	r1, [r4, #0]
 800882c:	2203      	movs	r2, #3
 800882e:	4650      	mov	r0, sl
 8008830:	f7f7 fcf6 	bl	8000220 <memchr>
 8008834:	b138      	cbz	r0, 8008846 <_vfiprintf_r+0x176>
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	eba0 000a 	sub.w	r0, r0, sl
 800883c:	2240      	movs	r2, #64	@ 0x40
 800883e:	4082      	lsls	r2, r0
 8008840:	4313      	orrs	r3, r2
 8008842:	3401      	adds	r4, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884a:	4829      	ldr	r0, [pc, #164]	@ (80088f0 <_vfiprintf_r+0x220>)
 800884c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008850:	2206      	movs	r2, #6
 8008852:	f7f7 fce5 	bl	8000220 <memchr>
 8008856:	2800      	cmp	r0, #0
 8008858:	d03f      	beq.n	80088da <_vfiprintf_r+0x20a>
 800885a:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <_vfiprintf_r+0x224>)
 800885c:	bb1b      	cbnz	r3, 80088a6 <_vfiprintf_r+0x1d6>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	3307      	adds	r3, #7
 8008862:	f023 0307 	bic.w	r3, r3, #7
 8008866:	3308      	adds	r3, #8
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	443b      	add	r3, r7
 800886e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008870:	e76a      	b.n	8008748 <_vfiprintf_r+0x78>
 8008872:	fb0c 3202 	mla	r2, ip, r2, r3
 8008876:	460c      	mov	r4, r1
 8008878:	2001      	movs	r0, #1
 800887a:	e7a8      	b.n	80087ce <_vfiprintf_r+0xfe>
 800887c:	2300      	movs	r3, #0
 800887e:	3401      	adds	r4, #1
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	4619      	mov	r1, r3
 8008884:	f04f 0c0a 	mov.w	ip, #10
 8008888:	4620      	mov	r0, r4
 800888a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800888e:	3a30      	subs	r2, #48	@ 0x30
 8008890:	2a09      	cmp	r2, #9
 8008892:	d903      	bls.n	800889c <_vfiprintf_r+0x1cc>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0c6      	beq.n	8008826 <_vfiprintf_r+0x156>
 8008898:	9105      	str	r1, [sp, #20]
 800889a:	e7c4      	b.n	8008826 <_vfiprintf_r+0x156>
 800889c:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a0:	4604      	mov	r4, r0
 80088a2:	2301      	movs	r3, #1
 80088a4:	e7f0      	b.n	8008888 <_vfiprintf_r+0x1b8>
 80088a6:	ab03      	add	r3, sp, #12
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	462a      	mov	r2, r5
 80088ac:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <_vfiprintf_r+0x228>)
 80088ae:	a904      	add	r1, sp, #16
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7fd fbd7 	bl	8006064 <_printf_float>
 80088b6:	4607      	mov	r7, r0
 80088b8:	1c78      	adds	r0, r7, #1
 80088ba:	d1d6      	bne.n	800886a <_vfiprintf_r+0x19a>
 80088bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	d405      	bmi.n	80088ce <_vfiprintf_r+0x1fe>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	059a      	lsls	r2, r3, #22
 80088c6:	d402      	bmi.n	80088ce <_vfiprintf_r+0x1fe>
 80088c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ca:	f7fe f927 	bl	8006b1c <__retarget_lock_release_recursive>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	065b      	lsls	r3, r3, #25
 80088d2:	f53f af1f 	bmi.w	8008714 <_vfiprintf_r+0x44>
 80088d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088d8:	e71e      	b.n	8008718 <_vfiprintf_r+0x48>
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	462a      	mov	r2, r5
 80088e0:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <_vfiprintf_r+0x228>)
 80088e2:	a904      	add	r1, sp, #16
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fd fe55 	bl	8006594 <_printf_i>
 80088ea:	e7e4      	b.n	80088b6 <_vfiprintf_r+0x1e6>
 80088ec:	08008d32 	.word	0x08008d32
 80088f0:	08008d3c 	.word	0x08008d3c
 80088f4:	08006065 	.word	0x08006065
 80088f8:	080086ad 	.word	0x080086ad
 80088fc:	08008d38 	.word	0x08008d38

08008900 <__swbuf_r>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	460e      	mov	r6, r1
 8008904:	4614      	mov	r4, r2
 8008906:	4605      	mov	r5, r0
 8008908:	b118      	cbz	r0, 8008912 <__swbuf_r+0x12>
 800890a:	6a03      	ldr	r3, [r0, #32]
 800890c:	b90b      	cbnz	r3, 8008912 <__swbuf_r+0x12>
 800890e:	f7fd ffeb 	bl	80068e8 <__sinit>
 8008912:	69a3      	ldr	r3, [r4, #24]
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	071a      	lsls	r2, r3, #28
 800891a:	d501      	bpl.n	8008920 <__swbuf_r+0x20>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	b943      	cbnz	r3, 8008932 <__swbuf_r+0x32>
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f82a 	bl	800897c <__swsetup_r>
 8008928:	b118      	cbz	r0, 8008932 <__swbuf_r+0x32>
 800892a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800892e:	4638      	mov	r0, r7
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	1a98      	subs	r0, r3, r2
 8008938:	6963      	ldr	r3, [r4, #20]
 800893a:	b2f6      	uxtb	r6, r6
 800893c:	4283      	cmp	r3, r0
 800893e:	4637      	mov	r7, r6
 8008940:	dc05      	bgt.n	800894e <__swbuf_r+0x4e>
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f7ff fd99 	bl	800847c <_fflush_r>
 800894a:	2800      	cmp	r0, #0
 800894c:	d1ed      	bne.n	800892a <__swbuf_r+0x2a>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	3b01      	subs	r3, #1
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	701e      	strb	r6, [r3, #0]
 800895c:	6962      	ldr	r2, [r4, #20]
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	429a      	cmp	r2, r3
 8008962:	d004      	beq.n	800896e <__swbuf_r+0x6e>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	07db      	lsls	r3, r3, #31
 8008968:	d5e1      	bpl.n	800892e <__swbuf_r+0x2e>
 800896a:	2e0a      	cmp	r6, #10
 800896c:	d1df      	bne.n	800892e <__swbuf_r+0x2e>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f7ff fd83 	bl	800847c <_fflush_r>
 8008976:	2800      	cmp	r0, #0
 8008978:	d0d9      	beq.n	800892e <__swbuf_r+0x2e>
 800897a:	e7d6      	b.n	800892a <__swbuf_r+0x2a>

0800897c <__swsetup_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4b29      	ldr	r3, [pc, #164]	@ (8008a24 <__swsetup_r+0xa8>)
 8008980:	4605      	mov	r5, r0
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	460c      	mov	r4, r1
 8008986:	b118      	cbz	r0, 8008990 <__swsetup_r+0x14>
 8008988:	6a03      	ldr	r3, [r0, #32]
 800898a:	b90b      	cbnz	r3, 8008990 <__swsetup_r+0x14>
 800898c:	f7fd ffac 	bl	80068e8 <__sinit>
 8008990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008994:	0719      	lsls	r1, r3, #28
 8008996:	d422      	bmi.n	80089de <__swsetup_r+0x62>
 8008998:	06da      	lsls	r2, r3, #27
 800899a:	d407      	bmi.n	80089ac <__swsetup_r+0x30>
 800899c:	2209      	movs	r2, #9
 800899e:	602a      	str	r2, [r5, #0]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089aa:	e033      	b.n	8008a14 <__swsetup_r+0x98>
 80089ac:	0758      	lsls	r0, r3, #29
 80089ae:	d512      	bpl.n	80089d6 <__swsetup_r+0x5a>
 80089b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089b2:	b141      	cbz	r1, 80089c6 <__swsetup_r+0x4a>
 80089b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d002      	beq.n	80089c2 <__swsetup_r+0x46>
 80089bc:	4628      	mov	r0, r5
 80089be:	f7fe ff07 	bl	80077d0 <_free_r>
 80089c2:	2300      	movs	r3, #0
 80089c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	2300      	movs	r3, #0
 80089d0:	6063      	str	r3, [r4, #4]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f043 0308 	orr.w	r3, r3, #8
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	b94b      	cbnz	r3, 80089f6 <__swsetup_r+0x7a>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ec:	d003      	beq.n	80089f6 <__swsetup_r+0x7a>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 f883 	bl	8008afc <__smakebuf_r>
 80089f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fa:	f013 0201 	ands.w	r2, r3, #1
 80089fe:	d00a      	beq.n	8008a16 <__swsetup_r+0x9a>
 8008a00:	2200      	movs	r2, #0
 8008a02:	60a2      	str	r2, [r4, #8]
 8008a04:	6962      	ldr	r2, [r4, #20]
 8008a06:	4252      	negs	r2, r2
 8008a08:	61a2      	str	r2, [r4, #24]
 8008a0a:	6922      	ldr	r2, [r4, #16]
 8008a0c:	b942      	cbnz	r2, 8008a20 <__swsetup_r+0xa4>
 8008a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a12:	d1c5      	bne.n	80089a0 <__swsetup_r+0x24>
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	0799      	lsls	r1, r3, #30
 8008a18:	bf58      	it	pl
 8008a1a:	6962      	ldrpl	r2, [r4, #20]
 8008a1c:	60a2      	str	r2, [r4, #8]
 8008a1e:	e7f4      	b.n	8008a0a <__swsetup_r+0x8e>
 8008a20:	2000      	movs	r0, #0
 8008a22:	e7f7      	b.n	8008a14 <__swsetup_r+0x98>
 8008a24:	20000030 	.word	0x20000030

08008a28 <_raise_r>:
 8008a28:	291f      	cmp	r1, #31
 8008a2a:	b538      	push	{r3, r4, r5, lr}
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	d904      	bls.n	8008a3c <_raise_r+0x14>
 8008a32:	2316      	movs	r3, #22
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a3e:	b112      	cbz	r2, 8008a46 <_raise_r+0x1e>
 8008a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a44:	b94b      	cbnz	r3, 8008a5a <_raise_r+0x32>
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 f830 	bl	8008aac <_getpid_r>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4601      	mov	r1, r0
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a56:	f000 b817 	b.w	8008a88 <_kill_r>
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d00a      	beq.n	8008a74 <_raise_r+0x4c>
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	d103      	bne.n	8008a6a <_raise_r+0x42>
 8008a62:	2316      	movs	r3, #22
 8008a64:	6003      	str	r3, [r0, #0]
 8008a66:	2001      	movs	r0, #1
 8008a68:	e7e7      	b.n	8008a3a <_raise_r+0x12>
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a70:	4620      	mov	r0, r4
 8008a72:	4798      	blx	r3
 8008a74:	2000      	movs	r0, #0
 8008a76:	e7e0      	b.n	8008a3a <_raise_r+0x12>

08008a78 <raise>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	@ (8008a84 <raise+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f7ff bfd3 	b.w	8008a28 <_raise_r>
 8008a82:	bf00      	nop
 8008a84:	20000030 	.word	0x20000030

08008a88 <_kill_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d07      	ldr	r5, [pc, #28]	@ (8008aa8 <_kill_r+0x20>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	f7f8 ffd9 	bl	8001a4c <_kill>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d102      	bne.n	8008aa4 <_kill_r+0x1c>
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	b103      	cbz	r3, 8008aa4 <_kill_r+0x1c>
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000069c 	.word	0x2000069c

08008aac <_getpid_r>:
 8008aac:	f7f8 bfc6 	b.w	8001a3c <_getpid>

08008ab0 <__swhatbuf_r>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	b096      	sub	sp, #88	@ 0x58
 8008abc:	4615      	mov	r5, r2
 8008abe:	461e      	mov	r6, r3
 8008ac0:	da0d      	bge.n	8008ade <__swhatbuf_r+0x2e>
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ac8:	f04f 0100 	mov.w	r1, #0
 8008acc:	bf14      	ite	ne
 8008ace:	2340      	movne	r3, #64	@ 0x40
 8008ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	6031      	str	r1, [r6, #0]
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	b016      	add	sp, #88	@ 0x58
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	466a      	mov	r2, sp
 8008ae0:	f000 f848 	bl	8008b74 <_fstat_r>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	dbec      	blt.n	8008ac2 <__swhatbuf_r+0x12>
 8008ae8:	9901      	ldr	r1, [sp, #4]
 8008aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008af2:	4259      	negs	r1, r3
 8008af4:	4159      	adcs	r1, r3
 8008af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008afa:	e7eb      	b.n	8008ad4 <__swhatbuf_r+0x24>

08008afc <__smakebuf_r>:
 8008afc:	898b      	ldrh	r3, [r1, #12]
 8008afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b00:	079d      	lsls	r5, r3, #30
 8008b02:	4606      	mov	r6, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	d507      	bpl.n	8008b18 <__smakebuf_r+0x1c>
 8008b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	2301      	movs	r3, #1
 8008b12:	6163      	str	r3, [r4, #20]
 8008b14:	b003      	add	sp, #12
 8008b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b18:	ab01      	add	r3, sp, #4
 8008b1a:	466a      	mov	r2, sp
 8008b1c:	f7ff ffc8 	bl	8008ab0 <__swhatbuf_r>
 8008b20:	9f00      	ldr	r7, [sp, #0]
 8008b22:	4605      	mov	r5, r0
 8008b24:	4639      	mov	r1, r7
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7fe fec6 	bl	80078b8 <_malloc_r>
 8008b2c:	b948      	cbnz	r0, 8008b42 <__smakebuf_r+0x46>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	059a      	lsls	r2, r3, #22
 8008b34:	d4ee      	bmi.n	8008b14 <__smakebuf_r+0x18>
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	f043 0302 	orr.w	r3, r3, #2
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	e7e2      	b.n	8008b08 <__smakebuf_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	6020      	str	r0, [r4, #0]
 8008b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b52:	b15b      	cbz	r3, 8008b6c <__smakebuf_r+0x70>
 8008b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f000 f81d 	bl	8008b98 <_isatty_r>
 8008b5e:	b128      	cbz	r0, 8008b6c <__smakebuf_r+0x70>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	431d      	orrs	r5, r3
 8008b70:	81a5      	strh	r5, [r4, #12]
 8008b72:	e7cf      	b.n	8008b14 <__smakebuf_r+0x18>

08008b74 <_fstat_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	@ (8008b94 <_fstat_r+0x20>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	f7f8 ffc3 	bl	8001b0c <_fstat>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d102      	bne.n	8008b90 <_fstat_r+0x1c>
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	b103      	cbz	r3, 8008b90 <_fstat_r+0x1c>
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	bf00      	nop
 8008b94:	2000069c 	.word	0x2000069c

08008b98 <_isatty_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	@ (8008bb4 <_isatty_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f8 ffc2 	bl	8001b2c <_isatty>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_isatty_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_isatty_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	2000069c 	.word	0x2000069c

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
