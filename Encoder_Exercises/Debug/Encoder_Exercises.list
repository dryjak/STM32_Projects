
Encoder_Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008338  08008338  00009338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ec  080086ec  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f4  080086f4  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086f4  080086f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086f8  080086f8  000096f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080086fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200001dc  080088d8  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080088d8  0000a504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014baa  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d15  00000000  00000000  0001edb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d69  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bcb  00000000  00000000  00023989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413a  00000000  00000000  0004b554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdbc9  00000000  00000000  0005f68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  0015d29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00162a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008320 	.word	0x08008320

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08008320 	.word	0x08008320

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	213c      	movs	r1, #60	@ 0x3c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fcf6 	bl	80039ec <HAL_TIM_Encoder_Start>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 800101e:	8afa      	ldrh	r2, [r7, #22]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001026:	b29b      	uxth	r3, r3
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21a      	sxth	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	429a      	cmp	r2, r3
 8001044:	dd0b      	ble.n	800105e <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800104c:	b29a      	uxth	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	81da      	strh	r2, [r3, #14]
 800105c:	e016      	b.n	800108c <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001064:	4619      	mov	r1, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	0fda      	lsrs	r2, r3, #31
 800106c:	4413      	add	r3, r2
 800106e:	105b      	asrs	r3, r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	4299      	cmp	r1, r3
 8001074:	da0a      	bge.n	800108c <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	b21a      	sxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa6e 	bl	8000574 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <Encoder_AngularVelocity+0xf0>)
 800109e:	f7ff fad3 	bl	8000648 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa60 	bl	8000574 <__aeabi_i2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fbee 	bl	800089c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd96 	bl	8000bf8 <__aeabi_d2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ed93 7a02 	vldr	s14, [r3, #8]
 80010de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8afa      	ldrh	r2, [r7, #22]
 80010ec:	819a      	strh	r2, [r3, #12]
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40768000 	.word	0x40768000

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <MX_GPIO_Init+0x100>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <MX_GPIO_Init+0x100>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_A_DIR1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f001 f8e0 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIR2_GPIO_Port, MOTOR_A_DIR2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	481e      	ldr	r0, [pc, #120]	@ (8001200 <MX_GPIO_Init+0x104>)
 8001186:	f001 f8db 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800118a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001190:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_GPIO_Init+0x104>)
 80011a2:	f000 ff4b 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_A_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_A_DIR1_Pin;
 80011a6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f000 ff3b 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIR2_Pin;
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIR2_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4808      	ldr	r0, [pc, #32]	@ (8001200 <MX_GPIO_Init+0x104>)
 80011de:	f000 ff2d 	bl	800203c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2028      	movs	r0, #40	@ 0x28
 80011e8:	f000 fef3 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ec:	2028      	movs	r0, #40	@ 0x28
 80011ee:	f000 ff0a 	bl	8002006 <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000800 	.word	0x48000800

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120a:	f000 fd74 	bl	8001cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f86f 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f7ff ff73 	bl	80010fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001216:	f000 fca3 	bl	8001b60 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800121a:	f000 fb27 	bl	800186c <MX_TIM3_Init>
  MX_TIM1_Init();
 800121e:	f000 fad1 	bl	80017c4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001222:	f000 fb79 	bl	8001918 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001226:	f000 f8ae 	bl	8001386 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_A_DIR1_GPIO_Port	, MOTOR_A_DIR1_Pin, MOTOR_A_DIR2_GPIO_Port, MOTOR_A_DIR2_Pin);
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <main+0xc4>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	9203      	str	r2, [sp, #12]
 8001232:	4a26      	ldr	r2, [pc, #152]	@ (80012cc <main+0xc8>)
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	4922      	ldr	r1, [pc, #136]	@ (80012d0 <main+0xcc>)
 8001246:	4823      	ldr	r0, [pc, #140]	@ (80012d4 <main+0xd0>)
 8001248:	f000 f959 	bl	80014fe <Motor_Init>



  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800124c:	213c      	movs	r1, #60	@ 0x3c
 800124e:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <main+0xd4>)
 8001250:	f002 fbcc 	bl	80039ec <HAL_TIM_Encoder_Start>
  HAL_Delay(100);
 8001254:	2064      	movs	r0, #100	@ 0x64
 8001256:	f000 fdbf 	bl	8001dd8 <HAL_Delay>
  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK) {
 800125a:	4820      	ldr	r0, [pc, #128]	@ (80012dc <main+0xd8>)
 800125c:	f002 f934 	bl	80034c8 <HAL_TIM_Base_Start_IT>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <main+0x68>
	  Blad = 1;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <main+0xdc>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
  }
  HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	@ 0x64
 800126e:	f000 fdb3 	bl	8001dd8 <HAL_Delay>
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);


  Encoder_Init(&Encoder, &htim3, EncoderResolution, SampleTime);
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <main+0xe0>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <main+0xe4>)
 800127c:	edd2 7a00 	vldr	s15, [r2]
 8001280:	eeb0 0a67 	vmov.f32	s0, s15
 8001284:	461a      	mov	r2, r3
 8001286:	4914      	ldr	r1, [pc, #80]	@ (80012d8 <main+0xd4>)
 8001288:	4818      	ldr	r0, [pc, #96]	@ (80012ec <main+0xe8>)
 800128a:	f7ff fe9b 	bl	8000fc4 <Encoder_Init>
  HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	@ 0x64
 8001290:	f000 fda2 	bl	8001dd8 <HAL_Delay>

		  sprintf(Message, "Delta = %d\n", Delta);
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
	  }
		*/
	  Motor_SetRideParameters(&Motor, 70, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2146      	movs	r1, #70	@ 0x46
 8001298:	480e      	ldr	r0, [pc, #56]	@ (80012d4 <main+0xd0>)
 800129a:	f000 f89f 	bl	80013dc <Motor_SetRideParameters>
	  Motor_Ride(&Motor);
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <main+0xd0>)
 80012a0:	f000 f8e1 	bl	8001466 <Motor_Ride>
	  HAL_Delay(3000);
 80012a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012a8:	f000 fd96 	bl	8001dd8 <HAL_Delay>
  	  Motor_SetRideParameters(&Motor, 80, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2150      	movs	r1, #80	@ 0x50
 80012b0:	4808      	ldr	r0, [pc, #32]	@ (80012d4 <main+0xd0>)
 80012b2:	f000 f893 	bl	80013dc <Motor_SetRideParameters>
  	  Motor_Ride(&Motor);
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <main+0xd0>)
 80012b8:	f000 f8d5 	bl	8001466 <Motor_Ride>
  	  HAL_Delay(3000);
 80012bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012c0:	f000 fd8a 	bl	8001dd8 <HAL_Delay>
	  Motor_SetRideParameters(&Motor, 70, 1);
 80012c4:	bf00      	nop
 80012c6:	e7e5      	b.n	8001294 <main+0x90>
 80012c8:	20000234 	.word	0x20000234
 80012cc:	48000800 	.word	0x48000800
 80012d0:	200002d4 	.word	0x200002d4
 80012d4:	2000021c 	.word	0x2000021c
 80012d8:	20000288 	.word	0x20000288
 80012dc:	2000023c 	.word	0x2000023c
 80012e0:	20000236 	.word	0x20000236
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	20000204 	.word	0x20000204

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	@ 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	2238      	movs	r2, #56	@ 0x38
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 f8e9 	bl	80064d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001312:	2000      	movs	r0, #0
 8001314:	f001 f850 	bl	80023b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001322:	2340      	movs	r3, #64	@ 0x40
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132a:	2302      	movs	r3, #2
 800132c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800132e:	2304      	movs	r3, #4
 8001330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001332:	2355      	movs	r3, #85	@ 0x55
 8001334:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f001 f8ea 	bl	8002520 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001352:	f000 f83d 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135a:	2303      	movs	r3, #3
 800135c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2104      	movs	r1, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fbe8 	bl	8002b44 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800137a:	f000 f829 	bl	80013d0 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	@ 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2019      	movs	r0, #25
 8001390:	f000 fe1f 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001394:	2019      	movs	r0, #25
 8001396:	f000 fe36 	bl	8002006 <HAL_NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	FlagCallback = 1;
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
	Encoder_AngularVelocity(&Encoder, &Angle, &AngularVelocity);
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013b0:	4905      	ldr	r1, [pc, #20]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013b4:	f7ff fe28 	bl	8001008 <Encoder_AngularVelocity>

}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000200 	.word	0x20000200
 80013c4:	200001fc 	.word	0x200001fc
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	20000204 	.word	0x20000204

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <Error_Handler+0x8>

080013dc <Motor_SetRideParameters>:
#include "tim.h"
#include "motor_simple.h"


MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b64      	cmp	r3, #100	@ 0x64
 80013f0:	d902      	bls.n	80013f8 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2264      	movs	r2, #100	@ 0x64
 80013f6:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d110      	bne.n	8001426 <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	899b      	ldrh	r3, [r3, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	4619      	mov	r1, r3
 8001410:	f000 ff96 	bl	8002340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6918      	ldr	r0, [r3, #16]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	8a9b      	ldrh	r3, [r3, #20]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	f000 ff8e 	bl	8002340 <HAL_GPIO_WritePin>
 8001424:	e00f      	b.n	8001446 <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6898      	ldr	r0, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	899b      	ldrh	r3, [r3, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	f000 ff85 	bl	8002340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6918      	ldr	r0, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8a9b      	ldrh	r3, [r3, #20]
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	f000 ff7d 	bl	8002340 <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78ba      	ldrb	r2, [r7, #2]
 800144a:	75da      	strb	r2, [r3, #23]

	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f002 f910 	bl	800367c <HAL_TIM_PWM_Start>

	return MOTOR_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <Motor_Ride+0x1e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7d9a      	ldrb	r2, [r3, #22]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001482:	e036      	b.n	80014f2 <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d107      	bne.n	800149c <Motor_Ride+0x36>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7d99      	ldrb	r1, [r3, #22]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	460b      	mov	r3, r1
 8001498:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800149a:	e02a      	b.n	80014f2 <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d107      	bne.n	80014b4 <Motor_Ride+0x4e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7d99      	ldrb	r1, [r3, #22]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	460b      	mov	r3, r1
 80014b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80014b2:	e01e      	b.n	80014f2 <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d107      	bne.n	80014cc <Motor_Ride+0x66>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7d99      	ldrb	r1, [r3, #22]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	460b      	mov	r3, r1
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014ca:	e012      	b.n	80014f2 <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d107      	bne.n	80014e4 <Motor_Ride+0x7e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7d99      	ldrb	r1, [r3, #22]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	460b      	mov	r3, r1
 80014e0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80014e2:	e006      	b.n	80014f2 <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7d99      	ldrb	r1, [r3, #22]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	460b      	mov	r3, r1
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8bba      	ldrh	r2, [r7, #28]
 800152a:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a3a      	ldr	r2, [r7, #32]
 8001530:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001536:	829a      	strh	r2, [r3, #20]

	//HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
	return MOTOR_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_MspInit+0x44>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_MspInit+0x44>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6613      	str	r3, [r2, #96]	@ 0x60
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_MspInit+0x44>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_MspInit+0x44>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6593      	str	r3, [r2, #88]	@ 0x58
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800157e:	f000 ffbf 	bl	8002500 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <NMI_Handler+0x4>

08001598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <MemManage_Handler+0x4>

080015a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 fbd9 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015f6:	f002 fa87 	bl	8003b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000023c 	.word	0x2000023c

08001604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001608:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800160c:	f000 feb0 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return 1;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_kill>:

int _kill(int pid, int sig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162e:	f004 ffa5 	bl	800657c <__errno>
 8001632:	4603      	mov	r3, r0
 8001634:	2216      	movs	r2, #22
 8001636:	601a      	str	r2, [r3, #0]
  return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe7 	bl	8001624 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001656:	bf00      	nop
 8001658:	e7fd      	b.n	8001656 <_exit+0x12>

0800165a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00a      	b.n	8001682 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166c:	f3af 8000 	nop.w
 8001670:	4601      	mov	r1, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	b2ca      	uxtb	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf0      	blt.n	800166c <_read+0x12>
  }

  return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e009      	b.n	80016ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbf1      	blt.n	80016a6 <_write+0x12>
  }
  return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_close>:

int _close(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_isatty>:

int _isatty(int file)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	@ (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f004 ff0a 	bl	800657c <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20020000 	.word	0x20020000
 8001794:	00000400 	.word	0x00000400
 8001798:	20000238 	.word	0x20000238
 800179c:	20000508 	.word	0x20000508

080017a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <MX_TIM1_Init+0xa0>)
 80017e4:	4a20      	ldr	r2, [pc, #128]	@ (8001868 <MX_TIM1_Init+0xa4>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 80017e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <MX_TIM1_Init+0xa0>)
 80017ea:	f244 2267 	movw	r2, #16999	@ 0x4267
 80017ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_TIM1_Init+0xa0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_TIM1_Init+0xa0>)
 80017f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <MX_TIM1_Init+0xa0>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_TIM1_Init+0xa0>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_TIM1_Init+0xa0>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001810:	4814      	ldr	r0, [pc, #80]	@ (8001864 <MX_TIM1_Init+0xa0>)
 8001812:	f001 fe01 	bl	8003418 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800181c:	f7ff fdd8 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <MX_TIM1_Init+0xa0>)
 800182e:	f002 fbcf 	bl	8003fd0 <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001838:	f7ff fdca 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_TIM1_Init+0xa0>)
 800184e:	f003 f99d 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001858:	f7ff fdba 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000023c 	.word	0x2000023c
 8001868:	40012c00 	.word	0x40012c00

0800186c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	@ 0x30
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2224      	movs	r2, #36	@ 0x24
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f004 fe2b 	bl	80064d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <MX_TIM3_Init+0xa4>)
 800188c:	4a21      	ldr	r2, [pc, #132]	@ (8001914 <MX_TIM3_Init+0xa8>)
 800188e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_TIM3_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_TIM3_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_TIM3_Init+0xa4>)
 800189e:	f640 62ff 	movw	r2, #3839	@ 0xeff
 80018a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_TIM3_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_TIM3_Init+0xa4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80018c0:	2305      	movs	r3, #5
 80018c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c8:	2301      	movs	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80018d0:	2305      	movs	r3, #5
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_TIM3_Init+0xa4>)
 80018dc:	f001 ffe0 	bl	80038a0 <HAL_TIM_Encoder_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018e6:	f7ff fd73 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	@ (8001910 <MX_TIM3_Init+0xa4>)
 80018f8:	f003 f948 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001902:	f7ff fd65 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	@ 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000288 	.word	0x20000288
 8001914:	40000400 	.word	0x40000400

08001918 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	@ 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800194a:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <MX_TIM4_Init+0xe4>)
 800194c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a00 <MX_TIM4_Init+0xe8>)
 800194e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <MX_TIM4_Init+0xe4>)
 8001952:	22a9      	movs	r2, #169	@ 0xa9
 8001954:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <MX_TIM4_Init+0xe4>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <MX_TIM4_Init+0xe4>)
 800195e:	2263      	movs	r2, #99	@ 0x63
 8001960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <MX_TIM4_Init+0xe4>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <MX_TIM4_Init+0xe4>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196e:	4823      	ldr	r0, [pc, #140]	@ (80019fc <MX_TIM4_Init+0xe4>)
 8001970:	f001 fd52 	bl	8003418 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800197a:	f7ff fd29 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001988:	4619      	mov	r1, r3
 800198a:	481c      	ldr	r0, [pc, #112]	@ (80019fc <MX_TIM4_Init+0xe4>)
 800198c:	f002 fb20 	bl	8003fd0 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001996:	f7ff fd1b 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800199a:	4818      	ldr	r0, [pc, #96]	@ (80019fc <MX_TIM4_Init+0xe4>)
 800199c:	f001 fe0c 	bl	80035b8 <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019a6:	f7ff fd13 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4810      	ldr	r0, [pc, #64]	@ (80019fc <MX_TIM4_Init+0xe4>)
 80019ba:	f003 f8e7 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019c4:	f7ff fd04 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	@ 0x60
 80019ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	4807      	ldr	r0, [pc, #28]	@ (80019fc <MX_TIM4_Init+0xe4>)
 80019e0:	f002 f9e2 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019ea:	f7ff fcf1 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019ee:	4803      	ldr	r0, [pc, #12]	@ (80019fc <MX_TIM4_Init+0xe4>)
 80019f0:	f000 f87e 	bl	8001af0 <HAL_TIM_MspPostInit>

}
 80019f4:	bf00      	nop
 80019f6:	3738      	adds	r7, #56	@ 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002d4 	.word	0x200002d4
 8001a00:	40000800 	.word	0x40000800

08001a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_TIM_Base_MspInit+0x5c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a2e:	e010      	b.n	8001a52 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_TIM_Base_MspInit+0x64>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10b      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_TIM_Base_MspInit+0x60>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40000800 	.word	0x40000800

08001a6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d128      	bne.n	8001ae0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	4a16      	ldr	r2, [pc, #88]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001adc:	f000 faae 	bl	800203c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <HAL_TIM_MspPostInit+0x64>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11b      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <HAL_TIM_MspPostInit+0x68>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <HAL_TIM_MspPostInit+0x68>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_TIM_MspPostInit+0x68>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2a:	2340      	movs	r3, #64	@ 0x40
 8001b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <HAL_TIM_MspPostInit+0x6c>)
 8001b46:	f000 fa79 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000400 	.word	0x48000400

08001b60 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b66:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <MX_LPUART1_UART_Init+0x90>)
 8001b68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ba2:	4812      	ldr	r0, [pc, #72]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	f003 f8ce 	bl	8004d44 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bae:	f7ff fc0f 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001bb6:	f003 fe69 	bl	800588c <HAL_UARTEx_SetTxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001bc0:	f7ff fc06 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4809      	ldr	r0, [pc, #36]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001bc8:	f003 fe9e 	bl	8005908 <HAL_UARTEx_SetRxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bd2:	f7ff fbfd 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_LPUART1_UART_Init+0x8c>)
 8001bd8:	f003 fe1f 	bl	800581a <HAL_UARTEx_DisableFifoMode>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001be2:	f7ff fbf5 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000320 	.word	0x20000320
 8001bf0:	40008000 	.word	0x40008000

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09e      	sub	sp, #120	@ 0x78
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2254      	movs	r2, #84	@ 0x54
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fc5e 	bl	80064d6 <memset>
  if(uartHandle->Instance==LPUART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_UART_MspInit+0xa8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d136      	bne.n	8001c92 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c24:	2320      	movs	r3, #32
 8001c26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 f9a3 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7ff fbc8 	bl	80013d0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c44:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_UART_MspInit+0xac>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c80:	230c      	movs	r3, #12
 8001c82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8e:	f000 f9d5 	bl	800203c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3778      	adds	r7, #120	@ 0x78
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40008000 	.word	0x40008000
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff fd7a 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f004 fc59 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd6:	f7ff fa95 	bl	8001204 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   r0, =_estack
 8001cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ce8:	080086fc 	.word	0x080086fc
  ldr r2, =_sbss
 8001cec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cf0:	20000504 	.word	0x20000504

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>

08001cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f95b 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f80e 	bl	8001d28 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e001      	b.n	8001d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d18:	f7ff fc16 	bl	8001548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <HAL_InitTick+0x68>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_InitTick+0x6c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <HAL_InitTick+0x68>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f966 	bl	8002022 <HAL_SYSTICK_Config>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10f      	bne.n	8001d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d809      	bhi.n	8001d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d62:	2200      	movs	r2, #0
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d6a:	f000 f932 	bl	8001fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_InitTick+0x70>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e007      	b.n	8001d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e004      	b.n	8001d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000010 	.word	0x20000010
 8001d94:	20000008 	.word	0x20000008
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_IncTick+0x20>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <HAL_IncTick+0x1c>)
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	200003b4 	.word	0x200003b4
 8001dbc:	20000010 	.word	0x20000010

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200003b4 	.word	0x200003b4

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001df0:	d004      	beq.n	8001dfc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_Delay+0x40>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfc:	bf00      	nop
 8001dfe:	f7ff ffdf 	bl	8001dc0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d8f7      	bhi.n	8001dfe <HAL_Delay+0x26>
  {
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000010 	.word	0x20000010

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff40 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff90 	bl	8001f10 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5f 	bl	8001ebc <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff33 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa4 	bl	8001f78 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800204a:	e15a      	b.n	8002302 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 814c 	beq.w	80022fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d017      	beq.n	800211a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d123      	bne.n	800216e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	6939      	ldr	r1, [r7, #16]
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80a6 	beq.w	80022fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002320 <HAL_GPIO_Init+0x2e4>)
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002320 <HAL_GPIO_Init+0x2e4>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80021bc:	4b58      	ldr	r3, [pc, #352]	@ (8002320 <HAL_GPIO_Init+0x2e4>)
 80021be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c8:	4a56      	ldr	r2, [pc, #344]	@ (8002324 <HAL_GPIO_Init+0x2e8>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021f2:	d01f      	beq.n	8002234 <HAL_GPIO_Init+0x1f8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002328 <HAL_GPIO_Init+0x2ec>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d019      	beq.n	8002230 <HAL_GPIO_Init+0x1f4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4b      	ldr	r2, [pc, #300]	@ (800232c <HAL_GPIO_Init+0x2f0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_GPIO_Init+0x1f0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a4a      	ldr	r2, [pc, #296]	@ (8002330 <HAL_GPIO_Init+0x2f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00d      	beq.n	8002228 <HAL_GPIO_Init+0x1ec>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a49      	ldr	r2, [pc, #292]	@ (8002334 <HAL_GPIO_Init+0x2f8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <HAL_GPIO_Init+0x1e8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a48      	ldr	r2, [pc, #288]	@ (8002338 <HAL_GPIO_Init+0x2fc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_GPIO_Init+0x1e4>
 800221c:	2305      	movs	r3, #5
 800221e:	e00a      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 8002220:	2306      	movs	r3, #6
 8002222:	e008      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 8002224:	2304      	movs	r3, #4
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 8002228:	2303      	movs	r3, #3
 800222a:	e004      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 800222c:	2302      	movs	r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_GPIO_Init+0x1fa>
 8002234:	2300      	movs	r3, #0
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	0092      	lsls	r2, r2, #2
 800223e:	4093      	lsls	r3, r2
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002246:	4937      	ldr	r1, [pc, #220]	@ (8002324 <HAL_GPIO_Init+0x2e8>)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002254:	4b39      	ldr	r3, [pc, #228]	@ (800233c <HAL_GPIO_Init+0x300>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002278:	4a30      	ldr	r2, [pc, #192]	@ (800233c <HAL_GPIO_Init+0x300>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_GPIO_Init+0x300>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022a2:	4a26      	ldr	r2, [pc, #152]	@ (800233c <HAL_GPIO_Init+0x300>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_GPIO_Init+0x300>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022cc:	4a1b      	ldr	r2, [pc, #108]	@ (800233c <HAL_GPIO_Init+0x300>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_GPIO_Init+0x300>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f6:	4a11      	ldr	r2, [pc, #68]	@ (800233c <HAL_GPIO_Init+0x300>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f ae9d 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	48000400 	.word	0x48000400
 800232c:	48000800 	.word	0x48000800
 8002330:	48000c00 	.word	0x48000c00
 8002334:	48001000 	.word	0x48001000
 8002338:	48001400 	.word	0x48001400
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800235c:	e002      	b.n	8002364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f806 	bl	80023a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d141      	bne.n	800244a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c6:	4b4b      	ldr	r3, [pc, #300]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d2:	d131      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d4:	4b47      	ldr	r3, [pc, #284]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023da:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e4:	4b43      	ldr	r3, [pc, #268]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ec:	4a41      	ldr	r2, [pc, #260]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f4:	4b40      	ldr	r3, [pc, #256]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2232      	movs	r2, #50	@ 0x32
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a3f      	ldr	r2, [pc, #252]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240a:	e002      	b.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3b01      	subs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002412:	4b38      	ldr	r3, [pc, #224]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241e:	d102      	bne.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f2      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002426:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002432:	d158      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e057      	b.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002438:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243e:	4a2d      	ldr	r2, [pc, #180]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002444:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002448:	e04d      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002450:	d141      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245e:	d131      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002466:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002478:	4a1e      	ldr	r2, [pc, #120]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2232      	movs	r2, #50	@ 0x32
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002496:	e002      	b.n	800249e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3b01      	subs	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d102      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f2      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024be:	d112      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e011      	b.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024d4:	e007      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024de:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40007000 	.word	0x40007000
 80024f8:	20000008 	.word	0x20000008
 80024fc:	431bde83 	.word	0x431bde83

08002500 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800250a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250e:	6093      	str	r3, [r2, #8]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40007000 	.word	0x40007000

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e2fe      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b97      	ldr	r3, [pc, #604]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b94      	ldr	r3, [pc, #592]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0x3e>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d002      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e2d9      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a84      	ldr	r2, [pc, #528]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b7f      	ldr	r3, [pc, #508]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7e      	ldr	r2, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b7c      	ldr	r3, [pc, #496]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7b      	ldr	r2, [pc, #492]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b78      	ldr	r3, [pc, #480]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a77      	ldr	r2, [pc, #476]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b75      	ldr	r3, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a74      	ldr	r2, [pc, #464]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fbf2 	bl	8001dc0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fbee 	bl	8001dc0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e29e      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fbde 	bl	8001dc0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fbda 	bl	8001dc0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e28a      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261a:	4b60      	ldr	r3, [pc, #384]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002640:	4b56      	ldr	r3, [pc, #344]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d102      	bne.n	8002656 <HAL_RCC_OscConfig+0x136>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d002      	beq.n	800265c <HAL_RCC_OscConfig+0x13c>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11f      	bne.n	800269c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265c:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x154>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e25d      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b49      	ldr	r3, [pc, #292]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4946      	ldr	r1, [pc, #280]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002688:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fb4b 	bl	8001d28 <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d043      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e249      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a4:	4b3d      	ldr	r3, [pc, #244]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3c      	ldr	r2, [pc, #240]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb86 	bl	8001dc0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff fb82 	bl	8001dc0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e232      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	492d      	ldr	r1, [pc, #180]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
 80026ea:	e01a      	b.n	8002722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2a      	ldr	r2, [pc, #168]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 80026f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff fb62 	bl	8001dc0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002700:	f7ff fb5e 	bl	8001dc0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e20e      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002712:	4b22      	ldr	r3, [pc, #136]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x1e0>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d041      	beq.n	80027b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01c      	beq.n	8002770 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002738:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800273c:	4a17      	ldr	r2, [pc, #92]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7ff fb3b 	bl	8001dc0 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7ff fb37 	bl	8001dc0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1e7      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ef      	beq.n	800274e <HAL_RCC_OscConfig+0x22e>
 800276e:	e020      	b.n	80027b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_RCC_OscConfig+0x27c>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff fb1e 	bl	8001dc0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002786:	e00d      	b.n	80027a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff fb1a 	bl	8001dc0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d906      	bls.n	80027a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1ca      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a4:	4b8c      	ldr	r3, [pc, #560]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ea      	bne.n	8002788 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a6 	beq.w	800290c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c4:	4b84      	ldr	r3, [pc, #528]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2b4>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
 80027d4:	2300      	movs	r3, #0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00d      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b7f      	ldr	r3, [pc, #508]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	4a7e      	ldr	r2, [pc, #504]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e6:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	4b79      	ldr	r3, [pc, #484]	@ (80029dc <HAL_RCC_OscConfig+0x4bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002802:	4b76      	ldr	r3, [pc, #472]	@ (80029dc <HAL_RCC_OscConfig+0x4bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	@ (80029dc <HAL_RCC_OscConfig+0x4bc>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7ff fad7 	bl	8001dc0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fad3 	bl	8001dc0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e183      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <HAL_RCC_OscConfig+0x4bc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_RCC_OscConfig+0x32e>
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a65      	ldr	r2, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800284c:	e024      	b.n	8002898 <HAL_RCC_OscConfig+0x378>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d110      	bne.n	8002878 <HAL_RCC_OscConfig+0x358>
 8002856:	4b60      	ldr	r3, [pc, #384]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	4a5e      	ldr	r2, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002866:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	4a5a      	ldr	r2, [pc, #360]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002876:	e00f      	b.n	8002898 <HAL_RCC_OscConfig+0x378>
 8002878:	4b57      	ldr	r3, [pc, #348]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a56      	ldr	r2, [pc, #344]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	4a52      	ldr	r2, [pc, #328]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff fa8e 	bl	8001dc0 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7ff fa8a 	bl	8001dc0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e138      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ed      	beq.n	80028a8 <HAL_RCC_OscConfig+0x388>
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7ff fa77 	bl	8001dc0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff fa73 	bl	8001dc0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e121      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ec:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ed      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	4a34      	ldr	r2, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03c      	beq.n	8002992 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01c      	beq.n	800295a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002926:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7ff fa46 	bl	8001dc0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002938:	f7ff fa42 	bl	8001dc0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0f2      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800294a:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800294c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ef      	beq.n	8002938 <HAL_RCC_OscConfig+0x418>
 8002958:	e01b      	b.n	8002992 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800295a:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800295c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7ff fa29 	bl	8001dc0 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002972:	f7ff fa25 	bl	8001dc0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0d5      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 8002986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ef      	bne.n	8002972 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80c9 	beq.w	8002b2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	f000 8083 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d15e      	bne.n	8002a70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <HAL_RCC_OscConfig+0x4b8>)
 80029b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff f9ff 	bl	8001dc0 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	e00c      	b.n	80029e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7ff f9fb 	bl	8001dc0 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d905      	bls.n	80029e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0ab      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ec      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	4b52      	ldr	r3, [pc, #328]	@ (8002b3c <HAL_RCC_OscConfig+0x61c>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6a11      	ldr	r1, [r2, #32]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fc:	3a01      	subs	r2, #1
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a06:	0212      	lsls	r2, r2, #8
 8002a08:	4311      	orrs	r1, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a0e:	0852      	lsrs	r2, r2, #1
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0552      	lsls	r2, r2, #21
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0652      	lsls	r2, r2, #25
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a26:	06d2      	lsls	r2, r2, #27
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4943      	ldr	r1, [pc, #268]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a40      	ldr	r2, [pc, #256]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a3d      	ldr	r2, [pc, #244]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff f9ba 	bl	8001dc0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7ff f9b6 	bl	8001dc0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e066      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a62:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x530>
 8002a6e:	e05e      	b.n	8002b2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f9a0 	bl	8001dc0 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff f99c 	bl	8001dc0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04c      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002aa2:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4924      	ldr	r1, [pc, #144]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_RCC_OscConfig+0x620>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60cb      	str	r3, [r1, #12]
 8002aae:	e03e      	b.n	8002b2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e039      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d12c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	3b01      	subs	r3, #1
 8002adc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d123      	bne.n	8002b2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d11b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d113      	bne.n	8002b2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	019f800c 	.word	0x019f800c
 8002b40:	feeefffc 	.word	0xfeeefffc

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e11e      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b91      	ldr	r3, [pc, #580]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	498c      	ldr	r1, [pc, #560]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b8a      	ldr	r3, [pc, #552]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e106      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d073      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d129      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba0:	4b81      	ldr	r3, [pc, #516]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0f4      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bb0:	f000 f99e 	bl	8002ef0 <RCC_GetSysClockFreqFromPLLSource>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4a7c      	ldr	r2, [pc, #496]	@ (8002dac <HAL_RCC_ClockConfig+0x268>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d93f      	bls.n	8002c3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d033      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d12f      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bde:	4b72      	ldr	r3, [pc, #456]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be6:	4a70      	ldr	r2, [pc, #448]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e024      	b.n	8002c3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0c6      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b66      	ldr	r3, [pc, #408]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0be      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c1c:	f000 f8ce 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4a61      	ldr	r2, [pc, #388]	@ (8002dac <HAL_RCC_ClockConfig+0x268>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d909      	bls.n	8002c3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c32:	4a5d      	ldr	r2, [pc, #372]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4957      	ldr	r1, [pc, #348]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c50:	f7ff f8b6 	bl	8001dc0 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7ff f8b2 	bl	8001dc0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e095      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d023      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a42      	ldr	r2, [pc, #264]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ca2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002cba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc0:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4936      	ldr	r1, [pc, #216]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cda:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4a32      	ldr	r2, [pc, #200]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d21d      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 020f 	bic.w	r2, r3, #15
 8002cfc:	4929      	ldr	r1, [pc, #164]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d04:	f7ff f85c 	bl	8001dc0 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7ff f858 	bl	8001dc0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e03b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1ed      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4917      	ldr	r1, [pc, #92]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490f      	ldr	r1, [pc, #60]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d6e:	f000 f825 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCC_ClockConfig+0x264>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490c      	ldr	r1, [pc, #48]	@ (8002db0 <HAL_RCC_ClockConfig+0x26c>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_RCC_ClockConfig+0x270>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_RCC_ClockConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe ffc8 	bl	8001d28 <HAL_InitTick>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	04c4b400 	.word	0x04c4b400
 8002db0:	08008338 	.word	0x08008338
 8002db4:	20000008 	.word	0x20000008
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	e047      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e03e      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002de6:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d136      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3301      	adds	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e10:	4a1a      	ldr	r2, [pc, #104]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1a:	68d2      	ldr	r2, [r2, #12]
 8002e1c:	0a12      	lsrs	r2, r2, #8
 8002e1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	0a12      	lsrs	r2, r2, #8
 8002e38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0e5b      	lsrs	r3, r3, #25
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	e001      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e64:	693b      	ldr	r3, [r7, #16]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	016e3600 	.word	0x016e3600

08002e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000008 	.word	0x20000008

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4904      	ldr	r1, [pc, #16]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08008348 	.word	0x08008348

08002ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec8:	f7ff ffda 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0adb      	lsrs	r3, r3, #11
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4904      	ldr	r1, [pc, #16]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08008348 	.word	0x08008348

08002ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d10c      	bne.n	8002f2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f14:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	4a14      	ldr	r2, [pc, #80]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f1e:	68d2      	ldr	r2, [r2, #12]
 8002f20:	0a12      	lsrs	r2, r2, #8
 8002f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	617b      	str	r3, [r7, #20]
    break;
 8002f2c:	e00c      	b.n	8002f48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2e:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	0a12      	lsrs	r2, r2, #8
 8002f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    break;
 8002f46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0e5b      	lsrs	r3, r3, #25
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40021000 	.word	0x40021000
 8002f74:	016e3600 	.word	0x016e3600
 8002f78:	00f42400 	.word	0x00f42400

08002f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8098 	beq.w	80030ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	4a3f      	ldr	r2, [pc, #252]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a39      	ldr	r2, [pc, #228]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd2:	f7fe fef5 	bl	8001dc0 <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fd8:	e009      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fef1 	bl	8001dc0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d902      	bls.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	74fb      	strb	r3, [r7, #19]
        break;
 8002fec:	e005      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fee:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ef      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d159      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003000:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	d019      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800301c:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302e:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe feb1 	bl	8001dc0 <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003060:	e00b      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe fead 	bl	8001dc0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d902      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	74fb      	strb	r3, [r7, #19]
            break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ec      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309c:	4903      	ldr	r1, [pc, #12]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030a4:	e008      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
 80030aa:	e005      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b8:	7c7b      	ldrb	r3, [r7, #17]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4ba7      	ldr	r3, [pc, #668]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	4aa6      	ldr	r2, [pc, #664]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d6:	4ba1      	ldr	r3, [pc, #644]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f023 0203 	bic.w	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	499d      	ldr	r1, [pc, #628]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f8:	4b98      	ldr	r3, [pc, #608]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fe:	f023 020c 	bic.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4995      	ldr	r1, [pc, #596]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311a:	4b90      	ldr	r3, [pc, #576]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	498c      	ldr	r1, [pc, #560]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313c:	4b87      	ldr	r3, [pc, #540]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	4984      	ldr	r1, [pc, #528]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	497b      	ldr	r1, [pc, #492]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003180:	4b76      	ldr	r3, [pc, #472]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	4973      	ldr	r1, [pc, #460]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a2:	4b6e      	ldr	r3, [pc, #440]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	496a      	ldr	r1, [pc, #424]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c4:	4b65      	ldr	r3, [pc, #404]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4962      	ldr	r1, [pc, #392]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e6:	4b5d      	ldr	r3, [pc, #372]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	4959      	ldr	r1, [pc, #356]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003208:	4b54      	ldr	r3, [pc, #336]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	4951      	ldr	r1, [pc, #324]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b4c      	ldr	r3, [pc, #304]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4948      	ldr	r1, [pc, #288]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d015      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	4940      	ldr	r1, [pc, #256]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326c:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a3a      	ldr	r2, [pc, #232]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003276:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003284:	4b35      	ldr	r3, [pc, #212]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003292:	4932      	ldr	r1, [pc, #200]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a2:	d105      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a4:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032bc:	4b27      	ldr	r3, [pc, #156]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ca:	4924      	ldr	r1, [pc, #144]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032da:	d105      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032dc:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	4916      	ldr	r1, [pc, #88]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003312:	d105      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a10      	ldr	r2, [pc, #64]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800331e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d019      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	4908      	ldr	r1, [pc, #32]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800334a:	d109      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334c:	4b03      	ldr	r3, [pc, #12]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a02      	ldr	r2, [pc, #8]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800336c:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003372:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4926      	ldr	r1, [pc, #152]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800338c:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a20      	ldr	r2, [pc, #128]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d015      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	4918      	ldr	r1, [pc, #96]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c4:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a12      	ldr	r2, [pc, #72]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80033dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	490a      	ldr	r1, [pc, #40]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003406:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003408:	7cbb      	ldrb	r3, [r7, #18]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e049      	b.n	80034be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fae0 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 fef8 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e054      	b.n	800358a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a26      	ldr	r2, [pc, #152]	@ (8003598 <HAL_TIM_Base_Start_IT+0xd0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d022      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d01d      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <HAL_TIM_Base_Start_IT+0xd4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <HAL_TIM_Base_Start_IT+0xe4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0x80>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d115      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <HAL_TIM_Base_Start_IT+0xec>)
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b06      	cmp	r3, #6
 8003558:	d015      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0xbe>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003560:	d011      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e008      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e000      	b.n	8003588 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40015000 	.word	0x40015000
 80035b4:	00010007 	.word	0x00010007

080035b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e049      	b.n	800365e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f841 	bl	8003666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fe28 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x24>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e03c      	b.n	800371a <HAL_TIM_PWM_Start+0x9e>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d109      	bne.n	80036ba <HAL_TIM_PWM_Start+0x3e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e02f      	b.n	800371a <HAL_TIM_PWM_Start+0x9e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d109      	bne.n	80036d4 <HAL_TIM_PWM_Start+0x58>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e022      	b.n	800371a <HAL_TIM_PWM_Start+0x9e>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d109      	bne.n	80036ee <HAL_TIM_PWM_Start+0x72>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e015      	b.n	800371a <HAL_TIM_PWM_Start+0x9e>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d109      	bne.n	8003708 <HAL_TIM_PWM_Start+0x8c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	bf14      	ite	ne
 8003700:	2301      	movne	r3, #1
 8003702:	2300      	moveq	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e008      	b.n	800371a <HAL_TIM_PWM_Start+0x9e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0a6      	b.n	8003870 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <HAL_TIM_PWM_Start+0xb6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	e023      	b.n	800377a <HAL_TIM_PWM_Start+0xfe>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start+0xc6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003740:	e01b      	b.n	800377a <HAL_TIM_PWM_Start+0xfe>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0xd6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003750:	e013      	b.n	800377a <HAL_TIM_PWM_Start+0xfe>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0xe6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003760:	e00b      	b.n	800377a <HAL_TIM_PWM_Start+0xfe>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0xf6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003770:	e003      	b.n	800377a <HAL_TIM_PWM_Start+0xfe>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f001 f9dc 	bl	8004b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	@ (8003878 <HAL_TIM_PWM_Start+0x1fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x148>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a39      	ldr	r2, [pc, #228]	@ (800387c <HAL_TIM_PWM_Start+0x200>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x148>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a37      	ldr	r2, [pc, #220]	@ (8003880 <HAL_TIM_PWM_Start+0x204>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x148>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a36      	ldr	r2, [pc, #216]	@ (8003884 <HAL_TIM_PWM_Start+0x208>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x148>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a34      	ldr	r2, [pc, #208]	@ (8003888 <HAL_TIM_PWM_Start+0x20c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x148>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a33      	ldr	r2, [pc, #204]	@ (800388c <HAL_TIM_PWM_Start+0x210>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_PWM_Start+0x14c>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_TIM_PWM_Start+0x14e>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <HAL_TIM_PWM_Start+0x1fc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f0:	d01d      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <HAL_TIM_PWM_Start+0x214>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <HAL_TIM_PWM_Start+0x218>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a23      	ldr	r2, [pc, #140]	@ (8003898 <HAL_TIM_PWM_Start+0x21c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a19      	ldr	r2, [pc, #100]	@ (800387c <HAL_TIM_PWM_Start+0x200>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <HAL_TIM_PWM_Start+0x204>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_TIM_PWM_Start+0x1b2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_TIM_PWM_Start+0x210>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d115      	bne.n	800385a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b19      	ldr	r3, [pc, #100]	@ (800389c <HAL_TIM_PWM_Start+0x220>)
 8003836:	4013      	ands	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b06      	cmp	r3, #6
 800383e:	d015      	beq.n	800386c <HAL_TIM_PWM_Start+0x1f0>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003846:	d011      	beq.n	800386c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	e008      	b.n	800386c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e000      	b.n	800386e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40013400 	.word	0x40013400
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800
 800388c:	40015000 	.word	0x40015000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	00010007 	.word	0x00010007

080038a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e097      	b.n	80039e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fe f8cf 	bl	8001a6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 fca9 	bl	800424c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4313      	orrs	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003940:	f023 030c 	bic.w	r3, r3, #12
 8003944:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800394c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	4313      	orrs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	011a      	lsls	r2, r3, #4
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	031b      	lsls	r3, r3, #12
 8003970:	4313      	orrs	r3, r2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4313      	orrs	r3, r2
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d110      	bne.n	8003a3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a22:	7b7b      	ldrb	r3, [r7, #13]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e069      	b.n	8003b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	e031      	b.n	8003aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d110      	bne.n	8003a66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a44:	7bbb      	ldrb	r3, [r7, #14]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a4a:	7b3b      	ldrb	r3, [r7, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e055      	b.n	8003b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a64:	e01d      	b.n	8003aa2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d108      	bne.n	8003a7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a6c:	7bbb      	ldrb	r3, [r7, #14]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a72:	7b7b      	ldrb	r3, [r7, #13]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a78:	7b3b      	ldrb	r3, [r7, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03e      	b.n	8003b00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIM_Encoder_Start+0xc4>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d008      	beq.n	8003ac0 <HAL_TIM_Encoder_Start+0xd4>
 8003aae:	e00f      	b.n	8003ad0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f841 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 8003abe:	e016      	b.n	8003aee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f839 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 8003ace:	e00e      	b.n	8003aee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f831 	bl	8004b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f82a 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 8003aec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d020      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01b      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb5c 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fb4e 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb5f 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d020      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0204 	mvn.w	r2, #4
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fb36 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fb28 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb39 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01b      	beq.n	8003c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0208 	mvn.w	r2, #8
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fb10 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb02 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb13 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d020      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2208      	movs	r2, #8
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 faea 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fadc 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 faed 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0201 	mvn.w	r2, #1
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fb96 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 f815 	bl	8004ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 f80d 	bl	8004ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 faa7 	bl	8004238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0220 	mvn.w	r2, #32
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 ffd5 	bl	8004cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 ffe1 	bl	8004cf4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 ffd9 	bl	8004d08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 ffd1 	bl	8004d1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 ffc9 	bl	8004d30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0ff      	b.n	8003fc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b14      	cmp	r3, #20
 8003dd2:	f200 80f0 	bhi.w	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003fb7 	.word	0x08003fb7
 8003de4:	08003fb7 	.word	0x08003fb7
 8003de8:	08003fb7 	.word	0x08003fb7
 8003dec:	08003e71 	.word	0x08003e71
 8003df0:	08003fb7 	.word	0x08003fb7
 8003df4:	08003fb7 	.word	0x08003fb7
 8003df8:	08003fb7 	.word	0x08003fb7
 8003dfc:	08003eb3 	.word	0x08003eb3
 8003e00:	08003fb7 	.word	0x08003fb7
 8003e04:	08003fb7 	.word	0x08003fb7
 8003e08:	08003fb7 	.word	0x08003fb7
 8003e0c:	08003ef3 	.word	0x08003ef3
 8003e10:	08003fb7 	.word	0x08003fb7
 8003e14:	08003fb7 	.word	0x08003fb7
 8003e18:	08003fb7 	.word	0x08003fb7
 8003e1c:	08003f35 	.word	0x08003f35
 8003e20:	08003fb7 	.word	0x08003fb7
 8003e24:	08003fb7 	.word	0x08003fb7
 8003e28:	08003fb7 	.word	0x08003fb7
 8003e2c:	08003f75 	.word	0x08003f75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fabc 	bl	80043b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	619a      	str	r2, [r3, #24]
      break;
 8003e6e:	e0a5      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb36 	bl	80044e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	619a      	str	r2, [r3, #24]
      break;
 8003eb0:	e084      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fba9 	bl	8004610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0208 	orr.w	r2, r2, #8
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0204 	bic.w	r2, r2, #4
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
      break;
 8003ef0:	e064      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fc1b 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	61da      	str	r2, [r3, #28]
      break;
 8003f32:	e043      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc8e 	bl	800485c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f72:	e023      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fcd8 	bl	8004930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	021a      	lsls	r2, r3, #8
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003fb4:	e002      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop

08003fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0f6      	b.n	80041da <HAL_TIM_ConfigClockSource+0x20a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800400a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800400e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6f      	ldr	r2, [pc, #444]	@ (80041e4 <HAL_TIM_ConfigClockSource+0x214>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f000 80c1 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800402c:	4a6d      	ldr	r2, [pc, #436]	@ (80041e4 <HAL_TIM_ConfigClockSource+0x214>)
 800402e:	4293      	cmp	r3, r2
 8004030:	f200 80c6 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004034:	4a6c      	ldr	r2, [pc, #432]	@ (80041e8 <HAL_TIM_ConfigClockSource+0x218>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f000 80b9 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800403c:	4a6a      	ldr	r2, [pc, #424]	@ (80041e8 <HAL_TIM_ConfigClockSource+0x218>)
 800403e:	4293      	cmp	r3, r2
 8004040:	f200 80be 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004044:	4a69      	ldr	r2, [pc, #420]	@ (80041ec <HAL_TIM_ConfigClockSource+0x21c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f000 80b1 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800404c:	4a67      	ldr	r2, [pc, #412]	@ (80041ec <HAL_TIM_ConfigClockSource+0x21c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	f200 80b6 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004054:	4a66      	ldr	r2, [pc, #408]	@ (80041f0 <HAL_TIM_ConfigClockSource+0x220>)
 8004056:	4293      	cmp	r3, r2
 8004058:	f000 80a9 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800405c:	4a64      	ldr	r2, [pc, #400]	@ (80041f0 <HAL_TIM_ConfigClockSource+0x220>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f200 80ae 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004064:	4a63      	ldr	r2, [pc, #396]	@ (80041f4 <HAL_TIM_ConfigClockSource+0x224>)
 8004066:	4293      	cmp	r3, r2
 8004068:	f000 80a1 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800406c:	4a61      	ldr	r2, [pc, #388]	@ (80041f4 <HAL_TIM_ConfigClockSource+0x224>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f200 80a6 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004074:	4a60      	ldr	r2, [pc, #384]	@ (80041f8 <HAL_TIM_ConfigClockSource+0x228>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f000 8099 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800407c:	4a5e      	ldr	r2, [pc, #376]	@ (80041f8 <HAL_TIM_ConfigClockSource+0x228>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f200 809e 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004084:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004088:	f000 8091 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800408c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004090:	f200 8096 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004098:	f000 8089 	beq.w	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a0:	f200 808e 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a8:	d03e      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x158>
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ae:	f200 8087 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	f000 8086 	beq.w	80041c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040be:	d87f      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040c0:	2b70      	cmp	r3, #112	@ 0x70
 80040c2:	d01a      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x12a>
 80040c4:	2b70      	cmp	r3, #112	@ 0x70
 80040c6:	d87b      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040c8:	2b60      	cmp	r3, #96	@ 0x60
 80040ca:	d050      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x19e>
 80040cc:	2b60      	cmp	r3, #96	@ 0x60
 80040ce:	d877      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040d0:	2b50      	cmp	r3, #80	@ 0x50
 80040d2:	d03c      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x17e>
 80040d4:	2b50      	cmp	r3, #80	@ 0x50
 80040d6:	d873      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d058      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x1be>
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d86f      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040e0:	2b30      	cmp	r3, #48	@ 0x30
 80040e2:	d064      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 80040e4:	2b30      	cmp	r3, #48	@ 0x30
 80040e6:	d86b      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d060      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d867      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05c      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d05a      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x1de>
 80040f8:	e062      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800410a:	f000 fcf9 	bl	8004b00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800411c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	609a      	str	r2, [r3, #8]
      break;
 8004126:	e04f      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004138:	f000 fce2 	bl	8004b00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800414a:	609a      	str	r2, [r3, #8]
      break;
 800414c:	e03c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	461a      	mov	r2, r3
 800415c:	f000 fc54 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2150      	movs	r1, #80	@ 0x50
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fcad 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800416c:	e02c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800417a:	461a      	mov	r2, r3
 800417c:	f000 fc73 	bl	8004a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2160      	movs	r1, #96	@ 0x60
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc9d 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800418c:	e01c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	461a      	mov	r2, r3
 800419c:	f000 fc34 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2140      	movs	r1, #64	@ 0x40
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc8d 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80041ac:	e00c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f000 fc84 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80041be:	e003      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80041c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	00100070 	.word	0x00100070
 80041e8:	00100060 	.word	0x00100060
 80041ec:	00100050 	.word	0x00100050
 80041f0:	00100040 	.word	0x00100040
 80041f4:	00100030 	.word	0x00100030
 80041f8:	00100020 	.word	0x00100020

080041fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a4c      	ldr	r2, [pc, #304]	@ (8004390 <TIM_Base_SetConfig+0x144>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d017      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426a:	d013      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a49      	ldr	r2, [pc, #292]	@ (8004394 <TIM_Base_SetConfig+0x148>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00f      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a48      	ldr	r2, [pc, #288]	@ (8004398 <TIM_Base_SetConfig+0x14c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a47      	ldr	r2, [pc, #284]	@ (800439c <TIM_Base_SetConfig+0x150>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a46      	ldr	r2, [pc, #280]	@ (80043a0 <TIM_Base_SetConfig+0x154>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_Base_SetConfig+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a45      	ldr	r2, [pc, #276]	@ (80043a4 <TIM_Base_SetConfig+0x158>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d108      	bne.n	80042a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a39      	ldr	r2, [pc, #228]	@ (8004390 <TIM_Base_SetConfig+0x144>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d023      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a36      	ldr	r2, [pc, #216]	@ (8004394 <TIM_Base_SetConfig+0x148>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a35      	ldr	r2, [pc, #212]	@ (8004398 <TIM_Base_SetConfig+0x14c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a34      	ldr	r2, [pc, #208]	@ (800439c <TIM_Base_SetConfig+0x150>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <TIM_Base_SetConfig+0x154>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a33      	ldr	r2, [pc, #204]	@ (80043a8 <TIM_Base_SetConfig+0x15c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <TIM_Base_SetConfig+0x160>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a31      	ldr	r2, [pc, #196]	@ (80043b0 <TIM_Base_SetConfig+0x164>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <TIM_Base_SetConfig+0x158>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <TIM_Base_SetConfig+0x144>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1a      	ldr	r2, [pc, #104]	@ (80043a0 <TIM_Base_SetConfig+0x154>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <TIM_Base_SetConfig+0x15c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <TIM_Base_SetConfig+0x160>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <TIM_Base_SetConfig+0x164>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x110>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <TIM_Base_SetConfig+0x158>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f023 0201 	bic.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]
  }
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40013400 	.word	0x40013400
 80043a4:	40015000 	.word	0x40015000
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 0201 	bic.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 0302 	bic.w	r3, r3, #2
 8004400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a30      	ldr	r2, [pc, #192]	@ (80044d0 <TIM_OC1_SetConfig+0x11c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a2f      	ldr	r2, [pc, #188]	@ (80044d4 <TIM_OC1_SetConfig+0x120>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00f      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2e      	ldr	r2, [pc, #184]	@ (80044d8 <TIM_OC1_SetConfig+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a2d      	ldr	r2, [pc, #180]	@ (80044dc <TIM_OC1_SetConfig+0x128>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <TIM_OC1_SetConfig+0x12c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_OC1_SetConfig+0x88>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2b      	ldr	r2, [pc, #172]	@ (80044e4 <TIM_OC1_SetConfig+0x130>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10c      	bne.n	8004456 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0308 	bic.w	r3, r3, #8
 8004442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1d      	ldr	r2, [pc, #116]	@ (80044d0 <TIM_OC1_SetConfig+0x11c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1c      	ldr	r2, [pc, #112]	@ (80044d4 <TIM_OC1_SetConfig+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <TIM_OC1_SetConfig+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <TIM_OC1_SetConfig+0x128>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a19      	ldr	r2, [pc, #100]	@ (80044e0 <TIM_OC1_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC1_SetConfig+0xd2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <TIM_OC1_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40013400 	.word	0x40013400
 80044d8:	40014000 	.word	0x40014000
 80044dc:	40014400 	.word	0x40014400
 80044e0:	40014800 	.word	0x40014800
 80044e4:	40015000 	.word	0x40015000

080044e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 0210 	bic.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2c      	ldr	r2, [pc, #176]	@ (80045f8 <TIM_OC2_SetConfig+0x110>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC2_SetConfig+0x74>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <TIM_OC2_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC2_SetConfig+0x74>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <TIM_OC2_SetConfig+0x118>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10d      	bne.n	8004578 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a1f      	ldr	r2, [pc, #124]	@ (80045f8 <TIM_OC2_SetConfig+0x110>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1e      	ldr	r2, [pc, #120]	@ (80045fc <TIM_OC2_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1e      	ldr	r2, [pc, #120]	@ (8004604 <TIM_OC2_SetConfig+0x11c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <TIM_OC2_SetConfig+0x120>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <TIM_OC2_SetConfig+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC2_SetConfig+0xc0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_OC2_SetConfig+0x118>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40015000 	.word	0x40015000
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800465c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2b      	ldr	r2, [pc, #172]	@ (800471c <TIM_OC3_SetConfig+0x10c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_OC3_SetConfig+0x72>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2a      	ldr	r2, [pc, #168]	@ (8004720 <TIM_OC3_SetConfig+0x110>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC3_SetConfig+0x72>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a29      	ldr	r2, [pc, #164]	@ (8004724 <TIM_OC3_SetConfig+0x114>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <TIM_OC3_SetConfig+0x10c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <TIM_OC3_SetConfig+0x110>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <TIM_OC3_SetConfig+0x118>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <TIM_OC3_SetConfig+0x11c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <TIM_OC3_SetConfig+0x120>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0xbe>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <TIM_OC3_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400
 8004724:	40015000 	.word	0x40015000
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2c      	ldr	r2, [pc, #176]	@ (8004844 <TIM_OC4_SetConfig+0x110>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_OC4_SetConfig+0x74>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2b      	ldr	r2, [pc, #172]	@ (8004848 <TIM_OC4_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC4_SetConfig+0x74>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <TIM_OC4_SetConfig+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004844 <TIM_OC4_SetConfig+0x110>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004848 <TIM_OC4_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00f      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004850 <TIM_OC4_SetConfig+0x11c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <TIM_OC4_SetConfig+0x120>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <TIM_OC4_SetConfig+0x124>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC4_SetConfig+0xc0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a17      	ldr	r2, [pc, #92]	@ (800484c <TIM_OC4_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d113      	bne.n	800481c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004802:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40013400 	.word	0x40013400
 800484c:	40015000 	.word	0x40015000
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80048a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	@ (8004918 <TIM_OC5_SetConfig+0xbc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <TIM_OC5_SetConfig+0xc0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <TIM_OC5_SetConfig+0xc4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <TIM_OC5_SetConfig+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <TIM_OC5_SetConfig+0xcc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_OC5_SetConfig+0x82>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a14      	ldr	r2, [pc, #80]	@ (800492c <TIM_OC5_SetConfig+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d109      	bne.n	80048f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40015000 	.word	0x40015000

08004930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	051b      	lsls	r3, r3, #20
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <TIM_OC6_SetConfig+0xc0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <TIM_OC6_SetConfig+0xc4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a18      	ldr	r2, [pc, #96]	@ (80049f8 <TIM_OC6_SetConfig+0xc8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <TIM_OC6_SetConfig+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <TIM_OC6_SetConfig+0xd0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC6_SetConfig+0x84>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <TIM_OC6_SetConfig+0xd4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	40015000 	.word	0x40015000

08004a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 030a 	bic.w	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0210 	bic.w	r2, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	401a      	ands	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e074      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a34      	ldr	r2, [pc, #208]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a33      	ldr	r2, [pc, #204]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a31      	ldr	r2, [pc, #196]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004be8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c24:	d01d      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a15      	ldr	r2, [pc, #84]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a11      	ldr	r2, [pc, #68]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10c      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40013400 	.word	0x40013400
 8004ca4:	40015000 	.word	0x40015000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000

08004cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc ff43 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	@ 0x24
 8004d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fb24 	bl	80053dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f825 	bl	8004de4 <UART_SetConfig>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01b      	b.n	8004ddc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fba3 	bl	8005520 <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b08c      	sub	sp, #48	@ 0x30
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4baa      	ldr	r3, [pc, #680]	@ (80050bc <UART_SetConfig+0x2d8>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a9f      	ldr	r2, [pc, #636]	@ (80050c0 <UART_SetConfig+0x2dc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	f023 010f 	bic.w	r1, r3, #15
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a90      	ldr	r2, [pc, #576]	@ (80050c4 <UART_SetConfig+0x2e0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d125      	bne.n	8004ed4 <UART_SetConfig+0xf0>
 8004e88:	4b8f      	ldr	r3, [pc, #572]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d81a      	bhi.n	8004ecc <UART_SetConfig+0xe8>
 8004e96:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <UART_SetConfig+0xb8>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004ebd 	.word	0x08004ebd
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ec5 	.word	0x08004ec5
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e116      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e112      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	e10e      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e10a      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e106      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80050cc <UART_SetConfig+0x2e8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d138      	bne.n	8004f50 <UART_SetConfig+0x16c>
 8004ede:	4b7a      	ldr	r3, [pc, #488]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	d82d      	bhi.n	8004f48 <UART_SetConfig+0x164>
 8004eec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <UART_SetConfig+0x110>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f49 	.word	0x08004f49
 8004efc:	08004f49 	.word	0x08004f49
 8004f00:	08004f49 	.word	0x08004f49
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	08004f49 	.word	0x08004f49
 8004f0c:	08004f49 	.word	0x08004f49
 8004f10:	08004f49 	.word	0x08004f49
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	08004f49 	.word	0x08004f49
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f41 	.word	0x08004f41
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2e:	e0d8      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f36:	e0d4      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3e:	e0d0      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f46:	e0cc      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4e:	e0c8      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5e      	ldr	r2, [pc, #376]	@ (80050d0 <UART_SetConfig+0x2ec>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d125      	bne.n	8004fa6 <UART_SetConfig+0x1c2>
 8004f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f64:	2b30      	cmp	r3, #48	@ 0x30
 8004f66:	d016      	beq.n	8004f96 <UART_SetConfig+0x1b2>
 8004f68:	2b30      	cmp	r3, #48	@ 0x30
 8004f6a:	d818      	bhi.n	8004f9e <UART_SetConfig+0x1ba>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d00a      	beq.n	8004f86 <UART_SetConfig+0x1a2>
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d814      	bhi.n	8004f9e <UART_SetConfig+0x1ba>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <UART_SetConfig+0x19a>
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d008      	beq.n	8004f8e <UART_SetConfig+0x1aa>
 8004f7c:	e00f      	b.n	8004f9e <UART_SetConfig+0x1ba>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f84:	e0ad      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f86:	2302      	movs	r3, #2
 8004f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8c:	e0a9      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f94:	e0a5      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f96:	2308      	movs	r3, #8
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9c:	e0a1      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa4:	e09d      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4a      	ldr	r2, [pc, #296]	@ (80050d4 <UART_SetConfig+0x2f0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d125      	bne.n	8004ffc <UART_SetConfig+0x218>
 8004fb0:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fbc:	d016      	beq.n	8004fec <UART_SetConfig+0x208>
 8004fbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fc0:	d818      	bhi.n	8004ff4 <UART_SetConfig+0x210>
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d00a      	beq.n	8004fdc <UART_SetConfig+0x1f8>
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d814      	bhi.n	8004ff4 <UART_SetConfig+0x210>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <UART_SetConfig+0x1f0>
 8004fce:	2b40      	cmp	r3, #64	@ 0x40
 8004fd0:	d008      	beq.n	8004fe4 <UART_SetConfig+0x200>
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fda:	e082      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e07e      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fea:	e07a      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e076      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffa:	e072      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <UART_SetConfig+0x2f4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d12a      	bne.n	800505c <UART_SetConfig+0x278>
 8005006:	4b30      	ldr	r3, [pc, #192]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005014:	d01a      	beq.n	800504c <UART_SetConfig+0x268>
 8005016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501a:	d81b      	bhi.n	8005054 <UART_SetConfig+0x270>
 800501c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005020:	d00c      	beq.n	800503c <UART_SetConfig+0x258>
 8005022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005026:	d815      	bhi.n	8005054 <UART_SetConfig+0x270>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <UART_SetConfig+0x250>
 800502c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005030:	d008      	beq.n	8005044 <UART_SetConfig+0x260>
 8005032:	e00f      	b.n	8005054 <UART_SetConfig+0x270>
 8005034:	2300      	movs	r3, #0
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e052      	b.n	80050e2 <UART_SetConfig+0x2fe>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e04e      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e04a      	b.n	80050e2 <UART_SetConfig+0x2fe>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e046      	b.n	80050e2 <UART_SetConfig+0x2fe>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e042      	b.n	80050e2 <UART_SetConfig+0x2fe>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <UART_SetConfig+0x2dc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d13a      	bne.n	80050dc <UART_SetConfig+0x2f8>
 8005066:	4b18      	ldr	r3, [pc, #96]	@ (80050c8 <UART_SetConfig+0x2e4>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005074:	d01a      	beq.n	80050ac <UART_SetConfig+0x2c8>
 8005076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800507a:	d81b      	bhi.n	80050b4 <UART_SetConfig+0x2d0>
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005080:	d00c      	beq.n	800509c <UART_SetConfig+0x2b8>
 8005082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005086:	d815      	bhi.n	80050b4 <UART_SetConfig+0x2d0>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <UART_SetConfig+0x2b0>
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005090:	d008      	beq.n	80050a4 <UART_SetConfig+0x2c0>
 8005092:	e00f      	b.n	80050b4 <UART_SetConfig+0x2d0>
 8005094:	2300      	movs	r3, #0
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e022      	b.n	80050e2 <UART_SetConfig+0x2fe>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e01e      	b.n	80050e2 <UART_SetConfig+0x2fe>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e01a      	b.n	80050e2 <UART_SetConfig+0x2fe>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e016      	b.n	80050e2 <UART_SetConfig+0x2fe>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e012      	b.n	80050e2 <UART_SetConfig+0x2fe>
 80050bc:	cfff69f3 	.word	0xcfff69f3
 80050c0:	40008000 	.word	0x40008000
 80050c4:	40013800 	.word	0x40013800
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40004400 	.word	0x40004400
 80050d0:	40004800 	.word	0x40004800
 80050d4:	40004c00 	.word	0x40004c00
 80050d8:	40005000 	.word	0x40005000
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4aae      	ldr	r2, [pc, #696]	@ (80053a0 <UART_SetConfig+0x5bc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	f040 8097 	bne.w	800521c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d823      	bhi.n	800513e <UART_SetConfig+0x35a>
 80050f6:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <UART_SetConfig+0x318>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	08005121 	.word	0x08005121
 8005100:	0800513f 	.word	0x0800513f
 8005104:	08005129 	.word	0x08005129
 8005108:	0800513f 	.word	0x0800513f
 800510c:	0800512f 	.word	0x0800512f
 8005110:	0800513f 	.word	0x0800513f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800513f 	.word	0x0800513f
 800511c:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005120:	f7fd feba 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005126:	e010      	b.n	800514a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b9e      	ldr	r3, [pc, #632]	@ (80053a4 <UART_SetConfig+0x5c0>)
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800512c:	e00d      	b.n	800514a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7fd fe45 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005134:	e009      	b.n	800514a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800513c:	e005      	b.n	800514a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8130 	beq.w	80053b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	4a94      	ldr	r2, [pc, #592]	@ (80053a8 <UART_SetConfig+0x5c4>)
 8005158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515c:	461a      	mov	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	fbb3 f3f2 	udiv	r3, r3, r2
 8005164:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	429a      	cmp	r2, r3
 8005174:	d305      	bcc.n	8005182 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005188:	e113      	b.n	80053b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	2200      	movs	r2, #0
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	60fa      	str	r2, [r7, #12]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	4a84      	ldr	r2, [pc, #528]	@ (80053a8 <UART_SetConfig+0x5c4>)
 8005198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519c:	b29b      	uxth	r3, r3
 800519e:	2200      	movs	r2, #0
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051ac:	f7fb fd74 	bl	8000c98 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	020b      	lsls	r3, r1, #8
 80051c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051c6:	0202      	lsls	r2, r0, #8
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	6849      	ldr	r1, [r1, #4]
 80051cc:	0849      	lsrs	r1, r1, #1
 80051ce:	2000      	movs	r0, #0
 80051d0:	460c      	mov	r4, r1
 80051d2:	4605      	mov	r5, r0
 80051d4:	eb12 0804 	adds.w	r8, r2, r4
 80051d8:	eb43 0905 	adc.w	r9, r3, r5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	469a      	mov	sl, r3
 80051e4:	4693      	mov	fp, r2
 80051e6:	4652      	mov	r2, sl
 80051e8:	465b      	mov	r3, fp
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f7fb fd53 	bl	8000c98 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4613      	mov	r3, r2
 80051f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005200:	d308      	bcc.n	8005214 <UART_SetConfig+0x430>
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005208:	d204      	bcs.n	8005214 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	e0ce      	b.n	80053b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800521a:	e0ca      	b.n	80053b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005224:	d166      	bne.n	80052f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800522a:	2b08      	cmp	r3, #8
 800522c:	d827      	bhi.n	800527e <UART_SetConfig+0x49a>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <UART_SetConfig+0x450>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005259 	.word	0x08005259
 8005238:	08005261 	.word	0x08005261
 800523c:	08005269 	.word	0x08005269
 8005240:	0800527f 	.word	0x0800527f
 8005244:	0800526f 	.word	0x0800526f
 8005248:	0800527f 	.word	0x0800527f
 800524c:	0800527f 	.word	0x0800527f
 8005250:	0800527f 	.word	0x0800527f
 8005254:	08005277 	.word	0x08005277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005258:	f7fd fe1e 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800525e:	e014      	b.n	800528a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fd fe30 	bl	8002ec4 <HAL_RCC_GetPCLK2Freq>
 8005264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005266:	e010      	b.n	800528a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005268:	4b4e      	ldr	r3, [pc, #312]	@ (80053a4 <UART_SetConfig+0x5c0>)
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800526c:	e00d      	b.n	800528a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526e:	f7fd fda5 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8005272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005274:	e009      	b.n	800528a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800527c:	e005      	b.n	800528a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8090 	beq.w	80053b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	4a44      	ldr	r2, [pc, #272]	@ (80053a8 <UART_SetConfig+0x5c4>)
 8005298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529c:	461a      	mov	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a4:	005a      	lsls	r2, r3, #1
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d916      	bls.n	80052ec <UART_SetConfig+0x508>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c4:	d212      	bcs.n	80052ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f023 030f 	bic.w	r3, r3, #15
 80052ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	b29a      	uxth	r2, r3
 80052dc:	8bfb      	ldrh	r3, [r7, #30]
 80052de:	4313      	orrs	r3, r2
 80052e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	8bfa      	ldrh	r2, [r7, #30]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	e062      	b.n	80053b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052f2:	e05e      	b.n	80053b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d828      	bhi.n	800534e <UART_SetConfig+0x56a>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0x520>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005339 	.word	0x08005339
 8005310:	0800534f 	.word	0x0800534f
 8005314:	0800533f 	.word	0x0800533f
 8005318:	0800534f 	.word	0x0800534f
 800531c:	0800534f 	.word	0x0800534f
 8005320:	0800534f 	.word	0x0800534f
 8005324:	08005347 	.word	0x08005347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fd fdb6 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800532e:	e014      	b.n	800535a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7fd fdc8 	bl	8002ec4 <HAL_RCC_GetPCLK2Freq>
 8005334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005336:	e010      	b.n	800535a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <UART_SetConfig+0x5c0>)
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800533c:	e00d      	b.n	800535a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fd fd3d 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8005342:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005344:	e009      	b.n	800535a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005358:	bf00      	nop
    }

    if (pclk != 0U)
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d028      	beq.n	80053b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	4a10      	ldr	r2, [pc, #64]	@ (80053a8 <UART_SetConfig+0x5c4>)
 8005366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800536a:	461a      	mov	r2, r3
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	441a      	add	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d910      	bls.n	80053ac <UART_SetConfig+0x5c8>
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005390:	d20c      	bcs.n	80053ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	b29a      	uxth	r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	e009      	b.n	80053b2 <UART_SetConfig+0x5ce>
 800539e:	bf00      	nop
 80053a0:	40008000 	.word	0x40008000
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	08008350 	.word	0x08008350
      }
      else
      {
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2201      	movs	r2, #1
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3730      	adds	r7, #48	@ 0x30
 80053d6:	46bd      	mov	sp, r7
 80053d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054da:	d10a      	bne.n	80054f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b098      	sub	sp, #96	@ 0x60
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005530:	f7fc fc46 	bl	8001dc0 <HAL_GetTick>
 8005534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d12f      	bne.n	80055a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554c:	2200      	movs	r2, #0
 800554e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f88e 	bl	8005674 <UART_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d022      	beq.n	80055a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800556c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005572:	653b      	str	r3, [r7, #80]	@ 0x50
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800557c:	647b      	str	r3, [r7, #68]	@ 0x44
 800557e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800558a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e6      	bne.n	800555e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e063      	b.n	800566c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d149      	bne.n	8005646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ba:	2200      	movs	r2, #0
 80055bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f857 	bl	8005674 <UART_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d03c      	beq.n	8005646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	623b      	str	r3, [r7, #32]
   return(result);
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e6      	bne.n	80055cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	60fb      	str	r3, [r7, #12]
   return(result);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800561e:	61fa      	str	r2, [r7, #28]
 8005620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	69b9      	ldr	r1, [r7, #24]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	617b      	str	r3, [r7, #20]
   return(result);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e012      	b.n	800566c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3758      	adds	r7, #88	@ 0x58
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005684:	e04f      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800568c:	d04b      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fc fb97 	bl	8001dc0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e04e      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d037      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b80      	cmp	r3, #128	@ 0x80
 80056ba:	d034      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b40      	cmp	r3, #64	@ 0x40
 80056c0:	d031      	beq.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d110      	bne.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2208      	movs	r2, #8
 80056d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f838 	bl	800574e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2208      	movs	r2, #8
 80056e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e029      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005700:	d111      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800570a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f81e 	bl	800574e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e00f      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	429a      	cmp	r2, r3
 8005742:	d0a0      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800574e:	b480      	push	{r7}
 8005750:	b095      	sub	sp, #84	@ 0x54
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800576a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005774:	643b      	str	r3, [r7, #64]	@ 0x40
 8005776:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800577a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	61fb      	str	r3, [r7, #28]
   return(result);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e3      	bne.n	8005788 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d118      	bne.n	80057fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800580e:	bf00      	nop
 8005810:	3754      	adds	r7, #84	@ 0x54
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UARTEx_DisableFifoMode+0x16>
 800582c:	2302      	movs	r3, #2
 800582e:	e027      	b.n	8005880 <HAL_UARTEx_DisableFifoMode+0x66>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	@ 0x24
 800583c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800585e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e02d      	b.n	8005900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	@ 0x24
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f84f 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e02d      	b.n	800597c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	@ 0x24
 800592c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f811 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059a4:	e031      	b.n	8005a0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059a6:	2308      	movs	r3, #8
 80059a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059aa:	2308      	movs	r3, #8
 80059ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	0e5b      	lsrs	r3, r3, #25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	0f5b      	lsrs	r3, r3, #29
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	7b3a      	ldrb	r2, [r7, #12]
 80059d2:	4911      	ldr	r1, [pc, #68]	@ (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059d4:	5c8a      	ldrb	r2, [r1, r2]
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059da:	7b3a      	ldrb	r2, [r7, #12]
 80059dc:	490f      	ldr	r1, [pc, #60]	@ (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	7b7a      	ldrb	r2, [r7, #13]
 80059f0:	4909      	ldr	r1, [pc, #36]	@ (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059f2:	5c8a      	ldrb	r2, [r1, r2]
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059f8:	7b7a      	ldrb	r2, [r7, #13]
 80059fa:	4908      	ldr	r1, [pc, #32]	@ (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	08008368 	.word	0x08008368
 8005a1c:	08008370 	.word	0x08008370

08005a20 <__cvt>:
 8005a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	ec57 6b10 	vmov	r6, r7, d0
 8005a28:	2f00      	cmp	r7, #0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	463b      	mov	r3, r7
 8005a30:	bfbb      	ittet	lt
 8005a32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a36:	461f      	movlt	r7, r3
 8005a38:	2300      	movge	r3, #0
 8005a3a:	232d      	movlt	r3, #45	@ 0x2d
 8005a3c:	700b      	strb	r3, [r1, #0]
 8005a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a44:	4691      	mov	r9, r2
 8005a46:	f023 0820 	bic.w	r8, r3, #32
 8005a4a:	bfbc      	itt	lt
 8005a4c:	4632      	movlt	r2, r6
 8005a4e:	4616      	movlt	r6, r2
 8005a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a54:	d005      	beq.n	8005a62 <__cvt+0x42>
 8005a56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a5a:	d100      	bne.n	8005a5e <__cvt+0x3e>
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	2102      	movs	r1, #2
 8005a60:	e000      	b.n	8005a64 <__cvt+0x44>
 8005a62:	2103      	movs	r1, #3
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	ab02      	add	r3, sp, #8
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	ec47 6b10 	vmov	d0, r6, r7
 8005a70:	4653      	mov	r3, sl
 8005a72:	4622      	mov	r2, r4
 8005a74:	f000 fe38 	bl	80066e8 <_dtoa_r>
 8005a78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	d119      	bne.n	8005ab4 <__cvt+0x94>
 8005a80:	f019 0f01 	tst.w	r9, #1
 8005a84:	d00e      	beq.n	8005aa4 <__cvt+0x84>
 8005a86:	eb00 0904 	add.w	r9, r0, r4
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fb f841 	bl	8000b18 <__aeabi_dcmpeq>
 8005a96:	b108      	cbz	r0, 8005a9c <__cvt+0x7c>
 8005a98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a9c:	2230      	movs	r2, #48	@ 0x30
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	454b      	cmp	r3, r9
 8005aa2:	d31e      	bcc.n	8005ae2 <__cvt+0xc2>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aa8:	1b5b      	subs	r3, r3, r5
 8005aaa:	4628      	mov	r0, r5
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	b004      	add	sp, #16
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ab8:	eb00 0904 	add.w	r9, r0, r4
 8005abc:	d1e5      	bne.n	8005a8a <__cvt+0x6a>
 8005abe:	7803      	ldrb	r3, [r0, #0]
 8005ac0:	2b30      	cmp	r3, #48	@ 0x30
 8005ac2:	d10a      	bne.n	8005ada <__cvt+0xba>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4630      	mov	r0, r6
 8005aca:	4639      	mov	r1, r7
 8005acc:	f7fb f824 	bl	8000b18 <__aeabi_dcmpeq>
 8005ad0:	b918      	cbnz	r0, 8005ada <__cvt+0xba>
 8005ad2:	f1c4 0401 	rsb	r4, r4, #1
 8005ad6:	f8ca 4000 	str.w	r4, [sl]
 8005ada:	f8da 3000 	ldr.w	r3, [sl]
 8005ade:	4499      	add	r9, r3
 8005ae0:	e7d3      	b.n	8005a8a <__cvt+0x6a>
 8005ae2:	1c59      	adds	r1, r3, #1
 8005ae4:	9103      	str	r1, [sp, #12]
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e7d9      	b.n	8005a9e <__cvt+0x7e>

08005aea <__exponent>:
 8005aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aec:	2900      	cmp	r1, #0
 8005aee:	bfba      	itte	lt
 8005af0:	4249      	neglt	r1, r1
 8005af2:	232d      	movlt	r3, #45	@ 0x2d
 8005af4:	232b      	movge	r3, #43	@ 0x2b
 8005af6:	2909      	cmp	r1, #9
 8005af8:	7002      	strb	r2, [r0, #0]
 8005afa:	7043      	strb	r3, [r0, #1]
 8005afc:	dd29      	ble.n	8005b52 <__exponent+0x68>
 8005afe:	f10d 0307 	add.w	r3, sp, #7
 8005b02:	461d      	mov	r5, r3
 8005b04:	270a      	movs	r7, #10
 8005b06:	461a      	mov	r2, r3
 8005b08:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b0c:	fb07 1416 	mls	r4, r7, r6, r1
 8005b10:	3430      	adds	r4, #48	@ 0x30
 8005b12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b16:	460c      	mov	r4, r1
 8005b18:	2c63      	cmp	r4, #99	@ 0x63
 8005b1a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005b1e:	4631      	mov	r1, r6
 8005b20:	dcf1      	bgt.n	8005b06 <__exponent+0x1c>
 8005b22:	3130      	adds	r1, #48	@ 0x30
 8005b24:	1e94      	subs	r4, r2, #2
 8005b26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b2a:	1c41      	adds	r1, r0, #1
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	42ab      	cmp	r3, r5
 8005b30:	d30a      	bcc.n	8005b48 <__exponent+0x5e>
 8005b32:	f10d 0309 	add.w	r3, sp, #9
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ac      	cmp	r4, r5
 8005b3a:	bf88      	it	hi
 8005b3c:	2300      	movhi	r3, #0
 8005b3e:	3302      	adds	r3, #2
 8005b40:	4403      	add	r3, r0
 8005b42:	1a18      	subs	r0, r3, r0
 8005b44:	b003      	add	sp, #12
 8005b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b50:	e7ed      	b.n	8005b2e <__exponent+0x44>
 8005b52:	2330      	movs	r3, #48	@ 0x30
 8005b54:	3130      	adds	r1, #48	@ 0x30
 8005b56:	7083      	strb	r3, [r0, #2]
 8005b58:	70c1      	strb	r1, [r0, #3]
 8005b5a:	1d03      	adds	r3, r0, #4
 8005b5c:	e7f1      	b.n	8005b42 <__exponent+0x58>
	...

08005b60 <_printf_float>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	b08d      	sub	sp, #52	@ 0x34
 8005b66:	460c      	mov	r4, r1
 8005b68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	461f      	mov	r7, r3
 8005b70:	4605      	mov	r5, r0
 8005b72:	f000 fcb9 	bl	80064e8 <_localeconv_r>
 8005b76:	6803      	ldr	r3, [r0, #0]
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fba0 	bl	80002c0 <strlen>
 8005b80:	2300      	movs	r3, #0
 8005b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	9005      	str	r0, [sp, #20]
 8005b8a:	3307      	adds	r3, #7
 8005b8c:	f023 0307 	bic.w	r3, r3, #7
 8005b90:	f103 0208 	add.w	r2, r3, #8
 8005b94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b98:	f8d4 b000 	ldr.w	fp, [r4]
 8005b9c:	f8c8 2000 	str.w	r2, [r8]
 8005ba0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e28 <_printf_float+0x2c8>)
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bbc:	f7fa ffde 	bl	8000b7c <__aeabi_dcmpun>
 8005bc0:	bb70      	cbnz	r0, 8005c20 <_printf_float+0xc0>
 8005bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc6:	4b98      	ldr	r3, [pc, #608]	@ (8005e28 <_printf_float+0x2c8>)
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bcc:	f7fa ffb8 	bl	8000b40 <__aeabi_dcmple>
 8005bd0:	bb30      	cbnz	r0, 8005c20 <_printf_float+0xc0>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa ffa7 	bl	8000b2c <__aeabi_dcmplt>
 8005bde:	b110      	cbz	r0, 8005be6 <_printf_float+0x86>
 8005be0:	232d      	movs	r3, #45	@ 0x2d
 8005be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be6:	4a91      	ldr	r2, [pc, #580]	@ (8005e2c <_printf_float+0x2cc>)
 8005be8:	4b91      	ldr	r3, [pc, #580]	@ (8005e30 <_printf_float+0x2d0>)
 8005bea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bee:	bf8c      	ite	hi
 8005bf0:	4690      	movhi	r8, r2
 8005bf2:	4698      	movls	r8, r3
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	f02b 0304 	bic.w	r3, fp, #4
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	f04f 0900 	mov.w	r9, #0
 8005c02:	9700      	str	r7, [sp, #0]
 8005c04:	4633      	mov	r3, r6
 8005c06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 f9d2 	bl	8005fb4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	f040 808d 	bne.w	8005d30 <_printf_float+0x1d0>
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c1a:	b00d      	add	sp, #52	@ 0x34
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	4649      	mov	r1, r9
 8005c28:	f7fa ffa8 	bl	8000b7c <__aeabi_dcmpun>
 8005c2c:	b140      	cbz	r0, 8005c40 <_printf_float+0xe0>
 8005c2e:	464b      	mov	r3, r9
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bfbc      	itt	lt
 8005c34:	232d      	movlt	r3, #45	@ 0x2d
 8005c36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <_printf_float+0x2d4>)
 8005c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e38 <_printf_float+0x2d8>)
 8005c3e:	e7d4      	b.n	8005bea <_printf_float+0x8a>
 8005c40:	6863      	ldr	r3, [r4, #4]
 8005c42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c46:	9206      	str	r2, [sp, #24]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	d13b      	bne.n	8005cc4 <_printf_float+0x164>
 8005c4c:	2306      	movs	r3, #6
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c54:	2300      	movs	r3, #0
 8005c56:	6022      	str	r2, [r4, #0]
 8005c58:	9303      	str	r3, [sp, #12]
 8005c5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c60:	ab09      	add	r3, sp, #36	@ 0x24
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	6861      	ldr	r1, [r4, #4]
 8005c66:	ec49 8b10 	vmov	d0, r8, r9
 8005c6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f7ff fed6 	bl	8005a20 <__cvt>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c78:	2b47      	cmp	r3, #71	@ 0x47
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	d129      	bne.n	8005cd2 <_printf_float+0x172>
 8005c7e:	1cc8      	adds	r0, r1, #3
 8005c80:	db02      	blt.n	8005c88 <_printf_float+0x128>
 8005c82:	6863      	ldr	r3, [r4, #4]
 8005c84:	4299      	cmp	r1, r3
 8005c86:	dd41      	ble.n	8005d0c <_printf_float+0x1ac>
 8005c88:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c8c:	fa5f fa8a 	uxtb.w	sl, sl
 8005c90:	3901      	subs	r1, #1
 8005c92:	4652      	mov	r2, sl
 8005c94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c98:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c9a:	f7ff ff26 	bl	8005aea <__exponent>
 8005c9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ca0:	1813      	adds	r3, r2, r0
 8005ca2:	2a01      	cmp	r2, #1
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	dc02      	bgt.n	8005cb0 <_printf_float+0x150>
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	07d2      	lsls	r2, r2, #31
 8005cae:	d501      	bpl.n	8005cb4 <_printf_float+0x154>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0a2      	beq.n	8005c02 <_printf_float+0xa2>
 8005cbc:	232d      	movs	r3, #45	@ 0x2d
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc2:	e79e      	b.n	8005c02 <_printf_float+0xa2>
 8005cc4:	9a06      	ldr	r2, [sp, #24]
 8005cc6:	2a47      	cmp	r2, #71	@ 0x47
 8005cc8:	d1c2      	bne.n	8005c50 <_printf_float+0xf0>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1c0      	bne.n	8005c50 <_printf_float+0xf0>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7bd      	b.n	8005c4e <_printf_float+0xee>
 8005cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cd6:	d9db      	bls.n	8005c90 <_printf_float+0x130>
 8005cd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cdc:	d118      	bne.n	8005d10 <_printf_float+0x1b0>
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	dd0b      	ble.n	8005cfc <_printf_float+0x19c>
 8005ce4:	6121      	str	r1, [r4, #16]
 8005ce6:	b913      	cbnz	r3, 8005cee <_printf_float+0x18e>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	07d0      	lsls	r0, r2, #31
 8005cec:	d502      	bpl.n	8005cf4 <_printf_float+0x194>
 8005cee:	3301      	adds	r3, #1
 8005cf0:	440b      	add	r3, r1
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cf6:	f04f 0900 	mov.w	r9, #0
 8005cfa:	e7db      	b.n	8005cb4 <_printf_float+0x154>
 8005cfc:	b913      	cbnz	r3, 8005d04 <_printf_float+0x1a4>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	07d2      	lsls	r2, r2, #31
 8005d02:	d501      	bpl.n	8005d08 <_printf_float+0x1a8>
 8005d04:	3302      	adds	r3, #2
 8005d06:	e7f4      	b.n	8005cf2 <_printf_float+0x192>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e7f2      	b.n	8005cf2 <_printf_float+0x192>
 8005d0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d12:	4299      	cmp	r1, r3
 8005d14:	db05      	blt.n	8005d22 <_printf_float+0x1c2>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	6121      	str	r1, [r4, #16]
 8005d1a:	07d8      	lsls	r0, r3, #31
 8005d1c:	d5ea      	bpl.n	8005cf4 <_printf_float+0x194>
 8005d1e:	1c4b      	adds	r3, r1, #1
 8005d20:	e7e7      	b.n	8005cf2 <_printf_float+0x192>
 8005d22:	2900      	cmp	r1, #0
 8005d24:	bfd4      	ite	le
 8005d26:	f1c1 0202 	rsble	r2, r1, #2
 8005d2a:	2201      	movgt	r2, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	e7e0      	b.n	8005cf2 <_printf_float+0x192>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	055a      	lsls	r2, r3, #21
 8005d34:	d407      	bmi.n	8005d46 <_printf_float+0x1e6>
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	4642      	mov	r2, r8
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	d12b      	bne.n	8005d9c <_printf_float+0x23c>
 8005d44:	e767      	b.n	8005c16 <_printf_float+0xb6>
 8005d46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d4a:	f240 80dd 	bls.w	8005f08 <_printf_float+0x3a8>
 8005d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d52:	2200      	movs	r2, #0
 8005d54:	2300      	movs	r3, #0
 8005d56:	f7fa fedf 	bl	8000b18 <__aeabi_dcmpeq>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d033      	beq.n	8005dc6 <_printf_float+0x266>
 8005d5e:	4a37      	ldr	r2, [pc, #220]	@ (8005e3c <_printf_float+0x2dc>)
 8005d60:	2301      	movs	r3, #1
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f43f af54 	beq.w	8005c16 <_printf_float+0xb6>
 8005d6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d72:	4543      	cmp	r3, r8
 8005d74:	db02      	blt.n	8005d7c <_printf_float+0x21c>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	07d8      	lsls	r0, r3, #31
 8005d7a:	d50f      	bpl.n	8005d9c <_printf_float+0x23c>
 8005d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	f43f af45 	beq.w	8005c16 <_printf_float+0xb6>
 8005d8c:	f04f 0900 	mov.w	r9, #0
 8005d90:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005d94:	f104 0a1a 	add.w	sl, r4, #26
 8005d98:	45c8      	cmp	r8, r9
 8005d9a:	dc09      	bgt.n	8005db0 <_printf_float+0x250>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	079b      	lsls	r3, r3, #30
 8005da0:	f100 8103 	bmi.w	8005faa <_printf_float+0x44a>
 8005da4:	68e0      	ldr	r0, [r4, #12]
 8005da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005da8:	4298      	cmp	r0, r3
 8005daa:	bfb8      	it	lt
 8005dac:	4618      	movlt	r0, r3
 8005dae:	e734      	b.n	8005c1a <_printf_float+0xba>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4652      	mov	r2, sl
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af2b 	beq.w	8005c16 <_printf_float+0xb6>
 8005dc0:	f109 0901 	add.w	r9, r9, #1
 8005dc4:	e7e8      	b.n	8005d98 <_printf_float+0x238>
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dc39      	bgt.n	8005e40 <_printf_float+0x2e0>
 8005dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e3c <_printf_float+0x2dc>)
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f af1d 	beq.w	8005c16 <_printf_float+0xb6>
 8005ddc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005de0:	ea59 0303 	orrs.w	r3, r9, r3
 8005de4:	d102      	bne.n	8005dec <_printf_float+0x28c>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	07d9      	lsls	r1, r3, #31
 8005dea:	d5d7      	bpl.n	8005d9c <_printf_float+0x23c>
 8005dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	f43f af0d 	beq.w	8005c16 <_printf_float+0xb6>
 8005dfc:	f04f 0a00 	mov.w	sl, #0
 8005e00:	f104 0b1a 	add.w	fp, r4, #26
 8005e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e06:	425b      	negs	r3, r3
 8005e08:	4553      	cmp	r3, sl
 8005e0a:	dc01      	bgt.n	8005e10 <_printf_float+0x2b0>
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	e793      	b.n	8005d38 <_printf_float+0x1d8>
 8005e10:	2301      	movs	r3, #1
 8005e12:	465a      	mov	r2, fp
 8005e14:	4631      	mov	r1, r6
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b8      	blx	r7
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f43f aefb 	beq.w	8005c16 <_printf_float+0xb6>
 8005e20:	f10a 0a01 	add.w	sl, sl, #1
 8005e24:	e7ee      	b.n	8005e04 <_printf_float+0x2a4>
 8005e26:	bf00      	nop
 8005e28:	7fefffff 	.word	0x7fefffff
 8005e2c:	0800837c 	.word	0x0800837c
 8005e30:	08008378 	.word	0x08008378
 8005e34:	08008384 	.word	0x08008384
 8005e38:	08008380 	.word	0x08008380
 8005e3c:	08008388 	.word	0x08008388
 8005e40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e46:	4553      	cmp	r3, sl
 8005e48:	bfa8      	it	ge
 8005e4a:	4653      	movge	r3, sl
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	4699      	mov	r9, r3
 8005e50:	dc36      	bgt.n	8005ec0 <_printf_float+0x360>
 8005e52:	f04f 0b00 	mov.w	fp, #0
 8005e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5a:	f104 021a 	add.w	r2, r4, #26
 8005e5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e60:	9306      	str	r3, [sp, #24]
 8005e62:	eba3 0309 	sub.w	r3, r3, r9
 8005e66:	455b      	cmp	r3, fp
 8005e68:	dc31      	bgt.n	8005ece <_printf_float+0x36e>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	459a      	cmp	sl, r3
 8005e6e:	dc3a      	bgt.n	8005ee6 <_printf_float+0x386>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	07da      	lsls	r2, r3, #31
 8005e74:	d437      	bmi.n	8005ee6 <_printf_float+0x386>
 8005e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e78:	ebaa 0903 	sub.w	r9, sl, r3
 8005e7c:	9b06      	ldr	r3, [sp, #24]
 8005e7e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e82:	4599      	cmp	r9, r3
 8005e84:	bfa8      	it	ge
 8005e86:	4699      	movge	r9, r3
 8005e88:	f1b9 0f00 	cmp.w	r9, #0
 8005e8c:	dc33      	bgt.n	8005ef6 <_printf_float+0x396>
 8005e8e:	f04f 0800 	mov.w	r8, #0
 8005e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e96:	f104 0b1a 	add.w	fp, r4, #26
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	ebaa 0303 	sub.w	r3, sl, r3
 8005ea0:	eba3 0309 	sub.w	r3, r3, r9
 8005ea4:	4543      	cmp	r3, r8
 8005ea6:	f77f af79 	ble.w	8005d9c <_printf_float+0x23c>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	465a      	mov	r2, fp
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	47b8      	blx	r7
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	f43f aeae 	beq.w	8005c16 <_printf_float+0xb6>
 8005eba:	f108 0801 	add.w	r8, r8, #1
 8005ebe:	e7ec      	b.n	8005e9a <_printf_float+0x33a>
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d1c2      	bne.n	8005e52 <_printf_float+0x2f2>
 8005ecc:	e6a3      	b.n	8005c16 <_printf_float+0xb6>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	9206      	str	r2, [sp, #24]
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f43f ae9c 	beq.w	8005c16 <_printf_float+0xb6>
 8005ede:	9a06      	ldr	r2, [sp, #24]
 8005ee0:	f10b 0b01 	add.w	fp, fp, #1
 8005ee4:	e7bb      	b.n	8005e5e <_printf_float+0x2fe>
 8005ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d1c0      	bne.n	8005e76 <_printf_float+0x316>
 8005ef4:	e68f      	b.n	8005c16 <_printf_float+0xb6>
 8005ef6:	9a06      	ldr	r2, [sp, #24]
 8005ef8:	464b      	mov	r3, r9
 8005efa:	4442      	add	r2, r8
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	d1c3      	bne.n	8005e8e <_printf_float+0x32e>
 8005f06:	e686      	b.n	8005c16 <_printf_float+0xb6>
 8005f08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f0c:	f1ba 0f01 	cmp.w	sl, #1
 8005f10:	dc01      	bgt.n	8005f16 <_printf_float+0x3b6>
 8005f12:	07db      	lsls	r3, r3, #31
 8005f14:	d536      	bpl.n	8005f84 <_printf_float+0x424>
 8005f16:	2301      	movs	r3, #1
 8005f18:	4642      	mov	r2, r8
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f ae78 	beq.w	8005c16 <_printf_float+0xb6>
 8005f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f ae70 	beq.w	8005c16 <_printf_float+0xb6>
 8005f36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f42:	f7fa fde9 	bl	8000b18 <__aeabi_dcmpeq>
 8005f46:	b9c0      	cbnz	r0, 8005f7a <_printf_float+0x41a>
 8005f48:	4653      	mov	r3, sl
 8005f4a:	f108 0201 	add.w	r2, r8, #1
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	d10c      	bne.n	8005f72 <_printf_float+0x412>
 8005f58:	e65d      	b.n	8005c16 <_printf_float+0xb6>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	465a      	mov	r2, fp
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f ae56 	beq.w	8005c16 <_printf_float+0xb6>
 8005f6a:	f108 0801 	add.w	r8, r8, #1
 8005f6e:	45d0      	cmp	r8, sl
 8005f70:	dbf3      	blt.n	8005f5a <_printf_float+0x3fa>
 8005f72:	464b      	mov	r3, r9
 8005f74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f78:	e6df      	b.n	8005d3a <_printf_float+0x1da>
 8005f7a:	f04f 0800 	mov.w	r8, #0
 8005f7e:	f104 0b1a 	add.w	fp, r4, #26
 8005f82:	e7f4      	b.n	8005f6e <_printf_float+0x40e>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4642      	mov	r2, r8
 8005f88:	e7e1      	b.n	8005f4e <_printf_float+0x3ee>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	464a      	mov	r2, r9
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	f43f ae3e 	beq.w	8005c16 <_printf_float+0xb6>
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	68e3      	ldr	r3, [r4, #12]
 8005fa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fa2:	1a5b      	subs	r3, r3, r1
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	dcf0      	bgt.n	8005f8a <_printf_float+0x42a>
 8005fa8:	e6fc      	b.n	8005da4 <_printf_float+0x244>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	f104 0919 	add.w	r9, r4, #25
 8005fb2:	e7f4      	b.n	8005f9e <_printf_float+0x43e>

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4698      	mov	r8, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bfb8      	it	lt
 8005fc8:	4613      	movlt	r3, r2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc26      	bgt.n	800604a <_printf_common+0x96>
 8005ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	3b00      	subs	r3, #0
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42b      	bmi.n	8006064 <_printf_common+0xb0>
 800600c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	47c8      	blx	r9
 8006016:	3001      	adds	r0, #1
 8006018:	d01e      	beq.n	8006058 <_printf_common+0xa4>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf02      	ittt	eq
 8006026:	68e5      	ldreq	r5, [r4, #12]
 8006028:	6833      	ldreq	r3, [r6, #0]
 800602a:	1aed      	subeq	r5, r5, r3
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	bf0c      	ite	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	2500      	movne	r5, #0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfc4      	itt	gt
 800603a:	1a9b      	subgt	r3, r3, r2
 800603c:	18ed      	addgt	r5, r5, r3
 800603e:	2600      	movs	r6, #0
 8006040:	341a      	adds	r4, #26
 8006042:	42b5      	cmp	r5, r6
 8006044:	d11a      	bne.n	800607c <_printf_common+0xc8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xa8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4641      	mov	r1, r8
 8006050:	4638      	mov	r0, r7
 8006052:	47c8      	blx	r9
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xac>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c6      	b.n	8005ff2 <_printf_common+0x3e>
 8006064:	18e1      	adds	r1, r4, r3
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	2030      	movs	r0, #48	@ 0x30
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606e:	4422      	add	r2, r4
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006078:	3302      	adds	r3, #2
 800607a:	e7c7      	b.n	800600c <_printf_common+0x58>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4641      	mov	r1, r8
 8006082:	4638      	mov	r0, r7
 8006084:	47c8      	blx	r9
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xa4>
 800608a:	3601      	adds	r6, #1
 800608c:	e7d9      	b.n	8006042 <_printf_common+0x8e>
	...

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006098:	2f78      	cmp	r7, #120	@ 0x78
 800609a:	4691      	mov	r9, r2
 800609c:	4680      	mov	r8, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	469a      	mov	sl, r3
 80060a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	@ 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d1 	beq.w	8006254 <_printf_i+0x1c4>
 80060b2:	2f58      	cmp	r7, #88	@ 0x58
 80060b4:	f000 80b8 	beq.w	8006228 <_printf_i+0x198>
 80060b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	@ (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	0800623b 	.word	0x0800623b
 8006100:	08006167 	.word	0x08006167
 8006104:	080061f5 	.word	0x080061f5
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	0800625d 	.word	0x0800625d
 8006114:	080060b9 	.word	0x080060b9
 8006118:	08006167 	.word	0x08006167
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	080061fd 	.word	0x080061fd
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6032      	str	r2, [r6, #0]
 8006130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e09c      	b.n	8006276 <_printf_i+0x1e6>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	d501      	bpl.n	800614c <_printf_i+0xbc>
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	e003      	b.n	8006154 <_printf_i+0xc4>
 800614c:	0645      	lsls	r5, r0, #25
 800614e:	d5fb      	bpl.n	8006148 <_printf_i+0xb8>
 8006150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006154:	2d00      	cmp	r5, #0
 8006156:	da03      	bge.n	8006160 <_printf_i+0xd0>
 8006158:	232d      	movs	r3, #45	@ 0x2d
 800615a:	426d      	negs	r5, r5
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006160:	4858      	ldr	r0, [pc, #352]	@ (80062c4 <_printf_i+0x234>)
 8006162:	230a      	movs	r3, #10
 8006164:	e011      	b.n	800618a <_printf_i+0xfa>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	0608      	lsls	r0, r1, #24
 800616c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006170:	d402      	bmi.n	8006178 <_printf_i+0xe8>
 8006172:	0649      	lsls	r1, r1, #25
 8006174:	bf48      	it	mi
 8006176:	b2ad      	uxthmi	r5, r5
 8006178:	2f6f      	cmp	r7, #111	@ 0x6f
 800617a:	4852      	ldr	r0, [pc, #328]	@ (80062c4 <_printf_i+0x234>)
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	bf14      	ite	ne
 8006180:	230a      	movne	r3, #10
 8006182:	2308      	moveq	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618a:	6866      	ldr	r6, [r4, #4]
 800618c:	60a6      	str	r6, [r4, #8]
 800618e:	2e00      	cmp	r6, #0
 8006190:	db05      	blt.n	800619e <_printf_i+0x10e>
 8006192:	6821      	ldr	r1, [r4, #0]
 8006194:	432e      	orrs	r6, r5
 8006196:	f021 0104 	bic.w	r1, r1, #4
 800619a:	6021      	str	r1, [r4, #0]
 800619c:	d04b      	beq.n	8006236 <_printf_i+0x1a6>
 800619e:	4616      	mov	r6, r2
 80061a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a4:	fb03 5711 	mls	r7, r3, r1, r5
 80061a8:	5dc7      	ldrb	r7, [r0, r7]
 80061aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ae:	462f      	mov	r7, r5
 80061b0:	42bb      	cmp	r3, r7
 80061b2:	460d      	mov	r5, r1
 80061b4:	d9f4      	bls.n	80061a0 <_printf_i+0x110>
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d10b      	bne.n	80061d2 <_printf_i+0x142>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	07df      	lsls	r7, r3, #31
 80061be:	d508      	bpl.n	80061d2 <_printf_i+0x142>
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	6861      	ldr	r1, [r4, #4]
 80061c4:	4299      	cmp	r1, r3
 80061c6:	bfde      	ittt	le
 80061c8:	2330      	movle	r3, #48	@ 0x30
 80061ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80061d2:	1b92      	subs	r2, r2, r6
 80061d4:	6122      	str	r2, [r4, #16]
 80061d6:	f8cd a000 	str.w	sl, [sp]
 80061da:	464b      	mov	r3, r9
 80061dc:	aa03      	add	r2, sp, #12
 80061de:	4621      	mov	r1, r4
 80061e0:	4640      	mov	r0, r8
 80061e2:	f7ff fee7 	bl	8005fb4 <_printf_common>
 80061e6:	3001      	adds	r0, #1
 80061e8:	d14a      	bne.n	8006280 <_printf_i+0x1f0>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061ee:	b004      	add	sp, #16
 80061f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	f043 0320 	orr.w	r3, r3, #32
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	4832      	ldr	r0, [pc, #200]	@ (80062c8 <_printf_i+0x238>)
 80061fe:	2778      	movs	r7, #120	@ 0x78
 8006200:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	6831      	ldr	r1, [r6, #0]
 8006208:	061f      	lsls	r7, r3, #24
 800620a:	f851 5b04 	ldr.w	r5, [r1], #4
 800620e:	d402      	bmi.n	8006216 <_printf_i+0x186>
 8006210:	065f      	lsls	r7, r3, #25
 8006212:	bf48      	it	mi
 8006214:	b2ad      	uxthmi	r5, r5
 8006216:	6031      	str	r1, [r6, #0]
 8006218:	07d9      	lsls	r1, r3, #31
 800621a:	bf44      	itt	mi
 800621c:	f043 0320 	orrmi.w	r3, r3, #32
 8006220:	6023      	strmi	r3, [r4, #0]
 8006222:	b11d      	cbz	r5, 800622c <_printf_i+0x19c>
 8006224:	2310      	movs	r3, #16
 8006226:	e7ad      	b.n	8006184 <_printf_i+0xf4>
 8006228:	4826      	ldr	r0, [pc, #152]	@ (80062c4 <_printf_i+0x234>)
 800622a:	e7e9      	b.n	8006200 <_printf_i+0x170>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	e7f6      	b.n	8006224 <_printf_i+0x194>
 8006236:	4616      	mov	r6, r2
 8006238:	e7bd      	b.n	80061b6 <_printf_i+0x126>
 800623a:	6833      	ldr	r3, [r6, #0]
 800623c:	6825      	ldr	r5, [r4, #0]
 800623e:	6961      	ldr	r1, [r4, #20]
 8006240:	1d18      	adds	r0, r3, #4
 8006242:	6030      	str	r0, [r6, #0]
 8006244:	062e      	lsls	r6, r5, #24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	d501      	bpl.n	800624e <_printf_i+0x1be>
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	e002      	b.n	8006254 <_printf_i+0x1c4>
 800624e:	0668      	lsls	r0, r5, #25
 8006250:	d5fb      	bpl.n	800624a <_printf_i+0x1ba>
 8006252:	8019      	strh	r1, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	4616      	mov	r6, r2
 800625a:	e7bc      	b.n	80061d6 <_printf_i+0x146>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	6032      	str	r2, [r6, #0]
 8006262:	681e      	ldr	r6, [r3, #0]
 8006264:	6862      	ldr	r2, [r4, #4]
 8006266:	2100      	movs	r1, #0
 8006268:	4630      	mov	r0, r6
 800626a:	f7f9 ffd9 	bl	8000220 <memchr>
 800626e:	b108      	cbz	r0, 8006274 <_printf_i+0x1e4>
 8006270:	1b80      	subs	r0, r0, r6
 8006272:	6060      	str	r0, [r4, #4]
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	2300      	movs	r3, #0
 800627a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627e:	e7aa      	b.n	80061d6 <_printf_i+0x146>
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	4632      	mov	r2, r6
 8006284:	4649      	mov	r1, r9
 8006286:	4640      	mov	r0, r8
 8006288:	47d0      	blx	sl
 800628a:	3001      	adds	r0, #1
 800628c:	d0ad      	beq.n	80061ea <_printf_i+0x15a>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	079b      	lsls	r3, r3, #30
 8006292:	d413      	bmi.n	80062bc <_printf_i+0x22c>
 8006294:	68e0      	ldr	r0, [r4, #12]
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	4298      	cmp	r0, r3
 800629a:	bfb8      	it	lt
 800629c:	4618      	movlt	r0, r3
 800629e:	e7a6      	b.n	80061ee <_printf_i+0x15e>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4632      	mov	r2, r6
 80062a4:	4649      	mov	r1, r9
 80062a6:	4640      	mov	r0, r8
 80062a8:	47d0      	blx	sl
 80062aa:	3001      	adds	r0, #1
 80062ac:	d09d      	beq.n	80061ea <_printf_i+0x15a>
 80062ae:	3501      	adds	r5, #1
 80062b0:	68e3      	ldr	r3, [r4, #12]
 80062b2:	9903      	ldr	r1, [sp, #12]
 80062b4:	1a5b      	subs	r3, r3, r1
 80062b6:	42ab      	cmp	r3, r5
 80062b8:	dcf2      	bgt.n	80062a0 <_printf_i+0x210>
 80062ba:	e7eb      	b.n	8006294 <_printf_i+0x204>
 80062bc:	2500      	movs	r5, #0
 80062be:	f104 0619 	add.w	r6, r4, #25
 80062c2:	e7f5      	b.n	80062b0 <_printf_i+0x220>
 80062c4:	0800838a 	.word	0x0800838a
 80062c8:	0800839b 	.word	0x0800839b

080062cc <std>:
 80062cc:	2300      	movs	r3, #0
 80062ce:	b510      	push	{r4, lr}
 80062d0:	4604      	mov	r4, r0
 80062d2:	e9c0 3300 	strd	r3, r3, [r0]
 80062d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062da:	6083      	str	r3, [r0, #8]
 80062dc:	8181      	strh	r1, [r0, #12]
 80062de:	6643      	str	r3, [r0, #100]	@ 0x64
 80062e0:	81c2      	strh	r2, [r0, #14]
 80062e2:	6183      	str	r3, [r0, #24]
 80062e4:	4619      	mov	r1, r3
 80062e6:	2208      	movs	r2, #8
 80062e8:	305c      	adds	r0, #92	@ 0x5c
 80062ea:	f000 f8f4 	bl	80064d6 <memset>
 80062ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <std+0x58>)
 80062f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <std+0x5c>)
 80062f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <std+0x60>)
 80062f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <std+0x64>)
 80062fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80062fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <std+0x68>)
 8006300:	6224      	str	r4, [r4, #32]
 8006302:	429c      	cmp	r4, r3
 8006304:	d006      	beq.n	8006314 <std+0x48>
 8006306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800630a:	4294      	cmp	r4, r2
 800630c:	d002      	beq.n	8006314 <std+0x48>
 800630e:	33d0      	adds	r3, #208	@ 0xd0
 8006310:	429c      	cmp	r4, r3
 8006312:	d105      	bne.n	8006320 <std+0x54>
 8006314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631c:	f000 b958 	b.w	80065d0 <__retarget_lock_init_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop
 8006324:	08006451 	.word	0x08006451
 8006328:	08006473 	.word	0x08006473
 800632c:	080064ab 	.word	0x080064ab
 8006330:	080064cf 	.word	0x080064cf
 8006334:	200003b8 	.word	0x200003b8

08006338 <stdio_exit_handler>:
 8006338:	4a02      	ldr	r2, [pc, #8]	@ (8006344 <stdio_exit_handler+0xc>)
 800633a:	4903      	ldr	r1, [pc, #12]	@ (8006348 <stdio_exit_handler+0x10>)
 800633c:	4803      	ldr	r0, [pc, #12]	@ (800634c <stdio_exit_handler+0x14>)
 800633e:	f000 b869 	b.w	8006414 <_fwalk_sglue>
 8006342:	bf00      	nop
 8006344:	20000014 	.word	0x20000014
 8006348:	08007c85 	.word	0x08007c85
 800634c:	20000024 	.word	0x20000024

08006350 <cleanup_stdio>:
 8006350:	6841      	ldr	r1, [r0, #4]
 8006352:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <cleanup_stdio+0x34>)
 8006354:	4299      	cmp	r1, r3
 8006356:	b510      	push	{r4, lr}
 8006358:	4604      	mov	r4, r0
 800635a:	d001      	beq.n	8006360 <cleanup_stdio+0x10>
 800635c:	f001 fc92 	bl	8007c84 <_fflush_r>
 8006360:	68a1      	ldr	r1, [r4, #8]
 8006362:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <cleanup_stdio+0x38>)
 8006364:	4299      	cmp	r1, r3
 8006366:	d002      	beq.n	800636e <cleanup_stdio+0x1e>
 8006368:	4620      	mov	r0, r4
 800636a:	f001 fc8b 	bl	8007c84 <_fflush_r>
 800636e:	68e1      	ldr	r1, [r4, #12]
 8006370:	4b06      	ldr	r3, [pc, #24]	@ (800638c <cleanup_stdio+0x3c>)
 8006372:	4299      	cmp	r1, r3
 8006374:	d004      	beq.n	8006380 <cleanup_stdio+0x30>
 8006376:	4620      	mov	r0, r4
 8006378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800637c:	f001 bc82 	b.w	8007c84 <_fflush_r>
 8006380:	bd10      	pop	{r4, pc}
 8006382:	bf00      	nop
 8006384:	200003b8 	.word	0x200003b8
 8006388:	20000420 	.word	0x20000420
 800638c:	20000488 	.word	0x20000488

08006390 <global_stdio_init.part.0>:
 8006390:	b510      	push	{r4, lr}
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <global_stdio_init.part.0+0x30>)
 8006394:	4c0b      	ldr	r4, [pc, #44]	@ (80063c4 <global_stdio_init.part.0+0x34>)
 8006396:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <global_stdio_init.part.0+0x38>)
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	4620      	mov	r0, r4
 800639c:	2200      	movs	r2, #0
 800639e:	2104      	movs	r1, #4
 80063a0:	f7ff ff94 	bl	80062cc <std>
 80063a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063a8:	2201      	movs	r2, #1
 80063aa:	2109      	movs	r1, #9
 80063ac:	f7ff ff8e 	bl	80062cc <std>
 80063b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063b4:	2202      	movs	r2, #2
 80063b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ba:	2112      	movs	r1, #18
 80063bc:	f7ff bf86 	b.w	80062cc <std>
 80063c0:	200004f0 	.word	0x200004f0
 80063c4:	200003b8 	.word	0x200003b8
 80063c8:	08006339 	.word	0x08006339

080063cc <__sfp_lock_acquire>:
 80063cc:	4801      	ldr	r0, [pc, #4]	@ (80063d4 <__sfp_lock_acquire+0x8>)
 80063ce:	f000 b900 	b.w	80065d2 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	200004f9 	.word	0x200004f9

080063d8 <__sfp_lock_release>:
 80063d8:	4801      	ldr	r0, [pc, #4]	@ (80063e0 <__sfp_lock_release+0x8>)
 80063da:	f000 b8fb 	b.w	80065d4 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	200004f9 	.word	0x200004f9

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4604      	mov	r4, r0
 80063e8:	f7ff fff0 	bl	80063cc <__sfp_lock_acquire>
 80063ec:	6a23      	ldr	r3, [r4, #32]
 80063ee:	b11b      	cbz	r3, 80063f8 <__sinit+0x14>
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f7ff bff0 	b.w	80063d8 <__sfp_lock_release>
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__sinit+0x28>)
 80063fa:	6223      	str	r3, [r4, #32]
 80063fc:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <__sinit+0x2c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f5      	bne.n	80063f0 <__sinit+0xc>
 8006404:	f7ff ffc4 	bl	8006390 <global_stdio_init.part.0>
 8006408:	e7f2      	b.n	80063f0 <__sinit+0xc>
 800640a:	bf00      	nop
 800640c:	08006351 	.word	0x08006351
 8006410:	200004f0 	.word	0x200004f0

08006414 <_fwalk_sglue>:
 8006414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006418:	4607      	mov	r7, r0
 800641a:	4688      	mov	r8, r1
 800641c:	4614      	mov	r4, r2
 800641e:	2600      	movs	r6, #0
 8006420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006424:	f1b9 0901 	subs.w	r9, r9, #1
 8006428:	d505      	bpl.n	8006436 <_fwalk_sglue+0x22>
 800642a:	6824      	ldr	r4, [r4, #0]
 800642c:	2c00      	cmp	r4, #0
 800642e:	d1f7      	bne.n	8006420 <_fwalk_sglue+0xc>
 8006430:	4630      	mov	r0, r6
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d907      	bls.n	800644c <_fwalk_sglue+0x38>
 800643c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006440:	3301      	adds	r3, #1
 8006442:	d003      	beq.n	800644c <_fwalk_sglue+0x38>
 8006444:	4629      	mov	r1, r5
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	4306      	orrs	r6, r0
 800644c:	3568      	adds	r5, #104	@ 0x68
 800644e:	e7e9      	b.n	8006424 <_fwalk_sglue+0x10>

08006450 <__sread>:
 8006450:	b510      	push	{r4, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	f000 f86c 	bl	8006534 <_read_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	bfab      	itete	ge
 8006460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006462:	89a3      	ldrhlt	r3, [r4, #12]
 8006464:	181b      	addge	r3, r3, r0
 8006466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800646a:	bfac      	ite	ge
 800646c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800646e:	81a3      	strhlt	r3, [r4, #12]
 8006470:	bd10      	pop	{r4, pc}

08006472 <__swrite>:
 8006472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006476:	461f      	mov	r7, r3
 8006478:	898b      	ldrh	r3, [r1, #12]
 800647a:	05db      	lsls	r3, r3, #23
 800647c:	4605      	mov	r5, r0
 800647e:	460c      	mov	r4, r1
 8006480:	4616      	mov	r6, r2
 8006482:	d505      	bpl.n	8006490 <__swrite+0x1e>
 8006484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006488:	2302      	movs	r3, #2
 800648a:	2200      	movs	r2, #0
 800648c:	f000 f840 	bl	8006510 <_lseek_r>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	4632      	mov	r2, r6
 800649e:	463b      	mov	r3, r7
 80064a0:	4628      	mov	r0, r5
 80064a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a6:	f000 b857 	b.w	8006558 <_write_r>

080064aa <__sseek>:
 80064aa:	b510      	push	{r4, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 f82d 	bl	8006510 <_lseek_r>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	bf15      	itete	ne
 80064bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064c6:	81a3      	strheq	r3, [r4, #12]
 80064c8:	bf18      	it	ne
 80064ca:	81a3      	strhne	r3, [r4, #12]
 80064cc:	bd10      	pop	{r4, pc}

080064ce <__sclose>:
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 b80d 	b.w	80064f0 <_close_r>

080064d6 <memset>:
 80064d6:	4402      	add	r2, r0
 80064d8:	4603      	mov	r3, r0
 80064da:	4293      	cmp	r3, r2
 80064dc:	d100      	bne.n	80064e0 <memset+0xa>
 80064de:	4770      	bx	lr
 80064e0:	f803 1b01 	strb.w	r1, [r3], #1
 80064e4:	e7f9      	b.n	80064da <memset+0x4>
	...

080064e8 <_localeconv_r>:
 80064e8:	4800      	ldr	r0, [pc, #0]	@ (80064ec <_localeconv_r+0x4>)
 80064ea:	4770      	bx	lr
 80064ec:	20000160 	.word	0x20000160

080064f0 <_close_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	@ (800650c <_close_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fb f8e6 	bl	80016cc <_close>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_close_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_close_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	200004f4 	.word	0x200004f4

08006510 <_lseek_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	@ (8006530 <_lseek_r+0x20>)
 8006514:	4604      	mov	r4, r0
 8006516:	4608      	mov	r0, r1
 8006518:	4611      	mov	r1, r2
 800651a:	2200      	movs	r2, #0
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f7fb f8fb 	bl	800171a <_lseek>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_lseek_r+0x1e>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_lseek_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	200004f4 	.word	0x200004f4

08006534 <_read_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	@ (8006554 <_read_r+0x20>)
 8006538:	4604      	mov	r4, r0
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	2200      	movs	r2, #0
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f7fb f889 	bl	800165a <_read>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_read_r+0x1e>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_read_r+0x1e>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	200004f4 	.word	0x200004f4

08006558 <_write_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	@ (8006578 <_write_r+0x20>)
 800655c:	4604      	mov	r4, r0
 800655e:	4608      	mov	r0, r1
 8006560:	4611      	mov	r1, r2
 8006562:	2200      	movs	r2, #0
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fb f894 	bl	8001694 <_write>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_write_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_write_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200004f4 	.word	0x200004f4

0800657c <__errno>:
 800657c:	4b01      	ldr	r3, [pc, #4]	@ (8006584 <__errno+0x8>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000020 	.word	0x20000020

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	@ (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	@ (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	@ (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	@ (80065cc <__libc_init_array+0x44>)
 800659c:	f001 fec0 	bl	8008320 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	080086f4 	.word	0x080086f4
 80065c4:	080086f4 	.word	0x080086f4
 80065c8:	080086f4 	.word	0x080086f4
 80065cc:	080086f8 	.word	0x080086f8

080065d0 <__retarget_lock_init_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <__retarget_lock_acquire_recursive>:
 80065d2:	4770      	bx	lr

080065d4 <__retarget_lock_release_recursive>:
 80065d4:	4770      	bx	lr

080065d6 <quorem>:
 80065d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	6903      	ldr	r3, [r0, #16]
 80065dc:	690c      	ldr	r4, [r1, #16]
 80065de:	42a3      	cmp	r3, r4
 80065e0:	4607      	mov	r7, r0
 80065e2:	db7e      	blt.n	80066e2 <quorem+0x10c>
 80065e4:	3c01      	subs	r4, #1
 80065e6:	f101 0814 	add.w	r8, r1, #20
 80065ea:	00a3      	lsls	r3, r4, #2
 80065ec:	f100 0514 	add.w	r5, r0, #20
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006600:	3301      	adds	r3, #1
 8006602:	429a      	cmp	r2, r3
 8006604:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006608:	fbb2 f6f3 	udiv	r6, r2, r3
 800660c:	d32e      	bcc.n	800666c <quorem+0x96>
 800660e:	f04f 0a00 	mov.w	sl, #0
 8006612:	46c4      	mov	ip, r8
 8006614:	46ae      	mov	lr, r5
 8006616:	46d3      	mov	fp, sl
 8006618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800661c:	b298      	uxth	r0, r3
 800661e:	fb06 a000 	mla	r0, r6, r0, sl
 8006622:	0c02      	lsrs	r2, r0, #16
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	fb06 2303 	mla	r3, r6, r3, r2
 800662a:	f8de 2000 	ldr.w	r2, [lr]
 800662e:	b280      	uxth	r0, r0
 8006630:	b292      	uxth	r2, r2
 8006632:	1a12      	subs	r2, r2, r0
 8006634:	445a      	add	r2, fp
 8006636:	f8de 0000 	ldr.w	r0, [lr]
 800663a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006644:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006648:	b292      	uxth	r2, r2
 800664a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800664e:	45e1      	cmp	r9, ip
 8006650:	f84e 2b04 	str.w	r2, [lr], #4
 8006654:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006658:	d2de      	bcs.n	8006618 <quorem+0x42>
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	58eb      	ldr	r3, [r5, r3]
 800665e:	b92b      	cbnz	r3, 800666c <quorem+0x96>
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	3b04      	subs	r3, #4
 8006664:	429d      	cmp	r5, r3
 8006666:	461a      	mov	r2, r3
 8006668:	d32f      	bcc.n	80066ca <quorem+0xf4>
 800666a:	613c      	str	r4, [r7, #16]
 800666c:	4638      	mov	r0, r7
 800666e:	f001 f97d 	bl	800796c <__mcmp>
 8006672:	2800      	cmp	r0, #0
 8006674:	db25      	blt.n	80066c2 <quorem+0xec>
 8006676:	4629      	mov	r1, r5
 8006678:	2000      	movs	r0, #0
 800667a:	f858 2b04 	ldr.w	r2, [r8], #4
 800667e:	f8d1 c000 	ldr.w	ip, [r1]
 8006682:	fa1f fe82 	uxth.w	lr, r2
 8006686:	fa1f f38c 	uxth.w	r3, ip
 800668a:	eba3 030e 	sub.w	r3, r3, lr
 800668e:	4403      	add	r3, r0
 8006690:	0c12      	lsrs	r2, r2, #16
 8006692:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006696:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800669a:	b29b      	uxth	r3, r3
 800669c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a0:	45c1      	cmp	r9, r8
 80066a2:	f841 3b04 	str.w	r3, [r1], #4
 80066a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066aa:	d2e6      	bcs.n	800667a <quorem+0xa4>
 80066ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066b4:	b922      	cbnz	r2, 80066c0 <quorem+0xea>
 80066b6:	3b04      	subs	r3, #4
 80066b8:	429d      	cmp	r5, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	d30b      	bcc.n	80066d6 <quorem+0x100>
 80066be:	613c      	str	r4, [r7, #16]
 80066c0:	3601      	adds	r6, #1
 80066c2:	4630      	mov	r0, r6
 80066c4:	b003      	add	sp, #12
 80066c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	d1cb      	bne.n	800666a <quorem+0x94>
 80066d2:	3c01      	subs	r4, #1
 80066d4:	e7c6      	b.n	8006664 <quorem+0x8e>
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	3b04      	subs	r3, #4
 80066da:	2a00      	cmp	r2, #0
 80066dc:	d1ef      	bne.n	80066be <quorem+0xe8>
 80066de:	3c01      	subs	r4, #1
 80066e0:	e7ea      	b.n	80066b8 <quorem+0xe2>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e7ee      	b.n	80066c4 <quorem+0xee>
	...

080066e8 <_dtoa_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	69c7      	ldr	r7, [r0, #28]
 80066ee:	b097      	sub	sp, #92	@ 0x5c
 80066f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80066f4:	ec55 4b10 	vmov	r4, r5, d0
 80066f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80066fa:	9107      	str	r1, [sp, #28]
 80066fc:	4681      	mov	r9, r0
 80066fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006700:	9311      	str	r3, [sp, #68]	@ 0x44
 8006702:	b97f      	cbnz	r7, 8006724 <_dtoa_r+0x3c>
 8006704:	2010      	movs	r0, #16
 8006706:	f000 fe09 	bl	800731c <malloc>
 800670a:	4602      	mov	r2, r0
 800670c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006710:	b920      	cbnz	r0, 800671c <_dtoa_r+0x34>
 8006712:	4ba9      	ldr	r3, [pc, #676]	@ (80069b8 <_dtoa_r+0x2d0>)
 8006714:	21ef      	movs	r1, #239	@ 0xef
 8006716:	48a9      	ldr	r0, [pc, #676]	@ (80069bc <_dtoa_r+0x2d4>)
 8006718:	f001 fafa 	bl	8007d10 <__assert_func>
 800671c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006720:	6007      	str	r7, [r0, #0]
 8006722:	60c7      	str	r7, [r0, #12]
 8006724:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006728:	6819      	ldr	r1, [r3, #0]
 800672a:	b159      	cbz	r1, 8006744 <_dtoa_r+0x5c>
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	604a      	str	r2, [r1, #4]
 8006730:	2301      	movs	r3, #1
 8006732:	4093      	lsls	r3, r2
 8006734:	608b      	str	r3, [r1, #8]
 8006736:	4648      	mov	r0, r9
 8006738:	f000 fee6 	bl	8007508 <_Bfree>
 800673c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	1e2b      	subs	r3, r5, #0
 8006746:	bfb9      	ittee	lt
 8006748:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800674c:	9305      	strlt	r3, [sp, #20]
 800674e:	2300      	movge	r3, #0
 8006750:	6033      	strge	r3, [r6, #0]
 8006752:	9f05      	ldr	r7, [sp, #20]
 8006754:	4b9a      	ldr	r3, [pc, #616]	@ (80069c0 <_dtoa_r+0x2d8>)
 8006756:	bfbc      	itt	lt
 8006758:	2201      	movlt	r2, #1
 800675a:	6032      	strlt	r2, [r6, #0]
 800675c:	43bb      	bics	r3, r7
 800675e:	d112      	bne.n	8006786 <_dtoa_r+0x9e>
 8006760:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006762:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800676c:	4323      	orrs	r3, r4
 800676e:	f000 855a 	beq.w	8007226 <_dtoa_r+0xb3e>
 8006772:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006774:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80069d4 <_dtoa_r+0x2ec>
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 855c 	beq.w	8007236 <_dtoa_r+0xb4e>
 800677e:	f10a 0303 	add.w	r3, sl, #3
 8006782:	f000 bd56 	b.w	8007232 <_dtoa_r+0xb4a>
 8006786:	ed9d 7b04 	vldr	d7, [sp, #16]
 800678a:	2200      	movs	r2, #0
 800678c:	ec51 0b17 	vmov	r0, r1, d7
 8006790:	2300      	movs	r3, #0
 8006792:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006796:	f7fa f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 800679a:	4680      	mov	r8, r0
 800679c:	b158      	cbz	r0, 80067b6 <_dtoa_r+0xce>
 800679e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80067a0:	2301      	movs	r3, #1
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a6:	b113      	cbz	r3, 80067ae <_dtoa_r+0xc6>
 80067a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80067aa:	4b86      	ldr	r3, [pc, #536]	@ (80069c4 <_dtoa_r+0x2dc>)
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80069d8 <_dtoa_r+0x2f0>
 80067b2:	f000 bd40 	b.w	8007236 <_dtoa_r+0xb4e>
 80067b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80067ba:	aa14      	add	r2, sp, #80	@ 0x50
 80067bc:	a915      	add	r1, sp, #84	@ 0x54
 80067be:	4648      	mov	r0, r9
 80067c0:	f001 f984 	bl	8007acc <__d2b>
 80067c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80067c8:	9002      	str	r0, [sp, #8]
 80067ca:	2e00      	cmp	r6, #0
 80067cc:	d078      	beq.n	80068c0 <_dtoa_r+0x1d8>
 80067ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067e8:	4619      	mov	r1, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	4b76      	ldr	r3, [pc, #472]	@ (80069c8 <_dtoa_r+0x2e0>)
 80067ee:	f7f9 fd73 	bl	80002d8 <__aeabi_dsub>
 80067f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80069a0 <_dtoa_r+0x2b8>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f7f9 ff26 	bl	8000648 <__aeabi_dmul>
 80067fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80069a8 <_dtoa_r+0x2c0>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f7f9 fd6b 	bl	80002dc <__adddf3>
 8006806:	4604      	mov	r4, r0
 8006808:	4630      	mov	r0, r6
 800680a:	460d      	mov	r5, r1
 800680c:	f7f9 feb2 	bl	8000574 <__aeabi_i2d>
 8006810:	a367      	add	r3, pc, #412	@ (adr r3, 80069b0 <_dtoa_r+0x2c8>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 ff17 	bl	8000648 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 fd5b 	bl	80002dc <__adddf3>
 8006826:	4604      	mov	r4, r0
 8006828:	460d      	mov	r5, r1
 800682a:	f7fa f9bd 	bl	8000ba8 <__aeabi_d2iz>
 800682e:	2200      	movs	r2, #0
 8006830:	4607      	mov	r7, r0
 8006832:	2300      	movs	r3, #0
 8006834:	4620      	mov	r0, r4
 8006836:	4629      	mov	r1, r5
 8006838:	f7fa f978 	bl	8000b2c <__aeabi_dcmplt>
 800683c:	b140      	cbz	r0, 8006850 <_dtoa_r+0x168>
 800683e:	4638      	mov	r0, r7
 8006840:	f7f9 fe98 	bl	8000574 <__aeabi_i2d>
 8006844:	4622      	mov	r2, r4
 8006846:	462b      	mov	r3, r5
 8006848:	f7fa f966 	bl	8000b18 <__aeabi_dcmpeq>
 800684c:	b900      	cbnz	r0, 8006850 <_dtoa_r+0x168>
 800684e:	3f01      	subs	r7, #1
 8006850:	2f16      	cmp	r7, #22
 8006852:	d852      	bhi.n	80068fa <_dtoa_r+0x212>
 8006854:	4b5d      	ldr	r3, [pc, #372]	@ (80069cc <_dtoa_r+0x2e4>)
 8006856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006862:	f7fa f963 	bl	8000b2c <__aeabi_dcmplt>
 8006866:	2800      	cmp	r0, #0
 8006868:	d049      	beq.n	80068fe <_dtoa_r+0x216>
 800686a:	3f01      	subs	r7, #1
 800686c:	2300      	movs	r3, #0
 800686e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006870:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006872:	1b9b      	subs	r3, r3, r6
 8006874:	1e5a      	subs	r2, r3, #1
 8006876:	bf45      	ittet	mi
 8006878:	f1c3 0301 	rsbmi	r3, r3, #1
 800687c:	9300      	strmi	r3, [sp, #0]
 800687e:	2300      	movpl	r3, #0
 8006880:	2300      	movmi	r3, #0
 8006882:	9206      	str	r2, [sp, #24]
 8006884:	bf54      	ite	pl
 8006886:	9300      	strpl	r3, [sp, #0]
 8006888:	9306      	strmi	r3, [sp, #24]
 800688a:	2f00      	cmp	r7, #0
 800688c:	db39      	blt.n	8006902 <_dtoa_r+0x21a>
 800688e:	9b06      	ldr	r3, [sp, #24]
 8006890:	970d      	str	r7, [sp, #52]	@ 0x34
 8006892:	443b      	add	r3, r7
 8006894:	9306      	str	r3, [sp, #24]
 8006896:	2300      	movs	r3, #0
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	9b07      	ldr	r3, [sp, #28]
 800689c:	2b09      	cmp	r3, #9
 800689e:	d863      	bhi.n	8006968 <_dtoa_r+0x280>
 80068a0:	2b05      	cmp	r3, #5
 80068a2:	bfc4      	itt	gt
 80068a4:	3b04      	subgt	r3, #4
 80068a6:	9307      	strgt	r3, [sp, #28]
 80068a8:	9b07      	ldr	r3, [sp, #28]
 80068aa:	f1a3 0302 	sub.w	r3, r3, #2
 80068ae:	bfcc      	ite	gt
 80068b0:	2400      	movgt	r4, #0
 80068b2:	2401      	movle	r4, #1
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d863      	bhi.n	8006980 <_dtoa_r+0x298>
 80068b8:	e8df f003 	tbb	[pc, r3]
 80068bc:	2b375452 	.word	0x2b375452
 80068c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80068c4:	441e      	add	r6, r3
 80068c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	bfc1      	itttt	gt
 80068ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068d2:	409f      	lslgt	r7, r3
 80068d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068dc:	bfd6      	itet	le
 80068de:	f1c3 0320 	rsble	r3, r3, #32
 80068e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80068e6:	fa04 f003 	lslle.w	r0, r4, r3
 80068ea:	f7f9 fe33 	bl	8000554 <__aeabi_ui2d>
 80068ee:	2201      	movs	r2, #1
 80068f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068f4:	3e01      	subs	r6, #1
 80068f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80068f8:	e776      	b.n	80067e8 <_dtoa_r+0x100>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e7b7      	b.n	800686e <_dtoa_r+0x186>
 80068fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8006900:	e7b6      	b.n	8006870 <_dtoa_r+0x188>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	1bdb      	subs	r3, r3, r7
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	427b      	negs	r3, r7
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	2300      	movs	r3, #0
 800690e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006910:	e7c3      	b.n	800689a <_dtoa_r+0x1b2>
 8006912:	2301      	movs	r3, #1
 8006914:	9309      	str	r3, [sp, #36]	@ 0x24
 8006916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006918:	eb07 0b03 	add.w	fp, r7, r3
 800691c:	f10b 0301 	add.w	r3, fp, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	bfb8      	it	lt
 8006926:	2301      	movlt	r3, #1
 8006928:	e006      	b.n	8006938 <_dtoa_r+0x250>
 800692a:	2301      	movs	r3, #1
 800692c:	9309      	str	r3, [sp, #36]	@ 0x24
 800692e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	dd28      	ble.n	8006986 <_dtoa_r+0x29e>
 8006934:	469b      	mov	fp, r3
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800693c:	2100      	movs	r1, #0
 800693e:	2204      	movs	r2, #4
 8006940:	f102 0514 	add.w	r5, r2, #20
 8006944:	429d      	cmp	r5, r3
 8006946:	d926      	bls.n	8006996 <_dtoa_r+0x2ae>
 8006948:	6041      	str	r1, [r0, #4]
 800694a:	4648      	mov	r0, r9
 800694c:	f000 fd9c 	bl	8007488 <_Balloc>
 8006950:	4682      	mov	sl, r0
 8006952:	2800      	cmp	r0, #0
 8006954:	d142      	bne.n	80069dc <_dtoa_r+0x2f4>
 8006956:	4b1e      	ldr	r3, [pc, #120]	@ (80069d0 <_dtoa_r+0x2e8>)
 8006958:	4602      	mov	r2, r0
 800695a:	f240 11af 	movw	r1, #431	@ 0x1af
 800695e:	e6da      	b.n	8006716 <_dtoa_r+0x2e>
 8006960:	2300      	movs	r3, #0
 8006962:	e7e3      	b.n	800692c <_dtoa_r+0x244>
 8006964:	2300      	movs	r3, #0
 8006966:	e7d5      	b.n	8006914 <_dtoa_r+0x22c>
 8006968:	2401      	movs	r4, #1
 800696a:	2300      	movs	r3, #0
 800696c:	9307      	str	r3, [sp, #28]
 800696e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006970:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006974:	2200      	movs	r2, #0
 8006976:	f8cd b00c 	str.w	fp, [sp, #12]
 800697a:	2312      	movs	r3, #18
 800697c:	920c      	str	r2, [sp, #48]	@ 0x30
 800697e:	e7db      	b.n	8006938 <_dtoa_r+0x250>
 8006980:	2301      	movs	r3, #1
 8006982:	9309      	str	r3, [sp, #36]	@ 0x24
 8006984:	e7f4      	b.n	8006970 <_dtoa_r+0x288>
 8006986:	f04f 0b01 	mov.w	fp, #1
 800698a:	f8cd b00c 	str.w	fp, [sp, #12]
 800698e:	465b      	mov	r3, fp
 8006990:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006994:	e7d0      	b.n	8006938 <_dtoa_r+0x250>
 8006996:	3101      	adds	r1, #1
 8006998:	0052      	lsls	r2, r2, #1
 800699a:	e7d1      	b.n	8006940 <_dtoa_r+0x258>
 800699c:	f3af 8000 	nop.w
 80069a0:	636f4361 	.word	0x636f4361
 80069a4:	3fd287a7 	.word	0x3fd287a7
 80069a8:	8b60c8b3 	.word	0x8b60c8b3
 80069ac:	3fc68a28 	.word	0x3fc68a28
 80069b0:	509f79fb 	.word	0x509f79fb
 80069b4:	3fd34413 	.word	0x3fd34413
 80069b8:	080083b9 	.word	0x080083b9
 80069bc:	080083d0 	.word	0x080083d0
 80069c0:	7ff00000 	.word	0x7ff00000
 80069c4:	08008389 	.word	0x08008389
 80069c8:	3ff80000 	.word	0x3ff80000
 80069cc:	08008520 	.word	0x08008520
 80069d0:	08008428 	.word	0x08008428
 80069d4:	080083b5 	.word	0x080083b5
 80069d8:	08008388 	.word	0x08008388
 80069dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80069e0:	6018      	str	r0, [r3, #0]
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	2b0e      	cmp	r3, #14
 80069e6:	f200 80a1 	bhi.w	8006b2c <_dtoa_r+0x444>
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	f000 809e 	beq.w	8006b2c <_dtoa_r+0x444>
 80069f0:	2f00      	cmp	r7, #0
 80069f2:	dd33      	ble.n	8006a5c <_dtoa_r+0x374>
 80069f4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c68 <_dtoa_r+0x580>)
 80069f6:	f007 020f 	and.w	r2, r7, #15
 80069fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069fe:	ed93 7b00 	vldr	d7, [r3]
 8006a02:	05f8      	lsls	r0, r7, #23
 8006a04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006a08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a0c:	d516      	bpl.n	8006a3c <_dtoa_r+0x354>
 8006a0e:	4b97      	ldr	r3, [pc, #604]	@ (8006c6c <_dtoa_r+0x584>)
 8006a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a18:	f7f9 ff40 	bl	800089c <__aeabi_ddiv>
 8006a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a20:	f004 040f 	and.w	r4, r4, #15
 8006a24:	2603      	movs	r6, #3
 8006a26:	4d91      	ldr	r5, [pc, #580]	@ (8006c6c <_dtoa_r+0x584>)
 8006a28:	b954      	cbnz	r4, 8006a40 <_dtoa_r+0x358>
 8006a2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a32:	f7f9 ff33 	bl	800089c <__aeabi_ddiv>
 8006a36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a3a:	e028      	b.n	8006a8e <_dtoa_r+0x3a6>
 8006a3c:	2602      	movs	r6, #2
 8006a3e:	e7f2      	b.n	8006a26 <_dtoa_r+0x33e>
 8006a40:	07e1      	lsls	r1, r4, #31
 8006a42:	d508      	bpl.n	8006a56 <_dtoa_r+0x36e>
 8006a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a4c:	f7f9 fdfc 	bl	8000648 <__aeabi_dmul>
 8006a50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a54:	3601      	adds	r6, #1
 8006a56:	1064      	asrs	r4, r4, #1
 8006a58:	3508      	adds	r5, #8
 8006a5a:	e7e5      	b.n	8006a28 <_dtoa_r+0x340>
 8006a5c:	f000 80af 	beq.w	8006bbe <_dtoa_r+0x4d6>
 8006a60:	427c      	negs	r4, r7
 8006a62:	4b81      	ldr	r3, [pc, #516]	@ (8006c68 <_dtoa_r+0x580>)
 8006a64:	4d81      	ldr	r5, [pc, #516]	@ (8006c6c <_dtoa_r+0x584>)
 8006a66:	f004 020f 	and.w	r2, r4, #15
 8006a6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a76:	f7f9 fde7 	bl	8000648 <__aeabi_dmul>
 8006a7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a7e:	1124      	asrs	r4, r4, #4
 8006a80:	2300      	movs	r3, #0
 8006a82:	2602      	movs	r6, #2
 8006a84:	2c00      	cmp	r4, #0
 8006a86:	f040 808f 	bne.w	8006ba8 <_dtoa_r+0x4c0>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d3      	bne.n	8006a36 <_dtoa_r+0x34e>
 8006a8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8094 	beq.w	8006bc2 <_dtoa_r+0x4da>
 8006a9a:	4b75      	ldr	r3, [pc, #468]	@ (8006c70 <_dtoa_r+0x588>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7fa f843 	bl	8000b2c <__aeabi_dcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f000 808b 	beq.w	8006bc2 <_dtoa_r+0x4da>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8087 	beq.w	8006bc2 <_dtoa_r+0x4da>
 8006ab4:	f1bb 0f00 	cmp.w	fp, #0
 8006ab8:	dd34      	ble.n	8006b24 <_dtoa_r+0x43c>
 8006aba:	4620      	mov	r0, r4
 8006abc:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <_dtoa_r+0x58c>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7f9 fdc1 	bl	8000648 <__aeabi_dmul>
 8006ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006ace:	3601      	adds	r6, #1
 8006ad0:	465c      	mov	r4, fp
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7f9 fd4e 	bl	8000574 <__aeabi_i2d>
 8006ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006adc:	f7f9 fdb4 	bl	8000648 <__aeabi_dmul>
 8006ae0:	4b65      	ldr	r3, [pc, #404]	@ (8006c78 <_dtoa_r+0x590>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7f9 fbfa 	bl	80002dc <__adddf3>
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d16a      	bne.n	8006bc8 <_dtoa_r+0x4e0>
 8006af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af6:	4b61      	ldr	r3, [pc, #388]	@ (8006c7c <_dtoa_r+0x594>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	f7f9 fbed 	bl	80002d8 <__aeabi_dsub>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b06:	462a      	mov	r2, r5
 8006b08:	4633      	mov	r3, r6
 8006b0a:	f7fa f82d 	bl	8000b68 <__aeabi_dcmpgt>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f040 8298 	bne.w	8007044 <_dtoa_r+0x95c>
 8006b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b1e:	f7fa f805 	bl	8000b2c <__aeabi_dcmplt>
 8006b22:	bb38      	cbnz	r0, 8006b74 <_dtoa_r+0x48c>
 8006b24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006b28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f2c0 8157 	blt.w	8006de2 <_dtoa_r+0x6fa>
 8006b34:	2f0e      	cmp	r7, #14
 8006b36:	f300 8154 	bgt.w	8006de2 <_dtoa_r+0x6fa>
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c68 <_dtoa_r+0x580>)
 8006b3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b40:	ed93 7b00 	vldr	d7, [r3]
 8006b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	ed8d 7b00 	vstr	d7, [sp]
 8006b4c:	f280 80e5 	bge.w	8006d1a <_dtoa_r+0x632>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f300 80e1 	bgt.w	8006d1a <_dtoa_r+0x632>
 8006b58:	d10c      	bne.n	8006b74 <_dtoa_r+0x48c>
 8006b5a:	4b48      	ldr	r3, [pc, #288]	@ (8006c7c <_dtoa_r+0x594>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	ec51 0b17 	vmov	r0, r1, d7
 8006b62:	f7f9 fd71 	bl	8000648 <__aeabi_dmul>
 8006b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6a:	f7f9 fff3 	bl	8000b54 <__aeabi_dcmpge>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f000 8266 	beq.w	8007040 <_dtoa_r+0x958>
 8006b74:	2400      	movs	r4, #0
 8006b76:	4625      	mov	r5, r4
 8006b78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b7a:	4656      	mov	r6, sl
 8006b7c:	ea6f 0803 	mvn.w	r8, r3
 8006b80:	2700      	movs	r7, #0
 8006b82:	4621      	mov	r1, r4
 8006b84:	4648      	mov	r0, r9
 8006b86:	f000 fcbf 	bl	8007508 <_Bfree>
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	f000 80bd 	beq.w	8006d0a <_dtoa_r+0x622>
 8006b90:	b12f      	cbz	r7, 8006b9e <_dtoa_r+0x4b6>
 8006b92:	42af      	cmp	r7, r5
 8006b94:	d003      	beq.n	8006b9e <_dtoa_r+0x4b6>
 8006b96:	4639      	mov	r1, r7
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 fcb5 	bl	8007508 <_Bfree>
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4648      	mov	r0, r9
 8006ba2:	f000 fcb1 	bl	8007508 <_Bfree>
 8006ba6:	e0b0      	b.n	8006d0a <_dtoa_r+0x622>
 8006ba8:	07e2      	lsls	r2, r4, #31
 8006baa:	d505      	bpl.n	8006bb8 <_dtoa_r+0x4d0>
 8006bac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bb0:	f7f9 fd4a 	bl	8000648 <__aeabi_dmul>
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	1064      	asrs	r4, r4, #1
 8006bba:	3508      	adds	r5, #8
 8006bbc:	e762      	b.n	8006a84 <_dtoa_r+0x39c>
 8006bbe:	2602      	movs	r6, #2
 8006bc0:	e765      	b.n	8006a8e <_dtoa_r+0x3a6>
 8006bc2:	9c03      	ldr	r4, [sp, #12]
 8006bc4:	46b8      	mov	r8, r7
 8006bc6:	e784      	b.n	8006ad2 <_dtoa_r+0x3ea>
 8006bc8:	4b27      	ldr	r3, [pc, #156]	@ (8006c68 <_dtoa_r+0x580>)
 8006bca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bd4:	4454      	add	r4, sl
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	d054      	beq.n	8006c84 <_dtoa_r+0x59c>
 8006bda:	4929      	ldr	r1, [pc, #164]	@ (8006c80 <_dtoa_r+0x598>)
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f7f9 fe5d 	bl	800089c <__aeabi_ddiv>
 8006be2:	4633      	mov	r3, r6
 8006be4:	462a      	mov	r2, r5
 8006be6:	f7f9 fb77 	bl	80002d8 <__aeabi_dsub>
 8006bea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006bee:	4656      	mov	r6, sl
 8006bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf4:	f7f9 ffd8 	bl	8000ba8 <__aeabi_d2iz>
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	f7f9 fcbb 	bl	8000574 <__aeabi_i2d>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c06:	f7f9 fb67 	bl	80002d8 <__aeabi_dsub>
 8006c0a:	3530      	adds	r5, #48	@ 0x30
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c14:	f806 5b01 	strb.w	r5, [r6], #1
 8006c18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c1c:	f7f9 ff86 	bl	8000b2c <__aeabi_dcmplt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d172      	bne.n	8006d0a <_dtoa_r+0x622>
 8006c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c28:	4911      	ldr	r1, [pc, #68]	@ (8006c70 <_dtoa_r+0x588>)
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f7f9 fb54 	bl	80002d8 <__aeabi_dsub>
 8006c30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c34:	f7f9 ff7a 	bl	8000b2c <__aeabi_dcmplt>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	f040 80b4 	bne.w	8006da6 <_dtoa_r+0x6be>
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	f43f af70 	beq.w	8006b24 <_dtoa_r+0x43c>
 8006c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c48:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <_dtoa_r+0x58c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f7f9 fcfc 	bl	8000648 <__aeabi_dmul>
 8006c50:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <_dtoa_r+0x58c>)
 8006c52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c56:	2200      	movs	r2, #0
 8006c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c5c:	f7f9 fcf4 	bl	8000648 <__aeabi_dmul>
 8006c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c64:	e7c4      	b.n	8006bf0 <_dtoa_r+0x508>
 8006c66:	bf00      	nop
 8006c68:	08008520 	.word	0x08008520
 8006c6c:	080084f8 	.word	0x080084f8
 8006c70:	3ff00000 	.word	0x3ff00000
 8006c74:	40240000 	.word	0x40240000
 8006c78:	401c0000 	.word	0x401c0000
 8006c7c:	40140000 	.word	0x40140000
 8006c80:	3fe00000 	.word	0x3fe00000
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	f7f9 fcde 	bl	8000648 <__aeabi_dmul>
 8006c8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c92:	4656      	mov	r6, sl
 8006c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c98:	f7f9 ff86 	bl	8000ba8 <__aeabi_d2iz>
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	f7f9 fc69 	bl	8000574 <__aeabi_i2d>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006caa:	f7f9 fb15 	bl	80002d8 <__aeabi_dsub>
 8006cae:	3530      	adds	r5, #48	@ 0x30
 8006cb0:	f806 5b01 	strb.w	r5, [r6], #1
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	d124      	bne.n	8006d0e <_dtoa_r+0x626>
 8006cc4:	4baf      	ldr	r3, [pc, #700]	@ (8006f84 <_dtoa_r+0x89c>)
 8006cc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006cca:	f7f9 fb07 	bl	80002dc <__adddf3>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd6:	f7f9 ff47 	bl	8000b68 <__aeabi_dcmpgt>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d163      	bne.n	8006da6 <_dtoa_r+0x6be>
 8006cde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ce2:	49a8      	ldr	r1, [pc, #672]	@ (8006f84 <_dtoa_r+0x89c>)
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7f9 faf7 	bl	80002d8 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cf2:	f7f9 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f af14 	beq.w	8006b24 <_dtoa_r+0x43c>
 8006cfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cfe:	1e73      	subs	r3, r6, #1
 8006d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d06:	2b30      	cmp	r3, #48	@ 0x30
 8006d08:	d0f8      	beq.n	8006cfc <_dtoa_r+0x614>
 8006d0a:	4647      	mov	r7, r8
 8006d0c:	e03b      	b.n	8006d86 <_dtoa_r+0x69e>
 8006d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8006f88 <_dtoa_r+0x8a0>)
 8006d10:	f7f9 fc9a 	bl	8000648 <__aeabi_dmul>
 8006d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d18:	e7bc      	b.n	8006c94 <_dtoa_r+0x5ac>
 8006d1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006d1e:	4656      	mov	r6, sl
 8006d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fdb8 	bl	800089c <__aeabi_ddiv>
 8006d2c:	f7f9 ff3c 	bl	8000ba8 <__aeabi_d2iz>
 8006d30:	4680      	mov	r8, r0
 8006d32:	f7f9 fc1f 	bl	8000574 <__aeabi_i2d>
 8006d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d3a:	f7f9 fc85 	bl	8000648 <__aeabi_dmul>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d4a:	f7f9 fac5 	bl	80002d8 <__aeabi_dsub>
 8006d4e:	f806 4b01 	strb.w	r4, [r6], #1
 8006d52:	9d03      	ldr	r5, [sp, #12]
 8006d54:	eba6 040a 	sub.w	r4, r6, sl
 8006d58:	42a5      	cmp	r5, r4
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	d133      	bne.n	8006dc8 <_dtoa_r+0x6e0>
 8006d60:	f7f9 fabc 	bl	80002dc <__adddf3>
 8006d64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	f7f9 fefc 	bl	8000b68 <__aeabi_dcmpgt>
 8006d70:	b9c0      	cbnz	r0, 8006da4 <_dtoa_r+0x6bc>
 8006d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fecd 	bl	8000b18 <__aeabi_dcmpeq>
 8006d7e:	b110      	cbz	r0, 8006d86 <_dtoa_r+0x69e>
 8006d80:	f018 0f01 	tst.w	r8, #1
 8006d84:	d10e      	bne.n	8006da4 <_dtoa_r+0x6bc>
 8006d86:	9902      	ldr	r1, [sp, #8]
 8006d88:	4648      	mov	r0, r9
 8006d8a:	f000 fbbd 	bl	8007508 <_Bfree>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	7033      	strb	r3, [r6, #0]
 8006d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d94:	3701      	adds	r7, #1
 8006d96:	601f      	str	r7, [r3, #0]
 8006d98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 824b 	beq.w	8007236 <_dtoa_r+0xb4e>
 8006da0:	601e      	str	r6, [r3, #0]
 8006da2:	e248      	b.n	8007236 <_dtoa_r+0xb4e>
 8006da4:	46b8      	mov	r8, r7
 8006da6:	4633      	mov	r3, r6
 8006da8:	461e      	mov	r6, r3
 8006daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dae:	2a39      	cmp	r2, #57	@ 0x39
 8006db0:	d106      	bne.n	8006dc0 <_dtoa_r+0x6d8>
 8006db2:	459a      	cmp	sl, r3
 8006db4:	d1f8      	bne.n	8006da8 <_dtoa_r+0x6c0>
 8006db6:	2230      	movs	r2, #48	@ 0x30
 8006db8:	f108 0801 	add.w	r8, r8, #1
 8006dbc:	f88a 2000 	strb.w	r2, [sl]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	3201      	adds	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e7a0      	b.n	8006d0a <_dtoa_r+0x622>
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006f88 <_dtoa_r+0x8a0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f7f9 fc3c 	bl	8000648 <__aeabi_dmul>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	f7f9 fe9e 	bl	8000b18 <__aeabi_dcmpeq>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d09f      	beq.n	8006d20 <_dtoa_r+0x638>
 8006de0:	e7d1      	b.n	8006d86 <_dtoa_r+0x69e>
 8006de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	f000 80ea 	beq.w	8006fbe <_dtoa_r+0x8d6>
 8006dea:	9a07      	ldr	r2, [sp, #28]
 8006dec:	2a01      	cmp	r2, #1
 8006dee:	f300 80cd 	bgt.w	8006f8c <_dtoa_r+0x8a4>
 8006df2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	f000 80c1 	beq.w	8006f7c <_dtoa_r+0x894>
 8006dfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dfe:	9c08      	ldr	r4, [sp, #32]
 8006e00:	9e00      	ldr	r6, [sp, #0]
 8006e02:	9a00      	ldr	r2, [sp, #0]
 8006e04:	441a      	add	r2, r3
 8006e06:	9200      	str	r2, [sp, #0]
 8006e08:	9a06      	ldr	r2, [sp, #24]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	441a      	add	r2, r3
 8006e0e:	4648      	mov	r0, r9
 8006e10:	9206      	str	r2, [sp, #24]
 8006e12:	f000 fc2d 	bl	8007670 <__i2b>
 8006e16:	4605      	mov	r5, r0
 8006e18:	b166      	cbz	r6, 8006e34 <_dtoa_r+0x74c>
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dd09      	ble.n	8006e34 <_dtoa_r+0x74c>
 8006e20:	42b3      	cmp	r3, r6
 8006e22:	9a00      	ldr	r2, [sp, #0]
 8006e24:	bfa8      	it	ge
 8006e26:	4633      	movge	r3, r6
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	9a06      	ldr	r2, [sp, #24]
 8006e2e:	1af6      	subs	r6, r6, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	9306      	str	r3, [sp, #24]
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	b30b      	cbz	r3, 8006e7c <_dtoa_r+0x794>
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80c6 	beq.w	8006fcc <_dtoa_r+0x8e4>
 8006e40:	2c00      	cmp	r4, #0
 8006e42:	f000 80c0 	beq.w	8006fc6 <_dtoa_r+0x8de>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f000 fcc8 	bl	80077e0 <__pow5mult>
 8006e50:	9a02      	ldr	r2, [sp, #8]
 8006e52:	4601      	mov	r1, r0
 8006e54:	4605      	mov	r5, r0
 8006e56:	4648      	mov	r0, r9
 8006e58:	f000 fc20 	bl	800769c <__multiply>
 8006e5c:	9902      	ldr	r1, [sp, #8]
 8006e5e:	4680      	mov	r8, r0
 8006e60:	4648      	mov	r0, r9
 8006e62:	f000 fb51 	bl	8007508 <_Bfree>
 8006e66:	9b08      	ldr	r3, [sp, #32]
 8006e68:	1b1b      	subs	r3, r3, r4
 8006e6a:	9308      	str	r3, [sp, #32]
 8006e6c:	f000 80b1 	beq.w	8006fd2 <_dtoa_r+0x8ea>
 8006e70:	9a08      	ldr	r2, [sp, #32]
 8006e72:	4641      	mov	r1, r8
 8006e74:	4648      	mov	r0, r9
 8006e76:	f000 fcb3 	bl	80077e0 <__pow5mult>
 8006e7a:	9002      	str	r0, [sp, #8]
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	4648      	mov	r0, r9
 8006e80:	f000 fbf6 	bl	8007670 <__i2b>
 8006e84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e86:	4604      	mov	r4, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 81d8 	beq.w	800723e <_dtoa_r+0xb56>
 8006e8e:	461a      	mov	r2, r3
 8006e90:	4601      	mov	r1, r0
 8006e92:	4648      	mov	r0, r9
 8006e94:	f000 fca4 	bl	80077e0 <__pow5mult>
 8006e98:	9b07      	ldr	r3, [sp, #28]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f300 809f 	bgt.w	8006fe0 <_dtoa_r+0x8f8>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 8097 	bne.w	8006fd8 <_dtoa_r+0x8f0>
 8006eaa:	9b05      	ldr	r3, [sp, #20]
 8006eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 8093 	bne.w	8006fdc <_dtoa_r+0x8f4>
 8006eb6:	9b05      	ldr	r3, [sp, #20]
 8006eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ebc:	0d1b      	lsrs	r3, r3, #20
 8006ebe:	051b      	lsls	r3, r3, #20
 8006ec0:	b133      	cbz	r3, 8006ed0 <_dtoa_r+0x7e8>
 8006ec2:	9b00      	ldr	r3, [sp, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	9b06      	ldr	r3, [sp, #24]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	9306      	str	r3, [sp, #24]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	9308      	str	r3, [sp, #32]
 8006ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 81b8 	beq.w	800724a <_dtoa_r+0xb62>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ee0:	6918      	ldr	r0, [r3, #16]
 8006ee2:	f000 fb79 	bl	80075d8 <__hi0bits>
 8006ee6:	f1c0 0020 	rsb	r0, r0, #32
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	4418      	add	r0, r3
 8006eee:	f010 001f 	ands.w	r0, r0, #31
 8006ef2:	f000 8082 	beq.w	8006ffa <_dtoa_r+0x912>
 8006ef6:	f1c0 0320 	rsb	r3, r0, #32
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	dd73      	ble.n	8006fe6 <_dtoa_r+0x8fe>
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	f1c0 001c 	rsb	r0, r0, #28
 8006f04:	4403      	add	r3, r0
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	9b06      	ldr	r3, [sp, #24]
 8006f0a:	4403      	add	r3, r0
 8006f0c:	4406      	add	r6, r0
 8006f0e:	9306      	str	r3, [sp, #24]
 8006f10:	9b00      	ldr	r3, [sp, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd05      	ble.n	8006f22 <_dtoa_r+0x83a>
 8006f16:	9902      	ldr	r1, [sp, #8]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4648      	mov	r0, r9
 8006f1c:	f000 fcba 	bl	8007894 <__lshift>
 8006f20:	9002      	str	r0, [sp, #8]
 8006f22:	9b06      	ldr	r3, [sp, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd05      	ble.n	8006f34 <_dtoa_r+0x84c>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4648      	mov	r0, r9
 8006f2e:	f000 fcb1 	bl	8007894 <__lshift>
 8006f32:	4604      	mov	r4, r0
 8006f34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d061      	beq.n	8006ffe <_dtoa_r+0x916>
 8006f3a:	9802      	ldr	r0, [sp, #8]
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f000 fd15 	bl	800796c <__mcmp>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	da5b      	bge.n	8006ffe <_dtoa_r+0x916>
 8006f46:	2300      	movs	r3, #0
 8006f48:	9902      	ldr	r1, [sp, #8]
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	4648      	mov	r0, r9
 8006f4e:	f000 fafd 	bl	800754c <__multadd>
 8006f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f54:	9002      	str	r0, [sp, #8]
 8006f56:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8177 	beq.w	800724e <_dtoa_r+0xb66>
 8006f60:	4629      	mov	r1, r5
 8006f62:	2300      	movs	r3, #0
 8006f64:	220a      	movs	r2, #10
 8006f66:	4648      	mov	r0, r9
 8006f68:	f000 faf0 	bl	800754c <__multadd>
 8006f6c:	f1bb 0f00 	cmp.w	fp, #0
 8006f70:	4605      	mov	r5, r0
 8006f72:	dc6f      	bgt.n	8007054 <_dtoa_r+0x96c>
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	dc49      	bgt.n	800700e <_dtoa_r+0x926>
 8006f7a:	e06b      	b.n	8007054 <_dtoa_r+0x96c>
 8006f7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f82:	e73c      	b.n	8006dfe <_dtoa_r+0x716>
 8006f84:	3fe00000 	.word	0x3fe00000
 8006f88:	40240000 	.word	0x40240000
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	1e5c      	subs	r4, r3, #1
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	db09      	blt.n	8006faa <_dtoa_r+0x8c2>
 8006f96:	1b1c      	subs	r4, r3, r4
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f6bf af30 	bge.w	8006e00 <_dtoa_r+0x718>
 8006fa0:	9b00      	ldr	r3, [sp, #0]
 8006fa2:	9a03      	ldr	r2, [sp, #12]
 8006fa4:	1a9e      	subs	r6, r3, r2
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e72b      	b.n	8006e02 <_dtoa_r+0x71a>
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fae:	9408      	str	r4, [sp, #32]
 8006fb0:	1ae3      	subs	r3, r4, r3
 8006fb2:	441a      	add	r2, r3
 8006fb4:	9e00      	ldr	r6, [sp, #0]
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006fba:	2400      	movs	r4, #0
 8006fbc:	e721      	b.n	8006e02 <_dtoa_r+0x71a>
 8006fbe:	9c08      	ldr	r4, [sp, #32]
 8006fc0:	9e00      	ldr	r6, [sp, #0]
 8006fc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006fc4:	e728      	b.n	8006e18 <_dtoa_r+0x730>
 8006fc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006fca:	e751      	b.n	8006e70 <_dtoa_r+0x788>
 8006fcc:	9a08      	ldr	r2, [sp, #32]
 8006fce:	9902      	ldr	r1, [sp, #8]
 8006fd0:	e750      	b.n	8006e74 <_dtoa_r+0x78c>
 8006fd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8006fd6:	e751      	b.n	8006e7c <_dtoa_r+0x794>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e779      	b.n	8006ed0 <_dtoa_r+0x7e8>
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	e777      	b.n	8006ed0 <_dtoa_r+0x7e8>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9308      	str	r3, [sp, #32]
 8006fe4:	e779      	b.n	8006eda <_dtoa_r+0x7f2>
 8006fe6:	d093      	beq.n	8006f10 <_dtoa_r+0x828>
 8006fe8:	9a00      	ldr	r2, [sp, #0]
 8006fea:	331c      	adds	r3, #28
 8006fec:	441a      	add	r2, r3
 8006fee:	9200      	str	r2, [sp, #0]
 8006ff0:	9a06      	ldr	r2, [sp, #24]
 8006ff2:	441a      	add	r2, r3
 8006ff4:	441e      	add	r6, r3
 8006ff6:	9206      	str	r2, [sp, #24]
 8006ff8:	e78a      	b.n	8006f10 <_dtoa_r+0x828>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e7f4      	b.n	8006fe8 <_dtoa_r+0x900>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	46b8      	mov	r8, r7
 8007004:	dc20      	bgt.n	8007048 <_dtoa_r+0x960>
 8007006:	469b      	mov	fp, r3
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	2b02      	cmp	r3, #2
 800700c:	dd1e      	ble.n	800704c <_dtoa_r+0x964>
 800700e:	f1bb 0f00 	cmp.w	fp, #0
 8007012:	f47f adb1 	bne.w	8006b78 <_dtoa_r+0x490>
 8007016:	4621      	mov	r1, r4
 8007018:	465b      	mov	r3, fp
 800701a:	2205      	movs	r2, #5
 800701c:	4648      	mov	r0, r9
 800701e:	f000 fa95 	bl	800754c <__multadd>
 8007022:	4601      	mov	r1, r0
 8007024:	4604      	mov	r4, r0
 8007026:	9802      	ldr	r0, [sp, #8]
 8007028:	f000 fca0 	bl	800796c <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	f77f ada3 	ble.w	8006b78 <_dtoa_r+0x490>
 8007032:	4656      	mov	r6, sl
 8007034:	2331      	movs	r3, #49	@ 0x31
 8007036:	f806 3b01 	strb.w	r3, [r6], #1
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	e59f      	b.n	8006b80 <_dtoa_r+0x498>
 8007040:	9c03      	ldr	r4, [sp, #12]
 8007042:	46b8      	mov	r8, r7
 8007044:	4625      	mov	r5, r4
 8007046:	e7f4      	b.n	8007032 <_dtoa_r+0x94a>
 8007048:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8101 	beq.w	8007256 <_dtoa_r+0xb6e>
 8007054:	2e00      	cmp	r6, #0
 8007056:	dd05      	ble.n	8007064 <_dtoa_r+0x97c>
 8007058:	4629      	mov	r1, r5
 800705a:	4632      	mov	r2, r6
 800705c:	4648      	mov	r0, r9
 800705e:	f000 fc19 	bl	8007894 <__lshift>
 8007062:	4605      	mov	r5, r0
 8007064:	9b08      	ldr	r3, [sp, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d05c      	beq.n	8007124 <_dtoa_r+0xa3c>
 800706a:	6869      	ldr	r1, [r5, #4]
 800706c:	4648      	mov	r0, r9
 800706e:	f000 fa0b 	bl	8007488 <_Balloc>
 8007072:	4606      	mov	r6, r0
 8007074:	b928      	cbnz	r0, 8007082 <_dtoa_r+0x99a>
 8007076:	4b82      	ldr	r3, [pc, #520]	@ (8007280 <_dtoa_r+0xb98>)
 8007078:	4602      	mov	r2, r0
 800707a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800707e:	f7ff bb4a 	b.w	8006716 <_dtoa_r+0x2e>
 8007082:	692a      	ldr	r2, [r5, #16]
 8007084:	3202      	adds	r2, #2
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	f105 010c 	add.w	r1, r5, #12
 800708c:	300c      	adds	r0, #12
 800708e:	f000 fe31 	bl	8007cf4 <memcpy>
 8007092:	2201      	movs	r2, #1
 8007094:	4631      	mov	r1, r6
 8007096:	4648      	mov	r0, r9
 8007098:	f000 fbfc 	bl	8007894 <__lshift>
 800709c:	f10a 0301 	add.w	r3, sl, #1
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	eb0a 030b 	add.w	r3, sl, fp
 80070a6:	9308      	str	r3, [sp, #32]
 80070a8:	9b04      	ldr	r3, [sp, #16]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	462f      	mov	r7, r5
 80070b0:	9306      	str	r3, [sp, #24]
 80070b2:	4605      	mov	r5, r0
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	9802      	ldr	r0, [sp, #8]
 80070b8:	4621      	mov	r1, r4
 80070ba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80070be:	f7ff fa8a 	bl	80065d6 <quorem>
 80070c2:	4603      	mov	r3, r0
 80070c4:	3330      	adds	r3, #48	@ 0x30
 80070c6:	9003      	str	r0, [sp, #12]
 80070c8:	4639      	mov	r1, r7
 80070ca:	9802      	ldr	r0, [sp, #8]
 80070cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ce:	f000 fc4d 	bl	800796c <__mcmp>
 80070d2:	462a      	mov	r2, r5
 80070d4:	9004      	str	r0, [sp, #16]
 80070d6:	4621      	mov	r1, r4
 80070d8:	4648      	mov	r0, r9
 80070da:	f000 fc63 	bl	80079a4 <__mdiff>
 80070de:	68c2      	ldr	r2, [r0, #12]
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	4606      	mov	r6, r0
 80070e4:	bb02      	cbnz	r2, 8007128 <_dtoa_r+0xa40>
 80070e6:	4601      	mov	r1, r0
 80070e8:	9802      	ldr	r0, [sp, #8]
 80070ea:	f000 fc3f 	bl	800796c <__mcmp>
 80070ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f0:	4602      	mov	r2, r0
 80070f2:	4631      	mov	r1, r6
 80070f4:	4648      	mov	r0, r9
 80070f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80070f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fa:	f000 fa05 	bl	8007508 <_Bfree>
 80070fe:	9b07      	ldr	r3, [sp, #28]
 8007100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007102:	9e00      	ldr	r6, [sp, #0]
 8007104:	ea42 0103 	orr.w	r1, r2, r3
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	4319      	orrs	r1, r3
 800710c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710e:	d10d      	bne.n	800712c <_dtoa_r+0xa44>
 8007110:	2b39      	cmp	r3, #57	@ 0x39
 8007112:	d027      	beq.n	8007164 <_dtoa_r+0xa7c>
 8007114:	9a04      	ldr	r2, [sp, #16]
 8007116:	2a00      	cmp	r2, #0
 8007118:	dd01      	ble.n	800711e <_dtoa_r+0xa36>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	3331      	adds	r3, #49	@ 0x31
 800711e:	f88b 3000 	strb.w	r3, [fp]
 8007122:	e52e      	b.n	8006b82 <_dtoa_r+0x49a>
 8007124:	4628      	mov	r0, r5
 8007126:	e7b9      	b.n	800709c <_dtoa_r+0x9b4>
 8007128:	2201      	movs	r2, #1
 800712a:	e7e2      	b.n	80070f2 <_dtoa_r+0xa0a>
 800712c:	9904      	ldr	r1, [sp, #16]
 800712e:	2900      	cmp	r1, #0
 8007130:	db04      	blt.n	800713c <_dtoa_r+0xa54>
 8007132:	9807      	ldr	r0, [sp, #28]
 8007134:	4301      	orrs	r1, r0
 8007136:	9806      	ldr	r0, [sp, #24]
 8007138:	4301      	orrs	r1, r0
 800713a:	d120      	bne.n	800717e <_dtoa_r+0xa96>
 800713c:	2a00      	cmp	r2, #0
 800713e:	ddee      	ble.n	800711e <_dtoa_r+0xa36>
 8007140:	9902      	ldr	r1, [sp, #8]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	4648      	mov	r0, r9
 8007148:	f000 fba4 	bl	8007894 <__lshift>
 800714c:	4621      	mov	r1, r4
 800714e:	9002      	str	r0, [sp, #8]
 8007150:	f000 fc0c 	bl	800796c <__mcmp>
 8007154:	2800      	cmp	r0, #0
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	dc02      	bgt.n	8007160 <_dtoa_r+0xa78>
 800715a:	d1e0      	bne.n	800711e <_dtoa_r+0xa36>
 800715c:	07da      	lsls	r2, r3, #31
 800715e:	d5de      	bpl.n	800711e <_dtoa_r+0xa36>
 8007160:	2b39      	cmp	r3, #57	@ 0x39
 8007162:	d1da      	bne.n	800711a <_dtoa_r+0xa32>
 8007164:	2339      	movs	r3, #57	@ 0x39
 8007166:	f88b 3000 	strb.w	r3, [fp]
 800716a:	4633      	mov	r3, r6
 800716c:	461e      	mov	r6, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007174:	2a39      	cmp	r2, #57	@ 0x39
 8007176:	d04e      	beq.n	8007216 <_dtoa_r+0xb2e>
 8007178:	3201      	adds	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e501      	b.n	8006b82 <_dtoa_r+0x49a>
 800717e:	2a00      	cmp	r2, #0
 8007180:	dd03      	ble.n	800718a <_dtoa_r+0xaa2>
 8007182:	2b39      	cmp	r3, #57	@ 0x39
 8007184:	d0ee      	beq.n	8007164 <_dtoa_r+0xa7c>
 8007186:	3301      	adds	r3, #1
 8007188:	e7c9      	b.n	800711e <_dtoa_r+0xa36>
 800718a:	9a00      	ldr	r2, [sp, #0]
 800718c:	9908      	ldr	r1, [sp, #32]
 800718e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007192:	428a      	cmp	r2, r1
 8007194:	d028      	beq.n	80071e8 <_dtoa_r+0xb00>
 8007196:	9902      	ldr	r1, [sp, #8]
 8007198:	2300      	movs	r3, #0
 800719a:	220a      	movs	r2, #10
 800719c:	4648      	mov	r0, r9
 800719e:	f000 f9d5 	bl	800754c <__multadd>
 80071a2:	42af      	cmp	r7, r5
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	f04f 020a 	mov.w	r2, #10
 80071ae:	4639      	mov	r1, r7
 80071b0:	4648      	mov	r0, r9
 80071b2:	d107      	bne.n	80071c4 <_dtoa_r+0xadc>
 80071b4:	f000 f9ca 	bl	800754c <__multadd>
 80071b8:	4607      	mov	r7, r0
 80071ba:	4605      	mov	r5, r0
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	e777      	b.n	80070b4 <_dtoa_r+0x9cc>
 80071c4:	f000 f9c2 	bl	800754c <__multadd>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4607      	mov	r7, r0
 80071cc:	2300      	movs	r3, #0
 80071ce:	220a      	movs	r2, #10
 80071d0:	4648      	mov	r0, r9
 80071d2:	f000 f9bb 	bl	800754c <__multadd>
 80071d6:	4605      	mov	r5, r0
 80071d8:	e7f0      	b.n	80071bc <_dtoa_r+0xad4>
 80071da:	f1bb 0f00 	cmp.w	fp, #0
 80071de:	bfcc      	ite	gt
 80071e0:	465e      	movgt	r6, fp
 80071e2:	2601      	movle	r6, #1
 80071e4:	4456      	add	r6, sl
 80071e6:	2700      	movs	r7, #0
 80071e8:	9902      	ldr	r1, [sp, #8]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2201      	movs	r2, #1
 80071ee:	4648      	mov	r0, r9
 80071f0:	f000 fb50 	bl	8007894 <__lshift>
 80071f4:	4621      	mov	r1, r4
 80071f6:	9002      	str	r0, [sp, #8]
 80071f8:	f000 fbb8 	bl	800796c <__mcmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	dcb4      	bgt.n	800716a <_dtoa_r+0xa82>
 8007200:	d102      	bne.n	8007208 <_dtoa_r+0xb20>
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	07db      	lsls	r3, r3, #31
 8007206:	d4b0      	bmi.n	800716a <_dtoa_r+0xa82>
 8007208:	4633      	mov	r3, r6
 800720a:	461e      	mov	r6, r3
 800720c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007210:	2a30      	cmp	r2, #48	@ 0x30
 8007212:	d0fa      	beq.n	800720a <_dtoa_r+0xb22>
 8007214:	e4b5      	b.n	8006b82 <_dtoa_r+0x49a>
 8007216:	459a      	cmp	sl, r3
 8007218:	d1a8      	bne.n	800716c <_dtoa_r+0xa84>
 800721a:	2331      	movs	r3, #49	@ 0x31
 800721c:	f108 0801 	add.w	r8, r8, #1
 8007220:	f88a 3000 	strb.w	r3, [sl]
 8007224:	e4ad      	b.n	8006b82 <_dtoa_r+0x49a>
 8007226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007228:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007284 <_dtoa_r+0xb9c>
 800722c:	b11b      	cbz	r3, 8007236 <_dtoa_r+0xb4e>
 800722e:	f10a 0308 	add.w	r3, sl, #8
 8007232:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4650      	mov	r0, sl
 8007238:	b017      	add	sp, #92	@ 0x5c
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	2b01      	cmp	r3, #1
 8007242:	f77f ae2e 	ble.w	8006ea2 <_dtoa_r+0x7ba>
 8007246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	2001      	movs	r0, #1
 800724c:	e64d      	b.n	8006eea <_dtoa_r+0x802>
 800724e:	f1bb 0f00 	cmp.w	fp, #0
 8007252:	f77f aed9 	ble.w	8007008 <_dtoa_r+0x920>
 8007256:	4656      	mov	r6, sl
 8007258:	9802      	ldr	r0, [sp, #8]
 800725a:	4621      	mov	r1, r4
 800725c:	f7ff f9bb 	bl	80065d6 <quorem>
 8007260:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007264:	f806 3b01 	strb.w	r3, [r6], #1
 8007268:	eba6 020a 	sub.w	r2, r6, sl
 800726c:	4593      	cmp	fp, r2
 800726e:	ddb4      	ble.n	80071da <_dtoa_r+0xaf2>
 8007270:	9902      	ldr	r1, [sp, #8]
 8007272:	2300      	movs	r3, #0
 8007274:	220a      	movs	r2, #10
 8007276:	4648      	mov	r0, r9
 8007278:	f000 f968 	bl	800754c <__multadd>
 800727c:	9002      	str	r0, [sp, #8]
 800727e:	e7eb      	b.n	8007258 <_dtoa_r+0xb70>
 8007280:	08008428 	.word	0x08008428
 8007284:	080083ac 	.word	0x080083ac

08007288 <_free_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4605      	mov	r5, r0
 800728c:	2900      	cmp	r1, #0
 800728e:	d041      	beq.n	8007314 <_free_r+0x8c>
 8007290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007294:	1f0c      	subs	r4, r1, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfb8      	it	lt
 800729a:	18e4      	addlt	r4, r4, r3
 800729c:	f000 f8e8 	bl	8007470 <__malloc_lock>
 80072a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007318 <_free_r+0x90>)
 80072a2:	6813      	ldr	r3, [r2, #0]
 80072a4:	b933      	cbnz	r3, 80072b4 <_free_r+0x2c>
 80072a6:	6063      	str	r3, [r4, #4]
 80072a8:	6014      	str	r4, [r2, #0]
 80072aa:	4628      	mov	r0, r5
 80072ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b0:	f000 b8e4 	b.w	800747c <__malloc_unlock>
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d908      	bls.n	80072ca <_free_r+0x42>
 80072b8:	6820      	ldr	r0, [r4, #0]
 80072ba:	1821      	adds	r1, r4, r0
 80072bc:	428b      	cmp	r3, r1
 80072be:	bf01      	itttt	eq
 80072c0:	6819      	ldreq	r1, [r3, #0]
 80072c2:	685b      	ldreq	r3, [r3, #4]
 80072c4:	1809      	addeq	r1, r1, r0
 80072c6:	6021      	streq	r1, [r4, #0]
 80072c8:	e7ed      	b.n	80072a6 <_free_r+0x1e>
 80072ca:	461a      	mov	r2, r3
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	b10b      	cbz	r3, 80072d4 <_free_r+0x4c>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d9fa      	bls.n	80072ca <_free_r+0x42>
 80072d4:	6811      	ldr	r1, [r2, #0]
 80072d6:	1850      	adds	r0, r2, r1
 80072d8:	42a0      	cmp	r0, r4
 80072da:	d10b      	bne.n	80072f4 <_free_r+0x6c>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	4401      	add	r1, r0
 80072e0:	1850      	adds	r0, r2, r1
 80072e2:	4283      	cmp	r3, r0
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	d1e0      	bne.n	80072aa <_free_r+0x22>
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	6053      	str	r3, [r2, #4]
 80072ee:	4408      	add	r0, r1
 80072f0:	6010      	str	r0, [r2, #0]
 80072f2:	e7da      	b.n	80072aa <_free_r+0x22>
 80072f4:	d902      	bls.n	80072fc <_free_r+0x74>
 80072f6:	230c      	movs	r3, #12
 80072f8:	602b      	str	r3, [r5, #0]
 80072fa:	e7d6      	b.n	80072aa <_free_r+0x22>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	1821      	adds	r1, r4, r0
 8007300:	428b      	cmp	r3, r1
 8007302:	bf04      	itt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	bf04      	itt	eq
 800730c:	1809      	addeq	r1, r1, r0
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	6054      	str	r4, [r2, #4]
 8007312:	e7ca      	b.n	80072aa <_free_r+0x22>
 8007314:	bd38      	pop	{r3, r4, r5, pc}
 8007316:	bf00      	nop
 8007318:	20000500 	.word	0x20000500

0800731c <malloc>:
 800731c:	4b02      	ldr	r3, [pc, #8]	@ (8007328 <malloc+0xc>)
 800731e:	4601      	mov	r1, r0
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f000 b825 	b.w	8007370 <_malloc_r>
 8007326:	bf00      	nop
 8007328:	20000020 	.word	0x20000020

0800732c <sbrk_aligned>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4e0f      	ldr	r6, [pc, #60]	@ (800736c <sbrk_aligned+0x40>)
 8007330:	460c      	mov	r4, r1
 8007332:	6831      	ldr	r1, [r6, #0]
 8007334:	4605      	mov	r5, r0
 8007336:	b911      	cbnz	r1, 800733e <sbrk_aligned+0x12>
 8007338:	f000 fccc 	bl	8007cd4 <_sbrk_r>
 800733c:	6030      	str	r0, [r6, #0]
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 fcc7 	bl	8007cd4 <_sbrk_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d103      	bne.n	8007352 <sbrk_aligned+0x26>
 800734a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800734e:	4620      	mov	r0, r4
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	1cc4      	adds	r4, r0, #3
 8007354:	f024 0403 	bic.w	r4, r4, #3
 8007358:	42a0      	cmp	r0, r4
 800735a:	d0f8      	beq.n	800734e <sbrk_aligned+0x22>
 800735c:	1a21      	subs	r1, r4, r0
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fcb8 	bl	8007cd4 <_sbrk_r>
 8007364:	3001      	adds	r0, #1
 8007366:	d1f2      	bne.n	800734e <sbrk_aligned+0x22>
 8007368:	e7ef      	b.n	800734a <sbrk_aligned+0x1e>
 800736a:	bf00      	nop
 800736c:	200004fc 	.word	0x200004fc

08007370 <_malloc_r>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	1ccd      	adds	r5, r1, #3
 8007376:	f025 0503 	bic.w	r5, r5, #3
 800737a:	3508      	adds	r5, #8
 800737c:	2d0c      	cmp	r5, #12
 800737e:	bf38      	it	cc
 8007380:	250c      	movcc	r5, #12
 8007382:	2d00      	cmp	r5, #0
 8007384:	4606      	mov	r6, r0
 8007386:	db01      	blt.n	800738c <_malloc_r+0x1c>
 8007388:	42a9      	cmp	r1, r5
 800738a:	d904      	bls.n	8007396 <_malloc_r+0x26>
 800738c:	230c      	movs	r3, #12
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	2000      	movs	r0, #0
 8007392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800746c <_malloc_r+0xfc>
 800739a:	f000 f869 	bl	8007470 <__malloc_lock>
 800739e:	f8d8 3000 	ldr.w	r3, [r8]
 80073a2:	461c      	mov	r4, r3
 80073a4:	bb44      	cbnz	r4, 80073f8 <_malloc_r+0x88>
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7ff ffbf 	bl	800732c <sbrk_aligned>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	4604      	mov	r4, r0
 80073b2:	d158      	bne.n	8007466 <_malloc_r+0xf6>
 80073b4:	f8d8 4000 	ldr.w	r4, [r8]
 80073b8:	4627      	mov	r7, r4
 80073ba:	2f00      	cmp	r7, #0
 80073bc:	d143      	bne.n	8007446 <_malloc_r+0xd6>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	d04b      	beq.n	800745a <_malloc_r+0xea>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	4639      	mov	r1, r7
 80073c6:	4630      	mov	r0, r6
 80073c8:	eb04 0903 	add.w	r9, r4, r3
 80073cc:	f000 fc82 	bl	8007cd4 <_sbrk_r>
 80073d0:	4581      	cmp	r9, r0
 80073d2:	d142      	bne.n	800745a <_malloc_r+0xea>
 80073d4:	6821      	ldr	r1, [r4, #0]
 80073d6:	1a6d      	subs	r5, r5, r1
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ffa6 	bl	800732c <sbrk_aligned>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d03a      	beq.n	800745a <_malloc_r+0xea>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	442b      	add	r3, r5
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	bb62      	cbnz	r2, 800744c <_malloc_r+0xdc>
 80073f2:	f8c8 7000 	str.w	r7, [r8]
 80073f6:	e00f      	b.n	8007418 <_malloc_r+0xa8>
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	1b52      	subs	r2, r2, r5
 80073fc:	d420      	bmi.n	8007440 <_malloc_r+0xd0>
 80073fe:	2a0b      	cmp	r2, #11
 8007400:	d917      	bls.n	8007432 <_malloc_r+0xc2>
 8007402:	1961      	adds	r1, r4, r5
 8007404:	42a3      	cmp	r3, r4
 8007406:	6025      	str	r5, [r4, #0]
 8007408:	bf18      	it	ne
 800740a:	6059      	strne	r1, [r3, #4]
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	bf08      	it	eq
 8007410:	f8c8 1000 	streq.w	r1, [r8]
 8007414:	5162      	str	r2, [r4, r5]
 8007416:	604b      	str	r3, [r1, #4]
 8007418:	4630      	mov	r0, r6
 800741a:	f000 f82f 	bl	800747c <__malloc_unlock>
 800741e:	f104 000b 	add.w	r0, r4, #11
 8007422:	1d23      	adds	r3, r4, #4
 8007424:	f020 0007 	bic.w	r0, r0, #7
 8007428:	1ac2      	subs	r2, r0, r3
 800742a:	bf1c      	itt	ne
 800742c:	1a1b      	subne	r3, r3, r0
 800742e:	50a3      	strne	r3, [r4, r2]
 8007430:	e7af      	b.n	8007392 <_malloc_r+0x22>
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	42a3      	cmp	r3, r4
 8007436:	bf0c      	ite	eq
 8007438:	f8c8 2000 	streq.w	r2, [r8]
 800743c:	605a      	strne	r2, [r3, #4]
 800743e:	e7eb      	b.n	8007418 <_malloc_r+0xa8>
 8007440:	4623      	mov	r3, r4
 8007442:	6864      	ldr	r4, [r4, #4]
 8007444:	e7ae      	b.n	80073a4 <_malloc_r+0x34>
 8007446:	463c      	mov	r4, r7
 8007448:	687f      	ldr	r7, [r7, #4]
 800744a:	e7b6      	b.n	80073ba <_malloc_r+0x4a>
 800744c:	461a      	mov	r2, r3
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	42a3      	cmp	r3, r4
 8007452:	d1fb      	bne.n	800744c <_malloc_r+0xdc>
 8007454:	2300      	movs	r3, #0
 8007456:	6053      	str	r3, [r2, #4]
 8007458:	e7de      	b.n	8007418 <_malloc_r+0xa8>
 800745a:	230c      	movs	r3, #12
 800745c:	6033      	str	r3, [r6, #0]
 800745e:	4630      	mov	r0, r6
 8007460:	f000 f80c 	bl	800747c <__malloc_unlock>
 8007464:	e794      	b.n	8007390 <_malloc_r+0x20>
 8007466:	6005      	str	r5, [r0, #0]
 8007468:	e7d6      	b.n	8007418 <_malloc_r+0xa8>
 800746a:	bf00      	nop
 800746c:	20000500 	.word	0x20000500

08007470 <__malloc_lock>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__malloc_lock+0x8>)
 8007472:	f7ff b8ae 	b.w	80065d2 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200004f8 	.word	0x200004f8

0800747c <__malloc_unlock>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__malloc_unlock+0x8>)
 800747e:	f7ff b8a9 	b.w	80065d4 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200004f8 	.word	0x200004f8

08007488 <_Balloc>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	69c6      	ldr	r6, [r0, #28]
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	b976      	cbnz	r6, 80074b0 <_Balloc+0x28>
 8007492:	2010      	movs	r0, #16
 8007494:	f7ff ff42 	bl	800731c <malloc>
 8007498:	4602      	mov	r2, r0
 800749a:	61e0      	str	r0, [r4, #28]
 800749c:	b920      	cbnz	r0, 80074a8 <_Balloc+0x20>
 800749e:	4b18      	ldr	r3, [pc, #96]	@ (8007500 <_Balloc+0x78>)
 80074a0:	4818      	ldr	r0, [pc, #96]	@ (8007504 <_Balloc+0x7c>)
 80074a2:	216b      	movs	r1, #107	@ 0x6b
 80074a4:	f000 fc34 	bl	8007d10 <__assert_func>
 80074a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074ac:	6006      	str	r6, [r0, #0]
 80074ae:	60c6      	str	r6, [r0, #12]
 80074b0:	69e6      	ldr	r6, [r4, #28]
 80074b2:	68f3      	ldr	r3, [r6, #12]
 80074b4:	b183      	cbz	r3, 80074d8 <_Balloc+0x50>
 80074b6:	69e3      	ldr	r3, [r4, #28]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074be:	b9b8      	cbnz	r0, 80074f0 <_Balloc+0x68>
 80074c0:	2101      	movs	r1, #1
 80074c2:	fa01 f605 	lsl.w	r6, r1, r5
 80074c6:	1d72      	adds	r2, r6, #5
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fc3e 	bl	8007d4c <_calloc_r>
 80074d0:	b160      	cbz	r0, 80074ec <_Balloc+0x64>
 80074d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074d6:	e00e      	b.n	80074f6 <_Balloc+0x6e>
 80074d8:	2221      	movs	r2, #33	@ 0x21
 80074da:	2104      	movs	r1, #4
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fc35 	bl	8007d4c <_calloc_r>
 80074e2:	69e3      	ldr	r3, [r4, #28]
 80074e4:	60f0      	str	r0, [r6, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e4      	bne.n	80074b6 <_Balloc+0x2e>
 80074ec:	2000      	movs	r0, #0
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	6802      	ldr	r2, [r0, #0]
 80074f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074f6:	2300      	movs	r3, #0
 80074f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074fc:	e7f7      	b.n	80074ee <_Balloc+0x66>
 80074fe:	bf00      	nop
 8007500:	080083b9 	.word	0x080083b9
 8007504:	08008439 	.word	0x08008439

08007508 <_Bfree>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	69c6      	ldr	r6, [r0, #28]
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b976      	cbnz	r6, 8007530 <_Bfree+0x28>
 8007512:	2010      	movs	r0, #16
 8007514:	f7ff ff02 	bl	800731c <malloc>
 8007518:	4602      	mov	r2, r0
 800751a:	61e8      	str	r0, [r5, #28]
 800751c:	b920      	cbnz	r0, 8007528 <_Bfree+0x20>
 800751e:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <_Bfree+0x3c>)
 8007520:	4809      	ldr	r0, [pc, #36]	@ (8007548 <_Bfree+0x40>)
 8007522:	218f      	movs	r1, #143	@ 0x8f
 8007524:	f000 fbf4 	bl	8007d10 <__assert_func>
 8007528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800752c:	6006      	str	r6, [r0, #0]
 800752e:	60c6      	str	r6, [r0, #12]
 8007530:	b13c      	cbz	r4, 8007542 <_Bfree+0x3a>
 8007532:	69eb      	ldr	r3, [r5, #28]
 8007534:	6862      	ldr	r2, [r4, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800753c:	6021      	str	r1, [r4, #0]
 800753e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	080083b9 	.word	0x080083b9
 8007548:	08008439 	.word	0x08008439

0800754c <__multadd>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	690d      	ldr	r5, [r1, #16]
 8007552:	4607      	mov	r7, r0
 8007554:	460c      	mov	r4, r1
 8007556:	461e      	mov	r6, r3
 8007558:	f101 0c14 	add.w	ip, r1, #20
 800755c:	2000      	movs	r0, #0
 800755e:	f8dc 3000 	ldr.w	r3, [ip]
 8007562:	b299      	uxth	r1, r3
 8007564:	fb02 6101 	mla	r1, r2, r1, r6
 8007568:	0c1e      	lsrs	r6, r3, #16
 800756a:	0c0b      	lsrs	r3, r1, #16
 800756c:	fb02 3306 	mla	r3, r2, r6, r3
 8007570:	b289      	uxth	r1, r1
 8007572:	3001      	adds	r0, #1
 8007574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007578:	4285      	cmp	r5, r0
 800757a:	f84c 1b04 	str.w	r1, [ip], #4
 800757e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007582:	dcec      	bgt.n	800755e <__multadd+0x12>
 8007584:	b30e      	cbz	r6, 80075ca <__multadd+0x7e>
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	42ab      	cmp	r3, r5
 800758a:	dc19      	bgt.n	80075c0 <__multadd+0x74>
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4638      	mov	r0, r7
 8007590:	3101      	adds	r1, #1
 8007592:	f7ff ff79 	bl	8007488 <_Balloc>
 8007596:	4680      	mov	r8, r0
 8007598:	b928      	cbnz	r0, 80075a6 <__multadd+0x5a>
 800759a:	4602      	mov	r2, r0
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <__multadd+0x84>)
 800759e:	480d      	ldr	r0, [pc, #52]	@ (80075d4 <__multadd+0x88>)
 80075a0:	21ba      	movs	r1, #186	@ 0xba
 80075a2:	f000 fbb5 	bl	8007d10 <__assert_func>
 80075a6:	6922      	ldr	r2, [r4, #16]
 80075a8:	3202      	adds	r2, #2
 80075aa:	f104 010c 	add.w	r1, r4, #12
 80075ae:	0092      	lsls	r2, r2, #2
 80075b0:	300c      	adds	r0, #12
 80075b2:	f000 fb9f 	bl	8007cf4 <memcpy>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff ffa5 	bl	8007508 <_Bfree>
 80075be:	4644      	mov	r4, r8
 80075c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075c4:	3501      	adds	r5, #1
 80075c6:	615e      	str	r6, [r3, #20]
 80075c8:	6125      	str	r5, [r4, #16]
 80075ca:	4620      	mov	r0, r4
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	08008428 	.word	0x08008428
 80075d4:	08008439 	.word	0x08008439

080075d8 <__hi0bits>:
 80075d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80075dc:	4603      	mov	r3, r0
 80075de:	bf36      	itet	cc
 80075e0:	0403      	lslcc	r3, r0, #16
 80075e2:	2000      	movcs	r0, #0
 80075e4:	2010      	movcc	r0, #16
 80075e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075ea:	bf3c      	itt	cc
 80075ec:	021b      	lslcc	r3, r3, #8
 80075ee:	3008      	addcc	r0, #8
 80075f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f4:	bf3c      	itt	cc
 80075f6:	011b      	lslcc	r3, r3, #4
 80075f8:	3004      	addcc	r0, #4
 80075fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fe:	bf3c      	itt	cc
 8007600:	009b      	lslcc	r3, r3, #2
 8007602:	3002      	addcc	r0, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	db05      	blt.n	8007614 <__hi0bits+0x3c>
 8007608:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800760c:	f100 0001 	add.w	r0, r0, #1
 8007610:	bf08      	it	eq
 8007612:	2020      	moveq	r0, #32
 8007614:	4770      	bx	lr

08007616 <__lo0bits>:
 8007616:	6803      	ldr	r3, [r0, #0]
 8007618:	4602      	mov	r2, r0
 800761a:	f013 0007 	ands.w	r0, r3, #7
 800761e:	d00b      	beq.n	8007638 <__lo0bits+0x22>
 8007620:	07d9      	lsls	r1, r3, #31
 8007622:	d421      	bmi.n	8007668 <__lo0bits+0x52>
 8007624:	0798      	lsls	r0, r3, #30
 8007626:	bf49      	itett	mi
 8007628:	085b      	lsrmi	r3, r3, #1
 800762a:	089b      	lsrpl	r3, r3, #2
 800762c:	2001      	movmi	r0, #1
 800762e:	6013      	strmi	r3, [r2, #0]
 8007630:	bf5c      	itt	pl
 8007632:	6013      	strpl	r3, [r2, #0]
 8007634:	2002      	movpl	r0, #2
 8007636:	4770      	bx	lr
 8007638:	b299      	uxth	r1, r3
 800763a:	b909      	cbnz	r1, 8007640 <__lo0bits+0x2a>
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	2010      	movs	r0, #16
 8007640:	b2d9      	uxtb	r1, r3
 8007642:	b909      	cbnz	r1, 8007648 <__lo0bits+0x32>
 8007644:	3008      	adds	r0, #8
 8007646:	0a1b      	lsrs	r3, r3, #8
 8007648:	0719      	lsls	r1, r3, #28
 800764a:	bf04      	itt	eq
 800764c:	091b      	lsreq	r3, r3, #4
 800764e:	3004      	addeq	r0, #4
 8007650:	0799      	lsls	r1, r3, #30
 8007652:	bf04      	itt	eq
 8007654:	089b      	lsreq	r3, r3, #2
 8007656:	3002      	addeq	r0, #2
 8007658:	07d9      	lsls	r1, r3, #31
 800765a:	d403      	bmi.n	8007664 <__lo0bits+0x4e>
 800765c:	085b      	lsrs	r3, r3, #1
 800765e:	f100 0001 	add.w	r0, r0, #1
 8007662:	d003      	beq.n	800766c <__lo0bits+0x56>
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4770      	bx	lr
 8007668:	2000      	movs	r0, #0
 800766a:	4770      	bx	lr
 800766c:	2020      	movs	r0, #32
 800766e:	4770      	bx	lr

08007670 <__i2b>:
 8007670:	b510      	push	{r4, lr}
 8007672:	460c      	mov	r4, r1
 8007674:	2101      	movs	r1, #1
 8007676:	f7ff ff07 	bl	8007488 <_Balloc>
 800767a:	4602      	mov	r2, r0
 800767c:	b928      	cbnz	r0, 800768a <__i2b+0x1a>
 800767e:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <__i2b+0x24>)
 8007680:	4805      	ldr	r0, [pc, #20]	@ (8007698 <__i2b+0x28>)
 8007682:	f240 1145 	movw	r1, #325	@ 0x145
 8007686:	f000 fb43 	bl	8007d10 <__assert_func>
 800768a:	2301      	movs	r3, #1
 800768c:	6144      	str	r4, [r0, #20]
 800768e:	6103      	str	r3, [r0, #16]
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	08008428 	.word	0x08008428
 8007698:	08008439 	.word	0x08008439

0800769c <__multiply>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	4617      	mov	r7, r2
 80076a2:	690a      	ldr	r2, [r1, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	bfa8      	it	ge
 80076aa:	463b      	movge	r3, r7
 80076ac:	4689      	mov	r9, r1
 80076ae:	bfa4      	itt	ge
 80076b0:	460f      	movge	r7, r1
 80076b2:	4699      	movge	r9, r3
 80076b4:	693d      	ldr	r5, [r7, #16]
 80076b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	eb05 060a 	add.w	r6, r5, sl
 80076c2:	42b3      	cmp	r3, r6
 80076c4:	b085      	sub	sp, #20
 80076c6:	bfb8      	it	lt
 80076c8:	3101      	addlt	r1, #1
 80076ca:	f7ff fedd 	bl	8007488 <_Balloc>
 80076ce:	b930      	cbnz	r0, 80076de <__multiply+0x42>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b41      	ldr	r3, [pc, #260]	@ (80077d8 <__multiply+0x13c>)
 80076d4:	4841      	ldr	r0, [pc, #260]	@ (80077dc <__multiply+0x140>)
 80076d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076da:	f000 fb19 	bl	8007d10 <__assert_func>
 80076de:	f100 0414 	add.w	r4, r0, #20
 80076e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80076e6:	4623      	mov	r3, r4
 80076e8:	2200      	movs	r2, #0
 80076ea:	4573      	cmp	r3, lr
 80076ec:	d320      	bcc.n	8007730 <__multiply+0x94>
 80076ee:	f107 0814 	add.w	r8, r7, #20
 80076f2:	f109 0114 	add.w	r1, r9, #20
 80076f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80076fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80076fe:	9302      	str	r3, [sp, #8]
 8007700:	1beb      	subs	r3, r5, r7
 8007702:	3b15      	subs	r3, #21
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	3304      	adds	r3, #4
 800770a:	3715      	adds	r7, #21
 800770c:	42bd      	cmp	r5, r7
 800770e:	bf38      	it	cc
 8007710:	2304      	movcc	r3, #4
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	428b      	cmp	r3, r1
 800771a:	d80c      	bhi.n	8007736 <__multiply+0x9a>
 800771c:	2e00      	cmp	r6, #0
 800771e:	dd03      	ble.n	8007728 <__multiply+0x8c>
 8007720:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007724:	2b00      	cmp	r3, #0
 8007726:	d055      	beq.n	80077d4 <__multiply+0x138>
 8007728:	6106      	str	r6, [r0, #16]
 800772a:	b005      	add	sp, #20
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	f843 2b04 	str.w	r2, [r3], #4
 8007734:	e7d9      	b.n	80076ea <__multiply+0x4e>
 8007736:	f8b1 a000 	ldrh.w	sl, [r1]
 800773a:	f1ba 0f00 	cmp.w	sl, #0
 800773e:	d01f      	beq.n	8007780 <__multiply+0xe4>
 8007740:	46c4      	mov	ip, r8
 8007742:	46a1      	mov	r9, r4
 8007744:	2700      	movs	r7, #0
 8007746:	f85c 2b04 	ldr.w	r2, [ip], #4
 800774a:	f8d9 3000 	ldr.w	r3, [r9]
 800774e:	fa1f fb82 	uxth.w	fp, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	fb0a 330b 	mla	r3, sl, fp, r3
 8007758:	443b      	add	r3, r7
 800775a:	f8d9 7000 	ldr.w	r7, [r9]
 800775e:	0c12      	lsrs	r2, r2, #16
 8007760:	0c3f      	lsrs	r7, r7, #16
 8007762:	fb0a 7202 	mla	r2, sl, r2, r7
 8007766:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007770:	4565      	cmp	r5, ip
 8007772:	f849 3b04 	str.w	r3, [r9], #4
 8007776:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800777a:	d8e4      	bhi.n	8007746 <__multiply+0xaa>
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	50e7      	str	r7, [r4, r3]
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007786:	3104      	adds	r1, #4
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	d020      	beq.n	80077d0 <__multiply+0x134>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	4647      	mov	r7, r8
 8007792:	46a4      	mov	ip, r4
 8007794:	f04f 0a00 	mov.w	sl, #0
 8007798:	f8b7 b000 	ldrh.w	fp, [r7]
 800779c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80077a0:	fb09 220b 	mla	r2, r9, fp, r2
 80077a4:	4452      	add	r2, sl
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ac:	f84c 3b04 	str.w	r3, [ip], #4
 80077b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80077b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80077bc:	fb09 330a 	mla	r3, r9, sl, r3
 80077c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80077c4:	42bd      	cmp	r5, r7
 80077c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ca:	d8e5      	bhi.n	8007798 <__multiply+0xfc>
 80077cc:	9a01      	ldr	r2, [sp, #4]
 80077ce:	50a3      	str	r3, [r4, r2]
 80077d0:	3404      	adds	r4, #4
 80077d2:	e79f      	b.n	8007714 <__multiply+0x78>
 80077d4:	3e01      	subs	r6, #1
 80077d6:	e7a1      	b.n	800771c <__multiply+0x80>
 80077d8:	08008428 	.word	0x08008428
 80077dc:	08008439 	.word	0x08008439

080077e0 <__pow5mult>:
 80077e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	4615      	mov	r5, r2
 80077e6:	f012 0203 	ands.w	r2, r2, #3
 80077ea:	4607      	mov	r7, r0
 80077ec:	460e      	mov	r6, r1
 80077ee:	d007      	beq.n	8007800 <__pow5mult+0x20>
 80077f0:	4c25      	ldr	r4, [pc, #148]	@ (8007888 <__pow5mult+0xa8>)
 80077f2:	3a01      	subs	r2, #1
 80077f4:	2300      	movs	r3, #0
 80077f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077fa:	f7ff fea7 	bl	800754c <__multadd>
 80077fe:	4606      	mov	r6, r0
 8007800:	10ad      	asrs	r5, r5, #2
 8007802:	d03d      	beq.n	8007880 <__pow5mult+0xa0>
 8007804:	69fc      	ldr	r4, [r7, #28]
 8007806:	b97c      	cbnz	r4, 8007828 <__pow5mult+0x48>
 8007808:	2010      	movs	r0, #16
 800780a:	f7ff fd87 	bl	800731c <malloc>
 800780e:	4602      	mov	r2, r0
 8007810:	61f8      	str	r0, [r7, #28]
 8007812:	b928      	cbnz	r0, 8007820 <__pow5mult+0x40>
 8007814:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <__pow5mult+0xac>)
 8007816:	481e      	ldr	r0, [pc, #120]	@ (8007890 <__pow5mult+0xb0>)
 8007818:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800781c:	f000 fa78 	bl	8007d10 <__assert_func>
 8007820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007824:	6004      	str	r4, [r0, #0]
 8007826:	60c4      	str	r4, [r0, #12]
 8007828:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800782c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007830:	b94c      	cbnz	r4, 8007846 <__pow5mult+0x66>
 8007832:	f240 2171 	movw	r1, #625	@ 0x271
 8007836:	4638      	mov	r0, r7
 8007838:	f7ff ff1a 	bl	8007670 <__i2b>
 800783c:	2300      	movs	r3, #0
 800783e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007842:	4604      	mov	r4, r0
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	f04f 0900 	mov.w	r9, #0
 800784a:	07eb      	lsls	r3, r5, #31
 800784c:	d50a      	bpl.n	8007864 <__pow5mult+0x84>
 800784e:	4631      	mov	r1, r6
 8007850:	4622      	mov	r2, r4
 8007852:	4638      	mov	r0, r7
 8007854:	f7ff ff22 	bl	800769c <__multiply>
 8007858:	4631      	mov	r1, r6
 800785a:	4680      	mov	r8, r0
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff fe53 	bl	8007508 <_Bfree>
 8007862:	4646      	mov	r6, r8
 8007864:	106d      	asrs	r5, r5, #1
 8007866:	d00b      	beq.n	8007880 <__pow5mult+0xa0>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	b938      	cbnz	r0, 800787c <__pow5mult+0x9c>
 800786c:	4622      	mov	r2, r4
 800786e:	4621      	mov	r1, r4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ff13 	bl	800769c <__multiply>
 8007876:	6020      	str	r0, [r4, #0]
 8007878:	f8c0 9000 	str.w	r9, [r0]
 800787c:	4604      	mov	r4, r0
 800787e:	e7e4      	b.n	800784a <__pow5mult+0x6a>
 8007880:	4630      	mov	r0, r6
 8007882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007886:	bf00      	nop
 8007888:	080084ec 	.word	0x080084ec
 800788c:	080083b9 	.word	0x080083b9
 8007890:	08008439 	.word	0x08008439

08007894 <__lshift>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	6849      	ldr	r1, [r1, #4]
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	4607      	mov	r7, r0
 80078a6:	4691      	mov	r9, r2
 80078a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078ac:	f108 0601 	add.w	r6, r8, #1
 80078b0:	42b3      	cmp	r3, r6
 80078b2:	db0b      	blt.n	80078cc <__lshift+0x38>
 80078b4:	4638      	mov	r0, r7
 80078b6:	f7ff fde7 	bl	8007488 <_Balloc>
 80078ba:	4605      	mov	r5, r0
 80078bc:	b948      	cbnz	r0, 80078d2 <__lshift+0x3e>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <__lshift+0xd0>)
 80078c2:	4829      	ldr	r0, [pc, #164]	@ (8007968 <__lshift+0xd4>)
 80078c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078c8:	f000 fa22 	bl	8007d10 <__assert_func>
 80078cc:	3101      	adds	r1, #1
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	e7ee      	b.n	80078b0 <__lshift+0x1c>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f100 0114 	add.w	r1, r0, #20
 80078d8:	f100 0210 	add.w	r2, r0, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	4553      	cmp	r3, sl
 80078e0:	db33      	blt.n	800794a <__lshift+0xb6>
 80078e2:	6920      	ldr	r0, [r4, #16]
 80078e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078e8:	f104 0314 	add.w	r3, r4, #20
 80078ec:	f019 091f 	ands.w	r9, r9, #31
 80078f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078f8:	d02b      	beq.n	8007952 <__lshift+0xbe>
 80078fa:	f1c9 0e20 	rsb	lr, r9, #32
 80078fe:	468a      	mov	sl, r1
 8007900:	2200      	movs	r2, #0
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	fa00 f009 	lsl.w	r0, r0, r9
 8007908:	4310      	orrs	r0, r2
 800790a:	f84a 0b04 	str.w	r0, [sl], #4
 800790e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007912:	459c      	cmp	ip, r3
 8007914:	fa22 f20e 	lsr.w	r2, r2, lr
 8007918:	d8f3      	bhi.n	8007902 <__lshift+0x6e>
 800791a:	ebac 0304 	sub.w	r3, ip, r4
 800791e:	3b15      	subs	r3, #21
 8007920:	f023 0303 	bic.w	r3, r3, #3
 8007924:	3304      	adds	r3, #4
 8007926:	f104 0015 	add.w	r0, r4, #21
 800792a:	4560      	cmp	r0, ip
 800792c:	bf88      	it	hi
 800792e:	2304      	movhi	r3, #4
 8007930:	50ca      	str	r2, [r1, r3]
 8007932:	b10a      	cbz	r2, 8007938 <__lshift+0xa4>
 8007934:	f108 0602 	add.w	r6, r8, #2
 8007938:	3e01      	subs	r6, #1
 800793a:	4638      	mov	r0, r7
 800793c:	612e      	str	r6, [r5, #16]
 800793e:	4621      	mov	r1, r4
 8007940:	f7ff fde2 	bl	8007508 <_Bfree>
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	f842 0f04 	str.w	r0, [r2, #4]!
 800794e:	3301      	adds	r3, #1
 8007950:	e7c5      	b.n	80078de <__lshift+0x4a>
 8007952:	3904      	subs	r1, #4
 8007954:	f853 2b04 	ldr.w	r2, [r3], #4
 8007958:	f841 2f04 	str.w	r2, [r1, #4]!
 800795c:	459c      	cmp	ip, r3
 800795e:	d8f9      	bhi.n	8007954 <__lshift+0xc0>
 8007960:	e7ea      	b.n	8007938 <__lshift+0xa4>
 8007962:	bf00      	nop
 8007964:	08008428 	.word	0x08008428
 8007968:	08008439 	.word	0x08008439

0800796c <__mcmp>:
 800796c:	690a      	ldr	r2, [r1, #16]
 800796e:	4603      	mov	r3, r0
 8007970:	6900      	ldr	r0, [r0, #16]
 8007972:	1a80      	subs	r0, r0, r2
 8007974:	b530      	push	{r4, r5, lr}
 8007976:	d10e      	bne.n	8007996 <__mcmp+0x2a>
 8007978:	3314      	adds	r3, #20
 800797a:	3114      	adds	r1, #20
 800797c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007980:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007984:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007988:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800798c:	4295      	cmp	r5, r2
 800798e:	d003      	beq.n	8007998 <__mcmp+0x2c>
 8007990:	d205      	bcs.n	800799e <__mcmp+0x32>
 8007992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	42a3      	cmp	r3, r4
 800799a:	d3f3      	bcc.n	8007984 <__mcmp+0x18>
 800799c:	e7fb      	b.n	8007996 <__mcmp+0x2a>
 800799e:	2001      	movs	r0, #1
 80079a0:	e7f9      	b.n	8007996 <__mcmp+0x2a>
	...

080079a4 <__mdiff>:
 80079a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	4689      	mov	r9, r1
 80079aa:	4606      	mov	r6, r0
 80079ac:	4611      	mov	r1, r2
 80079ae:	4648      	mov	r0, r9
 80079b0:	4614      	mov	r4, r2
 80079b2:	f7ff ffdb 	bl	800796c <__mcmp>
 80079b6:	1e05      	subs	r5, r0, #0
 80079b8:	d112      	bne.n	80079e0 <__mdiff+0x3c>
 80079ba:	4629      	mov	r1, r5
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff fd63 	bl	8007488 <_Balloc>
 80079c2:	4602      	mov	r2, r0
 80079c4:	b928      	cbnz	r0, 80079d2 <__mdiff+0x2e>
 80079c6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac4 <__mdiff+0x120>)
 80079c8:	f240 2137 	movw	r1, #567	@ 0x237
 80079cc:	483e      	ldr	r0, [pc, #248]	@ (8007ac8 <__mdiff+0x124>)
 80079ce:	f000 f99f 	bl	8007d10 <__assert_func>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079d8:	4610      	mov	r0, r2
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e0:	bfbc      	itt	lt
 80079e2:	464b      	movlt	r3, r9
 80079e4:	46a1      	movlt	r9, r4
 80079e6:	4630      	mov	r0, r6
 80079e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80079ec:	bfba      	itte	lt
 80079ee:	461c      	movlt	r4, r3
 80079f0:	2501      	movlt	r5, #1
 80079f2:	2500      	movge	r5, #0
 80079f4:	f7ff fd48 	bl	8007488 <_Balloc>
 80079f8:	4602      	mov	r2, r0
 80079fa:	b918      	cbnz	r0, 8007a04 <__mdiff+0x60>
 80079fc:	4b31      	ldr	r3, [pc, #196]	@ (8007ac4 <__mdiff+0x120>)
 80079fe:	f240 2145 	movw	r1, #581	@ 0x245
 8007a02:	e7e3      	b.n	80079cc <__mdiff+0x28>
 8007a04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a08:	6926      	ldr	r6, [r4, #16]
 8007a0a:	60c5      	str	r5, [r0, #12]
 8007a0c:	f109 0310 	add.w	r3, r9, #16
 8007a10:	f109 0514 	add.w	r5, r9, #20
 8007a14:	f104 0e14 	add.w	lr, r4, #20
 8007a18:	f100 0b14 	add.w	fp, r0, #20
 8007a1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	46d9      	mov	r9, fp
 8007a28:	f04f 0c00 	mov.w	ip, #0
 8007a2c:	9b01      	ldr	r3, [sp, #4]
 8007a2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	fa1f f38a 	uxth.w	r3, sl
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	b283      	uxth	r3, r0
 8007a40:	1acb      	subs	r3, r1, r3
 8007a42:	0c00      	lsrs	r0, r0, #16
 8007a44:	4463      	add	r3, ip
 8007a46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a54:	4576      	cmp	r6, lr
 8007a56:	f849 3b04 	str.w	r3, [r9], #4
 8007a5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a5e:	d8e5      	bhi.n	8007a2c <__mdiff+0x88>
 8007a60:	1b33      	subs	r3, r6, r4
 8007a62:	3b15      	subs	r3, #21
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	3415      	adds	r4, #21
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	bf38      	it	cc
 8007a70:	2304      	movcc	r3, #4
 8007a72:	441d      	add	r5, r3
 8007a74:	445b      	add	r3, fp
 8007a76:	461e      	mov	r6, r3
 8007a78:	462c      	mov	r4, r5
 8007a7a:	4544      	cmp	r4, r8
 8007a7c:	d30e      	bcc.n	8007a9c <__mdiff+0xf8>
 8007a7e:	f108 0103 	add.w	r1, r8, #3
 8007a82:	1b49      	subs	r1, r1, r5
 8007a84:	f021 0103 	bic.w	r1, r1, #3
 8007a88:	3d03      	subs	r5, #3
 8007a8a:	45a8      	cmp	r8, r5
 8007a8c:	bf38      	it	cc
 8007a8e:	2100      	movcc	r1, #0
 8007a90:	440b      	add	r3, r1
 8007a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a96:	b191      	cbz	r1, 8007abe <__mdiff+0x11a>
 8007a98:	6117      	str	r7, [r2, #16]
 8007a9a:	e79d      	b.n	80079d8 <__mdiff+0x34>
 8007a9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007aa0:	46e6      	mov	lr, ip
 8007aa2:	0c08      	lsrs	r0, r1, #16
 8007aa4:	fa1c fc81 	uxtah	ip, ip, r1
 8007aa8:	4471      	add	r1, lr
 8007aaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007aae:	b289      	uxth	r1, r1
 8007ab0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ab4:	f846 1b04 	str.w	r1, [r6], #4
 8007ab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007abc:	e7dd      	b.n	8007a7a <__mdiff+0xd6>
 8007abe:	3f01      	subs	r7, #1
 8007ac0:	e7e7      	b.n	8007a92 <__mdiff+0xee>
 8007ac2:	bf00      	nop
 8007ac4:	08008428 	.word	0x08008428
 8007ac8:	08008439 	.word	0x08008439

08007acc <__d2b>:
 8007acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	ec59 8b10 	vmov	r8, r9, d0
 8007ad8:	4616      	mov	r6, r2
 8007ada:	f7ff fcd5 	bl	8007488 <_Balloc>
 8007ade:	4604      	mov	r4, r0
 8007ae0:	b930      	cbnz	r0, 8007af0 <__d2b+0x24>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b23      	ldr	r3, [pc, #140]	@ (8007b74 <__d2b+0xa8>)
 8007ae6:	4824      	ldr	r0, [pc, #144]	@ (8007b78 <__d2b+0xac>)
 8007ae8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007aec:	f000 f910 	bl	8007d10 <__assert_func>
 8007af0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007af4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af8:	b10d      	cbz	r5, 8007afe <__d2b+0x32>
 8007afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	f1b8 0300 	subs.w	r3, r8, #0
 8007b04:	d023      	beq.n	8007b4e <__d2b+0x82>
 8007b06:	4668      	mov	r0, sp
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	f7ff fd84 	bl	8007616 <__lo0bits>
 8007b0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b12:	b1d0      	cbz	r0, 8007b4a <__d2b+0x7e>
 8007b14:	f1c0 0320 	rsb	r3, r0, #32
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	40c2      	lsrs	r2, r0
 8007b20:	6163      	str	r3, [r4, #20]
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	61a3      	str	r3, [r4, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2201      	moveq	r2, #1
 8007b2e:	2202      	movne	r2, #2
 8007b30:	6122      	str	r2, [r4, #16]
 8007b32:	b1a5      	cbz	r5, 8007b5e <__d2b+0x92>
 8007b34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b38:	4405      	add	r5, r0
 8007b3a:	603d      	str	r5, [r7, #0]
 8007b3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b40:	6030      	str	r0, [r6, #0]
 8007b42:	4620      	mov	r0, r4
 8007b44:	b003      	add	sp, #12
 8007b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b4a:	6161      	str	r1, [r4, #20]
 8007b4c:	e7ea      	b.n	8007b24 <__d2b+0x58>
 8007b4e:	a801      	add	r0, sp, #4
 8007b50:	f7ff fd61 	bl	8007616 <__lo0bits>
 8007b54:	9b01      	ldr	r3, [sp, #4]
 8007b56:	6163      	str	r3, [r4, #20]
 8007b58:	3020      	adds	r0, #32
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	e7e8      	b.n	8007b30 <__d2b+0x64>
 8007b5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b66:	6038      	str	r0, [r7, #0]
 8007b68:	6918      	ldr	r0, [r3, #16]
 8007b6a:	f7ff fd35 	bl	80075d8 <__hi0bits>
 8007b6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b72:	e7e5      	b.n	8007b40 <__d2b+0x74>
 8007b74:	08008428 	.word	0x08008428
 8007b78:	08008439 	.word	0x08008439

08007b7c <__sflush_r>:
 8007b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	0716      	lsls	r6, r2, #28
 8007b86:	4605      	mov	r5, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	d454      	bmi.n	8007c36 <__sflush_r+0xba>
 8007b8c:	684b      	ldr	r3, [r1, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dc02      	bgt.n	8007b98 <__sflush_r+0x1c>
 8007b92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dd48      	ble.n	8007c2a <__sflush_r+0xae>
 8007b98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d045      	beq.n	8007c2a <__sflush_r+0xae>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ba4:	682f      	ldr	r7, [r5, #0]
 8007ba6:	6a21      	ldr	r1, [r4, #32]
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	d030      	beq.n	8007c0e <__sflush_r+0x92>
 8007bac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	0759      	lsls	r1, r3, #29
 8007bb2:	d505      	bpl.n	8007bc0 <__sflush_r+0x44>
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bba:	b10b      	cbz	r3, 8007bc0 <__sflush_r+0x44>
 8007bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bc4:	6a21      	ldr	r1, [r4, #32]
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b0      	blx	r6
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	d106      	bne.n	8007bde <__sflush_r+0x62>
 8007bd0:	6829      	ldr	r1, [r5, #0]
 8007bd2:	291d      	cmp	r1, #29
 8007bd4:	d82b      	bhi.n	8007c2e <__sflush_r+0xb2>
 8007bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c80 <__sflush_r+0x104>)
 8007bd8:	40ca      	lsrs	r2, r1
 8007bda:	07d6      	lsls	r6, r2, #31
 8007bdc:	d527      	bpl.n	8007c2e <__sflush_r+0xb2>
 8007bde:	2200      	movs	r2, #0
 8007be0:	6062      	str	r2, [r4, #4]
 8007be2:	04d9      	lsls	r1, r3, #19
 8007be4:	6922      	ldr	r2, [r4, #16]
 8007be6:	6022      	str	r2, [r4, #0]
 8007be8:	d504      	bpl.n	8007bf4 <__sflush_r+0x78>
 8007bea:	1c42      	adds	r2, r0, #1
 8007bec:	d101      	bne.n	8007bf2 <__sflush_r+0x76>
 8007bee:	682b      	ldr	r3, [r5, #0]
 8007bf0:	b903      	cbnz	r3, 8007bf4 <__sflush_r+0x78>
 8007bf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bf6:	602f      	str	r7, [r5, #0]
 8007bf8:	b1b9      	cbz	r1, 8007c2a <__sflush_r+0xae>
 8007bfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bfe:	4299      	cmp	r1, r3
 8007c00:	d002      	beq.n	8007c08 <__sflush_r+0x8c>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7ff fb40 	bl	8007288 <_free_r>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c0c:	e00d      	b.n	8007c2a <__sflush_r+0xae>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b0      	blx	r6
 8007c14:	4602      	mov	r2, r0
 8007c16:	1c50      	adds	r0, r2, #1
 8007c18:	d1c9      	bne.n	8007bae <__sflush_r+0x32>
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0c6      	beq.n	8007bae <__sflush_r+0x32>
 8007c20:	2b1d      	cmp	r3, #29
 8007c22:	d001      	beq.n	8007c28 <__sflush_r+0xac>
 8007c24:	2b16      	cmp	r3, #22
 8007c26:	d11e      	bne.n	8007c66 <__sflush_r+0xea>
 8007c28:	602f      	str	r7, [r5, #0]
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e022      	b.n	8007c74 <__sflush_r+0xf8>
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c32:	b21b      	sxth	r3, r3
 8007c34:	e01b      	b.n	8007c6e <__sflush_r+0xf2>
 8007c36:	690f      	ldr	r7, [r1, #16]
 8007c38:	2f00      	cmp	r7, #0
 8007c3a:	d0f6      	beq.n	8007c2a <__sflush_r+0xae>
 8007c3c:	0793      	lsls	r3, r2, #30
 8007c3e:	680e      	ldr	r6, [r1, #0]
 8007c40:	bf08      	it	eq
 8007c42:	694b      	ldreq	r3, [r1, #20]
 8007c44:	600f      	str	r7, [r1, #0]
 8007c46:	bf18      	it	ne
 8007c48:	2300      	movne	r3, #0
 8007c4a:	eba6 0807 	sub.w	r8, r6, r7
 8007c4e:	608b      	str	r3, [r1, #8]
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	dde9      	ble.n	8007c2a <__sflush_r+0xae>
 8007c56:	6a21      	ldr	r1, [r4, #32]
 8007c58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c5a:	4643      	mov	r3, r8
 8007c5c:	463a      	mov	r2, r7
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b0      	blx	r6
 8007c62:	2800      	cmp	r0, #0
 8007c64:	dc08      	bgt.n	8007c78 <__sflush_r+0xfc>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	4407      	add	r7, r0
 8007c7a:	eba8 0800 	sub.w	r8, r8, r0
 8007c7e:	e7e7      	b.n	8007c50 <__sflush_r+0xd4>
 8007c80:	20400001 	.word	0x20400001

08007c84 <_fflush_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	b913      	cbnz	r3, 8007c94 <_fflush_r+0x10>
 8007c8e:	2500      	movs	r5, #0
 8007c90:	4628      	mov	r0, r5
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	b118      	cbz	r0, 8007c9e <_fflush_r+0x1a>
 8007c96:	6a03      	ldr	r3, [r0, #32]
 8007c98:	b90b      	cbnz	r3, 8007c9e <_fflush_r+0x1a>
 8007c9a:	f7fe fba3 	bl	80063e4 <__sinit>
 8007c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0f3      	beq.n	8007c8e <_fflush_r+0xa>
 8007ca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ca8:	07d0      	lsls	r0, r2, #31
 8007caa:	d404      	bmi.n	8007cb6 <_fflush_r+0x32>
 8007cac:	0599      	lsls	r1, r3, #22
 8007cae:	d402      	bmi.n	8007cb6 <_fflush_r+0x32>
 8007cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cb2:	f7fe fc8e 	bl	80065d2 <__retarget_lock_acquire_recursive>
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f7ff ff5f 	bl	8007b7c <__sflush_r>
 8007cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	d4e4      	bmi.n	8007c90 <_fflush_r+0xc>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	059b      	lsls	r3, r3, #22
 8007cca:	d4e1      	bmi.n	8007c90 <_fflush_r+0xc>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cce:	f7fe fc81 	bl	80065d4 <__retarget_lock_release_recursive>
 8007cd2:	e7dd      	b.n	8007c90 <_fflush_r+0xc>

08007cd4 <_sbrk_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	@ (8007cf0 <_sbrk_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f9 fd28 	bl	8001734 <_sbrk>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_sbrk_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_sbrk_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200004f4 	.word	0x200004f4

08007cf4 <memcpy>:
 8007cf4:	440a      	add	r2, r1
 8007cf6:	4291      	cmp	r1, r2
 8007cf8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007cfc:	d100      	bne.n	8007d00 <memcpy+0xc>
 8007cfe:	4770      	bx	lr
 8007d00:	b510      	push	{r4, lr}
 8007d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	d1f9      	bne.n	8007d02 <memcpy+0xe>
 8007d0e:	bd10      	pop	{r4, pc}

08007d10 <__assert_func>:
 8007d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d12:	4614      	mov	r4, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b09      	ldr	r3, [pc, #36]	@ (8007d3c <__assert_func+0x2c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	68d8      	ldr	r0, [r3, #12]
 8007d1e:	b14c      	cbz	r4, 8007d34 <__assert_func+0x24>
 8007d20:	4b07      	ldr	r3, [pc, #28]	@ (8007d40 <__assert_func+0x30>)
 8007d22:	9100      	str	r1, [sp, #0]
 8007d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d28:	4906      	ldr	r1, [pc, #24]	@ (8007d44 <__assert_func+0x34>)
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	f000 f842 	bl	8007db4 <fiprintf>
 8007d30:	f000 f852 	bl	8007dd8 <abort>
 8007d34:	4b04      	ldr	r3, [pc, #16]	@ (8007d48 <__assert_func+0x38>)
 8007d36:	461c      	mov	r4, r3
 8007d38:	e7f3      	b.n	8007d22 <__assert_func+0x12>
 8007d3a:	bf00      	nop
 8007d3c:	20000020 	.word	0x20000020
 8007d40:	0800849c 	.word	0x0800849c
 8007d44:	080084a9 	.word	0x080084a9
 8007d48:	080084d7 	.word	0x080084d7

08007d4c <_calloc_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d52:	b934      	cbnz	r4, 8007d62 <_calloc_r+0x16>
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7ff fb0b 	bl	8007370 <_malloc_r>
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	b928      	cbnz	r0, 8007d6a <_calloc_r+0x1e>
 8007d5e:	4630      	mov	r0, r6
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	220c      	movs	r2, #12
 8007d64:	6002      	str	r2, [r0, #0]
 8007d66:	2600      	movs	r6, #0
 8007d68:	e7f9      	b.n	8007d5e <_calloc_r+0x12>
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	f7fe fbb2 	bl	80064d6 <memset>
 8007d72:	e7f4      	b.n	8007d5e <_calloc_r+0x12>

08007d74 <__ascii_mbtowc>:
 8007d74:	b082      	sub	sp, #8
 8007d76:	b901      	cbnz	r1, 8007d7a <__ascii_mbtowc+0x6>
 8007d78:	a901      	add	r1, sp, #4
 8007d7a:	b142      	cbz	r2, 8007d8e <__ascii_mbtowc+0x1a>
 8007d7c:	b14b      	cbz	r3, 8007d92 <__ascii_mbtowc+0x1e>
 8007d7e:	7813      	ldrb	r3, [r2, #0]
 8007d80:	600b      	str	r3, [r1, #0]
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	1e10      	subs	r0, r2, #0
 8007d86:	bf18      	it	ne
 8007d88:	2001      	movne	r0, #1
 8007d8a:	b002      	add	sp, #8
 8007d8c:	4770      	bx	lr
 8007d8e:	4610      	mov	r0, r2
 8007d90:	e7fb      	b.n	8007d8a <__ascii_mbtowc+0x16>
 8007d92:	f06f 0001 	mvn.w	r0, #1
 8007d96:	e7f8      	b.n	8007d8a <__ascii_mbtowc+0x16>

08007d98 <__ascii_wctomb>:
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	b141      	cbz	r1, 8007db0 <__ascii_wctomb+0x18>
 8007d9e:	2aff      	cmp	r2, #255	@ 0xff
 8007da0:	d904      	bls.n	8007dac <__ascii_wctomb+0x14>
 8007da2:	228a      	movs	r2, #138	@ 0x8a
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007daa:	4770      	bx	lr
 8007dac:	700a      	strb	r2, [r1, #0]
 8007dae:	2001      	movs	r0, #1
 8007db0:	4770      	bx	lr
	...

08007db4 <fiprintf>:
 8007db4:	b40e      	push	{r1, r2, r3}
 8007db6:	b503      	push	{r0, r1, lr}
 8007db8:	4601      	mov	r1, r0
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	4805      	ldr	r0, [pc, #20]	@ (8007dd4 <fiprintf+0x20>)
 8007dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f000 f837 	bl	8007e38 <_vfiprintf_r>
 8007dca:	b002      	add	sp, #8
 8007dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd0:	b003      	add	sp, #12
 8007dd2:	4770      	bx	lr
 8007dd4:	20000020 	.word	0x20000020

08007dd8 <abort>:
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	2006      	movs	r0, #6
 8007ddc:	f000 fa00 	bl	80081e0 <raise>
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7f9 fc2f 	bl	8001644 <_exit>

08007de6 <__sfputc_r>:
 8007de6:	6893      	ldr	r3, [r2, #8]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	b410      	push	{r4}
 8007dee:	6093      	str	r3, [r2, #8]
 8007df0:	da08      	bge.n	8007e04 <__sfputc_r+0x1e>
 8007df2:	6994      	ldr	r4, [r2, #24]
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	db01      	blt.n	8007dfc <__sfputc_r+0x16>
 8007df8:	290a      	cmp	r1, #10
 8007dfa:	d103      	bne.n	8007e04 <__sfputc_r+0x1e>
 8007dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e00:	f000 b932 	b.w	8008068 <__swbuf_r>
 8007e04:	6813      	ldr	r3, [r2, #0]
 8007e06:	1c58      	adds	r0, r3, #1
 8007e08:	6010      	str	r0, [r2, #0]
 8007e0a:	7019      	strb	r1, [r3, #0]
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <__sfputs_r>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	4614      	mov	r4, r2
 8007e1c:	18d5      	adds	r5, r2, r3
 8007e1e:	42ac      	cmp	r4, r5
 8007e20:	d101      	bne.n	8007e26 <__sfputs_r+0x12>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e007      	b.n	8007e36 <__sfputs_r+0x22>
 8007e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2a:	463a      	mov	r2, r7
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ffda 	bl	8007de6 <__sfputc_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d1f3      	bne.n	8007e1e <__sfputs_r+0xa>
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e38 <_vfiprintf_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	b09d      	sub	sp, #116	@ 0x74
 8007e40:	4614      	mov	r4, r2
 8007e42:	4698      	mov	r8, r3
 8007e44:	4606      	mov	r6, r0
 8007e46:	b118      	cbz	r0, 8007e50 <_vfiprintf_r+0x18>
 8007e48:	6a03      	ldr	r3, [r0, #32]
 8007e4a:	b90b      	cbnz	r3, 8007e50 <_vfiprintf_r+0x18>
 8007e4c:	f7fe faca 	bl	80063e4 <__sinit>
 8007e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e52:	07d9      	lsls	r1, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_vfiprintf_r+0x2a>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_vfiprintf_r+0x2a>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e5e:	f7fe fbb8 	bl	80065d2 <__retarget_lock_acquire_recursive>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	071b      	lsls	r3, r3, #28
 8007e66:	d501      	bpl.n	8007e6c <_vfiprintf_r+0x34>
 8007e68:	692b      	ldr	r3, [r5, #16]
 8007e6a:	b99b      	cbnz	r3, 8007e94 <_vfiprintf_r+0x5c>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f000 f938 	bl	80080e4 <__swsetup_r>
 8007e74:	b170      	cbz	r0, 8007e94 <_vfiprintf_r+0x5c>
 8007e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e78:	07dc      	lsls	r4, r3, #31
 8007e7a:	d504      	bpl.n	8007e86 <_vfiprintf_r+0x4e>
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e80:	b01d      	add	sp, #116	@ 0x74
 8007e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	0598      	lsls	r0, r3, #22
 8007e8a:	d4f7      	bmi.n	8007e7c <_vfiprintf_r+0x44>
 8007e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e8e:	f7fe fba1 	bl	80065d4 <__retarget_lock_release_recursive>
 8007e92:	e7f3      	b.n	8007e7c <_vfiprintf_r+0x44>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea2:	2330      	movs	r3, #48	@ 0x30
 8007ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008054 <_vfiprintf_r+0x21c>
 8007ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eac:	f04f 0901 	mov.w	r9, #1
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	469a      	mov	sl, r3
 8007eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb8:	b10a      	cbz	r2, 8007ebe <_vfiprintf_r+0x86>
 8007eba:	2a25      	cmp	r2, #37	@ 0x25
 8007ebc:	d1f9      	bne.n	8007eb2 <_vfiprintf_r+0x7a>
 8007ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec2:	d00b      	beq.n	8007edc <_vfiprintf_r+0xa4>
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ffa2 	bl	8007e14 <__sfputs_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f000 80a7 	beq.w	8008024 <_vfiprintf_r+0x1ec>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed8:	445a      	add	r2, fp
 8007eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8007edc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 809f 	beq.w	8008024 <_vfiprintf_r+0x1ec>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef0:	f10a 0a01 	add.w	sl, sl, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007efe:	4654      	mov	r4, sl
 8007f00:	2205      	movs	r2, #5
 8007f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f06:	4853      	ldr	r0, [pc, #332]	@ (8008054 <_vfiprintf_r+0x21c>)
 8007f08:	f7f8 f98a 	bl	8000220 <memchr>
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	b9d8      	cbnz	r0, 8007f48 <_vfiprintf_r+0x110>
 8007f10:	06d1      	lsls	r1, r2, #27
 8007f12:	bf44      	itt	mi
 8007f14:	2320      	movmi	r3, #32
 8007f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f1a:	0713      	lsls	r3, r2, #28
 8007f1c:	bf44      	itt	mi
 8007f1e:	232b      	movmi	r3, #43	@ 0x2b
 8007f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f24:	f89a 3000 	ldrb.w	r3, [sl]
 8007f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f2a:	d015      	beq.n	8007f58 <_vfiprintf_r+0x120>
 8007f2c:	9a07      	ldr	r2, [sp, #28]
 8007f2e:	4654      	mov	r4, sl
 8007f30:	2000      	movs	r0, #0
 8007f32:	f04f 0c0a 	mov.w	ip, #10
 8007f36:	4621      	mov	r1, r4
 8007f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3c:	3b30      	subs	r3, #48	@ 0x30
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d94b      	bls.n	8007fda <_vfiprintf_r+0x1a2>
 8007f42:	b1b0      	cbz	r0, 8007f72 <_vfiprintf_r+0x13a>
 8007f44:	9207      	str	r2, [sp, #28]
 8007f46:	e014      	b.n	8007f72 <_vfiprintf_r+0x13a>
 8007f48:	eba0 0308 	sub.w	r3, r0, r8
 8007f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	46a2      	mov	sl, r4
 8007f56:	e7d2      	b.n	8007efe <_vfiprintf_r+0xc6>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	1d19      	adds	r1, r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bfbb      	ittet	lt
 8007f64:	425b      	neglt	r3, r3
 8007f66:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6a:	9307      	strge	r3, [sp, #28]
 8007f6c:	9307      	strlt	r3, [sp, #28]
 8007f6e:	bfb8      	it	lt
 8007f70:	9204      	strlt	r2, [sp, #16]
 8007f72:	7823      	ldrb	r3, [r4, #0]
 8007f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f76:	d10a      	bne.n	8007f8e <_vfiprintf_r+0x156>
 8007f78:	7863      	ldrb	r3, [r4, #1]
 8007f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f7c:	d132      	bne.n	8007fe4 <_vfiprintf_r+0x1ac>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	1d1a      	adds	r2, r3, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	9203      	str	r2, [sp, #12]
 8007f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f8a:	3402      	adds	r4, #2
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008064 <_vfiprintf_r+0x22c>
 8007f92:	7821      	ldrb	r1, [r4, #0]
 8007f94:	2203      	movs	r2, #3
 8007f96:	4650      	mov	r0, sl
 8007f98:	f7f8 f942 	bl	8000220 <memchr>
 8007f9c:	b138      	cbz	r0, 8007fae <_vfiprintf_r+0x176>
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	eba0 000a 	sub.w	r0, r0, sl
 8007fa4:	2240      	movs	r2, #64	@ 0x40
 8007fa6:	4082      	lsls	r2, r0
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	3401      	adds	r4, #1
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb2:	4829      	ldr	r0, [pc, #164]	@ (8008058 <_vfiprintf_r+0x220>)
 8007fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fb8:	2206      	movs	r2, #6
 8007fba:	f7f8 f931 	bl	8000220 <memchr>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d03f      	beq.n	8008042 <_vfiprintf_r+0x20a>
 8007fc2:	4b26      	ldr	r3, [pc, #152]	@ (800805c <_vfiprintf_r+0x224>)
 8007fc4:	bb1b      	cbnz	r3, 800800e <_vfiprintf_r+0x1d6>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	3307      	adds	r3, #7
 8007fca:	f023 0307 	bic.w	r3, r3, #7
 8007fce:	3308      	adds	r3, #8
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd4:	443b      	add	r3, r7
 8007fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd8:	e76a      	b.n	8007eb0 <_vfiprintf_r+0x78>
 8007fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fde:	460c      	mov	r4, r1
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	e7a8      	b.n	8007f36 <_vfiprintf_r+0xfe>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	3401      	adds	r4, #1
 8007fe8:	9305      	str	r3, [sp, #20]
 8007fea:	4619      	mov	r1, r3
 8007fec:	f04f 0c0a 	mov.w	ip, #10
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff6:	3a30      	subs	r2, #48	@ 0x30
 8007ff8:	2a09      	cmp	r2, #9
 8007ffa:	d903      	bls.n	8008004 <_vfiprintf_r+0x1cc>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0c6      	beq.n	8007f8e <_vfiprintf_r+0x156>
 8008000:	9105      	str	r1, [sp, #20]
 8008002:	e7c4      	b.n	8007f8e <_vfiprintf_r+0x156>
 8008004:	fb0c 2101 	mla	r1, ip, r1, r2
 8008008:	4604      	mov	r4, r0
 800800a:	2301      	movs	r3, #1
 800800c:	e7f0      	b.n	8007ff0 <_vfiprintf_r+0x1b8>
 800800e:	ab03      	add	r3, sp, #12
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	462a      	mov	r2, r5
 8008014:	4b12      	ldr	r3, [pc, #72]	@ (8008060 <_vfiprintf_r+0x228>)
 8008016:	a904      	add	r1, sp, #16
 8008018:	4630      	mov	r0, r6
 800801a:	f7fd fda1 	bl	8005b60 <_printf_float>
 800801e:	4607      	mov	r7, r0
 8008020:	1c78      	adds	r0, r7, #1
 8008022:	d1d6      	bne.n	8007fd2 <_vfiprintf_r+0x19a>
 8008024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008026:	07d9      	lsls	r1, r3, #31
 8008028:	d405      	bmi.n	8008036 <_vfiprintf_r+0x1fe>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	059a      	lsls	r2, r3, #22
 800802e:	d402      	bmi.n	8008036 <_vfiprintf_r+0x1fe>
 8008030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008032:	f7fe facf 	bl	80065d4 <__retarget_lock_release_recursive>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	065b      	lsls	r3, r3, #25
 800803a:	f53f af1f 	bmi.w	8007e7c <_vfiprintf_r+0x44>
 800803e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008040:	e71e      	b.n	8007e80 <_vfiprintf_r+0x48>
 8008042:	ab03      	add	r3, sp, #12
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	462a      	mov	r2, r5
 8008048:	4b05      	ldr	r3, [pc, #20]	@ (8008060 <_vfiprintf_r+0x228>)
 800804a:	a904      	add	r1, sp, #16
 800804c:	4630      	mov	r0, r6
 800804e:	f7fe f81f 	bl	8006090 <_printf_i>
 8008052:	e7e4      	b.n	800801e <_vfiprintf_r+0x1e6>
 8008054:	080084d8 	.word	0x080084d8
 8008058:	080084e2 	.word	0x080084e2
 800805c:	08005b61 	.word	0x08005b61
 8008060:	08007e15 	.word	0x08007e15
 8008064:	080084de 	.word	0x080084de

08008068 <__swbuf_r>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	460e      	mov	r6, r1
 800806c:	4614      	mov	r4, r2
 800806e:	4605      	mov	r5, r0
 8008070:	b118      	cbz	r0, 800807a <__swbuf_r+0x12>
 8008072:	6a03      	ldr	r3, [r0, #32]
 8008074:	b90b      	cbnz	r3, 800807a <__swbuf_r+0x12>
 8008076:	f7fe f9b5 	bl	80063e4 <__sinit>
 800807a:	69a3      	ldr	r3, [r4, #24]
 800807c:	60a3      	str	r3, [r4, #8]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	071a      	lsls	r2, r3, #28
 8008082:	d501      	bpl.n	8008088 <__swbuf_r+0x20>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	b943      	cbnz	r3, 800809a <__swbuf_r+0x32>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f82a 	bl	80080e4 <__swsetup_r>
 8008090:	b118      	cbz	r0, 800809a <__swbuf_r+0x32>
 8008092:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008096:	4638      	mov	r0, r7
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	1a98      	subs	r0, r3, r2
 80080a0:	6963      	ldr	r3, [r4, #20]
 80080a2:	b2f6      	uxtb	r6, r6
 80080a4:	4283      	cmp	r3, r0
 80080a6:	4637      	mov	r7, r6
 80080a8:	dc05      	bgt.n	80080b6 <__swbuf_r+0x4e>
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f7ff fde9 	bl	8007c84 <_fflush_r>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d1ed      	bne.n	8008092 <__swbuf_r+0x2a>
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	6022      	str	r2, [r4, #0]
 80080c2:	701e      	strb	r6, [r3, #0]
 80080c4:	6962      	ldr	r2, [r4, #20]
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d004      	beq.n	80080d6 <__swbuf_r+0x6e>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	07db      	lsls	r3, r3, #31
 80080d0:	d5e1      	bpl.n	8008096 <__swbuf_r+0x2e>
 80080d2:	2e0a      	cmp	r6, #10
 80080d4:	d1df      	bne.n	8008096 <__swbuf_r+0x2e>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4628      	mov	r0, r5
 80080da:	f7ff fdd3 	bl	8007c84 <_fflush_r>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0d9      	beq.n	8008096 <__swbuf_r+0x2e>
 80080e2:	e7d6      	b.n	8008092 <__swbuf_r+0x2a>

080080e4 <__swsetup_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4b29      	ldr	r3, [pc, #164]	@ (800818c <__swsetup_r+0xa8>)
 80080e8:	4605      	mov	r5, r0
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	460c      	mov	r4, r1
 80080ee:	b118      	cbz	r0, 80080f8 <__swsetup_r+0x14>
 80080f0:	6a03      	ldr	r3, [r0, #32]
 80080f2:	b90b      	cbnz	r3, 80080f8 <__swsetup_r+0x14>
 80080f4:	f7fe f976 	bl	80063e4 <__sinit>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	0719      	lsls	r1, r3, #28
 80080fe:	d422      	bmi.n	8008146 <__swsetup_r+0x62>
 8008100:	06da      	lsls	r2, r3, #27
 8008102:	d407      	bmi.n	8008114 <__swsetup_r+0x30>
 8008104:	2209      	movs	r2, #9
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008112:	e033      	b.n	800817c <__swsetup_r+0x98>
 8008114:	0758      	lsls	r0, r3, #29
 8008116:	d512      	bpl.n	800813e <__swsetup_r+0x5a>
 8008118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800811a:	b141      	cbz	r1, 800812e <__swsetup_r+0x4a>
 800811c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008120:	4299      	cmp	r1, r3
 8008122:	d002      	beq.n	800812a <__swsetup_r+0x46>
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff f8af 	bl	8007288 <_free_r>
 800812a:	2300      	movs	r3, #0
 800812c:	6363      	str	r3, [r4, #52]	@ 0x34
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	2300      	movs	r3, #0
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f043 0308 	orr.w	r3, r3, #8
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	b94b      	cbnz	r3, 800815e <__swsetup_r+0x7a>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008154:	d003      	beq.n	800815e <__swsetup_r+0x7a>
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 f883 	bl	8008264 <__smakebuf_r>
 800815e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008162:	f013 0201 	ands.w	r2, r3, #1
 8008166:	d00a      	beq.n	800817e <__swsetup_r+0x9a>
 8008168:	2200      	movs	r2, #0
 800816a:	60a2      	str	r2, [r4, #8]
 800816c:	6962      	ldr	r2, [r4, #20]
 800816e:	4252      	negs	r2, r2
 8008170:	61a2      	str	r2, [r4, #24]
 8008172:	6922      	ldr	r2, [r4, #16]
 8008174:	b942      	cbnz	r2, 8008188 <__swsetup_r+0xa4>
 8008176:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800817a:	d1c5      	bne.n	8008108 <__swsetup_r+0x24>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	0799      	lsls	r1, r3, #30
 8008180:	bf58      	it	pl
 8008182:	6962      	ldrpl	r2, [r4, #20]
 8008184:	60a2      	str	r2, [r4, #8]
 8008186:	e7f4      	b.n	8008172 <__swsetup_r+0x8e>
 8008188:	2000      	movs	r0, #0
 800818a:	e7f7      	b.n	800817c <__swsetup_r+0x98>
 800818c:	20000020 	.word	0x20000020

08008190 <_raise_r>:
 8008190:	291f      	cmp	r1, #31
 8008192:	b538      	push	{r3, r4, r5, lr}
 8008194:	4605      	mov	r5, r0
 8008196:	460c      	mov	r4, r1
 8008198:	d904      	bls.n	80081a4 <_raise_r+0x14>
 800819a:	2316      	movs	r3, #22
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081a6:	b112      	cbz	r2, 80081ae <_raise_r+0x1e>
 80081a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ac:	b94b      	cbnz	r3, 80081c2 <_raise_r+0x32>
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f830 	bl	8008214 <_getpid_r>
 80081b4:	4622      	mov	r2, r4
 80081b6:	4601      	mov	r1, r0
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081be:	f000 b817 	b.w	80081f0 <_kill_r>
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d00a      	beq.n	80081dc <_raise_r+0x4c>
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	d103      	bne.n	80081d2 <_raise_r+0x42>
 80081ca:	2316      	movs	r3, #22
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7e7      	b.n	80081a2 <_raise_r+0x12>
 80081d2:	2100      	movs	r1, #0
 80081d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081d8:	4620      	mov	r0, r4
 80081da:	4798      	blx	r3
 80081dc:	2000      	movs	r0, #0
 80081de:	e7e0      	b.n	80081a2 <_raise_r+0x12>

080081e0 <raise>:
 80081e0:	4b02      	ldr	r3, [pc, #8]	@ (80081ec <raise+0xc>)
 80081e2:	4601      	mov	r1, r0
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f7ff bfd3 	b.w	8008190 <_raise_r>
 80081ea:	bf00      	nop
 80081ec:	20000020 	.word	0x20000020

080081f0 <_kill_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	@ (8008210 <_kill_r+0x20>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	f7f9 fa11 	bl	8001624 <_kill>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d102      	bne.n	800820c <_kill_r+0x1c>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b103      	cbz	r3, 800820c <_kill_r+0x1c>
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	bf00      	nop
 8008210:	200004f4 	.word	0x200004f4

08008214 <_getpid_r>:
 8008214:	f7f9 b9fe 	b.w	8001614 <_getpid>

08008218 <__swhatbuf_r>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	2900      	cmp	r1, #0
 8008222:	b096      	sub	sp, #88	@ 0x58
 8008224:	4615      	mov	r5, r2
 8008226:	461e      	mov	r6, r3
 8008228:	da0d      	bge.n	8008246 <__swhatbuf_r+0x2e>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008230:	f04f 0100 	mov.w	r1, #0
 8008234:	bf14      	ite	ne
 8008236:	2340      	movne	r3, #64	@ 0x40
 8008238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800823c:	2000      	movs	r0, #0
 800823e:	6031      	str	r1, [r6, #0]
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	b016      	add	sp, #88	@ 0x58
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	466a      	mov	r2, sp
 8008248:	f000 f848 	bl	80082dc <_fstat_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	dbec      	blt.n	800822a <__swhatbuf_r+0x12>
 8008250:	9901      	ldr	r1, [sp, #4]
 8008252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800825a:	4259      	negs	r1, r3
 800825c:	4159      	adcs	r1, r3
 800825e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008262:	e7eb      	b.n	800823c <__swhatbuf_r+0x24>

08008264 <__smakebuf_r>:
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008268:	079d      	lsls	r5, r3, #30
 800826a:	4606      	mov	r6, r0
 800826c:	460c      	mov	r4, r1
 800826e:	d507      	bpl.n	8008280 <__smakebuf_r+0x1c>
 8008270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	2301      	movs	r3, #1
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	b003      	add	sp, #12
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	ab01      	add	r3, sp, #4
 8008282:	466a      	mov	r2, sp
 8008284:	f7ff ffc8 	bl	8008218 <__swhatbuf_r>
 8008288:	9f00      	ldr	r7, [sp, #0]
 800828a:	4605      	mov	r5, r0
 800828c:	4639      	mov	r1, r7
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff f86e 	bl	8007370 <_malloc_r>
 8008294:	b948      	cbnz	r0, 80082aa <__smakebuf_r+0x46>
 8008296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829a:	059a      	lsls	r2, r3, #22
 800829c:	d4ee      	bmi.n	800827c <__smakebuf_r+0x18>
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	f043 0302 	orr.w	r3, r3, #2
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	e7e2      	b.n	8008270 <__smakebuf_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	6020      	str	r0, [r4, #0]
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ba:	b15b      	cbz	r3, 80082d4 <__smakebuf_r+0x70>
 80082bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f81d 	bl	8008300 <_isatty_r>
 80082c6:	b128      	cbz	r0, 80082d4 <__smakebuf_r+0x70>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	431d      	orrs	r5, r3
 80082d8:	81a5      	strh	r5, [r4, #12]
 80082da:	e7cf      	b.n	800827c <__smakebuf_r+0x18>

080082dc <_fstat_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	@ (80082fc <_fstat_r+0x20>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	f7f9 f9fb 	bl	80016e4 <_fstat>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d102      	bne.n	80082f8 <_fstat_r+0x1c>
 80082f2:	682b      	ldr	r3, [r5, #0]
 80082f4:	b103      	cbz	r3, 80082f8 <_fstat_r+0x1c>
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	200004f4 	.word	0x200004f4

08008300 <_isatty_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	@ (800831c <_isatty_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7f9 f9fa 	bl	8001704 <_isatty>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_isatty_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_isatty_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	200004f4 	.word	0x200004f4

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
