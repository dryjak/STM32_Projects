
Encoder_Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0000523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004244  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000005c  080042a0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080042a0  0000632c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012077  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002570  00000000  00000000  00018103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7b  00000000  00000000  0001b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b1f  00000000  00000000  0001c2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001286b  00000000  00000000  00042e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbccf  00000000  00000000  00055685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  00151398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00155bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004198 	.word	0x08004198

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004198 	.word	0x08004198

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a2e      	ldr	r2, [pc, #184]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067a:	f000 fdc1 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000684:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <MX_GPIO_Init+0xd8>)
 8000696:	f000 fc31 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069a:	2320      	movs	r3, #32
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f000 fc22 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2028      	movs	r0, #40	@ 0x28
 80006be:	f000 fbe8 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c2:	2028      	movs	r0, #40	@ 0x28
 80006c4:	f000 fbff 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000800 	.word	0x48000800

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fa8d 	bl	8000bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f82c 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f7ff ff8a 	bl	80005fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006e8:	f000 f9bc 	bl	8000a64 <MX_LPUART1_UART_Init>
  MX_TIM8_Init();
 80006ec:	f000 f91c 	bl	8000928 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim8);
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <main+0x50>)
 80006f2:	f001 fe49 	bl	8002388 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Value = __HAL_TIM_GET_COUNTER(&htim8);
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <main+0x50>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006fc:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <main+0x54>)
 80006fe:	6013      	str	r3, [r2, #0]
	  sprintf(Message, "Value = %ld\n", Value);
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <main+0x54>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	490a      	ldr	r1, [pc, #40]	@ (8000730 <main+0x58>)
 8000708:	480a      	ldr	r0, [pc, #40]	@ (8000734 <main+0x5c>)
 800070a:	f003 f8a5 	bl	8003858 <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <main+0x5c>)
 8000710:	f7ff fd86 	bl	8000220 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071c:	4905      	ldr	r1, [pc, #20]	@ (8000734 <main+0x5c>)
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <main+0x60>)
 8000720:	f002 f9ee 	bl	8002b00 <HAL_UART_Transmit>
	  Value = __HAL_TIM_GET_COUNTER(&htim8);
 8000724:	bf00      	nop
 8000726:	e7e6      	b.n	80006f6 <main+0x1e>
 8000728:	20000100 	.word	0x20000100
 800072c:	200000f8 	.word	0x200000f8
 8000730:	080041b0 	.word	0x080041b0
 8000734:	20000078 	.word	0x20000078
 8000738:	2000014c 	.word	0x2000014c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2238      	movs	r2, #56	@ 0x38
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 f8a6 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 fd8a 	bl	8001278 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2340      	movs	r3, #64	@ 0x40
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800077e:	2355      	movs	r3, #85	@ 0x55
 8000780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe24 	bl	80013e0 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800079e:	f000 f818 	bl	80007d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f922 	bl	8001a04 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007c6:	f000 f804 	bl	80007d2 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d6:	b672      	cpsid	i
}
 80007d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007da:	bf00      	nop
 80007dc:	e7fd      	b.n	80007da <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	@ 0x58
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000816:	f000 fdd3 	bl	80013c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 fa0f 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}

08000886 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800088a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800088e:	f000 fccf 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f002 fff0 	bl	80038ac <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000fc 	.word	0x200000fc
 8000900:	20000330 	.word	0x20000330

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_TIM8_Init+0xac>)
 8000948:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_TIM8_Init+0xb0>)
 800094a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_TIM8_Init+0xac>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <MX_TIM8_Init+0xac>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_TIM8_Init+0xac>)
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_TIM8_Init+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_TIM8_Init+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_TIM8_Init+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000972:	4818      	ldr	r0, [pc, #96]	@ (80009d4 <MX_TIM8_Init+0xac>)
 8000974:	f001 fcb0 	bl	80022d8 <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800097e:	f7ff ff28 	bl	80007d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000986:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <MX_TIM8_Init+0xac>)
 800099c:	f001 fd64 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80009a6:	f7ff ff14 	bl	80007d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <MX_TIM8_Init+0xac>)
 80009bc:	f001 ffba 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80009c6:	f7ff ff04 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000100 	.word	0x20000100
 80009d8:	40013400 	.word	0x40013400

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <HAL_TIM_Base_MspInit+0x7c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d127      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a02:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_TIM_Base_MspInit+0x80>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_TIM_Base_MspInit+0x84>)
 8000a4a:	f000 fa57 	bl	8000efc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40013400 	.word	0x40013400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400

08000a64 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a6a:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <MX_LPUART1_UART_Init+0x8c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a70:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a72:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a88:	220c      	movs	r2, #12
 8000a8a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000aa6:	f001 ffdb 	bl	8002a60 <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000ab0:	f7ff fe8f 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000ab8:	f002 fe04 	bl	80036c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000ac2:	f7ff fe86 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000aca:	f002 fe39 	bl	8003740 <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000ad4:	f7ff fe7d 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_LPUART1_UART_Init+0x88>)
 8000ada:	f002 fdba 	bl	8003652 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000ae4:	f7ff fe75 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000014c 	.word	0x2000014c
 8000af0:	40008000 	.word	0x40008000
 8000af4:	00033324 	.word	0x00033324

08000af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	@ 0x78
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2254      	movs	r2, #84	@ 0x54
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 febf 	bl	800389c <memset>
  if(uartHandle->Instance==LPUART1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d136      	bne.n	8000b96 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f981 	bl	8001e3c <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f7ff fe47 	bl	80007d2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b48:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b74:	230c      	movs	r3, #12
 8000b76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b84:	230c      	movs	r3, #12
 8000b86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f000 f9b3 	bl	8000efc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3778      	adds	r7, #120	@ 0x78
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40008000 	.word	0x40008000
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff feaa 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f002 fe6f 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fd7d 	bl	80006d8 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bec:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8000bf0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bf4:	2000032c 	.word	0x2000032c

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>

08000bfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f939 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f80e 	bl	8000c2c <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	e001      	b.n	8000c20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c1c:	f7ff fde0 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c20:	79fb      	ldrb	r3, [r7, #7]

}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_InitTick+0x68>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d022      	beq.n	8000c86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_InitTick+0x6c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <HAL_InitTick+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f944 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10f      	bne.n	8000c80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	d809      	bhi.n	8000c7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c66:	2200      	movs	r2, #0
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c6e:	f000 f910 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_InitTick+0x70>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e007      	b.n	8000c8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e004      	b.n	8000c8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e001      	b.n	8000c8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a03      	ldr	r2, [pc, #12]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000cb0:	6013      	str	r3, [r2, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	200001e0 	.word	0x200001e0
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200001e0 	.word	0x200001e0

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff40 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff90 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5f 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff33 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa4 	bl	8000e38 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f0a:	e15a      	b.n	80011c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 814c 	beq.w	80011bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80a6 	beq.w	80011bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b5b      	ldr	r3, [pc, #364]	@ (80011e0 <HAL_GPIO_Init+0x2e4>)
 8001072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001074:	4a5a      	ldr	r2, [pc, #360]	@ (80011e0 <HAL_GPIO_Init+0x2e4>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6613      	str	r3, [r2, #96]	@ 0x60
 800107c:	4b58      	ldr	r3, [pc, #352]	@ (80011e0 <HAL_GPIO_Init+0x2e4>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001088:	4a56      	ldr	r2, [pc, #344]	@ (80011e4 <HAL_GPIO_Init+0x2e8>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010b2:	d01f      	beq.n	80010f4 <HAL_GPIO_Init+0x1f8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x2ec>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d019      	beq.n	80010f0 <HAL_GPIO_Init+0x1f4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_GPIO_Init+0x2f0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_Init+0x1f0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x2f4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d00d      	beq.n	80010e8 <HAL_GPIO_Init+0x1ec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a49      	ldr	r2, [pc, #292]	@ (80011f4 <HAL_GPIO_Init+0x2f8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x1e8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a48      	ldr	r2, [pc, #288]	@ (80011f8 <HAL_GPIO_Init+0x2fc>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010dc:	2305      	movs	r3, #5
 80010de:	e00a      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010e0:	2306      	movs	r3, #6
 80010e2:	e008      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1fa>
 80010f4:	2300      	movs	r3, #0
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001106:	4937      	ldr	r1, [pc, #220]	@ (80011e4 <HAL_GPIO_Init+0x2e8>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001114:	4b39      	ldr	r3, [pc, #228]	@ (80011fc <HAL_GPIO_Init+0x300>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001138:	4a30      	ldr	r2, [pc, #192]	@ (80011fc <HAL_GPIO_Init+0x300>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113e:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_GPIO_Init+0x300>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001162:	4a26      	ldr	r2, [pc, #152]	@ (80011fc <HAL_GPIO_Init+0x300>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_GPIO_Init+0x300>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_GPIO_Init+0x300>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_GPIO_Init+0x300>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <HAL_GPIO_Init+0x300>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f47f ae9d 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	48001000 	.word	0x48001000
 80011f8:	48001400 	.word	0x48001400
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800121c:	e002      	b.n	8001224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f806 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d141      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001286:	4b4b      	ldr	r3, [pc, #300]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d131      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001294:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800129a:	4a46      	ldr	r2, [pc, #280]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a4:	4b43      	ldr	r3, [pc, #268]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ac:	4a41      	ldr	r2, [pc, #260]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b4:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2232      	movs	r2, #50	@ 0x32
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a3f      	ldr	r2, [pc, #252]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ca:	e002      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d2:	4b38      	ldr	r3, [pc, #224]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012de:	d102      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f2      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e6:	4b33      	ldr	r3, [pc, #204]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f2:	d158      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e057      	b.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f8:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fe:	4a2d      	ldr	r2, [pc, #180]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001308:	e04d      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001310:	d141      	bne.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131e:	d131      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001326:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001338:	4a1e      	ldr	r2, [pc, #120]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2232      	movs	r2, #50	@ 0x32
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001356:	e002      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3b01      	subs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136a:	d102      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f2      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137e:	d112      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e011      	b.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001394:	e007      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40007000 	.word	0x40007000
 80013b8:	20000000 	.word	0x20000000
 80013bc:	431bde83 	.word	0x431bde83

080013c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ce:	6093      	str	r3, [r2, #8]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e2fe      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4b97      	ldr	r3, [pc, #604]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	4b94      	ldr	r3, [pc, #592]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d102      	bne.n	800141e <HAL_RCC_OscConfig+0x3e>
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d002      	beq.n	8001424 <HAL_RCC_OscConfig+0x44>
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b8d      	ldr	r3, [pc, #564]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d05b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2d9      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x74>
 8001446:	4b85      	ldr	r3, [pc, #532]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a84      	ldr	r2, [pc, #528]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7b      	ldr	r2, [pc, #492]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001478:	4b78      	ldr	r3, [pc, #480]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a77      	ldr	r2, [pc, #476]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b75      	ldr	r3, [pc, #468]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a74      	ldr	r2, [pc, #464]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc14 	bl	8000cc4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc10 	bl	8000cc4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e29e      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4b6a      	ldr	r3, [pc, #424]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc00 	bl	8000cc4 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbfc 	bl	8000cc4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	@ 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e28a      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	4b60      	ldr	r3, [pc, #384]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f6:	4b59      	ldr	r3, [pc, #356]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001500:	4b56      	ldr	r3, [pc, #344]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d102      	bne.n	8001516 <HAL_RCC_OscConfig+0x136>
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d002      	beq.n	800151c <HAL_RCC_OscConfig+0x13c>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d11f      	bne.n	800155c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151c:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_OscConfig+0x154>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e25d      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	4946      	ldr	r1, [pc, #280]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <HAL_RCC_OscConfig+0x280>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fb6d 	bl	8000c2c <HAL_InitTick>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d043      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e249      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a3c      	ldr	r2, [pc, #240]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fba8 	bl	8000cc4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fba4 	bl	8000cc4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e232      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	492d      	ldr	r1, [pc, #180]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e01a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2a      	ldr	r2, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb84 	bl	8000cc4 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fb80 	bl	8000cc4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e20e      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1e0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d041      	beq.n	8001672 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01c      	beq.n	8001630 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fc:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fb5d 	bl	8000cc4 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fb59 	bl	8000cc4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1e7      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ef      	beq.n	800160e <HAL_RCC_OscConfig+0x22e>
 800162e:	e020      	b.n	8001672 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_RCC_OscConfig+0x27c>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fb40 	bl	8000cc4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001646:	e00d      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fb3c 	bl	8000cc4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d906      	bls.n	8001664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ca      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	4b8c      	ldr	r3, [pc, #560]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ea      	bne.n	8001648 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80a6 	beq.w	80017cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001684:	4b84      	ldr	r3, [pc, #528]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x2b4>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x2b6>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b7f      	ldr	r3, [pc, #508]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	4a7e      	ldr	r2, [pc, #504]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4b79      	ldr	r3, [pc, #484]	@ (800189c <HAL_RCC_OscConfig+0x4bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c2:	4b76      	ldr	r3, [pc, #472]	@ (800189c <HAL_RCC_OscConfig+0x4bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a75      	ldr	r2, [pc, #468]	@ (800189c <HAL_RCC_OscConfig+0x4bc>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff faf9 	bl	8000cc4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff faf5 	bl	8000cc4 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e183      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e8:	4b6c      	ldr	r3, [pc, #432]	@ (800189c <HAL_RCC_OscConfig+0x4bc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_RCC_OscConfig+0x32e>
 80016fc:	4b66      	ldr	r3, [pc, #408]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001702:	4a65      	ldr	r2, [pc, #404]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800170c:	e024      	b.n	8001758 <HAL_RCC_OscConfig+0x378>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d110      	bne.n	8001738 <HAL_RCC_OscConfig+0x358>
 8001716:	4b60      	ldr	r3, [pc, #384]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	4a5e      	ldr	r2, [pc, #376]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001726:	4b5c      	ldr	r3, [pc, #368]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172c:	4a5a      	ldr	r2, [pc, #360]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001736:	e00f      	b.n	8001758 <HAL_RCC_OscConfig+0x378>
 8001738:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174e:	4a52      	ldr	r2, [pc, #328]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d016      	beq.n	800178e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fab0 	bl	8000cc4 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff faac 	bl	8000cc4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e138      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ed      	beq.n	8001768 <HAL_RCC_OscConfig+0x388>
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fa99 	bl	8000cc4 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fa95 	bl	8000cc4 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e121      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ed      	bne.n	8001796 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d03c      	beq.n	8001852 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01c      	beq.n	800181a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa68 	bl	8000cc4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f8:	f7ff fa64 	bl	8000cc4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0f2      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800180c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ef      	beq.n	80017f8 <HAL_RCC_OscConfig+0x418>
 8001818:	e01b      	b.n	8001852 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001820:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fa4b 	bl	8000cc4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001832:	f7ff fa47 	bl	8000cc4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0d5      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ef      	bne.n	8001832 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80c9 	beq.w	80019ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b0c      	cmp	r3, #12
 8001866:	f000 8083 	beq.w	8001970 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d15e      	bne.n	8001930 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fa21 	bl	8000cc4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	e00c      	b.n	80018a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fa1d 	bl	8000cc4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d905      	bls.n	80018a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0ab      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	4b55      	ldr	r3, [pc, #340]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ec      	bne.n	8001886 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_RCC_OscConfig+0x61c>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6a11      	ldr	r1, [r2, #32]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018bc:	3a01      	subs	r2, #1
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	4311      	orrs	r1, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018c6:	0212      	lsls	r2, r2, #8
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ce:	0852      	lsrs	r2, r2, #1
 80018d0:	3a01      	subs	r2, #1
 80018d2:	0552      	lsls	r2, r2, #21
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018da:	0852      	lsrs	r2, r2, #1
 80018dc:	3a01      	subs	r2, #1
 80018de:	0652      	lsls	r2, r2, #25
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018e6:	06d2      	lsls	r2, r2, #27
 80018e8:	430a      	orrs	r2, r1
 80018ea:	4943      	ldr	r1, [pc, #268]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a40      	ldr	r2, [pc, #256]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018fc:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a3d      	ldr	r2, [pc, #244]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001906:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f9dc 	bl	8000cc4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f9d8 	bl	8000cc4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e066      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x530>
 800192e:	e05e      	b.n	80019ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a30      	ldr	r2, [pc, #192]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f9c2 	bl	8000cc4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f9be 	bl	8000cc4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04c      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4924      	ldr	r1, [pc, #144]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <HAL_RCC_OscConfig+0x620>)
 800196a:	4013      	ands	r3, r2
 800196c:	60cb      	str	r3, [r1, #12]
 800196e:	e03e      	b.n	80019ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e039      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <HAL_RCC_OscConfig+0x618>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d12c      	bne.n	80019ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	3b01      	subs	r3, #1
 800199c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d123      	bne.n	80019ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11b      	bne.n	80019ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d113      	bne.n	80019ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	019f800c 	.word	0x019f800c
 8001a00:	feeefffc 	.word	0xfeeefffc

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e11e      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b91      	ldr	r3, [pc, #580]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b8e      	ldr	r3, [pc, #568]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	498c      	ldr	r1, [pc, #560]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e106      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d073      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d129      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a60:	4b81      	ldr	r3, [pc, #516]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0f4      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a70:	f000 f99e 	bl	8001db0 <RCC_GetSysClockFreqFromPLLSource>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4a7c      	ldr	r2, [pc, #496]	@ (8001c6c <HAL_RCC_ClockConfig+0x268>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d93f      	bls.n	8001afe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d033      	beq.n	8001afe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d12f      	bne.n	8001afe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a9e:	4b72      	ldr	r3, [pc, #456]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aa6:	4a70      	ldr	r2, [pc, #448]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e024      	b.n	8001afe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0c6      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b66      	ldr	r3, [pc, #408]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0be      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001adc:	f000 f8ce 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4a61      	ldr	r2, [pc, #388]	@ (8001c6c <HAL_RCC_ClockConfig+0x268>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d909      	bls.n	8001afe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aea:	4b5f      	ldr	r3, [pc, #380]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001af2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4957      	ldr	r1, [pc, #348]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b10:	f7ff f8d8 	bl	8000cc4 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff f8d4 	bl	8000cc4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e095      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a42      	ldr	r2, [pc, #264]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b70:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b78:	4a3b      	ldr	r2, [pc, #236]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4936      	ldr	r1, [pc, #216]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b80      	cmp	r3, #128	@ 0x80
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b9a:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001ba0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ba4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d21d      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 020f 	bic.w	r2, r3, #15
 8001bbc:	4929      	ldr	r1, [pc, #164]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff f87e 	bl	8000cc4 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7ff f87a 	bl	8000cc4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e03b      	b.n	8001c5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ed      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4917      	ldr	r1, [pc, #92]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490f      	ldr	r1, [pc, #60]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2e:	f000 f825 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <HAL_RCC_ClockConfig+0x26c>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x270>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_RCC_ClockConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe ffea 	bl	8000c2c <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	04c4b400 	.word	0x04c4b400
 8001c70:	080041c0 	.word	0x080041c0
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c82:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	e047      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e03e      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ca6:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d136      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cda:	68d2      	ldr	r2, [r2, #12]
 8001cdc:	0a12      	lsrs	r2, r2, #8
 8001cde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
      break;
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cea:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf4:	68d2      	ldr	r2, [r2, #12]
 8001cf6:	0a12      	lsrs	r2, r2, #8
 8001cf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
      break;
 8001d02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0e5b      	lsrs	r3, r3, #25
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e001      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d24:	693b      	ldr	r3, [r7, #16]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	016e3600 	.word	0x016e3600

08001d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d5c:	f7ff fff0 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080041d0 	.word	0x080041d0

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d88:	f7ff ffda 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4904      	ldr	r1, [pc, #16]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080041d0 	.word	0x080041d0

08001db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d10c      	bne.n	8001dee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd4:	4a17      	ldr	r2, [pc, #92]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	0a12      	lsrs	r2, r2, #8
 8001de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
    break;
 8001dec:	e00c      	b.n	8001e08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df8:	68d2      	ldr	r2, [r2, #12]
 8001dfa:	0a12      	lsrs	r2, r2, #8
 8001dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    break;
 8001e06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0e5b      	lsrs	r3, r3, #25
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	016e3600 	.word	0x016e3600
 8001e38:	00f42400 	.word	0x00f42400

08001e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e44:	2300      	movs	r3, #0
 8001e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8098 	beq.w	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b40      	ldr	r3, [pc, #256]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e76:	4b3d      	ldr	r3, [pc, #244]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e86:	4b3a      	ldr	r3, [pc, #232]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a39      	ldr	r2, [pc, #228]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e92:	f7fe ff17 	bl	8000cc4 <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e98:	e009      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7fe ff13 	bl	8000cc4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d902      	bls.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	74fb      	strb	r3, [r7, #19]
        break;
 8001eac:	e005      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eae:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ef      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eba:	7cfb      	ldrb	r3, [r7, #19]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d159      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d019      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f08:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fed3 	bl	8000cc4 <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f20:	e00b      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7fe fecf 	bl	8000cc4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d902      	bls.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	74fb      	strb	r3, [r7, #19]
            break;
 8001f38:	e006      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ec      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5c:	4903      	ldr	r1, [pc, #12]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f64:	e008      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	74bb      	strb	r3, [r7, #18]
 8001f6a:	e005      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f78:	7c7b      	ldrb	r3, [r7, #17]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4ba7      	ldr	r3, [pc, #668]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	4aa6      	ldr	r2, [pc, #664]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f96:	4ba1      	ldr	r3, [pc, #644]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9c:	f023 0203 	bic.w	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	499d      	ldr	r1, [pc, #628]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb8:	4b98      	ldr	r3, [pc, #608]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbe:	f023 020c 	bic.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4995      	ldr	r1, [pc, #596]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fda:	4b90      	ldr	r3, [pc, #576]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	498c      	ldr	r1, [pc, #560]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ffc:	4b87      	ldr	r3, [pc, #540]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	4984      	ldr	r1, [pc, #528]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800201e:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	497b      	ldr	r1, [pc, #492]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002040:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4973      	ldr	r1, [pc, #460]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002062:	4b6e      	ldr	r3, [pc, #440]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002068:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	496a      	ldr	r1, [pc, #424]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002084:	4b65      	ldr	r3, [pc, #404]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4962      	ldr	r1, [pc, #392]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a6:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	4959      	ldr	r1, [pc, #356]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020c8:	4b54      	ldr	r3, [pc, #336]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	4951      	ldr	r1, [pc, #324]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ea:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	4948      	ldr	r1, [pc, #288]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800210c:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4940      	ldr	r1, [pc, #256]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800212a:	d105      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212c:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a3a      	ldr	r2, [pc, #232]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002136:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002140:	2b00      	cmp	r3, #0
 8002142:	d015      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002144:	4b35      	ldr	r3, [pc, #212]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002152:	4932      	ldr	r1, [pc, #200]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a2c      	ldr	r2, [pc, #176]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800216e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800217c:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218a:	4924      	ldr	r1, [pc, #144]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219a:	d105      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c2:	4916      	ldr	r1, [pc, #88]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a10      	ldr	r2, [pc, #64]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d019      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800220a:	d109      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a02      	ldr	r2, [pc, #8]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
 8002218:	e002      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800222c:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	4926      	ldr	r1, [pc, #152]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800224a:	d105      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800224c:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a20      	ldr	r2, [pc, #128]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	4918      	ldr	r1, [pc, #96]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800229c:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e049      	b.n	800237e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fb6c 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 f9bc 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d001      	beq.n	80023a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e04c      	b.n	800243a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <HAL_TIM_Base_Start+0xc0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d022      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ba:	d01d      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <HAL_TIM_Base_Start+0xc4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_TIM_Base_Start+0xc8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002454 <HAL_TIM_Base_Start+0xcc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00e      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_TIM_Base_Start+0xd0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <HAL_TIM_Base_Start+0xd4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_TIM_Base_Start+0x70>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_TIM_Base_Start+0xd8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d115      	bne.n	8002424 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_TIM_Base_Start+0xdc>)
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b06      	cmp	r3, #6
 8002408:	d015      	beq.n	8002436 <HAL_TIM_Base_Start+0xae>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002410:	d011      	beq.n	8002436 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002422:	e008      	b.n	8002436 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e000      	b.n	8002438 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40000c00 	.word	0x40000c00
 8002458:	40013400 	.word	0x40013400
 800245c:	40014000 	.word	0x40014000
 8002460:	40015000 	.word	0x40015000
 8002464:	00010007 	.word	0x00010007

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_TIM_ConfigClockSource+0x1c>
 8002480:	2302      	movs	r3, #2
 8002482:	e0f6      	b.n	8002672 <HAL_TIM_ConfigClockSource+0x20a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80024a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6f      	ldr	r2, [pc, #444]	@ (800267c <HAL_TIM_ConfigClockSource+0x214>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	f000 80c1 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 80024c4:	4a6d      	ldr	r2, [pc, #436]	@ (800267c <HAL_TIM_ConfigClockSource+0x214>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f200 80c6 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 80024cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002680 <HAL_TIM_ConfigClockSource+0x218>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f000 80b9 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 80024d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002680 <HAL_TIM_ConfigClockSource+0x218>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f200 80be 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 80024dc:	4a69      	ldr	r2, [pc, #420]	@ (8002684 <HAL_TIM_ConfigClockSource+0x21c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f000 80b1 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 80024e4:	4a67      	ldr	r2, [pc, #412]	@ (8002684 <HAL_TIM_ConfigClockSource+0x21c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	f200 80b6 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 80024ec:	4a66      	ldr	r2, [pc, #408]	@ (8002688 <HAL_TIM_ConfigClockSource+0x220>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	f000 80a9 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 80024f4:	4a64      	ldr	r2, [pc, #400]	@ (8002688 <HAL_TIM_ConfigClockSource+0x220>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	f200 80ae 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 80024fc:	4a63      	ldr	r2, [pc, #396]	@ (800268c <HAL_TIM_ConfigClockSource+0x224>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f000 80a1 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002504:	4a61      	ldr	r2, [pc, #388]	@ (800268c <HAL_TIM_ConfigClockSource+0x224>)
 8002506:	4293      	cmp	r3, r2
 8002508:	f200 80a6 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 800250c:	4a60      	ldr	r2, [pc, #384]	@ (8002690 <HAL_TIM_ConfigClockSource+0x228>)
 800250e:	4293      	cmp	r3, r2
 8002510:	f000 8099 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002514:	4a5e      	ldr	r2, [pc, #376]	@ (8002690 <HAL_TIM_ConfigClockSource+0x228>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f200 809e 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 800251c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002520:	f000 8091 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002524:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002528:	f200 8096 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 800252c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002530:	f000 8089 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002538:	f200 808e 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 800253c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002540:	d03e      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002546:	f200 8087 	bhi.w	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254e:	f000 8086 	beq.w	800265e <HAL_TIM_ConfigClockSource+0x1f6>
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002556:	d87f      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002558:	2b70      	cmp	r3, #112	@ 0x70
 800255a:	d01a      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x12a>
 800255c:	2b70      	cmp	r3, #112	@ 0x70
 800255e:	d87b      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002560:	2b60      	cmp	r3, #96	@ 0x60
 8002562:	d050      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x19e>
 8002564:	2b60      	cmp	r3, #96	@ 0x60
 8002566:	d877      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002568:	2b50      	cmp	r3, #80	@ 0x50
 800256a:	d03c      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x17e>
 800256c:	2b50      	cmp	r3, #80	@ 0x50
 800256e:	d873      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002570:	2b40      	cmp	r3, #64	@ 0x40
 8002572:	d058      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x1be>
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	d86f      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002578:	2b30      	cmp	r3, #48	@ 0x30
 800257a:	d064      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 800257c:	2b30      	cmp	r3, #48	@ 0x30
 800257e:	d86b      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002580:	2b20      	cmp	r3, #32
 8002582:	d060      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002584:	2b20      	cmp	r3, #32
 8002586:	d867      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05c      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 800258c:	2b10      	cmp	r3, #16
 800258e:	d05a      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x1de>
 8002590:	e062      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025a2:	f000 f9a7 	bl	80028f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	609a      	str	r2, [r3, #8]
      break;
 80025be:	e04f      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025d0:	f000 f990 	bl	80028f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025e2:	609a      	str	r2, [r3, #8]
      break;
 80025e4:	e03c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 f902 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2150      	movs	r1, #80	@ 0x50
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f95b 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002604:	e02c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	461a      	mov	r2, r3
 8002614:	f000 f921 	bl	800285a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2160      	movs	r1, #96	@ 0x60
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f94b 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002624:	e01c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	461a      	mov	r2, r3
 8002634:	f000 f8e2 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2140      	movs	r1, #64	@ 0x40
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f93b 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002644:	e00c      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f000 f932 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002656:	e003      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e000      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800265e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	00100070 	.word	0x00100070
 8002680:	00100060 	.word	0x00100060
 8002684:	00100050 	.word	0x00100050
 8002688:	00100040 	.word	0x00100040
 800268c:	00100030 	.word	0x00100030
 8002690:	00100020 	.word	0x00100020

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a4c      	ldr	r2, [pc, #304]	@ (80027d8 <TIM_Base_SetConfig+0x144>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d017      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b2:	d013      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a49      	ldr	r2, [pc, #292]	@ (80027dc <TIM_Base_SetConfig+0x148>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00f      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a48      	ldr	r2, [pc, #288]	@ (80027e0 <TIM_Base_SetConfig+0x14c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00b      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <TIM_Base_SetConfig+0x150>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <TIM_Base_SetConfig+0x154>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_Base_SetConfig+0x48>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a45      	ldr	r2, [pc, #276]	@ (80027ec <TIM_Base_SetConfig+0x158>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a39      	ldr	r2, [pc, #228]	@ (80027d8 <TIM_Base_SetConfig+0x144>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d023      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fc:	d01f      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a36      	ldr	r2, [pc, #216]	@ (80027dc <TIM_Base_SetConfig+0x148>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01b      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a35      	ldr	r2, [pc, #212]	@ (80027e0 <TIM_Base_SetConfig+0x14c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d017      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a34      	ldr	r2, [pc, #208]	@ (80027e4 <TIM_Base_SetConfig+0x150>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a33      	ldr	r2, [pc, #204]	@ (80027e8 <TIM_Base_SetConfig+0x154>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00f      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a33      	ldr	r2, [pc, #204]	@ (80027f0 <TIM_Base_SetConfig+0x15c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00b      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a32      	ldr	r2, [pc, #200]	@ (80027f4 <TIM_Base_SetConfig+0x160>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <TIM_Base_SetConfig+0x164>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_Base_SetConfig+0xaa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2c      	ldr	r2, [pc, #176]	@ (80027ec <TIM_Base_SetConfig+0x158>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <TIM_Base_SetConfig+0x144>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <TIM_Base_SetConfig+0x110>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <TIM_Base_SetConfig+0x154>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00f      	beq.n	80027a4 <TIM_Base_SetConfig+0x110>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <TIM_Base_SetConfig+0x15c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_Base_SetConfig+0x110>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <TIM_Base_SetConfig+0x160>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x110>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <TIM_Base_SetConfig+0x164>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x110>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <TIM_Base_SetConfig+0x158>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 0201 	bic.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]
  }
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40013400 	.word	0x40013400
 80027ec:	40015000 	.word	0x40015000
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 030a 	bic.w	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285a:	b480      	push	{r7}
 800285c:	b087      	sub	sp, #28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f023 0210 	bic.w	r2, r3, #16
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	031b      	lsls	r3, r3, #12
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80028d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e074      	b.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a33      	ldr	r2, [pc, #204]	@ (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d01d      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a18      	ldr	r2, [pc, #96]	@ (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10c      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40013400 	.word	0x40013400
 8002a4c:	40015000 	.word	0x40015000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40014000 	.word	0x40014000

08002a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e042      	b.n	8002af8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe f837 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2224      	movs	r2, #36	@ 0x24
 8002a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fbb2 	bl	8003214 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8b3 	bl	8002c1c <UART_SetConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e01b      	b.n	8002af8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fc31 	bl	8003358 <UART_CheckIdleState>
 8002af6:	4603      	mov	r3, r0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d17b      	bne.n	8002c12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x26>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e074      	b.n	8002c14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	@ 0x21
 8002b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe f8c3 	bl	8000cc4 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b58:	d108      	bne.n	8002b6c <HAL_UART_Transmit+0x6c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e003      	b.n	8002b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b74:	e030      	b.n	8002bd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fc93 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e03d      	b.n	8002c14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e007      	b.n	8002bc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1c8      	bne.n	8002b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	2140      	movs	r1, #64	@ 0x40
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fc5c 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e006      	b.n	8002c14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b08c      	sub	sp, #48	@ 0x30
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4baa      	ldr	r3, [pc, #680]	@ (8002ef4 <UART_SetConfig+0x2d8>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a9f      	ldr	r2, [pc, #636]	@ (8002ef8 <UART_SetConfig+0x2dc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c84:	4313      	orrs	r3, r2
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002c92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f023 010f 	bic.w	r1, r3, #15
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a90      	ldr	r2, [pc, #576]	@ (8002efc <UART_SetConfig+0x2e0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d125      	bne.n	8002d0c <UART_SetConfig+0xf0>
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d81a      	bhi.n	8002d04 <UART_SetConfig+0xe8>
 8002cce:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd4 <UART_SetConfig+0xb8>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002cf5 	.word	0x08002cf5
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cfd 	.word	0x08002cfd
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e116      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002cec:	2302      	movs	r3, #2
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e112      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	e10e      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d02:	e10a      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d04:	2310      	movs	r3, #16
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0a:	e106      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7c      	ldr	r2, [pc, #496]	@ (8002f04 <UART_SetConfig+0x2e8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d138      	bne.n	8002d88 <UART_SetConfig+0x16c>
 8002d16:	4b7a      	ldr	r3, [pc, #488]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b0c      	cmp	r3, #12
 8002d22:	d82d      	bhi.n	8002d80 <UART_SetConfig+0x164>
 8002d24:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <UART_SetConfig+0x110>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d81 	.word	0x08002d81
 8002d38:	08002d81 	.word	0x08002d81
 8002d3c:	08002d71 	.word	0x08002d71
 8002d40:	08002d81 	.word	0x08002d81
 8002d44:	08002d81 	.word	0x08002d81
 8002d48:	08002d81 	.word	0x08002d81
 8002d4c:	08002d69 	.word	0x08002d69
 8002d50:	08002d81 	.word	0x08002d81
 8002d54:	08002d81 	.word	0x08002d81
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	08002d79 	.word	0x08002d79
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d66:	e0d8      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6e:	e0d4      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d70:	2304      	movs	r3, #4
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d76:	e0d0      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7e:	e0cc      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d80:	2310      	movs	r3, #16
 8002d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	e0c8      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002f08 <UART_SetConfig+0x2ec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d125      	bne.n	8002dde <UART_SetConfig+0x1c2>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d9c:	2b30      	cmp	r3, #48	@ 0x30
 8002d9e:	d016      	beq.n	8002dce <UART_SetConfig+0x1b2>
 8002da0:	2b30      	cmp	r3, #48	@ 0x30
 8002da2:	d818      	bhi.n	8002dd6 <UART_SetConfig+0x1ba>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d00a      	beq.n	8002dbe <UART_SetConfig+0x1a2>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d814      	bhi.n	8002dd6 <UART_SetConfig+0x1ba>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <UART_SetConfig+0x19a>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d008      	beq.n	8002dc6 <UART_SetConfig+0x1aa>
 8002db4:	e00f      	b.n	8002dd6 <UART_SetConfig+0x1ba>
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dbc:	e0ad      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc4:	e0a9      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dcc:	e0a5      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd4:	e0a1      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ddc:	e09d      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f0c <UART_SetConfig+0x2f0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d125      	bne.n	8002e34 <UART_SetConfig+0x218>
 8002de8:	4b45      	ldr	r3, [pc, #276]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002df4:	d016      	beq.n	8002e24 <UART_SetConfig+0x208>
 8002df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002df8:	d818      	bhi.n	8002e2c <UART_SetConfig+0x210>
 8002dfa:	2b80      	cmp	r3, #128	@ 0x80
 8002dfc:	d00a      	beq.n	8002e14 <UART_SetConfig+0x1f8>
 8002dfe:	2b80      	cmp	r3, #128	@ 0x80
 8002e00:	d814      	bhi.n	8002e2c <UART_SetConfig+0x210>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <UART_SetConfig+0x1f0>
 8002e06:	2b40      	cmp	r3, #64	@ 0x40
 8002e08:	d008      	beq.n	8002e1c <UART_SetConfig+0x200>
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x210>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e082      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e07e      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e07a      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	e076      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e072      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a35      	ldr	r2, [pc, #212]	@ (8002f10 <UART_SetConfig+0x2f4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12a      	bne.n	8002e94 <UART_SetConfig+0x278>
 8002e3e:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e4c:	d01a      	beq.n	8002e84 <UART_SetConfig+0x268>
 8002e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e52:	d81b      	bhi.n	8002e8c <UART_SetConfig+0x270>
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d00c      	beq.n	8002e74 <UART_SetConfig+0x258>
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5e:	d815      	bhi.n	8002e8c <UART_SetConfig+0x270>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <UART_SetConfig+0x250>
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e68:	d008      	beq.n	8002e7c <UART_SetConfig+0x260>
 8002e6a:	e00f      	b.n	8002e8c <UART_SetConfig+0x270>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e72:	e052      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7a:	e04e      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e82:	e04a      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e84:	2308      	movs	r3, #8
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8a:	e046      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e92:	e042      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <UART_SetConfig+0x2dc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d13a      	bne.n	8002f14 <UART_SetConfig+0x2f8>
 8002e9e:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <UART_SetConfig+0x2e4>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ea8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eac:	d01a      	beq.n	8002ee4 <UART_SetConfig+0x2c8>
 8002eae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eb2:	d81b      	bhi.n	8002eec <UART_SetConfig+0x2d0>
 8002eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb8:	d00c      	beq.n	8002ed4 <UART_SetConfig+0x2b8>
 8002eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ebe:	d815      	bhi.n	8002eec <UART_SetConfig+0x2d0>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <UART_SetConfig+0x2b0>
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec8:	d008      	beq.n	8002edc <UART_SetConfig+0x2c0>
 8002eca:	e00f      	b.n	8002eec <UART_SetConfig+0x2d0>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed2:	e022      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eda:	e01e      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002edc:	2304      	movs	r3, #4
 8002ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee2:	e01a      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eea:	e016      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002eec:	2310      	movs	r3, #16
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef2:	e012      	b.n	8002f1a <UART_SetConfig+0x2fe>
 8002ef4:	cfff69f3 	.word	0xcfff69f3
 8002ef8:	40008000 	.word	0x40008000
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40004400 	.word	0x40004400
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40004c00 	.word	0x40004c00
 8002f10:	40005000 	.word	0x40005000
 8002f14:	2310      	movs	r3, #16
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4aae      	ldr	r2, [pc, #696]	@ (80031d8 <UART_SetConfig+0x5bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8097 	bne.w	8003054 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d823      	bhi.n	8002f76 <UART_SetConfig+0x35a>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <UART_SetConfig+0x318>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f77 	.word	0x08002f77
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f77 	.word	0x08002f77
 8002f44:	08002f67 	.word	0x08002f67
 8002f48:	08002f77 	.word	0x08002f77
 8002f4c:	08002f77 	.word	0x08002f77
 8002f50:	08002f77 	.word	0x08002f77
 8002f54:	08002f6f 	.word	0x08002f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7fe fefe 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f5e:	e010      	b.n	8002f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f60:	4b9e      	ldr	r3, [pc, #632]	@ (80031dc <UART_SetConfig+0x5c0>)
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f64:	e00d      	b.n	8002f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f66:	f7fe fe89 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8002f6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f6c:	e009      	b.n	8002f82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f74:	e005      	b.n	8002f82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8130 	beq.w	80031ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	4a94      	ldr	r2, [pc, #592]	@ (80031e0 <UART_SetConfig+0x5c4>)
 8002f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f94:	461a      	mov	r2, r3
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d305      	bcc.n	8002fba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d903      	bls.n	8002fc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fc0:	e113      	b.n	80031ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	60fa      	str	r2, [r7, #12]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	4a84      	ldr	r2, [pc, #528]	@ (80031e0 <UART_SetConfig+0x5c4>)
 8002fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fe4:	f7fd f974 	bl	80002d0 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	020b      	lsls	r3, r1, #8
 8002ffa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ffe:	0202      	lsls	r2, r0, #8
 8003000:	6979      	ldr	r1, [r7, #20]
 8003002:	6849      	ldr	r1, [r1, #4]
 8003004:	0849      	lsrs	r1, r1, #1
 8003006:	2000      	movs	r0, #0
 8003008:	460c      	mov	r4, r1
 800300a:	4605      	mov	r5, r0
 800300c:	eb12 0804 	adds.w	r8, r2, r4
 8003010:	eb43 0905 	adc.w	r9, r3, r5
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	469a      	mov	sl, r3
 800301c:	4693      	mov	fp, r2
 800301e:	4652      	mov	r2, sl
 8003020:	465b      	mov	r3, fp
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	f7fd f953 	bl	80002d0 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4613      	mov	r3, r2
 8003030:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003038:	d308      	bcc.n	800304c <UART_SetConfig+0x430>
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003040:	d204      	bcs.n	800304c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a3a      	ldr	r2, [r7, #32]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e0ce      	b.n	80031ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003052:	e0ca      	b.n	80031ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305c:	d166      	bne.n	800312c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800305e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003062:	2b08      	cmp	r3, #8
 8003064:	d827      	bhi.n	80030b6 <UART_SetConfig+0x49a>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x450>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7fe fe62 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8003094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003096:	e014      	b.n	80030c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7fe fe74 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 800309c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800309e:	e010      	b.n	80030c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b4e      	ldr	r3, [pc, #312]	@ (80031dc <UART_SetConfig+0x5c0>)
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030a4:	e00d      	b.n	80030c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7fe fde9 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80030aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ac:	e009      	b.n	80030c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030b4:	e005      	b.n	80030c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8090 	beq.w	80031ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	4a44      	ldr	r2, [pc, #272]	@ (80031e0 <UART_SetConfig+0x5c4>)
 80030d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d4:	461a      	mov	r2, r3
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030dc:	005a      	lsls	r2, r3, #1
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	441a      	add	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d916      	bls.n	8003124 <UART_SetConfig+0x508>
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fc:	d212      	bcs.n	8003124 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f023 030f 	bic.w	r3, r3, #15
 8003106:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	b29a      	uxth	r2, r3
 8003114:	8bfb      	ldrh	r3, [r7, #30]
 8003116:	4313      	orrs	r3, r2
 8003118:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	8bfa      	ldrh	r2, [r7, #30]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e062      	b.n	80031ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800312a:	e05e      	b.n	80031ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800312c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003130:	2b08      	cmp	r3, #8
 8003132:	d828      	bhi.n	8003186 <UART_SetConfig+0x56a>
 8003134:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <UART_SetConfig+0x520>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003161 	.word	0x08003161
 8003140:	08003169 	.word	0x08003169
 8003144:	08003171 	.word	0x08003171
 8003148:	08003187 	.word	0x08003187
 800314c:	08003177 	.word	0x08003177
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
 800315c:	0800317f 	.word	0x0800317f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7fe fdfa 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003166:	e014      	b.n	8003192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7fe fe0c 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800316e:	e010      	b.n	8003192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003170:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <UART_SetConfig+0x5c0>)
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003174:	e00d      	b.n	8003192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003176:	f7fe fd81 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 800317a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800317c:	e009      	b.n	8003192 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003184:	e005      	b.n	8003192 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003190:	bf00      	nop
    }

    if (pclk != 0U)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d028      	beq.n	80031ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	4a10      	ldr	r2, [pc, #64]	@ (80031e0 <UART_SetConfig+0x5c4>)
 800319e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	441a      	add	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	d910      	bls.n	80031e4 <UART_SetConfig+0x5c8>
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c8:	d20c      	bcs.n	80031e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	e009      	b.n	80031ea <UART_SetConfig+0x5ce>
 80031d6:	bf00      	nop
 80031d8:	40008000 	.word	0x40008000
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	080041d8 	.word	0x080041d8
      }
      else
      {
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003206:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800320a:	4618      	mov	r0, r3
 800320c:	3730      	adds	r7, #48	@ 0x30
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01a      	beq.n	800332a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003312:	d10a      	bne.n	800332a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b098      	sub	sp, #96	@ 0x60
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003368:	f7fd fcac 	bl	8000cc4 <HAL_GetTick>
 800336c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d12f      	bne.n	80033dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f88e 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d022      	beq.n	80033dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e6      	bne.n	8003396 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e063      	b.n	80034a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d149      	bne.n	800347e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f2:	2200      	movs	r2, #0
 80033f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f857 	bl	80034ac <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03c      	beq.n	800347e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	623b      	str	r3, [r7, #32]
   return(result);
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
 8003424:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e6      	bne.n	8003404 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3308      	adds	r3, #8
 800343c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	60fb      	str	r3, [r7, #12]
   return(result);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3308      	adds	r3, #8
 8003454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003456:	61fa      	str	r2, [r7, #28]
 8003458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	617b      	str	r3, [r7, #20]
   return(result);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e5      	bne.n	8003436 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e012      	b.n	80034a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3758      	adds	r7, #88	@ 0x58
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034bc:	e04f      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034c4:	d04b      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fd fbfd 	bl	8000cc4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <UART_WaitOnFlagUntilTimeout+0x30>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e04e      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d037      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b80      	cmp	r3, #128	@ 0x80
 80034f2:	d034      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d031      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b08      	cmp	r3, #8
 8003506:	d110      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f838 	bl	8003586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2208      	movs	r2, #8
 800351a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e029      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003538:	d111      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f81e 	bl	8003586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00f      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d0a0      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003586:	b480      	push	{r7}
 8003588:	b095      	sub	sp, #84	@ 0x54
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e6      	bne.n	800358e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e3      	bne.n	80035c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d118      	bne.n	8003632 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	60bb      	str	r3, [r7, #8]
   return(result);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 0310 	bic.w	r3, r3, #16
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	613b      	str	r3, [r7, #16]
   return(result);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003646:	bf00      	nop
 8003648:	3754      	adds	r7, #84	@ 0x54
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_UARTEx_DisableFifoMode+0x16>
 8003664:	2302      	movs	r3, #2
 8003666:	e027      	b.n	80036b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003696:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e02d      	b.n	8003738 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	@ 0x24
 80036e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f84f 	bl	80037bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e02d      	b.n	80037b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f811 	bl	80037bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037dc:	e031      	b.n	8003842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037de:	2308      	movs	r3, #8
 80037e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037e2:	2308      	movs	r3, #8
 80037e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	0e5b      	lsrs	r3, r3, #25
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	0f5b      	lsrs	r3, r3, #29
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003806:	7bbb      	ldrb	r3, [r7, #14]
 8003808:	7b3a      	ldrb	r2, [r7, #12]
 800380a:	4911      	ldr	r1, [pc, #68]	@ (8003850 <UARTEx_SetNbDataToProcess+0x94>)
 800380c:	5c8a      	ldrb	r2, [r1, r2]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003812:	7b3a      	ldrb	r2, [r7, #12]
 8003814:	490f      	ldr	r1, [pc, #60]	@ (8003854 <UARTEx_SetNbDataToProcess+0x98>)
 8003816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003818:	fb93 f3f2 	sdiv	r3, r3, r2
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	7b7a      	ldrb	r2, [r7, #13]
 8003828:	4909      	ldr	r1, [pc, #36]	@ (8003850 <UARTEx_SetNbDataToProcess+0x94>)
 800382a:	5c8a      	ldrb	r2, [r1, r2]
 800382c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003830:	7b7a      	ldrb	r2, [r7, #13]
 8003832:	4908      	ldr	r1, [pc, #32]	@ (8003854 <UARTEx_SetNbDataToProcess+0x98>)
 8003834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003836:	fb93 f3f2 	sdiv	r3, r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	080041f0 	.word	0x080041f0
 8003854:	080041f8 	.word	0x080041f8

08003858 <siprintf>:
 8003858:	b40e      	push	{r1, r2, r3}
 800385a:	b510      	push	{r4, lr}
 800385c:	b09d      	sub	sp, #116	@ 0x74
 800385e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003860:	9002      	str	r0, [sp, #8]
 8003862:	9006      	str	r0, [sp, #24]
 8003864:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003868:	480a      	ldr	r0, [pc, #40]	@ (8003894 <siprintf+0x3c>)
 800386a:	9107      	str	r1, [sp, #28]
 800386c:	9104      	str	r1, [sp, #16]
 800386e:	490a      	ldr	r1, [pc, #40]	@ (8003898 <siprintf+0x40>)
 8003870:	f853 2b04 	ldr.w	r2, [r3], #4
 8003874:	9105      	str	r1, [sp, #20]
 8003876:	2400      	movs	r4, #0
 8003878:	a902      	add	r1, sp, #8
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003880:	f000 f994 	bl	8003bac <_svfiprintf_r>
 8003884:	9b02      	ldr	r3, [sp, #8]
 8003886:	701c      	strb	r4, [r3, #0]
 8003888:	b01d      	add	sp, #116	@ 0x74
 800388a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800388e:	b003      	add	sp, #12
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	2000000c 	.word	0x2000000c
 8003898:	ffff0208 	.word	0xffff0208

0800389c <memset>:
 800389c:	4402      	add	r2, r0
 800389e:	4603      	mov	r3, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <__errno>:
 80038ac:	4b01      	ldr	r3, [pc, #4]	@ (80038b4 <__errno+0x8>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	@ (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	@ (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	@ (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	@ (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 fc64 	bl	8004198 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	0800423c 	.word	0x0800423c
 80038f4:	0800423c 	.word	0x0800423c
 80038f8:	0800423c 	.word	0x0800423c
 80038fc:	08004240 	.word	0x08004240

08003900 <__retarget_lock_acquire_recursive>:
 8003900:	4770      	bx	lr

08003902 <__retarget_lock_release_recursive>:
 8003902:	4770      	bx	lr

08003904 <_free_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4605      	mov	r5, r0
 8003908:	2900      	cmp	r1, #0
 800390a:	d041      	beq.n	8003990 <_free_r+0x8c>
 800390c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003910:	1f0c      	subs	r4, r1, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfb8      	it	lt
 8003916:	18e4      	addlt	r4, r4, r3
 8003918:	f000 f8e0 	bl	8003adc <__malloc_lock>
 800391c:	4a1d      	ldr	r2, [pc, #116]	@ (8003994 <_free_r+0x90>)
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	b933      	cbnz	r3, 8003930 <_free_r+0x2c>
 8003922:	6063      	str	r3, [r4, #4]
 8003924:	6014      	str	r4, [r2, #0]
 8003926:	4628      	mov	r0, r5
 8003928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800392c:	f000 b8dc 	b.w	8003ae8 <__malloc_unlock>
 8003930:	42a3      	cmp	r3, r4
 8003932:	d908      	bls.n	8003946 <_free_r+0x42>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	1821      	adds	r1, r4, r0
 8003938:	428b      	cmp	r3, r1
 800393a:	bf01      	itttt	eq
 800393c:	6819      	ldreq	r1, [r3, #0]
 800393e:	685b      	ldreq	r3, [r3, #4]
 8003940:	1809      	addeq	r1, r1, r0
 8003942:	6021      	streq	r1, [r4, #0]
 8003944:	e7ed      	b.n	8003922 <_free_r+0x1e>
 8003946:	461a      	mov	r2, r3
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b10b      	cbz	r3, 8003950 <_free_r+0x4c>
 800394c:	42a3      	cmp	r3, r4
 800394e:	d9fa      	bls.n	8003946 <_free_r+0x42>
 8003950:	6811      	ldr	r1, [r2, #0]
 8003952:	1850      	adds	r0, r2, r1
 8003954:	42a0      	cmp	r0, r4
 8003956:	d10b      	bne.n	8003970 <_free_r+0x6c>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	4401      	add	r1, r0
 800395c:	1850      	adds	r0, r2, r1
 800395e:	4283      	cmp	r3, r0
 8003960:	6011      	str	r1, [r2, #0]
 8003962:	d1e0      	bne.n	8003926 <_free_r+0x22>
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	4408      	add	r0, r1
 800396c:	6010      	str	r0, [r2, #0]
 800396e:	e7da      	b.n	8003926 <_free_r+0x22>
 8003970:	d902      	bls.n	8003978 <_free_r+0x74>
 8003972:	230c      	movs	r3, #12
 8003974:	602b      	str	r3, [r5, #0]
 8003976:	e7d6      	b.n	8003926 <_free_r+0x22>
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	1821      	adds	r1, r4, r0
 800397c:	428b      	cmp	r3, r1
 800397e:	bf04      	itt	eq
 8003980:	6819      	ldreq	r1, [r3, #0]
 8003982:	685b      	ldreq	r3, [r3, #4]
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	bf04      	itt	eq
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	6054      	str	r4, [r2, #4]
 800398e:	e7ca      	b.n	8003926 <_free_r+0x22>
 8003990:	bd38      	pop	{r3, r4, r5, pc}
 8003992:	bf00      	nop
 8003994:	20000328 	.word	0x20000328

08003998 <sbrk_aligned>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	4e0f      	ldr	r6, [pc, #60]	@ (80039d8 <sbrk_aligned+0x40>)
 800399c:	460c      	mov	r4, r1
 800399e:	6831      	ldr	r1, [r6, #0]
 80039a0:	4605      	mov	r5, r0
 80039a2:	b911      	cbnz	r1, 80039aa <sbrk_aligned+0x12>
 80039a4:	f000 fba4 	bl	80040f0 <_sbrk_r>
 80039a8:	6030      	str	r0, [r6, #0]
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 fb9f 	bl	80040f0 <_sbrk_r>
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d103      	bne.n	80039be <sbrk_aligned+0x26>
 80039b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039ba:	4620      	mov	r0, r4
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	1cc4      	adds	r4, r0, #3
 80039c0:	f024 0403 	bic.w	r4, r4, #3
 80039c4:	42a0      	cmp	r0, r4
 80039c6:	d0f8      	beq.n	80039ba <sbrk_aligned+0x22>
 80039c8:	1a21      	subs	r1, r4, r0
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fb90 	bl	80040f0 <_sbrk_r>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d1f2      	bne.n	80039ba <sbrk_aligned+0x22>
 80039d4:	e7ef      	b.n	80039b6 <sbrk_aligned+0x1e>
 80039d6:	bf00      	nop
 80039d8:	20000324 	.word	0x20000324

080039dc <_malloc_r>:
 80039dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e0:	1ccd      	adds	r5, r1, #3
 80039e2:	f025 0503 	bic.w	r5, r5, #3
 80039e6:	3508      	adds	r5, #8
 80039e8:	2d0c      	cmp	r5, #12
 80039ea:	bf38      	it	cc
 80039ec:	250c      	movcc	r5, #12
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	4606      	mov	r6, r0
 80039f2:	db01      	blt.n	80039f8 <_malloc_r+0x1c>
 80039f4:	42a9      	cmp	r1, r5
 80039f6:	d904      	bls.n	8003a02 <_malloc_r+0x26>
 80039f8:	230c      	movs	r3, #12
 80039fa:	6033      	str	r3, [r6, #0]
 80039fc:	2000      	movs	r0, #0
 80039fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ad8 <_malloc_r+0xfc>
 8003a06:	f000 f869 	bl	8003adc <__malloc_lock>
 8003a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a0e:	461c      	mov	r4, r3
 8003a10:	bb44      	cbnz	r4, 8003a64 <_malloc_r+0x88>
 8003a12:	4629      	mov	r1, r5
 8003a14:	4630      	mov	r0, r6
 8003a16:	f7ff ffbf 	bl	8003998 <sbrk_aligned>
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	d158      	bne.n	8003ad2 <_malloc_r+0xf6>
 8003a20:	f8d8 4000 	ldr.w	r4, [r8]
 8003a24:	4627      	mov	r7, r4
 8003a26:	2f00      	cmp	r7, #0
 8003a28:	d143      	bne.n	8003ab2 <_malloc_r+0xd6>
 8003a2a:	2c00      	cmp	r4, #0
 8003a2c:	d04b      	beq.n	8003ac6 <_malloc_r+0xea>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	4639      	mov	r1, r7
 8003a32:	4630      	mov	r0, r6
 8003a34:	eb04 0903 	add.w	r9, r4, r3
 8003a38:	f000 fb5a 	bl	80040f0 <_sbrk_r>
 8003a3c:	4581      	cmp	r9, r0
 8003a3e:	d142      	bne.n	8003ac6 <_malloc_r+0xea>
 8003a40:	6821      	ldr	r1, [r4, #0]
 8003a42:	1a6d      	subs	r5, r5, r1
 8003a44:	4629      	mov	r1, r5
 8003a46:	4630      	mov	r0, r6
 8003a48:	f7ff ffa6 	bl	8003998 <sbrk_aligned>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d03a      	beq.n	8003ac6 <_malloc_r+0xea>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	442b      	add	r3, r5
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	bb62      	cbnz	r2, 8003ab8 <_malloc_r+0xdc>
 8003a5e:	f8c8 7000 	str.w	r7, [r8]
 8003a62:	e00f      	b.n	8003a84 <_malloc_r+0xa8>
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	1b52      	subs	r2, r2, r5
 8003a68:	d420      	bmi.n	8003aac <_malloc_r+0xd0>
 8003a6a:	2a0b      	cmp	r2, #11
 8003a6c:	d917      	bls.n	8003a9e <_malloc_r+0xc2>
 8003a6e:	1961      	adds	r1, r4, r5
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	6025      	str	r5, [r4, #0]
 8003a74:	bf18      	it	ne
 8003a76:	6059      	strne	r1, [r3, #4]
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	bf08      	it	eq
 8003a7c:	f8c8 1000 	streq.w	r1, [r8]
 8003a80:	5162      	str	r2, [r4, r5]
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 f82f 	bl	8003ae8 <__malloc_unlock>
 8003a8a:	f104 000b 	add.w	r0, r4, #11
 8003a8e:	1d23      	adds	r3, r4, #4
 8003a90:	f020 0007 	bic.w	r0, r0, #7
 8003a94:	1ac2      	subs	r2, r0, r3
 8003a96:	bf1c      	itt	ne
 8003a98:	1a1b      	subne	r3, r3, r0
 8003a9a:	50a3      	strne	r3, [r4, r2]
 8003a9c:	e7af      	b.n	80039fe <_malloc_r+0x22>
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	bf0c      	ite	eq
 8003aa4:	f8c8 2000 	streq.w	r2, [r8]
 8003aa8:	605a      	strne	r2, [r3, #4]
 8003aaa:	e7eb      	b.n	8003a84 <_malloc_r+0xa8>
 8003aac:	4623      	mov	r3, r4
 8003aae:	6864      	ldr	r4, [r4, #4]
 8003ab0:	e7ae      	b.n	8003a10 <_malloc_r+0x34>
 8003ab2:	463c      	mov	r4, r7
 8003ab4:	687f      	ldr	r7, [r7, #4]
 8003ab6:	e7b6      	b.n	8003a26 <_malloc_r+0x4a>
 8003ab8:	461a      	mov	r2, r3
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	d1fb      	bne.n	8003ab8 <_malloc_r+0xdc>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6053      	str	r3, [r2, #4]
 8003ac4:	e7de      	b.n	8003a84 <_malloc_r+0xa8>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	4630      	mov	r0, r6
 8003acc:	f000 f80c 	bl	8003ae8 <__malloc_unlock>
 8003ad0:	e794      	b.n	80039fc <_malloc_r+0x20>
 8003ad2:	6005      	str	r5, [r0, #0]
 8003ad4:	e7d6      	b.n	8003a84 <_malloc_r+0xa8>
 8003ad6:	bf00      	nop
 8003ad8:	20000328 	.word	0x20000328

08003adc <__malloc_lock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	@ (8003ae4 <__malloc_lock+0x8>)
 8003ade:	f7ff bf0f 	b.w	8003900 <__retarget_lock_acquire_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20000320 	.word	0x20000320

08003ae8 <__malloc_unlock>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	@ (8003af0 <__malloc_unlock+0x8>)
 8003aea:	f7ff bf0a 	b.w	8003902 <__retarget_lock_release_recursive>
 8003aee:	bf00      	nop
 8003af0:	20000320 	.word	0x20000320

08003af4 <__ssputs_r>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	688e      	ldr	r6, [r1, #8]
 8003afa:	461f      	mov	r7, r3
 8003afc:	42be      	cmp	r6, r7
 8003afe:	680b      	ldr	r3, [r1, #0]
 8003b00:	4682      	mov	sl, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	4690      	mov	r8, r2
 8003b06:	d82d      	bhi.n	8003b64 <__ssputs_r+0x70>
 8003b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b10:	d026      	beq.n	8003b60 <__ssputs_r+0x6c>
 8003b12:	6965      	ldr	r5, [r4, #20]
 8003b14:	6909      	ldr	r1, [r1, #16]
 8003b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b1a:	eba3 0901 	sub.w	r9, r3, r1
 8003b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b22:	1c7b      	adds	r3, r7, #1
 8003b24:	444b      	add	r3, r9
 8003b26:	106d      	asrs	r5, r5, #1
 8003b28:	429d      	cmp	r5, r3
 8003b2a:	bf38      	it	cc
 8003b2c:	461d      	movcc	r5, r3
 8003b2e:	0553      	lsls	r3, r2, #21
 8003b30:	d527      	bpl.n	8003b82 <__ssputs_r+0x8e>
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7ff ff52 	bl	80039dc <_malloc_r>
 8003b38:	4606      	mov	r6, r0
 8003b3a:	b360      	cbz	r0, 8003b96 <__ssputs_r+0xa2>
 8003b3c:	6921      	ldr	r1, [r4, #16]
 8003b3e:	464a      	mov	r2, r9
 8003b40:	f000 fae6 	bl	8004110 <memcpy>
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	6126      	str	r6, [r4, #16]
 8003b52:	6165      	str	r5, [r4, #20]
 8003b54:	444e      	add	r6, r9
 8003b56:	eba5 0509 	sub.w	r5, r5, r9
 8003b5a:	6026      	str	r6, [r4, #0]
 8003b5c:	60a5      	str	r5, [r4, #8]
 8003b5e:	463e      	mov	r6, r7
 8003b60:	42be      	cmp	r6, r7
 8003b62:	d900      	bls.n	8003b66 <__ssputs_r+0x72>
 8003b64:	463e      	mov	r6, r7
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	f000 faa6 	bl	80040bc <memmove>
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	1b9b      	subs	r3, r3, r6
 8003b74:	60a3      	str	r3, [r4, #8]
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	4433      	add	r3, r6
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	462a      	mov	r2, r5
 8003b84:	f000 fad2 	bl	800412c <_realloc_r>
 8003b88:	4606      	mov	r6, r0
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d1e0      	bne.n	8003b50 <__ssputs_r+0x5c>
 8003b8e:	6921      	ldr	r1, [r4, #16]
 8003b90:	4650      	mov	r0, sl
 8003b92:	f7ff feb7 	bl	8003904 <_free_r>
 8003b96:	230c      	movs	r3, #12
 8003b98:	f8ca 3000 	str.w	r3, [sl]
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ba8:	e7e9      	b.n	8003b7e <__ssputs_r+0x8a>
	...

08003bac <_svfiprintf_r>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4698      	mov	r8, r3
 8003bb2:	898b      	ldrh	r3, [r1, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	b09d      	sub	sp, #116	@ 0x74
 8003bb8:	4607      	mov	r7, r0
 8003bba:	460d      	mov	r5, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	d510      	bpl.n	8003be2 <_svfiprintf_r+0x36>
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b973      	cbnz	r3, 8003be2 <_svfiprintf_r+0x36>
 8003bc4:	2140      	movs	r1, #64	@ 0x40
 8003bc6:	f7ff ff09 	bl	80039dc <_malloc_r>
 8003bca:	6028      	str	r0, [r5, #0]
 8003bcc:	6128      	str	r0, [r5, #16]
 8003bce:	b930      	cbnz	r0, 8003bde <_svfiprintf_r+0x32>
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bd8:	b01d      	add	sp, #116	@ 0x74
 8003bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bde:	2340      	movs	r3, #64	@ 0x40
 8003be0:	616b      	str	r3, [r5, #20]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003be6:	2320      	movs	r3, #32
 8003be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bf0:	2330      	movs	r3, #48	@ 0x30
 8003bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d90 <_svfiprintf_r+0x1e4>
 8003bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bfa:	f04f 0901 	mov.w	r9, #1
 8003bfe:	4623      	mov	r3, r4
 8003c00:	469a      	mov	sl, r3
 8003c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c06:	b10a      	cbz	r2, 8003c0c <_svfiprintf_r+0x60>
 8003c08:	2a25      	cmp	r2, #37	@ 0x25
 8003c0a:	d1f9      	bne.n	8003c00 <_svfiprintf_r+0x54>
 8003c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c10:	d00b      	beq.n	8003c2a <_svfiprintf_r+0x7e>
 8003c12:	465b      	mov	r3, fp
 8003c14:	4622      	mov	r2, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff ff6b 	bl	8003af4 <__ssputs_r>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f000 80a7 	beq.w	8003d72 <_svfiprintf_r+0x1c6>
 8003c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c26:	445a      	add	r2, fp
 8003c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 809f 	beq.w	8003d72 <_svfiprintf_r+0x1c6>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c3e:	f10a 0a01 	add.w	sl, sl, #1
 8003c42:	9304      	str	r3, [sp, #16]
 8003c44:	9307      	str	r3, [sp, #28]
 8003c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c4c:	4654      	mov	r4, sl
 8003c4e:	2205      	movs	r2, #5
 8003c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c54:	484e      	ldr	r0, [pc, #312]	@ (8003d90 <_svfiprintf_r+0x1e4>)
 8003c56:	f7fc faeb 	bl	8000230 <memchr>
 8003c5a:	9a04      	ldr	r2, [sp, #16]
 8003c5c:	b9d8      	cbnz	r0, 8003c96 <_svfiprintf_r+0xea>
 8003c5e:	06d0      	lsls	r0, r2, #27
 8003c60:	bf44      	itt	mi
 8003c62:	2320      	movmi	r3, #32
 8003c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c68:	0711      	lsls	r1, r2, #28
 8003c6a:	bf44      	itt	mi
 8003c6c:	232b      	movmi	r3, #43	@ 0x2b
 8003c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c72:	f89a 3000 	ldrb.w	r3, [sl]
 8003c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c78:	d015      	beq.n	8003ca6 <_svfiprintf_r+0xfa>
 8003c7a:	9a07      	ldr	r2, [sp, #28]
 8003c7c:	4654      	mov	r4, sl
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f04f 0c0a 	mov.w	ip, #10
 8003c84:	4621      	mov	r1, r4
 8003c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c8a:	3b30      	subs	r3, #48	@ 0x30
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	d94b      	bls.n	8003d28 <_svfiprintf_r+0x17c>
 8003c90:	b1b0      	cbz	r0, 8003cc0 <_svfiprintf_r+0x114>
 8003c92:	9207      	str	r2, [sp, #28]
 8003c94:	e014      	b.n	8003cc0 <_svfiprintf_r+0x114>
 8003c96:	eba0 0308 	sub.w	r3, r0, r8
 8003c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	9304      	str	r3, [sp, #16]
 8003ca2:	46a2      	mov	sl, r4
 8003ca4:	e7d2      	b.n	8003c4c <_svfiprintf_r+0xa0>
 8003ca6:	9b03      	ldr	r3, [sp, #12]
 8003ca8:	1d19      	adds	r1, r3, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	9103      	str	r1, [sp, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfbb      	ittet	lt
 8003cb2:	425b      	neglt	r3, r3
 8003cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb8:	9307      	strge	r3, [sp, #28]
 8003cba:	9307      	strlt	r3, [sp, #28]
 8003cbc:	bfb8      	it	lt
 8003cbe:	9204      	strlt	r2, [sp, #16]
 8003cc0:	7823      	ldrb	r3, [r4, #0]
 8003cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cc4:	d10a      	bne.n	8003cdc <_svfiprintf_r+0x130>
 8003cc6:	7863      	ldrb	r3, [r4, #1]
 8003cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cca:	d132      	bne.n	8003d32 <_svfiprintf_r+0x186>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	9203      	str	r2, [sp, #12]
 8003cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cd8:	3402      	adds	r4, #2
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003da0 <_svfiprintf_r+0x1f4>
 8003ce0:	7821      	ldrb	r1, [r4, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	f7fc faa3 	bl	8000230 <memchr>
 8003cea:	b138      	cbz	r0, 8003cfc <_svfiprintf_r+0x150>
 8003cec:	9b04      	ldr	r3, [sp, #16]
 8003cee:	eba0 000a 	sub.w	r0, r0, sl
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	4082      	lsls	r2, r0
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	3401      	adds	r4, #1
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d00:	4824      	ldr	r0, [pc, #144]	@ (8003d94 <_svfiprintf_r+0x1e8>)
 8003d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d06:	2206      	movs	r2, #6
 8003d08:	f7fc fa92 	bl	8000230 <memchr>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d036      	beq.n	8003d7e <_svfiprintf_r+0x1d2>
 8003d10:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <_svfiprintf_r+0x1ec>)
 8003d12:	bb1b      	cbnz	r3, 8003d5c <_svfiprintf_r+0x1b0>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	3307      	adds	r3, #7
 8003d18:	f023 0307 	bic.w	r3, r3, #7
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d22:	4433      	add	r3, r6
 8003d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d26:	e76a      	b.n	8003bfe <_svfiprintf_r+0x52>
 8003d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	e7a8      	b.n	8003c84 <_svfiprintf_r+0xd8>
 8003d32:	2300      	movs	r3, #0
 8003d34:	3401      	adds	r4, #1
 8003d36:	9305      	str	r3, [sp, #20]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f04f 0c0a 	mov.w	ip, #10
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d44:	3a30      	subs	r2, #48	@ 0x30
 8003d46:	2a09      	cmp	r2, #9
 8003d48:	d903      	bls.n	8003d52 <_svfiprintf_r+0x1a6>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0c6      	beq.n	8003cdc <_svfiprintf_r+0x130>
 8003d4e:	9105      	str	r1, [sp, #20]
 8003d50:	e7c4      	b.n	8003cdc <_svfiprintf_r+0x130>
 8003d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d56:	4604      	mov	r4, r0
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e7f0      	b.n	8003d3e <_svfiprintf_r+0x192>
 8003d5c:	ab03      	add	r3, sp, #12
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	462a      	mov	r2, r5
 8003d62:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <_svfiprintf_r+0x1f0>)
 8003d64:	a904      	add	r1, sp, #16
 8003d66:	4638      	mov	r0, r7
 8003d68:	f3af 8000 	nop.w
 8003d6c:	1c42      	adds	r2, r0, #1
 8003d6e:	4606      	mov	r6, r0
 8003d70:	d1d6      	bne.n	8003d20 <_svfiprintf_r+0x174>
 8003d72:	89ab      	ldrh	r3, [r5, #12]
 8003d74:	065b      	lsls	r3, r3, #25
 8003d76:	f53f af2d 	bmi.w	8003bd4 <_svfiprintf_r+0x28>
 8003d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d7c:	e72c      	b.n	8003bd8 <_svfiprintf_r+0x2c>
 8003d7e:	ab03      	add	r3, sp, #12
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	462a      	mov	r2, r5
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <_svfiprintf_r+0x1f0>)
 8003d86:	a904      	add	r1, sp, #16
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f000 f879 	bl	8003e80 <_printf_i>
 8003d8e:	e7ed      	b.n	8003d6c <_svfiprintf_r+0x1c0>
 8003d90:	08004200 	.word	0x08004200
 8003d94:	0800420a 	.word	0x0800420a
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	08003af5 	.word	0x08003af5
 8003da0:	08004206 	.word	0x08004206

08003da4 <_printf_common>:
 8003da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da8:	4616      	mov	r6, r2
 8003daa:	4698      	mov	r8, r3
 8003dac:	688a      	ldr	r2, [r1, #8]
 8003dae:	690b      	ldr	r3, [r1, #16]
 8003db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	bfb8      	it	lt
 8003db8:	4613      	movlt	r3, r2
 8003dba:	6033      	str	r3, [r6, #0]
 8003dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	b10a      	cbz	r2, 8003dca <_printf_common+0x26>
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	0699      	lsls	r1, r3, #26
 8003dce:	bf42      	ittt	mi
 8003dd0:	6833      	ldrmi	r3, [r6, #0]
 8003dd2:	3302      	addmi	r3, #2
 8003dd4:	6033      	strmi	r3, [r6, #0]
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	f015 0506 	ands.w	r5, r5, #6
 8003ddc:	d106      	bne.n	8003dec <_printf_common+0x48>
 8003dde:	f104 0a19 	add.w	sl, r4, #25
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	6832      	ldr	r2, [r6, #0]
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dc26      	bgt.n	8003e3a <_printf_common+0x96>
 8003dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	3b00      	subs	r3, #0
 8003df4:	bf18      	it	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	0692      	lsls	r2, r2, #26
 8003dfa:	d42b      	bmi.n	8003e54 <_printf_common+0xb0>
 8003dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e00:	4641      	mov	r1, r8
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c8      	blx	r9
 8003e06:	3001      	adds	r0, #1
 8003e08:	d01e      	beq.n	8003e48 <_printf_common+0xa4>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	f003 0306 	and.w	r3, r3, #6
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	bf02      	ittt	eq
 8003e16:	68e5      	ldreq	r5, [r4, #12]
 8003e18:	6833      	ldreq	r3, [r6, #0]
 8003e1a:	1aed      	subeq	r5, r5, r3
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	bf0c      	ite	eq
 8003e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e24:	2500      	movne	r5, #0
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bfc4      	itt	gt
 8003e2a:	1a9b      	subgt	r3, r3, r2
 8003e2c:	18ed      	addgt	r5, r5, r3
 8003e2e:	2600      	movs	r6, #0
 8003e30:	341a      	adds	r4, #26
 8003e32:	42b5      	cmp	r5, r6
 8003e34:	d11a      	bne.n	8003e6c <_printf_common+0xc8>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e008      	b.n	8003e4c <_printf_common+0xa8>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4641      	mov	r1, r8
 8003e40:	4638      	mov	r0, r7
 8003e42:	47c8      	blx	r9
 8003e44:	3001      	adds	r0, #1
 8003e46:	d103      	bne.n	8003e50 <_printf_common+0xac>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	3501      	adds	r5, #1
 8003e52:	e7c6      	b.n	8003de2 <_printf_common+0x3e>
 8003e54:	18e1      	adds	r1, r4, r3
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	2030      	movs	r0, #48	@ 0x30
 8003e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e5e:	4422      	add	r2, r4
 8003e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e68:	3302      	adds	r3, #2
 8003e6a:	e7c7      	b.n	8003dfc <_printf_common+0x58>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4641      	mov	r1, r8
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c8      	blx	r9
 8003e76:	3001      	adds	r0, #1
 8003e78:	d0e6      	beq.n	8003e48 <_printf_common+0xa4>
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7d9      	b.n	8003e32 <_printf_common+0x8e>
	...

08003e80 <_printf_i>:
 8003e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	7e0f      	ldrb	r7, [r1, #24]
 8003e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e88:	2f78      	cmp	r7, #120	@ 0x78
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	469a      	mov	sl, r3
 8003e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e96:	d807      	bhi.n	8003ea8 <_printf_i+0x28>
 8003e98:	2f62      	cmp	r7, #98	@ 0x62
 8003e9a:	d80a      	bhi.n	8003eb2 <_printf_i+0x32>
 8003e9c:	2f00      	cmp	r7, #0
 8003e9e:	f000 80d1 	beq.w	8004044 <_printf_i+0x1c4>
 8003ea2:	2f58      	cmp	r7, #88	@ 0x58
 8003ea4:	f000 80b8 	beq.w	8004018 <_printf_i+0x198>
 8003ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eb0:	e03a      	b.n	8003f28 <_printf_i+0xa8>
 8003eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eb6:	2b15      	cmp	r3, #21
 8003eb8:	d8f6      	bhi.n	8003ea8 <_printf_i+0x28>
 8003eba:	a101      	add	r1, pc, #4	@ (adr r1, 8003ec0 <_printf_i+0x40>)
 8003ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003ea9 	.word	0x08003ea9
 8003ecc:	08003ea9 	.word	0x08003ea9
 8003ed0:	08003ea9 	.word	0x08003ea9
 8003ed4:	08003ea9 	.word	0x08003ea9
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003ea9 	.word	0x08003ea9
 8003ee0:	08003ea9 	.word	0x08003ea9
 8003ee4:	08003ea9 	.word	0x08003ea9
 8003ee8:	08003ea9 	.word	0x08003ea9
 8003eec:	0800402b 	.word	0x0800402b
 8003ef0:	08003f57 	.word	0x08003f57
 8003ef4:	08003fe5 	.word	0x08003fe5
 8003ef8:	08003ea9 	.word	0x08003ea9
 8003efc:	08003ea9 	.word	0x08003ea9
 8003f00:	0800404d 	.word	0x0800404d
 8003f04:	08003ea9 	.word	0x08003ea9
 8003f08:	08003f57 	.word	0x08003f57
 8003f0c:	08003ea9 	.word	0x08003ea9
 8003f10:	08003ea9 	.word	0x08003ea9
 8003f14:	08003fed 	.word	0x08003fed
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6032      	str	r2, [r6, #0]
 8003f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e09c      	b.n	8004066 <_printf_i+0x1e6>
 8003f2c:	6833      	ldr	r3, [r6, #0]
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	1d19      	adds	r1, r3, #4
 8003f32:	6031      	str	r1, [r6, #0]
 8003f34:	0606      	lsls	r6, r0, #24
 8003f36:	d501      	bpl.n	8003f3c <_printf_i+0xbc>
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	e003      	b.n	8003f44 <_printf_i+0xc4>
 8003f3c:	0645      	lsls	r5, r0, #25
 8003f3e:	d5fb      	bpl.n	8003f38 <_printf_i+0xb8>
 8003f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xd0>
 8003f48:	232d      	movs	r3, #45	@ 0x2d
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f50:	4858      	ldr	r0, [pc, #352]	@ (80040b4 <_printf_i+0x234>)
 8003f52:	230a      	movs	r3, #10
 8003f54:	e011      	b.n	8003f7a <_printf_i+0xfa>
 8003f56:	6821      	ldr	r1, [r4, #0]
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	0608      	lsls	r0, r1, #24
 8003f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f60:	d402      	bmi.n	8003f68 <_printf_i+0xe8>
 8003f62:	0649      	lsls	r1, r1, #25
 8003f64:	bf48      	it	mi
 8003f66:	b2ad      	uxthmi	r5, r5
 8003f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f6a:	4852      	ldr	r0, [pc, #328]	@ (80040b4 <_printf_i+0x234>)
 8003f6c:	6033      	str	r3, [r6, #0]
 8003f6e:	bf14      	ite	ne
 8003f70:	230a      	movne	r3, #10
 8003f72:	2308      	moveq	r3, #8
 8003f74:	2100      	movs	r1, #0
 8003f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f7a:	6866      	ldr	r6, [r4, #4]
 8003f7c:	60a6      	str	r6, [r4, #8]
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	db05      	blt.n	8003f8e <_printf_i+0x10e>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	432e      	orrs	r6, r5
 8003f86:	f021 0104 	bic.w	r1, r1, #4
 8003f8a:	6021      	str	r1, [r4, #0]
 8003f8c:	d04b      	beq.n	8004026 <_printf_i+0x1a6>
 8003f8e:	4616      	mov	r6, r2
 8003f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f94:	fb03 5711 	mls	r7, r3, r1, r5
 8003f98:	5dc7      	ldrb	r7, [r0, r7]
 8003f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f9e:	462f      	mov	r7, r5
 8003fa0:	42bb      	cmp	r3, r7
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	d9f4      	bls.n	8003f90 <_printf_i+0x110>
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d10b      	bne.n	8003fc2 <_printf_i+0x142>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	07df      	lsls	r7, r3, #31
 8003fae:	d508      	bpl.n	8003fc2 <_printf_i+0x142>
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	6861      	ldr	r1, [r4, #4]
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	bfde      	ittt	le
 8003fb8:	2330      	movle	r3, #48	@ 0x30
 8003fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fbe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003fc2:	1b92      	subs	r2, r2, r6
 8003fc4:	6122      	str	r2, [r4, #16]
 8003fc6:	f8cd a000 	str.w	sl, [sp]
 8003fca:	464b      	mov	r3, r9
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	f7ff fee7 	bl	8003da4 <_printf_common>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d14a      	bne.n	8004070 <_printf_i+0x1f0>
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fde:	b004      	add	sp, #16
 8003fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	f043 0320 	orr.w	r3, r3, #32
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	4832      	ldr	r0, [pc, #200]	@ (80040b8 <_printf_i+0x238>)
 8003fee:	2778      	movs	r7, #120	@ 0x78
 8003ff0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	6831      	ldr	r1, [r6, #0]
 8003ff8:	061f      	lsls	r7, r3, #24
 8003ffa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ffe:	d402      	bmi.n	8004006 <_printf_i+0x186>
 8004000:	065f      	lsls	r7, r3, #25
 8004002:	bf48      	it	mi
 8004004:	b2ad      	uxthmi	r5, r5
 8004006:	6031      	str	r1, [r6, #0]
 8004008:	07d9      	lsls	r1, r3, #31
 800400a:	bf44      	itt	mi
 800400c:	f043 0320 	orrmi.w	r3, r3, #32
 8004010:	6023      	strmi	r3, [r4, #0]
 8004012:	b11d      	cbz	r5, 800401c <_printf_i+0x19c>
 8004014:	2310      	movs	r3, #16
 8004016:	e7ad      	b.n	8003f74 <_printf_i+0xf4>
 8004018:	4826      	ldr	r0, [pc, #152]	@ (80040b4 <_printf_i+0x234>)
 800401a:	e7e9      	b.n	8003ff0 <_printf_i+0x170>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	f023 0320 	bic.w	r3, r3, #32
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	e7f6      	b.n	8004014 <_printf_i+0x194>
 8004026:	4616      	mov	r6, r2
 8004028:	e7bd      	b.n	8003fa6 <_printf_i+0x126>
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	6961      	ldr	r1, [r4, #20]
 8004030:	1d18      	adds	r0, r3, #4
 8004032:	6030      	str	r0, [r6, #0]
 8004034:	062e      	lsls	r6, r5, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1be>
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1c4>
 800403e:	0668      	lsls	r0, r5, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ba>
 8004042:	8019      	strh	r1, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	6123      	str	r3, [r4, #16]
 8004048:	4616      	mov	r6, r2
 800404a:	e7bc      	b.n	8003fc6 <_printf_i+0x146>
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	6032      	str	r2, [r6, #0]
 8004052:	681e      	ldr	r6, [r3, #0]
 8004054:	6862      	ldr	r2, [r4, #4]
 8004056:	2100      	movs	r1, #0
 8004058:	4630      	mov	r0, r6
 800405a:	f7fc f8e9 	bl	8000230 <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1e4>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800406e:	e7aa      	b.n	8003fc6 <_printf_i+0x146>
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	4632      	mov	r2, r6
 8004074:	4649      	mov	r1, r9
 8004076:	4640      	mov	r0, r8
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ad      	beq.n	8003fda <_printf_i+0x15a>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x22c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a6      	b.n	8003fde <_printf_i+0x15e>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09d      	beq.n	8003fda <_printf_i+0x15a>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x210>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x204>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x220>
 80040b4:	08004211 	.word	0x08004211
 80040b8:	08004222 	.word	0x08004222

080040bc <memmove>:
 80040bc:	4288      	cmp	r0, r1
 80040be:	b510      	push	{r4, lr}
 80040c0:	eb01 0402 	add.w	r4, r1, r2
 80040c4:	d902      	bls.n	80040cc <memmove+0x10>
 80040c6:	4284      	cmp	r4, r0
 80040c8:	4623      	mov	r3, r4
 80040ca:	d807      	bhi.n	80040dc <memmove+0x20>
 80040cc:	1e43      	subs	r3, r0, #1
 80040ce:	42a1      	cmp	r1, r4
 80040d0:	d008      	beq.n	80040e4 <memmove+0x28>
 80040d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040da:	e7f8      	b.n	80040ce <memmove+0x12>
 80040dc:	4402      	add	r2, r0
 80040de:	4601      	mov	r1, r0
 80040e0:	428a      	cmp	r2, r1
 80040e2:	d100      	bne.n	80040e6 <memmove+0x2a>
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ee:	e7f7      	b.n	80040e0 <memmove+0x24>

080040f0 <_sbrk_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4d06      	ldr	r5, [pc, #24]	@ (800410c <_sbrk_r+0x1c>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	f7fc fbcc 	bl	8000898 <_sbrk>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_sbrk_r+0x1a>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_sbrk_r+0x1a>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	2000031c 	.word	0x2000031c

08004110 <memcpy>:
 8004110:	440a      	add	r2, r1
 8004112:	4291      	cmp	r1, r2
 8004114:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004118:	d100      	bne.n	800411c <memcpy+0xc>
 800411a:	4770      	bx	lr
 800411c:	b510      	push	{r4, lr}
 800411e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004126:	4291      	cmp	r1, r2
 8004128:	d1f9      	bne.n	800411e <memcpy+0xe>
 800412a:	bd10      	pop	{r4, pc}

0800412c <_realloc_r>:
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4607      	mov	r7, r0
 8004132:	4614      	mov	r4, r2
 8004134:	460d      	mov	r5, r1
 8004136:	b921      	cbnz	r1, 8004142 <_realloc_r+0x16>
 8004138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	4611      	mov	r1, r2
 800413e:	f7ff bc4d 	b.w	80039dc <_malloc_r>
 8004142:	b92a      	cbnz	r2, 8004150 <_realloc_r+0x24>
 8004144:	f7ff fbde 	bl	8003904 <_free_r>
 8004148:	4625      	mov	r5, r4
 800414a:	4628      	mov	r0, r5
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	f000 f81a 	bl	8004188 <_malloc_usable_size_r>
 8004154:	4284      	cmp	r4, r0
 8004156:	4606      	mov	r6, r0
 8004158:	d802      	bhi.n	8004160 <_realloc_r+0x34>
 800415a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800415e:	d8f4      	bhi.n	800414a <_realloc_r+0x1e>
 8004160:	4621      	mov	r1, r4
 8004162:	4638      	mov	r0, r7
 8004164:	f7ff fc3a 	bl	80039dc <_malloc_r>
 8004168:	4680      	mov	r8, r0
 800416a:	b908      	cbnz	r0, 8004170 <_realloc_r+0x44>
 800416c:	4645      	mov	r5, r8
 800416e:	e7ec      	b.n	800414a <_realloc_r+0x1e>
 8004170:	42b4      	cmp	r4, r6
 8004172:	4622      	mov	r2, r4
 8004174:	4629      	mov	r1, r5
 8004176:	bf28      	it	cs
 8004178:	4632      	movcs	r2, r6
 800417a:	f7ff ffc9 	bl	8004110 <memcpy>
 800417e:	4629      	mov	r1, r5
 8004180:	4638      	mov	r0, r7
 8004182:	f7ff fbbf 	bl	8003904 <_free_r>
 8004186:	e7f1      	b.n	800416c <_realloc_r+0x40>

08004188 <_malloc_usable_size_r>:
 8004188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418c:	1f18      	subs	r0, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	bfbc      	itt	lt
 8004192:	580b      	ldrlt	r3, [r1, r0]
 8004194:	18c0      	addlt	r0, r0, r3
 8004196:	4770      	bx	lr

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
