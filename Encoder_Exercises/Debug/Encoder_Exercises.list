
Encoder_Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080087a0  080087a0  000097a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b64  08008b64  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b64  08008b64  00009b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b6c  08008b6c  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b6c  08008b6c  00009b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b70  08008b70  00009b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008b74  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001dc  08008d50  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08008d50  0000a588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f43  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d09  00000000  00000000  0001f14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00021e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  00022fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bcb  00000000  00000000  00023d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014139  00000000  00000000  0004b8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdbd3  00000000  00000000  0005fa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d5e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005974  00000000  00000000  0015d62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00162fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008788 	.word	0x08008788

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08008788 	.word	0x08008788

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Encoder_Init>:
 */

#include "Encoder.h"

void Encoder_Init(Encoder_t *Encoder, TIM_HandleTypeDef *Tim, uint16_t EncoderResolution, float SampleTime)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	80fb      	strh	r3, [r7, #6]
	Encoder->Tim = Tim;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	Encoder->Resolution = EncoderResolution;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	809a      	strh	r2, [r3, #4]
	Encoder->SampleTime = SampleTime;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	609a      	str	r2, [r3, #8]

	Encoder->Delta = 0;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	81da      	strh	r2, [r3, #14]
	Encoder->LastValue = 0;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	819a      	strh	r2, [r3, #12]

	HAL_TIM_Encoder_Start(Encoder->Tim, TIM_CHANNEL_ALL);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	213c      	movs	r1, #60	@ 0x3c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fcd2 	bl	80039a4 <HAL_TIM_Encoder_Start>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Encoder_AngularVelocity>:

void Encoder_AngularVelocity(Encoder_t *Encoder, float *EncoderAngle, float *EncoderAngularVelocity)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	int16_t CurrentValue =  __HAL_TIM_GetCounter(Encoder->Tim);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	82fb      	strh	r3, [r7, #22]
	//*Sum += CurrentValue;
	(Encoder->Delta) = CurrentValue - (Encoder->LastValue);
 800101e:	8afa      	ldrh	r2, [r7, #22]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001026:	b29b      	uxth	r3, r3
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21a      	sxth	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	81da      	strh	r2, [r3, #14]
	if((Encoder->Delta) > (Encoder->Resolution) / 2)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	429a      	cmp	r2, r3
 8001044:	dd0b      	ble.n	800105e <Encoder_AngularVelocity+0x56>
	{
		(Encoder->Delta) -=  (Encoder->Resolution);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800104c:	b29a      	uxth	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	81da      	strh	r2, [r3, #14]
 800105c:	e016      	b.n	800108c <Encoder_AngularVelocity+0x84>
	}
	else if((Encoder->Delta) < -(Encoder->Resolution) / 2)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001064:	4619      	mov	r1, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	0fda      	lsrs	r2, r3, #31
 800106c:	4413      	add	r3, r2
 800106e:	105b      	asrs	r3, r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	4299      	cmp	r1, r3
 8001074:	da0a      	bge.n	800108c <Encoder_AngularVelocity+0x84>
	{
		(Encoder->Delta) += (Encoder->Resolution);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	b21a      	sxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	81da      	strh	r2, [r3, #14]
	}

	*EncoderAngle = (360.0 * (Encoder->Delta)) / (Encoder->Resolution);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa6e 	bl	8000574 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <Encoder_AngularVelocity+0xf0>)
 800109e:	f7ff fad3 	bl	8000648 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa60 	bl	8000574 <__aeabi_i2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fbee 	bl	800089c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd96 	bl	8000bf8 <__aeabi_d2f>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	601a      	str	r2, [r3, #0]
	*EncoderAngularVelocity = (*EncoderAngle) / (float)(Encoder->SampleTime);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ed93 7a02 	vldr	s14, [r3, #8]
 80010de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	edc3 7a00 	vstr	s15, [r3]
	(Encoder->LastValue) = CurrentValue;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8afa      	ldrh	r2, [r7, #22]
 80010ec:	819a      	strh	r2, [r3, #12]
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40768000 	.word	0x40768000

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112a:	4b34      	ldr	r3, [pc, #208]	@ (80011fc <MX_GPIO_Init+0x100>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <MX_GPIO_Init+0x100>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <MX_GPIO_Init+0x100>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_A_DIR1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f001 f8bc 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIR2_GPIO_Port, MOTOR_A_DIR2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	481e      	ldr	r0, [pc, #120]	@ (8001200 <MX_GPIO_Init+0x104>)
 8001186:	f001 f8b7 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800118a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001190:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_GPIO_Init+0x104>)
 80011a2:	f000 ff27 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_A_DIR1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_A_DIR1_Pin;
 80011a6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f000 ff17 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIR2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIR2_Pin;
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIR2_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4808      	ldr	r0, [pc, #32]	@ (8001200 <MX_GPIO_Init+0x104>)
 80011de:	f000 ff09 	bl	8001ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2028      	movs	r0, #40	@ 0x28
 80011e8:	f000 fecf 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ec:	2028      	movs	r0, #40	@ 0x28
 80011ee:	f000 fee6 	bl	8001fbe <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000800 	.word	0x48000800

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120a:	f000 fd72 	bl	8001cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f875 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f7ff ff73 	bl	80010fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001216:	f000 fca1 	bl	8001b5c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800121a:	f000 fb25 	bl	8001868 <MX_TIM3_Init>
  MX_TIM1_Init();
 800121e:	f000 facf 	bl	80017c0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001222:	f000 fb77 	bl	8001914 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001226:	f000 f8b4 	bl	8001392 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  //HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
    HAL_TIM_Base_Start_IT(&htim1);
 800122a:	4826      	ldr	r0, [pc, #152]	@ (80012c4 <main+0xc0>)
 800122c:	f002 f928 	bl	8003480 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	4825      	ldr	r0, [pc, #148]	@ (80012c8 <main+0xc4>)
 8001234:	f002 f9fe 	bl	8003634 <HAL_TIM_PWM_Start>


  Motor_Init(&Motor, &htim4, TIM_CHANNEL_1, PWM, MOTOR_A_DIR1_GPIO_Port	, MOTOR_A_DIR1_Pin, MOTOR_A_DIR2_GPIO_Port, MOTOR_A_DIR2_Pin);
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <main+0xc8>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	9203      	str	r2, [sp, #12]
 8001240:	4a23      	ldr	r2, [pc, #140]	@ (80012d0 <main+0xcc>)
 8001242:	9202      	str	r2, [sp, #8]
 8001244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	491d      	ldr	r1, [pc, #116]	@ (80012c8 <main+0xc4>)
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <main+0xd0>)
 8001256:	f000 f950 	bl	80014fa <Motor_Init>
  Encoder_Init(&Encoder, &htim3, EncoderResolution, SampleTime);
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <main+0xd4>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <main+0xd8>)
 8001264:	edd2 7a00 	vldr	s15, [r2]
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	461a      	mov	r2, r3
 800126e:	491c      	ldr	r1, [pc, #112]	@ (80012e0 <main+0xdc>)
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <main+0xe0>)
 8001272:	f7ff fea7 	bl	8000fc4 <Encoder_Init>
	  sprintf(Message, "Value = %d\n", Value);
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
	  }
	  */

	  if(FlagCallback == 1)
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <main+0xe4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d115      	bne.n	80012aa <main+0xa6>
	  {
		  FlagCallback = 0;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <main+0xe4>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]

		  sprintf(Message, "Delta = %d\n", Delta);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <main+0xe8>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	461a      	mov	r2, r3
 800128c:	4918      	ldr	r1, [pc, #96]	@ (80012f0 <main+0xec>)
 800128e:	4819      	ldr	r0, [pc, #100]	@ (80012f4 <main+0xf0>)
 8001290:	f005 f948 	bl	8006524 <siprintf>
		  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
 8001294:	4817      	ldr	r0, [pc, #92]	@ (80012f4 <main+0xf0>)
 8001296:	f7ff f813 	bl	80002c0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	4914      	ldr	r1, [pc, #80]	@ (80012f4 <main+0xf0>)
 80012a4:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <main+0xf4>)
 80012a6:	f003 fd79 	bl	8004d9c <HAL_UART_Transmit>
	  }

  	  PWM = 50;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <main+0xc8>)
 80012ac:	2232      	movs	r2, #50	@ 0x32
 80012ae:	801a      	strh	r2, [r3, #0]

  	  Motor_SetRideParameters(&Motor, 40, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2128      	movs	r1, #40	@ 0x28
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <main+0xd0>)
 80012b6:	f000 f897 	bl	80013e8 <Motor_SetRideParameters>
  	  Motor_Ride(&Motor);
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <main+0xd0>)
 80012bc:	f000 f8d1 	bl	8001462 <Motor_Ride>
	  if(FlagCallback == 1)
 80012c0:	e7d9      	b.n	8001276 <main+0x72>
 80012c2:	bf00      	nop
 80012c4:	200002c0 	.word	0x200002c0
 80012c8:	20000358 	.word	0x20000358
 80012cc:	200002b8 	.word	0x200002b8
 80012d0:	48000800 	.word	0x48000800
 80012d4:	200002a0 	.word	0x200002a0
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004
 80012e0:	2000030c 	.word	0x2000030c
 80012e4:	20000288 	.word	0x20000288
 80012e8:	20000284 	.word	0x20000284
 80012ec:	20000278 	.word	0x20000278
 80012f0:	080087a0 	.word	0x080087a0
 80012f4:	200001f8 	.word	0x200001f8
 80012f8:	200003a4 	.word	0x200003a4

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	@ 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2238      	movs	r2, #56	@ 0x38
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f005 f96f 	bl	80065ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800131e:	2000      	movs	r0, #0
 8001320:	f001 f826 	bl	8002370 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132e:	2340      	movs	r3, #64	@ 0x40
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001336:	2302      	movs	r3, #2
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800133a:	2304      	movs	r3, #4
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800133e:	2355      	movs	r3, #85	@ 0x55
 8001340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f8c0 	bl	80024d8 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800135e:	f000 f83d 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2303      	movs	r3, #3
 8001368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fbbe 	bl	8002afc <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001386:	f000 f829 	bl	80013dc <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	@ 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2019      	movs	r0, #25
 800139c:	f000 fdf5 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013a0:	2019      	movs	r0, #25
 80013a2:	f000 fe0c 	bl	8001fbe <HAL_NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	FlagCallback = 1;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	Encoder_AngularVelocity(&Encoder, &Angle, &AngularVelocity);
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013bc:	4905      	ldr	r1, [pc, #20]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013c0:	f7ff fe22 	bl	8001008 <Encoder_AngularVelocity>

}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000284 	.word	0x20000284
 80013d0:	20000280 	.word	0x20000280
 80013d4:	2000027c 	.word	0x2000027c
 80013d8:	20000288 	.word	0x20000288

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <Motor_SetRideParameters>:




MotorStatus_t Motor_SetRideParameters(Motor_t *Motor, uint8_t PWM, uint8_t Dir)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	4613      	mov	r3, r2
 80013f6:	70bb      	strb	r3, [r7, #2]
	//making sure PWM is in range from 0 to 100
	if (PWM < 0)
	{
		Motor->MotorPWM = -1 * PWM;
	}
	if (PWM > 100)
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d902      	bls.n	8001404 <Motor_SetRideParameters+0x1c>
	{
		Motor->MotorPWM = 100;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2264      	movs	r2, #100	@ 0x64
 8001402:	759a      	strb	r2, [r3, #22]
	}
	Motor->MotorPWM = PWM;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	759a      	strb	r2, [r3, #22]

	//setting direction
	if (Dir == 1) 	// Przód
 800140a:	78bb      	ldrb	r3, [r7, #2]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d110      	bne.n	8001432 <Motor_SetRideParameters+0x4a>
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_SET);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6898      	ldr	r0, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	899b      	ldrh	r3, [r3, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	f000 ff6c 	bl	80022f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_RESET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6918      	ldr	r0, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8a9b      	ldrh	r3, [r3, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	f000 ff64 	bl	80022f8 <HAL_GPIO_WritePin>
 8001430:	e00f      	b.n	8001452 <Motor_SetRideParameters+0x6a>
	}
	else 			// Tył
	{
		HAL_GPIO_WritePin(Motor->MotorDir1Port, Motor->MotorDir1Pin, GPIO_PIN_RESET);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6898      	ldr	r0, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	899b      	ldrh	r3, [r3, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	f000 ff5b 	bl	80022f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->MotorDir2Port, Motor->MotorDir2Pin, GPIO_PIN_SET);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6918      	ldr	r0, [r3, #16]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	8a9b      	ldrh	r3, [r3, #20]
 800144a:	2201      	movs	r2, #1
 800144c:	4619      	mov	r1, r3
 800144e:	f000 ff53 	bl	80022f8 <HAL_GPIO_WritePin>
	}
	Motor->Direction = Dir;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	78ba      	ldrb	r2, [r7, #2]
 8001456:	75da      	strb	r2, [r3, #23]


	//setting PWM
	//__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);

	return MOTOR_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <Motor_Ride>:

void Motor_Ride(Motor_t *Motor)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	//setting PWM
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <Motor_Ride+0x1e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7d9a      	ldrb	r2, [r3, #22]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800147e:	e036      	b.n	80014ee <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d107      	bne.n	8001498 <Motor_Ride+0x36>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7d99      	ldrb	r1, [r3, #22]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	460b      	mov	r3, r1
 8001494:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001496:	e02a      	b.n	80014ee <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b08      	cmp	r3, #8
 800149e:	d107      	bne.n	80014b0 <Motor_Ride+0x4e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7d99      	ldrb	r1, [r3, #22]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	460b      	mov	r3, r1
 80014ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80014ae:	e01e      	b.n	80014ee <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d107      	bne.n	80014c8 <Motor_Ride+0x66>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7d99      	ldrb	r1, [r3, #22]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	460b      	mov	r3, r1
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014c6:	e012      	b.n	80014ee <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d107      	bne.n	80014e0 <Motor_Ride+0x7e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7d99      	ldrb	r1, [r3, #22]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	460b      	mov	r3, r1
 80014dc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80014de:	e006      	b.n	80014ee <Motor_Ride+0x8c>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, Motor->MotorPWM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7d99      	ldrb	r1, [r3, #22]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	460b      	mov	r3, r1
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <Motor_Init>:


MotorStatus_t Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *Timer, uint32_t TimerChannel, uint16_t PWM, GPIO_TypeDef *Dir1Port, uint16_t Dir1Pin, GPIO_TypeDef *Dir2Port, uint16_t Dir2Pin)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	807b      	strh	r3, [r7, #2]
	Motor->htim = Timer;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	601a      	str	r2, [r3, #0]
	Motor->Channel = TimerChannel;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]

	Motor->MotorPWM = PWM;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	759a      	strb	r2, [r3, #22]

	Motor->MotorDir1Port = Dir1Port;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]
	Motor->MotorDir1Pin = Dir1Pin;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8bba      	ldrh	r2, [r7, #28]
 8001526:	819a      	strh	r2, [r3, #12]
	Motor->MotorDir2Port = Dir2Port;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a3a      	ldr	r2, [r7, #32]
 800152c:	611a      	str	r2, [r3, #16]
	Motor->MotorDir2Pin = Dir2Pin;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001532:	829a      	strh	r2, [r3, #20]

	return MOTOR_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_MspInit+0x44>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_MspInit+0x44>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	@ 0x60
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <HAL_MspInit+0x44>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_MspInit+0x44>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	4a08      	ldr	r2, [pc, #32]	@ (8001588 <HAL_MspInit+0x44>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	6593      	str	r3, [r2, #88]	@ 0x58
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_MspInit+0x44>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800157a:	f000 ff9d 	bl	80024b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e2:	f000 fbd9 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015f2:	f002 fa65 	bl	8003ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002c0 	.word	0x200002c0

08001600 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001604:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001608:	f000 fe8e 	bl	8002328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162a:	f005 f833 	bl	8006694 <__errno>
 800162e:	4603      	mov	r3, r0
 8001630:	2216      	movs	r2, #22
 8001632:	601a      	str	r2, [r3, #0]
  return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_exit>:

void _exit (int status)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffe7 	bl	8001620 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <_exit+0x12>

08001656 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00a      	b.n	800167e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001668:	f3af 8000 	nop.w
 800166c:	4601      	mov	r1, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbf0      	blt.n	8001668 <_read+0x12>
  }

  return len;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e009      	b.n	80016b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf1      	blt.n	80016a2 <_write+0x12>
  }
  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_close>:

int _close(int file)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f0:	605a      	str	r2, [r3, #4]
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_isatty>:

int _isatty(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f004 ff98 	bl	8006694 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20020000 	.word	0x20020000
 8001790:	00000400 	.word	0x00000400
 8001794:	200002bc 	.word	0x200002bc
 8001798:	20000588 	.word	0x20000588

0800179c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <MX_TIM1_Init+0xa0>)
 80017e0:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <MX_TIM1_Init+0xa4>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_TIM1_Init+0xa0>)
 80017e6:	f244 2267 	movw	r2, #16999	@ 0x4267
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_TIM1_Init+0xa0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_TIM1_Init+0xa0>)
 80017f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_TIM1_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_TIM1_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_TIM1_Init+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800180c:	4814      	ldr	r0, [pc, #80]	@ (8001860 <MX_TIM1_Init+0xa0>)
 800180e:	f001 fddf 	bl	80033d0 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001818:	f7ff fde0 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_TIM1_Init+0xa0>)
 800182a:	f002 fbad 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001834:	f7ff fdd2 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_TIM1_Init+0xa0>)
 800184a:	f003 f97b 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001854:	f7ff fdc2 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200002c0 	.word	0x200002c0
 8001864:	40012c00 	.word	0x40012c00

08001868 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f004 feb9 	bl	80065ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_TIM3_Init+0xa4>)
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <MX_TIM3_Init+0xa8>)
 800188a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_TIM3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_TIM3_Init+0xa4>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3839;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_TIM3_Init+0xa4>)
 800189a:	f640 62ff 	movw	r2, #3839	@ 0xeff
 800189e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_TIM3_Init+0xa4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_TIM3_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ac:	2303      	movs	r3, #3
 80018ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b4:	2301      	movs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80018bc:	2305      	movs	r3, #5
 80018be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80018cc:	2305      	movs	r3, #5
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <MX_TIM3_Init+0xa4>)
 80018d8:	f001 ffbe 	bl	8003858 <HAL_TIM_Encoder_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018e2:	f7ff fd7b 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_TIM3_Init+0xa4>)
 80018f4:	f003 f926 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018fe:	f7ff fd6d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	@ 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000030c 	.word	0x2000030c
 8001910:	40000400 	.word	0x40000400

08001914 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	@ 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001946:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001948:	4a2c      	ldr	r2, [pc, #176]	@ (80019fc <MX_TIM4_Init+0xe8>)
 800194a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800194c:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 800194e:	22a9      	movs	r2, #169	@ 0xa9
 8001950:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 800195a:	2263      	movs	r2, #99	@ 0x63
 800195c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196a:	4823      	ldr	r0, [pc, #140]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 800196c:	f001 fd30 	bl	80033d0 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001976:	f7ff fd31 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001984:	4619      	mov	r1, r3
 8001986:	481c      	ldr	r0, [pc, #112]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001988:	f002 fafe 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001992:	f7ff fd23 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001996:	4818      	ldr	r0, [pc, #96]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 8001998:	f001 fdea 	bl	8003570 <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019a2:	f7ff fd1b 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4810      	ldr	r0, [pc, #64]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 80019b6:	f003 f8c5 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019c0:	f7ff fd0c 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	@ 0x60
 80019c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 80019dc:	f002 f9c0 	bl	8003d60 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019e6:	f7ff fcf9 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019ea:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <MX_TIM4_Init+0xe4>)
 80019ec:	f000 f87e 	bl	8001aec <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	@ 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000358 	.word	0x20000358
 80019fc:	40000800 	.word	0x40000800

08001a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a13      	ldr	r2, [pc, #76]	@ (8001a5c <HAL_TIM_Base_MspInit+0x5c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a2a:	e010      	b.n	8001a4e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_TIM_Base_MspInit+0x64>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10b      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_TIM_Base_MspInit+0x60>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40000800 	.word	0x40000800

08001a68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d128      	bne.n	8001adc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aba:	23c0      	movs	r3, #192	@ 0xc0
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad8:	f000 fa8c 	bl	8001ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11b      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b26:	2340      	movs	r3, #64	@ 0x40
 8001b28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b42:	f000 fa57 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40000800 	.word	0x40000800
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000400 	.word	0x48000400

08001b5c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <MX_LPUART1_UART_Init+0x90>)
 8001b64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b9e:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001ba0:	f003 f8ac 	bl	8004cfc <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001baa:	f7ff fc17 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001bb2:	f003 fed5 	bl	8005960 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001bbc:	f7ff fc0e 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4809      	ldr	r0, [pc, #36]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001bc4:	f003 ff0a 	bl	80059dc <HAL_UARTEx_SetRxFifoThreshold>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bce:	f7ff fc05 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_LPUART1_UART_Init+0x8c>)
 8001bd4:	f003 fe8b 	bl	80058ee <HAL_UARTEx_DisableFifoMode>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001bde:	f7ff fbfd 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200003a4 	.word	0x200003a4
 8001bec:	40008000 	.word	0x40008000

08001bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b09e      	sub	sp, #120	@ 0x78
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	2254      	movs	r2, #84	@ 0x54
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fcec 	bl	80065ee <memset>
  if(uartHandle->Instance==LPUART1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c98 <HAL_UART_MspInit+0xa8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d136      	bne.n	8001c8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c20:	2320      	movs	r3, #32
 8001c22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 f981 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c38:	f7ff fbd0 	bl	80013dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c3c:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c58:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c60:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_UART_MspInit+0xac>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f000 f9b3 	bl	8001ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3778      	adds	r7, #120	@ 0x78
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40008000 	.word	0x40008000
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca0:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca4:	f7ff fd7a 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopForever+0xe>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopForever+0x16>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f004 fce7 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cd2:	f7ff fa97 	bl	8001204 <main>

08001cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd6:	e7fe      	b.n	8001cd6 <LoopForever>
  ldr   r0, =_estack
 8001cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ce4:	08008b74 	.word	0x08008b74
  ldr r2, =_sbss
 8001ce8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cec:	20000588 	.word	0x20000588

08001cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_2_IRQHandler>

08001cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f939 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 f80e 	bl	8001d24 <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	e001      	b.n	8001d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d14:	f7ff fc16 	bl	8001544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d18:	79fb      	ldrb	r3, [r7, #7]

}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_InitTick+0x68>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d022      	beq.n	8001d7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_InitTick+0x6c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_InitTick+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f944 	bl	8001fda <HAL_SYSTICK_Config>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10f      	bne.n	8001d78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	d809      	bhi.n	8001d72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d66:	f000 f910 	bl	8001f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <HAL_InitTick+0x70>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e007      	b.n	8001d82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e004      	b.n	8001d82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000008 	.word	0x20000008
 8001d94:	2000000c 	.word	0x2000000c

08001d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_IncTick+0x1c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_IncTick+0x20>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_IncTick+0x1c>)
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000438 	.word	0x20000438
 8001db8:	20000010 	.word	0x20000010

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000438 	.word	0x20000438

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff40 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff90 	bl	8001ec8 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5f 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff33 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa4 	bl	8001f30 <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002002:	e15a      	b.n	80022ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 814c 	beq.w	80022b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d005      	beq.n	8002034 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002030:	2b02      	cmp	r3, #2
 8002032:	d130      	bne.n	8002096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206a:	2201      	movs	r2, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 0201 	and.w	r2, r3, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d017      	beq.n	80020d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d123      	bne.n	8002126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	08da      	lsrs	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3208      	adds	r2, #8
 80020e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	6939      	ldr	r1, [r7, #16]
 8002122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80a6 	beq.w	80022b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002168:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <HAL_GPIO_Init+0x2e4>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216c:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_GPIO_Init+0x2e4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6613      	str	r3, [r2, #96]	@ 0x60
 8002174:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_GPIO_Init+0x2e4>)
 8002176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002180:	4a56      	ldr	r2, [pc, #344]	@ (80022dc <HAL_GPIO_Init+0x2e8>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021aa:	d01f      	beq.n	80021ec <HAL_GPIO_Init+0x1f8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a4c      	ldr	r2, [pc, #304]	@ (80022e0 <HAL_GPIO_Init+0x2ec>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d019      	beq.n	80021e8 <HAL_GPIO_Init+0x1f4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4b      	ldr	r2, [pc, #300]	@ (80022e4 <HAL_GPIO_Init+0x2f0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1f0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_GPIO_Init+0x2f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1ec>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a49      	ldr	r2, [pc, #292]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1e8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_GPIO_Init+0x2fc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1e4>
 80021d4:	2305      	movs	r3, #5
 80021d6:	e00a      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021d8:	2306      	movs	r3, #6
 80021da:	e008      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021dc:	2304      	movs	r3, #4
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1fa>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	@ (80022dc <HAL_GPIO_Init+0x2e8>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002230:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800225a:	4a26      	ldr	r2, [pc, #152]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4a11      	ldr	r2, [pc, #68]	@ (80022f4 <HAL_GPIO_Init+0x300>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f ae9d 	bne.w	8002004 <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	48001000 	.word	0x48001000
 80022f0:	48001400 	.word	0x48001400
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002314:	e002      	b.n	800231c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f806 	bl	8002358 <HAL_GPIO_EXTI_Callback>
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d141      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800237e:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238a:	d131      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800238c:	4b47      	ldr	r3, [pc, #284]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002392:	4a46      	ldr	r2, [pc, #280]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800239c:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023a4:	4a41      	ldr	r2, [pc, #260]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ac:	4b40      	ldr	r3, [pc, #256]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2232      	movs	r2, #50	@ 0x32
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	4a3f      	ldr	r2, [pc, #252]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c2:	e002      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ca:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d6:	d102      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f2      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023de:	4b33      	ldr	r3, [pc, #204]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ea:	d158      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e057      	b.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f0:	4b2e      	ldr	r3, [pc, #184]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f6:	4a2d      	ldr	r2, [pc, #180]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002400:	e04d      	b.n	800249e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002408:	d141      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800240a:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002416:	d131      	bne.n	800247c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800241e:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002430:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2232      	movs	r2, #50	@ 0x32
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	3301      	adds	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244e:	e002      	b.n	8002456 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002462:	d102      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f2      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002476:	d112      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e011      	b.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800248c:	e007      	b.n	800249e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800249c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40007000 	.word	0x40007000
 80024b0:	20000008 	.word	0x20000008
 80024b4:	431bde83 	.word	0x431bde83

080024b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c6:	6093      	str	r3, [r2, #8]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e2fe      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d075      	beq.n	80025e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b97      	ldr	r3, [pc, #604]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b94      	ldr	r3, [pc, #592]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d102      	bne.n	8002516 <HAL_RCC_OscConfig+0x3e>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d002      	beq.n	800251c <HAL_RCC_OscConfig+0x44>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	4b8d      	ldr	r3, [pc, #564]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05b      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d157      	bne.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e2d9      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d106      	bne.n	800254c <HAL_RCC_OscConfig+0x74>
 800253e:	4b85      	ldr	r3, [pc, #532]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a84      	ldr	r2, [pc, #528]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b7f      	ldr	r3, [pc, #508]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7e      	ldr	r2, [pc, #504]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b7c      	ldr	r3, [pc, #496]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7b      	ldr	r2, [pc, #492]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 8002570:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a77      	ldr	r2, [pc, #476]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b75      	ldr	r3, [pc, #468]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a74      	ldr	r2, [pc, #464]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff fc14 	bl	8001dbc <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fc10 	bl	8001dbc <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e29e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0xc0>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fc00 	bl	8001dbc <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fbfc 	bl	8001dbc <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e28a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d2:	4b60      	ldr	r3, [pc, #384]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d075      	beq.n	80026da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b59      	ldr	r3, [pc, #356]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b56      	ldr	r3, [pc, #344]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d102      	bne.n	800260e <HAL_RCC_OscConfig+0x136>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d002      	beq.n	8002614 <HAL_RCC_OscConfig+0x13c>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11f      	bne.n	8002654 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	4b4f      	ldr	r3, [pc, #316]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x154>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e25d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4946      	ldr	r1, [pc, #280]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002640:	4b45      	ldr	r3, [pc, #276]	@ (8002758 <HAL_RCC_OscConfig+0x280>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb6d 	bl	8001d24 <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d043      	beq.n	80026d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e249      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3c      	ldr	r2, [pc, #240]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fba8 	bl	8001dbc <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff fba4 	bl	8001dbc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e232      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002682:	4b34      	ldr	r3, [pc, #208]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	492d      	ldr	r1, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e01a      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80026aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb84 	bl	8001dbc <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff fb80 	bl	8001dbc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e20e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ca:	4b22      	ldr	r3, [pc, #136]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1e0>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d041      	beq.n	800276a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01c      	beq.n	8002728 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f4:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff fb5d 	bl	8001dbc <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff fb59 	bl	8001dbc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1e7      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ef      	beq.n	8002706 <HAL_RCC_OscConfig+0x22e>
 8002726:	e020      	b.n	800276a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 800272a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <HAL_RCC_OscConfig+0x27c>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7ff fb40 	bl	8001dbc <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273e:	e00d      	b.n	800275c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fb3c 	bl	8001dbc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d906      	bls.n	800275c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1ca      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275c:	4b8c      	ldr	r3, [pc, #560]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ea      	bne.n	8002740 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a6 	beq.w	80028c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277c:	4b84      	ldr	r3, [pc, #528]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x2b4>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x2b6>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b7f      	ldr	r3, [pc, #508]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	4a7e      	ldr	r2, [pc, #504]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	@ 0x58
 800279e:	4b7c      	ldr	r3, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	4b79      	ldr	r3, [pc, #484]	@ (8002994 <HAL_RCC_OscConfig+0x4bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ba:	4b76      	ldr	r3, [pc, #472]	@ (8002994 <HAL_RCC_OscConfig+0x4bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a75      	ldr	r2, [pc, #468]	@ (8002994 <HAL_RCC_OscConfig+0x4bc>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7ff faf9 	bl	8001dbc <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7ff faf5 	bl	8001dbc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e183      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002994 <HAL_RCC_OscConfig+0x4bc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_RCC_OscConfig+0x32e>
 80027f4:	4b66      	ldr	r3, [pc, #408]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002804:	e024      	b.n	8002850 <HAL_RCC_OscConfig+0x378>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d110      	bne.n	8002830 <HAL_RCC_OscConfig+0x358>
 800280e:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002814:	4a5e      	ldr	r2, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800281e:	4b5c      	ldr	r3, [pc, #368]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	4a5a      	ldr	r2, [pc, #360]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800282e:	e00f      	b.n	8002850 <HAL_RCC_OscConfig+0x378>
 8002830:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	4a56      	ldr	r2, [pc, #344]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002840:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d016      	beq.n	8002886 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff fab0 	bl	8001dbc <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7ff faac 	bl	8001dbc <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e138      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002876:	4b46      	ldr	r3, [pc, #280]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ed      	beq.n	8002860 <HAL_RCC_OscConfig+0x388>
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7ff fa99 	bl	8001dbc <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7ff fa95 	bl	8001dbc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e121      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ed      	bne.n	800288e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4b35      	ldr	r3, [pc, #212]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028bc:	4a34      	ldr	r2, [pc, #208]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03c      	beq.n	800294a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01c      	beq.n	8002912 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80028da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028de:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7ff fa68 	bl	8001dbc <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f0:	f7ff fa64 	bl	8001dbc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0f2      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002902:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x418>
 8002910:	e01b      	b.n	800294a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002912:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002918:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7ff fa4b 	bl	8001dbc <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292a:	f7ff fa47 	bl	8001dbc <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0d5      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80c9 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002954:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b0c      	cmp	r3, #12
 800295e:	f000 8083 	beq.w	8002a68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d15e      	bne.n	8002a28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_RCC_OscConfig+0x4b8>)
 8002970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff fa21 	bl	8001dbc <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	e00c      	b.n	8002998 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7ff fa1d 	bl	8001dbc <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d905      	bls.n	8002998 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0ab      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002998:	4b55      	ldr	r3, [pc, #340]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ec      	bne.n	800297e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a4:	4b52      	ldr	r3, [pc, #328]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	4b52      	ldr	r3, [pc, #328]	@ (8002af4 <HAL_RCC_OscConfig+0x61c>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6a11      	ldr	r1, [r2, #32]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b4:	3a01      	subs	r2, #1
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	4311      	orrs	r1, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029be:	0212      	lsls	r2, r2, #8
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	3a01      	subs	r2, #1
 80029ca:	0552      	lsls	r2, r2, #21
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	0652      	lsls	r2, r2, #25
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029de:	06d2      	lsls	r2, r2, #27
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4943      	ldr	r1, [pc, #268]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a40      	ldr	r2, [pc, #256]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f4:	4b3e      	ldr	r3, [pc, #248]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a3d      	ldr	r2, [pc, #244]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff f9dc 	bl	8001dbc <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7ff f9d8 	bl	8001dbc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e066      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x530>
 8002a26:	e05e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f9c2 	bl	8001dbc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff f9be 	bl	8001dbc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4e:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4924      	ldr	r1, [pc, #144]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_OscConfig+0x620>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	60cb      	str	r3, [r1, #12]
 8002a66:	e03e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e039      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <HAL_RCC_OscConfig+0x618>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d12c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	3b01      	subs	r3, #1
 8002a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d123      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d113      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	019f800c 	.word	0x019f800c
 8002af8:	feeefffc 	.word	0xfeeefffc

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e11e      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b91      	ldr	r3, [pc, #580]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b8e      	ldr	r3, [pc, #568]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 020f 	bic.w	r2, r3, #15
 8002b2a:	498c      	ldr	r1, [pc, #560]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b8a      	ldr	r3, [pc, #552]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e106      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d073      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d129      	bne.n	8002bac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b58:	4b81      	ldr	r3, [pc, #516]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0f4      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b68:	f000 f99e 	bl	8002ea8 <RCC_GetSysClockFreqFromPLLSource>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4a7c      	ldr	r2, [pc, #496]	@ (8002d64 <HAL_RCC_ClockConfig+0x268>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d93f      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b76:	4b7a      	ldr	r3, [pc, #488]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d033      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d12f      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b96:	4b72      	ldr	r3, [pc, #456]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b9e:	4a70      	ldr	r2, [pc, #448]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e024      	b.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0c6      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	4b66      	ldr	r3, [pc, #408]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0be      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002bd4:	f000 f8ce 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4a61      	ldr	r2, [pc, #388]	@ (8002d64 <HAL_RCC_ClockConfig+0x268>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d909      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bea:	4a5d      	ldr	r2, [pc, #372]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4957      	ldr	r1, [pc, #348]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7ff f8d8 	bl	8001dbc <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7ff f8d4 	bl	8001dbc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e095      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b4e      	ldr	r3, [pc, #312]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c50:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a42      	ldr	r2, [pc, #264]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c68:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c70:	4a3b      	ldr	r2, [pc, #236]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4936      	ldr	r1, [pc, #216]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b80      	cmp	r3, #128	@ 0x80
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c92:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d21d      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 020f 	bic.w	r2, r3, #15
 8002cb4:	4929      	ldr	r1, [pc, #164]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cbc:	f7ff f87e 	bl	8001dbc <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7ff f87a 	bl	8001dbc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e03b      	b.n	8002d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1ed      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4917      	ldr	r1, [pc, #92]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490f      	ldr	r1, [pc, #60]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d26:	f000 f825 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_RCC_ClockConfig+0x264>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490c      	ldr	r1, [pc, #48]	@ (8002d68 <HAL_RCC_ClockConfig+0x26c>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ffea 	bl	8001d24 <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	40021000 	.word	0x40021000
 8002d64:	04c4b400 	.word	0x04c4b400
 8002d68:	080087ac 	.word	0x080087ac
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d86:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e047      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d8c:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d98:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	e03e      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d9e:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d136      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd2:	68d2      	ldr	r2, [r2, #12]
 8002dd4:	0a12      	lsrs	r2, r2, #8
 8002dd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
      break;
 8002de0:	e00c      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	4a10      	ldr	r2, [pc, #64]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dec:	68d2      	ldr	r2, [r2, #12]
 8002dee:	0a12      	lsrs	r2, r2, #8
 8002df0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
      break;
 8002dfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0e5b      	lsrs	r3, r3, #25
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e001      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e1c:	693b      	ldr	r3, [r7, #16]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	016e3600 	.word	0x016e3600

08002e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080087bc 	.word	0x080087bc

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e80:	f7ff ffda 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	080087bc 	.word	0x080087bc

08002ea8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d10c      	bne.n	8002ee6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ed6:	68d2      	ldr	r2, [r2, #12]
 8002ed8:	0a12      	lsrs	r2, r2, #8
 8002eda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
    break;
 8002ee4:	e00c      	b.n	8002f00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee6:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	0a12      	lsrs	r2, r2, #8
 8002ef4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    break;
 8002efe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0e5b      	lsrs	r3, r3, #25
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f1a:	687b      	ldr	r3, [r7, #4]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	016e3600 	.word	0x016e3600
 8002f30:	00f42400 	.word	0x00f42400

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8098 	beq.w	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	4a3f      	ldr	r2, [pc, #252]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a39      	ldr	r2, [pc, #228]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe ff17 	bl	8001dbc <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f90:	e009      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe ff13 	bl	8001dbc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d902      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa6:	4b30      	ldr	r3, [pc, #192]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ef      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d159      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01e      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d019      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd4:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe0:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fed3 	bl	8001dbc <HAL_GetTick>
 8003016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003018:	e00b      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe fecf 	bl	8001dbc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d902      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	74fb      	strb	r3, [r7, #19]
            break;
 8003030:	e006      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003032:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ec      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10b      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003054:	4903      	ldr	r1, [pc, #12]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800305c:	e008      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	74bb      	strb	r3, [r7, #18]
 8003062:	e005      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003070:	7c7b      	ldrb	r3, [r7, #17]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4ba7      	ldr	r3, [pc, #668]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	4aa6      	ldr	r2, [pc, #664]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003080:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308e:	4ba1      	ldr	r3, [pc, #644]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	f023 0203 	bic.w	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	499d      	ldr	r1, [pc, #628]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b0:	4b98      	ldr	r3, [pc, #608]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f023 020c 	bic.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4995      	ldr	r1, [pc, #596]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030d2:	4b90      	ldr	r3, [pc, #576]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	498c      	ldr	r1, [pc, #560]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f4:	4b87      	ldr	r3, [pc, #540]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4984      	ldr	r1, [pc, #528]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003116:	4b7f      	ldr	r3, [pc, #508]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	497b      	ldr	r1, [pc, #492]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003138:	4b76      	ldr	r3, [pc, #472]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	4973      	ldr	r1, [pc, #460]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315a:	4b6e      	ldr	r3, [pc, #440]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	496a      	ldr	r1, [pc, #424]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800317c:	4b65      	ldr	r3, [pc, #404]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4962      	ldr	r1, [pc, #392]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319e:	4b5d      	ldr	r3, [pc, #372]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	4959      	ldr	r1, [pc, #356]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c0:	4b54      	ldr	r3, [pc, #336]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	4951      	ldr	r1, [pc, #324]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	4948      	ldr	r1, [pc, #288]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003204:	4b43      	ldr	r3, [pc, #268]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	4940      	ldr	r1, [pc, #256]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003222:	d105      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a3a      	ldr	r2, [pc, #232]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800322e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800323c:	4b35      	ldr	r3, [pc, #212]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	4932      	ldr	r1, [pc, #200]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325c:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003266:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d015      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003274:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003282:	4924      	ldr	r1, [pc, #144]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003292:	d105      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800329e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ba:	4916      	ldr	r1, [pc, #88]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a10      	ldr	r2, [pc, #64]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d019      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	4908      	ldr	r1, [pc, #32]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003302:	d109      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a02      	ldr	r2, [pc, #8]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800330e:	60d3      	str	r3, [r2, #12]
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	4926      	ldr	r1, [pc, #152]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003342:	d105      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a20      	ldr	r2, [pc, #128]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800335c:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003362:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336a:	4918      	ldr	r1, [pc, #96]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d105      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003386:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800339a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	490a      	ldr	r1, [pc, #40]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a04      	ldr	r2, [pc, #16]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e049      	b.n	8003476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fb02 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fef8 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e054      	b.n	8003542 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a26      	ldr	r2, [pc, #152]	@ (8003550 <HAL_TIM_Base_Start_IT+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d01d      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_TIM_Base_Start_IT+0xd4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	@ (8003558 <HAL_TIM_Base_Start_IT+0xd8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <HAL_TIM_Base_Start_IT+0xdc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_TIM_Base_Start_IT+0xe0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_TIM_Base_Start_IT+0xe4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_TIM_Base_Start_IT+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d115      	bne.n	800352c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_TIM_Base_Start_IT+0xec>)
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d015      	beq.n	800353e <HAL_TIM_Base_Start_IT+0xbe>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d011      	beq.n	800353e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	e008      	b.n	800353e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e000      	b.n	8003540 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40013400 	.word	0x40013400
 8003564:	40014000 	.word	0x40014000
 8003568:	40015000 	.word	0x40015000
 800356c:	00010007 	.word	0x00010007

08003570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e049      	b.n	8003616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f841 	bl	800361e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f000 fe28 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIM_PWM_Start+0x24>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e03c      	b.n	80036d2 <HAL_TIM_PWM_Start+0x9e>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIM_PWM_Start+0x3e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e02f      	b.n	80036d2 <HAL_TIM_PWM_Start+0x9e>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIM_PWM_Start+0x58>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e022      	b.n	80036d2 <HAL_TIM_PWM_Start+0x9e>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d109      	bne.n	80036a6 <HAL_TIM_PWM_Start+0x72>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e015      	b.n	80036d2 <HAL_TIM_PWM_Start+0x9e>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d109      	bne.n	80036c0 <HAL_TIM_PWM_Start+0x8c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e008      	b.n	80036d2 <HAL_TIM_PWM_Start+0x9e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0a6      	b.n	8003828 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start+0xb6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e8:	e023      	b.n	8003732 <HAL_TIM_PWM_Start+0xfe>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start+0xc6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f8:	e01b      	b.n	8003732 <HAL_TIM_PWM_Start+0xfe>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0xd6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003708:	e013      	b.n	8003732 <HAL_TIM_PWM_Start+0xfe>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xe6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003718:	e00b      	b.n	8003732 <HAL_TIM_PWM_Start+0xfe>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b10      	cmp	r3, #16
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0xf6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003728:	e003      	b.n	8003732 <HAL_TIM_PWM_Start+0xfe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f9dc 	bl	8004af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	@ (8003830 <HAL_TIM_PWM_Start+0x1fc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIM_PWM_Start+0x148>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	@ (8003834 <HAL_TIM_PWM_Start+0x200>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIM_PWM_Start+0x148>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a37      	ldr	r2, [pc, #220]	@ (8003838 <HAL_TIM_PWM_Start+0x204>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_PWM_Start+0x148>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a36      	ldr	r2, [pc, #216]	@ (800383c <HAL_TIM_PWM_Start+0x208>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_PWM_Start+0x148>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <HAL_TIM_PWM_Start+0x20c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_PWM_Start+0x148>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	@ (8003844 <HAL_TIM_PWM_Start+0x210>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_TIM_PWM_Start+0x14c>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_TIM_PWM_Start+0x14e>
 8003780:	2300      	movs	r3, #0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a25      	ldr	r2, [pc, #148]	@ (8003830 <HAL_TIM_PWM_Start+0x1fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d01d      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <HAL_TIM_PWM_Start+0x214>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a24      	ldr	r2, [pc, #144]	@ (800384c <HAL_TIM_PWM_Start+0x218>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a23      	ldr	r2, [pc, #140]	@ (8003850 <HAL_TIM_PWM_Start+0x21c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_TIM_PWM_Start+0x200>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_TIM_PWM_Start+0x204>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x1b2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <HAL_TIM_PWM_Start+0x210>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d115      	bne.n	8003812 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_TIM_PWM_Start+0x220>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d015      	beq.n	8003824 <HAL_TIM_PWM_Start+0x1f0>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fe:	d011      	beq.n	8003824 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003810:	e008      	b.n	8003824 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e000      	b.n	8003826 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40013400 	.word	0x40013400
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800
 8003844:	40015000 	.word	0x40015000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	00010007 	.word	0x00010007

08003858 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e097      	b.n	800399c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fe f8f1 	bl	8001a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f000 fca9 	bl	8004204 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	4313      	orrs	r3, r2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80038f8:	f023 030c 	bic.w	r3, r3, #12
 80038fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	4313      	orrs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	031b      	lsls	r3, r3, #12
 8003928:	4313      	orrs	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	4313      	orrs	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d110      	bne.n	80039f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039da:	7b7b      	ldrb	r3, [r7, #13]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e069      	b.n	8003ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f4:	e031      	b.n	8003a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d110      	bne.n	8003a1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a02:	7b3b      	ldrb	r3, [r7, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e055      	b.n	8003ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a1c:	e01d      	b.n	8003a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d105      	bne.n	8003a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	7b7b      	ldrb	r3, [r7, #13]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a30:	7b3b      	ldrb	r3, [r7, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e03e      	b.n	8003ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_TIM_Encoder_Start+0xc4>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d008      	beq.n	8003a78 <HAL_TIM_Encoder_Start+0xd4>
 8003a66:	e00f      	b.n	8003a88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f841 	bl	8004af8 <TIM_CCxChannelCmd>
      break;
 8003a76:	e016      	b.n	8003aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2104      	movs	r1, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f839 	bl	8004af8 <TIM_CCxChannelCmd>
      break;
 8003a86:	e00e      	b.n	8003aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f831 	bl	8004af8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f82a 	bl	8004af8 <TIM_CCxChannelCmd>
      break;
 8003aa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d020      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0202 	mvn.w	r2, #2
 8003af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fb5c 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fb4e 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb5f 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d020      	beq.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0204 	mvn.w	r2, #4
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fb36 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fb28 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fb39 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01b      	beq.n	8003bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fb10 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fb02 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fb13 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d020      	beq.n	8003c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 faea 	bl	80041c8 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fadc 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 faed 	bl	80041dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00c      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0201 	mvn.w	r2, #1
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fbc0 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00c      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 f815 	bl	8004c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 f80d 	bl	8004c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 faa7 	bl	80041f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f06f 0220 	mvn.w	r2, #32
 8003cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 ffd5 	bl	8004c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 ffe1 	bl	8004cac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 ffd9 	bl	8004cc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 ffd1 	bl	8004cd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 ffc9 	bl	8004ce8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0ff      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b14      	cmp	r3, #20
 8003d8a:	f200 80f0 	bhi.w	8003f6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003f6f 	.word	0x08003f6f
 8003d9c:	08003f6f 	.word	0x08003f6f
 8003da0:	08003f6f 	.word	0x08003f6f
 8003da4:	08003e29 	.word	0x08003e29
 8003da8:	08003f6f 	.word	0x08003f6f
 8003dac:	08003f6f 	.word	0x08003f6f
 8003db0:	08003f6f 	.word	0x08003f6f
 8003db4:	08003e6b 	.word	0x08003e6b
 8003db8:	08003f6f 	.word	0x08003f6f
 8003dbc:	08003f6f 	.word	0x08003f6f
 8003dc0:	08003f6f 	.word	0x08003f6f
 8003dc4:	08003eab 	.word	0x08003eab
 8003dc8:	08003f6f 	.word	0x08003f6f
 8003dcc:	08003f6f 	.word	0x08003f6f
 8003dd0:	08003f6f 	.word	0x08003f6f
 8003dd4:	08003eed 	.word	0x08003eed
 8003dd8:	08003f6f 	.word	0x08003f6f
 8003ddc:	08003f6f 	.word	0x08003f6f
 8003de0:	08003f6f 	.word	0x08003f6f
 8003de4:	08003f2d 	.word	0x08003f2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fabc 	bl	800436c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0204 	bic.w	r2, r2, #4
 8003e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6999      	ldr	r1, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	619a      	str	r2, [r3, #24]
      break;
 8003e26:	e0a5      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb36 	bl	80044a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	619a      	str	r2, [r3, #24]
      break;
 8003e68:	e084      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fba9 	bl	80045c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0208 	orr.w	r2, r2, #8
 8003e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0204 	bic.w	r2, r2, #4
 8003e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69d9      	ldr	r1, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	61da      	str	r2, [r3, #28]
      break;
 8003ea8:	e064      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fc1b 	bl	80046ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	021a      	lsls	r2, r3, #8
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	61da      	str	r2, [r3, #28]
      break;
 8003eea:	e043      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fc8e 	bl	8004814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f2a:	e023      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fcd8 	bl	80048e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f6c:	e002      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
      break;
 8003f72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop

08003f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0f6      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x20a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6f      	ldr	r2, [pc, #444]	@ (800419c <HAL_TIM_ConfigClockSource+0x214>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	f000 80c1 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8003fe4:	4a6d      	ldr	r2, [pc, #436]	@ (800419c <HAL_TIM_ConfigClockSource+0x214>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f200 80c6 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fec:	4a6c      	ldr	r2, [pc, #432]	@ (80041a0 <HAL_TIM_ConfigClockSource+0x218>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	f000 80b9 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8003ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80041a0 <HAL_TIM_ConfigClockSource+0x218>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f200 80be 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ffc:	4a69      	ldr	r2, [pc, #420]	@ (80041a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	f000 80b1 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004004:	4a67      	ldr	r2, [pc, #412]	@ (80041a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	f200 80b6 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800400c:	4a66      	ldr	r2, [pc, #408]	@ (80041a8 <HAL_TIM_ConfigClockSource+0x220>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f000 80a9 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004014:	4a64      	ldr	r2, [pc, #400]	@ (80041a8 <HAL_TIM_ConfigClockSource+0x220>)
 8004016:	4293      	cmp	r3, r2
 8004018:	f200 80ae 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800401c:	4a63      	ldr	r2, [pc, #396]	@ (80041ac <HAL_TIM_ConfigClockSource+0x224>)
 800401e:	4293      	cmp	r3, r2
 8004020:	f000 80a1 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004024:	4a61      	ldr	r2, [pc, #388]	@ (80041ac <HAL_TIM_ConfigClockSource+0x224>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f200 80a6 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800402c:	4a60      	ldr	r2, [pc, #384]	@ (80041b0 <HAL_TIM_ConfigClockSource+0x228>)
 800402e:	4293      	cmp	r3, r2
 8004030:	f000 8099 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004034:	4a5e      	ldr	r2, [pc, #376]	@ (80041b0 <HAL_TIM_ConfigClockSource+0x228>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f200 809e 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800403c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004040:	f000 8091 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004044:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004048:	f200 8096 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800404c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004050:	f000 8089 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 8004054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004058:	f200 808e 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004060:	d03e      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0x158>
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004066:	f200 8087 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406e:	f000 8086 	beq.w	800417e <HAL_TIM_ConfigClockSource+0x1f6>
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004076:	d87f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8004078:	2b70      	cmp	r3, #112	@ 0x70
 800407a:	d01a      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x12a>
 800407c:	2b70      	cmp	r3, #112	@ 0x70
 800407e:	d87b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8004080:	2b60      	cmp	r3, #96	@ 0x60
 8004082:	d050      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x19e>
 8004084:	2b60      	cmp	r3, #96	@ 0x60
 8004086:	d877      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8004088:	2b50      	cmp	r3, #80	@ 0x50
 800408a:	d03c      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x17e>
 800408c:	2b50      	cmp	r3, #80	@ 0x50
 800408e:	d873      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d058      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x1be>
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d86f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 8004098:	2b30      	cmp	r3, #48	@ 0x30
 800409a:	d064      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d86b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d060      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d867      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05c      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d05a      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x1de>
 80040b0:	e062      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	f000 fcf9 	bl	8004ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
      break;
 80040de:	e04f      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	f000 fce2 	bl	8004ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004102:	609a      	str	r2, [r3, #8]
      break;
 8004104:	e03c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	461a      	mov	r2, r3
 8004114:	f000 fc54 	bl	80049c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2150      	movs	r1, #80	@ 0x50
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fcad 	bl	8004a7e <TIM_ITRx_SetConfig>
      break;
 8004124:	e02c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004132:	461a      	mov	r2, r3
 8004134:	f000 fc73 	bl	8004a1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2160      	movs	r1, #96	@ 0x60
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fc9d 	bl	8004a7e <TIM_ITRx_SetConfig>
      break;
 8004144:	e01c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 fc34 	bl	80049c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2140      	movs	r1, #64	@ 0x40
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fc8d 	bl	8004a7e <TIM_ITRx_SetConfig>
      break;
 8004164:	e00c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f000 fc84 	bl	8004a7e <TIM_ITRx_SetConfig>
      break;
 8004176:	e003      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e000      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800417e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00100070 	.word	0x00100070
 80041a0:	00100060 	.word	0x00100060
 80041a4:	00100050 	.word	0x00100050
 80041a8:	00100040 	.word	0x00100040
 80041ac:	00100030 	.word	0x00100030
 80041b0:	00100020 	.word	0x00100020

080041b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a4c      	ldr	r2, [pc, #304]	@ (8004348 <TIM_Base_SetConfig+0x144>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d017      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004222:	d013      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a49      	ldr	r2, [pc, #292]	@ (800434c <TIM_Base_SetConfig+0x148>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a48      	ldr	r2, [pc, #288]	@ (8004350 <TIM_Base_SetConfig+0x14c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a47      	ldr	r2, [pc, #284]	@ (8004354 <TIM_Base_SetConfig+0x150>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a46      	ldr	r2, [pc, #280]	@ (8004358 <TIM_Base_SetConfig+0x154>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0x48>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a45      	ldr	r2, [pc, #276]	@ (800435c <TIM_Base_SetConfig+0x158>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a39      	ldr	r2, [pc, #228]	@ (8004348 <TIM_Base_SetConfig+0x144>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d023      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426c:	d01f      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a36      	ldr	r2, [pc, #216]	@ (800434c <TIM_Base_SetConfig+0x148>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01b      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a35      	ldr	r2, [pc, #212]	@ (8004350 <TIM_Base_SetConfig+0x14c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d017      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a34      	ldr	r2, [pc, #208]	@ (8004354 <TIM_Base_SetConfig+0x150>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a33      	ldr	r2, [pc, #204]	@ (8004358 <TIM_Base_SetConfig+0x154>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a33      	ldr	r2, [pc, #204]	@ (8004360 <TIM_Base_SetConfig+0x15c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <TIM_Base_SetConfig+0x160>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a31      	ldr	r2, [pc, #196]	@ (8004368 <TIM_Base_SetConfig+0x164>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0xaa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2c      	ldr	r2, [pc, #176]	@ (800435c <TIM_Base_SetConfig+0x158>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <TIM_Base_SetConfig+0x144>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <TIM_Base_SetConfig+0x110>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <TIM_Base_SetConfig+0x154>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0x110>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <TIM_Base_SetConfig+0x15c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0x110>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <TIM_Base_SetConfig+0x160>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0x110>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <TIM_Base_SetConfig+0x164>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0x110>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a13      	ldr	r2, [pc, #76]	@ (800435c <TIM_Base_SetConfig+0x158>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]
  }
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40015000 	.word	0x40015000
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800

0800436c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0201 	bic.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0302 	bic.w	r3, r3, #2
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a30      	ldr	r2, [pc, #192]	@ (8004488 <TIM_OC1_SetConfig+0x11c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <TIM_OC1_SetConfig+0x88>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a2f      	ldr	r2, [pc, #188]	@ (800448c <TIM_OC1_SetConfig+0x120>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <TIM_OC1_SetConfig+0x88>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004490 <TIM_OC1_SetConfig+0x124>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00b      	beq.n	80043f4 <TIM_OC1_SetConfig+0x88>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2d      	ldr	r2, [pc, #180]	@ (8004494 <TIM_OC1_SetConfig+0x128>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_OC1_SetConfig+0x88>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004498 <TIM_OC1_SetConfig+0x12c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC1_SetConfig+0x88>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a2b      	ldr	r2, [pc, #172]	@ (800449c <TIM_OC1_SetConfig+0x130>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0308 	bic.w	r3, r3, #8
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <TIM_OC1_SetConfig+0x11c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_OC1_SetConfig+0xd2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <TIM_OC1_SetConfig+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_OC1_SetConfig+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <TIM_OC1_SetConfig+0x124>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_OC1_SetConfig+0xd2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1a      	ldr	r2, [pc, #104]	@ (8004494 <TIM_OC1_SetConfig+0x128>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_OC1_SetConfig+0xd2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a19      	ldr	r2, [pc, #100]	@ (8004498 <TIM_OC1_SetConfig+0x12c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC1_SetConfig+0xd2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a18      	ldr	r2, [pc, #96]	@ (800449c <TIM_OC1_SetConfig+0x130>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800
 800449c:	40015000 	.word	0x40015000

080044a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0210 	bic.w	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0320 	bic.w	r3, r3, #32
 80044ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <TIM_OC2_SetConfig+0x110>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_OC2_SetConfig+0x74>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a2b      	ldr	r2, [pc, #172]	@ (80045b4 <TIM_OC2_SetConfig+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC2_SetConfig+0x74>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2a      	ldr	r2, [pc, #168]	@ (80045b8 <TIM_OC2_SetConfig+0x118>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10d      	bne.n	8004530 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800451a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a1f      	ldr	r2, [pc, #124]	@ (80045b0 <TIM_OC2_SetConfig+0x110>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <TIM_OC2_SetConfig+0xc0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <TIM_OC2_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00f      	beq.n	8004560 <TIM_OC2_SetConfig+0xc0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1e      	ldr	r2, [pc, #120]	@ (80045bc <TIM_OC2_SetConfig+0x11c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_OC2_SetConfig+0xc0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a1d      	ldr	r2, [pc, #116]	@ (80045c0 <TIM_OC2_SetConfig+0x120>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_OC2_SetConfig+0xc0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <TIM_OC2_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC2_SetConfig+0xc0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a17      	ldr	r2, [pc, #92]	@ (80045b8 <TIM_OC2_SetConfig+0x118>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d113      	bne.n	8004588 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800456e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40013400 	.word	0x40013400
 80045b8:	40015000 	.word	0x40015000
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800

080045c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <TIM_OC3_SetConfig+0x10c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_OC3_SetConfig+0x72>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <TIM_OC3_SetConfig+0x110>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_OC3_SetConfig+0x72>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <TIM_OC3_SetConfig+0x114>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10d      	bne.n	8004656 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <TIM_OC3_SetConfig+0x10c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_OC3_SetConfig+0xbe>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1d      	ldr	r2, [pc, #116]	@ (80046d8 <TIM_OC3_SetConfig+0x110>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_OC3_SetConfig+0xbe>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <TIM_OC3_SetConfig+0x118>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_OC3_SetConfig+0xbe>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <TIM_OC3_SetConfig+0x11c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_OC3_SetConfig+0xbe>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <TIM_OC3_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_OC3_SetConfig+0xbe>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <TIM_OC3_SetConfig+0x114>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d113      	bne.n	80046ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800468c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40015000 	.word	0x40015000
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800473a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	031b      	lsls	r3, r3, #12
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2c      	ldr	r2, [pc, #176]	@ (80047fc <TIM_OC4_SetConfig+0x110>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <TIM_OC4_SetConfig+0x74>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2b      	ldr	r2, [pc, #172]	@ (8004800 <TIM_OC4_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_OC4_SetConfig+0x74>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a2a      	ldr	r2, [pc, #168]	@ (8004804 <TIM_OC4_SetConfig+0x118>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10d      	bne.n	800477c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800477a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <TIM_OC4_SetConfig+0x110>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <TIM_OC4_SetConfig+0xc0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1e      	ldr	r2, [pc, #120]	@ (8004800 <TIM_OC4_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00f      	beq.n	80047ac <TIM_OC4_SetConfig+0xc0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1e      	ldr	r2, [pc, #120]	@ (8004808 <TIM_OC4_SetConfig+0x11c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_OC4_SetConfig+0xc0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1d      	ldr	r2, [pc, #116]	@ (800480c <TIM_OC4_SetConfig+0x120>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC4_SetConfig+0xc0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <TIM_OC4_SetConfig+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC4_SetConfig+0xc0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a17      	ldr	r2, [pc, #92]	@ (8004804 <TIM_OC4_SetConfig+0x118>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d113      	bne.n	80047d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40013400 	.word	0x40013400
 8004804:	40015000 	.word	0x40015000
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a19      	ldr	r2, [pc, #100]	@ (80048d0 <TIM_OC5_SetConfig+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <TIM_OC5_SetConfig+0x82>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <TIM_OC5_SetConfig+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00f      	beq.n	8004896 <TIM_OC5_SetConfig+0x82>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <TIM_OC5_SetConfig+0xc4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_OC5_SetConfig+0x82>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a16      	ldr	r2, [pc, #88]	@ (80048dc <TIM_OC5_SetConfig+0xc8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_OC5_SetConfig+0x82>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <TIM_OC5_SetConfig+0xcc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC5_SetConfig+0x82>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	@ (80048e4 <TIM_OC5_SetConfig+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d109      	bne.n	80048aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800
 80048e4:	40015000 	.word	0x40015000

080048e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800492e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1a      	ldr	r2, [pc, #104]	@ (80049a8 <TIM_OC6_SetConfig+0xc0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_OC6_SetConfig+0x84>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <TIM_OC6_SetConfig+0xc4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00f      	beq.n	800496c <TIM_OC6_SetConfig+0x84>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a18      	ldr	r2, [pc, #96]	@ (80049b0 <TIM_OC6_SetConfig+0xc8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_OC6_SetConfig+0x84>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <TIM_OC6_SetConfig+0xcc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_OC6_SetConfig+0x84>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a16      	ldr	r2, [pc, #88]	@ (80049b8 <TIM_OC6_SetConfig+0xd0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC6_SetConfig+0x84>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a15      	ldr	r2, [pc, #84]	@ (80049bc <TIM_OC6_SetConfig+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d109      	bne.n	8004980 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800
 80049bc:	40015000 	.word	0x40015000

080049c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f023 0201 	bic.w	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 030a 	bic.w	r3, r3, #10
 80049fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b087      	sub	sp, #28
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f023 0210 	bic.w	r2, r3, #16
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f043 0307 	orr.w	r3, r3, #7
 8004aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	021a      	lsls	r2, r3, #8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e074      	b.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a33      	ldr	r2, [pc, #204]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a31      	ldr	r2, [pc, #196]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ba0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a21      	ldr	r2, [pc, #132]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bdc:	d01d      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a11      	ldr	r2, [pc, #68]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10c      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40015000 	.word	0x40015000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000

08004c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e042      	b.n	8004d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc ff65 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	@ 0x24
 8004d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fbb2 	bl	80054b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8b3 	bl	8004eb8 <UART_SetConfig>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e01b      	b.n	8004d94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fc31 	bl	80055f4 <UART_CheckIdleState>
 8004d92:	4603      	mov	r3, r0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	@ 0x28
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d17b      	bne.n	8004eae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_Transmit+0x26>
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e074      	b.n	8004eb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	@ 0x21
 8004dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc fff1 	bl	8001dbc <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df4:	d108      	bne.n	8004e08 <HAL_UART_Transmit+0x6c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e10:	e030      	b.n	8004e74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2180      	movs	r1, #128	@ 0x80
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fc93 	bl	8005748 <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e03d      	b.n	8004eb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e007      	b.n	8004e62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1c8      	bne.n	8004e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2140      	movs	r1, #64	@ 0x40
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fc5c 	bl	8005748 <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e006      	b.n	8004eb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08c      	sub	sp, #48	@ 0x30
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4baa      	ldr	r3, [pc, #680]	@ (8005190 <UART_SetConfig+0x2d8>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a9f      	ldr	r2, [pc, #636]	@ (8005194 <UART_SetConfig+0x2dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f20:	4313      	orrs	r3, r2
 8004f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	f023 010f 	bic.w	r1, r3, #15
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a90      	ldr	r2, [pc, #576]	@ (8005198 <UART_SetConfig+0x2e0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0xf0>
 8004f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800519c <UART_SetConfig+0x2e4>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d81a      	bhi.n	8004fa0 <UART_SetConfig+0xe8>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0xb8>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f86:	e116      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8e:	e112      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f96:	e10e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e10a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e106      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7c      	ldr	r2, [pc, #496]	@ (80051a0 <UART_SetConfig+0x2e8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d138      	bne.n	8005024 <UART_SetConfig+0x16c>
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800519c <UART_SetConfig+0x2e4>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d82d      	bhi.n	800501c <UART_SetConfig+0x164>
 8004fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x110>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005002:	e0d8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500a:	e0d4      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005012:	e0d0      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501a:	e0cc      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005022:	e0c8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5e      	ldr	r2, [pc, #376]	@ (80051a4 <UART_SetConfig+0x2ec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d125      	bne.n	800507a <UART_SetConfig+0x1c2>
 800502e:	4b5b      	ldr	r3, [pc, #364]	@ (800519c <UART_SetConfig+0x2e4>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005038:	2b30      	cmp	r3, #48	@ 0x30
 800503a:	d016      	beq.n	800506a <UART_SetConfig+0x1b2>
 800503c:	2b30      	cmp	r3, #48	@ 0x30
 800503e:	d818      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d00a      	beq.n	800505a <UART_SetConfig+0x1a2>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d814      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <UART_SetConfig+0x19a>
 800504c:	2b10      	cmp	r3, #16
 800504e:	d008      	beq.n	8005062 <UART_SetConfig+0x1aa>
 8005050:	e00f      	b.n	8005072 <UART_SetConfig+0x1ba>
 8005052:	2300      	movs	r3, #0
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005058:	e0ad      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800505a:	2302      	movs	r3, #2
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005060:	e0a9      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005062:	2304      	movs	r3, #4
 8005064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005068:	e0a5      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800506a:	2308      	movs	r3, #8
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005070:	e0a1      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005072:	2310      	movs	r3, #16
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005078:	e09d      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4a      	ldr	r2, [pc, #296]	@ (80051a8 <UART_SetConfig+0x2f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d125      	bne.n	80050d0 <UART_SetConfig+0x218>
 8005084:	4b45      	ldr	r3, [pc, #276]	@ (800519c <UART_SetConfig+0x2e4>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800508e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005090:	d016      	beq.n	80050c0 <UART_SetConfig+0x208>
 8005092:	2bc0      	cmp	r3, #192	@ 0xc0
 8005094:	d818      	bhi.n	80050c8 <UART_SetConfig+0x210>
 8005096:	2b80      	cmp	r3, #128	@ 0x80
 8005098:	d00a      	beq.n	80050b0 <UART_SetConfig+0x1f8>
 800509a:	2b80      	cmp	r3, #128	@ 0x80
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x210>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x1f0>
 80050a2:	2b40      	cmp	r3, #64	@ 0x40
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x200>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x210>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ae:	e082      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b6:	e07e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050be:	e07a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c6:	e076      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ce:	e072      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a35      	ldr	r2, [pc, #212]	@ (80051ac <UART_SetConfig+0x2f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d12a      	bne.n	8005130 <UART_SetConfig+0x278>
 80050da:	4b30      	ldr	r3, [pc, #192]	@ (800519c <UART_SetConfig+0x2e4>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e8:	d01a      	beq.n	8005120 <UART_SetConfig+0x268>
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ee:	d81b      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d00c      	beq.n	8005110 <UART_SetConfig+0x258>
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fa:	d815      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <UART_SetConfig+0x250>
 8005100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005104:	d008      	beq.n	8005118 <UART_SetConfig+0x260>
 8005106:	e00f      	b.n	8005128 <UART_SetConfig+0x270>
 8005108:	2300      	movs	r3, #0
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e052      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005110:	2302      	movs	r3, #2
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005116:	e04e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511e:	e04a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e046      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512e:	e042      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <UART_SetConfig+0x2dc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d13a      	bne.n	80051b0 <UART_SetConfig+0x2f8>
 800513a:	4b18      	ldr	r3, [pc, #96]	@ (800519c <UART_SetConfig+0x2e4>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005144:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005148:	d01a      	beq.n	8005180 <UART_SetConfig+0x2c8>
 800514a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800514e:	d81b      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005154:	d00c      	beq.n	8005170 <UART_SetConfig+0x2b8>
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800515a:	d815      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <UART_SetConfig+0x2b0>
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005164:	d008      	beq.n	8005178 <UART_SetConfig+0x2c0>
 8005166:	e00f      	b.n	8005188 <UART_SetConfig+0x2d0>
 8005168:	2300      	movs	r3, #0
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e022      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e01e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e01a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e016      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e012      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005190:	cfff69f3 	.word	0xcfff69f3
 8005194:	40008000 	.word	0x40008000
 8005198:	40013800 	.word	0x40013800
 800519c:	40021000 	.word	0x40021000
 80051a0:	40004400 	.word	0x40004400
 80051a4:	40004800 	.word	0x40004800
 80051a8:	40004c00 	.word	0x40004c00
 80051ac:	40005000 	.word	0x40005000
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4aae      	ldr	r2, [pc, #696]	@ (8005474 <UART_SetConfig+0x5bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	f040 8097 	bne.w	80052f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d823      	bhi.n	8005212 <UART_SetConfig+0x35a>
 80051ca:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <UART_SetConfig+0x318>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	08005213 	.word	0x08005213
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005203 	.word	0x08005203
 80051e4:	08005213 	.word	0x08005213
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005213 	.word	0x08005213
 80051f0:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fe2c 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 80051f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005478 <UART_SetConfig+0x5c0>)
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005200:	e00d      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fd fdb7 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8005206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005208:	e009      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800521c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8130 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	4a94      	ldr	r2, [pc, #592]	@ (800547c <UART_SetConfig+0x5c4>)
 800522c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005230:	461a      	mov	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	fbb3 f3f2 	udiv	r3, r3, r2
 8005238:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800525c:	e113      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	2200      	movs	r2, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	4a84      	ldr	r2, [pc, #528]	@ (800547c <UART_SetConfig+0x5c4>)
 800526c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005270:	b29b      	uxth	r3, r3
 8005272:	2200      	movs	r2, #0
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005280:	f7fb fd0a 	bl	8000c98 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	020b      	lsls	r3, r1, #8
 8005296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800529a:	0202      	lsls	r2, r0, #8
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	0849      	lsrs	r1, r1, #1
 80052a2:	2000      	movs	r0, #0
 80052a4:	460c      	mov	r4, r1
 80052a6:	4605      	mov	r5, r0
 80052a8:	eb12 0804 	adds.w	r8, r2, r4
 80052ac:	eb43 0905 	adc.w	r9, r3, r5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	469a      	mov	sl, r3
 80052b8:	4693      	mov	fp, r2
 80052ba:	4652      	mov	r2, sl
 80052bc:	465b      	mov	r3, fp
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb fce9 	bl	8000c98 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4613      	mov	r3, r2
 80052cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d4:	d308      	bcc.n	80052e8 <UART_SetConfig+0x430>
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052dc:	d204      	bcs.n	80052e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e0ce      	b.n	8005486 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052ee:	e0ca      	b.n	8005486 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f8:	d166      	bne.n	80053c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d827      	bhi.n	8005352 <UART_SetConfig+0x49a>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0x450>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd fd90 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8005330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005332:	e014      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fd fda2 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8005338:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b4e      	ldr	r3, [pc, #312]	@ (8005478 <UART_SetConfig+0x5c0>)
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fd fd17 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8005346:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8090 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	4a44      	ldr	r2, [pc, #272]	@ (800547c <UART_SetConfig+0x5c4>)
 800536c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005370:	461a      	mov	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	005a      	lsls	r2, r3, #1
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <UART_SetConfig+0x508>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005398:	d212      	bcs.n	80053c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8bfb      	ldrh	r3, [r7, #30]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	8bfa      	ldrh	r2, [r7, #30]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e062      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053c6:	e05e      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d828      	bhi.n	8005422 <UART_SetConfig+0x56a>
 80053d0:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <UART_SetConfig+0x520>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
 80053f0:	08005423 	.word	0x08005423
 80053f4:	08005423 	.word	0x08005423
 80053f8:	0800541b 	.word	0x0800541b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fd fd28 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8005400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005402:	e014      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fd fd3a 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800540a:	e010      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4b1a      	ldr	r3, [pc, #104]	@ (8005478 <UART_SetConfig+0x5c0>)
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005410:	e00d      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005412:	f7fd fcaf 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8005416:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800542c:	bf00      	nop
    }

    if (pclk != 0U)
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d028      	beq.n	8005486 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	4a10      	ldr	r2, [pc, #64]	@ (800547c <UART_SetConfig+0x5c4>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	fbb3 f2f2 	udiv	r2, r3, r2
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d910      	bls.n	8005480 <UART_SetConfig+0x5c8>
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005464:	d20c      	bcs.n	8005480 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b29a      	uxth	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x5ce>
 8005472:	bf00      	nop
 8005474:	40008000 	.word	0x40008000
 8005478:	00f42400 	.word	0x00f42400
 800547c:	080087c4 	.word	0x080087c4
      }
      else
      {
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2201      	movs	r2, #1
 800548a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3730      	adds	r7, #48	@ 0x30
 80054aa:	46bd      	mov	sp, r7
 80054ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ae:	d10a      	bne.n	80055c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b098      	sub	sp, #96	@ 0x60
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005604:	f7fc fbda 	bl	8001dbc <HAL_GetTick>
 8005608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d12f      	bne.n	8005678 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f88e 	bl	8005748 <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d022      	beq.n	8005678 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005646:	653b      	str	r3, [r7, #80]	@ 0x50
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005650:	647b      	str	r3, [r7, #68]	@ 0x44
 8005652:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800565e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e063      	b.n	8005740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d149      	bne.n	800571a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005686:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	2200      	movs	r2, #0
 8005690:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f857 	bl	8005748 <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d03c      	beq.n	800571a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	623b      	str	r3, [r7, #32]
   return(result);
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056be:	633b      	str	r3, [r7, #48]	@ 0x30
 80056c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056f2:	61fa      	str	r2, [r7, #28]
 80056f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	69b9      	ldr	r1, [r7, #24]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e012      	b.n	8005740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3758      	adds	r7, #88	@ 0x58
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005758:	e04f      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005760:	d04b      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fc fb2b 	bl	8001dbc <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <UART_WaitOnFlagUntilTimeout+0x30>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e04e      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d037      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b80      	cmp	r3, #128	@ 0x80
 800578e:	d034      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b40      	cmp	r3, #64	@ 0x40
 8005794:	d031      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d110      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2208      	movs	r2, #8
 80057aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f838 	bl	8005822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2208      	movs	r2, #8
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e029      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d4:	d111      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f81e 	bl	8005822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d0a0      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005822:	b480      	push	{r7}
 8005824:	b095      	sub	sp, #84	@ 0x54
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005848:	643b      	str	r3, [r7, #64]	@ 0x40
 800584a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e3      	bne.n	800585c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d118      	bne.n	80058ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e6      	bne.n	800589c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058e2:	bf00      	nop
 80058e4:	3754      	adds	r7, #84	@ 0x54
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UARTEx_DisableFifoMode+0x16>
 8005900:	2302      	movs	r3, #2
 8005902:	e027      	b.n	8005954 <HAL_UARTEx_DisableFifoMode+0x66>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	@ 0x24
 8005910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005932:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e02d      	b.n	80059d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2224      	movs	r2, #36	@ 0x24
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f84f 	bl	8005a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e02d      	b.n	8005a50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	@ 0x24
 8005a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f811 	bl	8005a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a78:	e031      	b.n	8005ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a7e:	2308      	movs	r3, #8
 8005a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	0e5b      	lsrs	r3, r3, #25
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	0f5b      	lsrs	r3, r3, #29
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	7b3a      	ldrb	r2, [r7, #12]
 8005aa6:	4911      	ldr	r1, [pc, #68]	@ (8005aec <UARTEx_SetNbDataToProcess+0x94>)
 8005aa8:	5c8a      	ldrb	r2, [r1, r2]
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aae:	7b3a      	ldrb	r2, [r7, #12]
 8005ab0:	490f      	ldr	r1, [pc, #60]	@ (8005af0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	7b7a      	ldrb	r2, [r7, #13]
 8005ac4:	4909      	ldr	r1, [pc, #36]	@ (8005aec <UARTEx_SetNbDataToProcess+0x94>)
 8005ac6:	5c8a      	ldrb	r2, [r1, r2]
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005acc:	7b7a      	ldrb	r2, [r7, #13]
 8005ace:	4908      	ldr	r1, [pc, #32]	@ (8005af0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	080087dc 	.word	0x080087dc
 8005af0:	080087e4 	.word	0x080087e4

08005af4 <__cvt>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	ec57 6b10 	vmov	r6, r7, d0
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4619      	mov	r1, r3
 8005b02:	463b      	mov	r3, r7
 8005b04:	bfbb      	ittet	lt
 8005b06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b0a:	461f      	movlt	r7, r3
 8005b0c:	2300      	movge	r3, #0
 8005b0e:	232d      	movlt	r3, #45	@ 0x2d
 8005b10:	700b      	strb	r3, [r1, #0]
 8005b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b18:	4691      	mov	r9, r2
 8005b1a:	f023 0820 	bic.w	r8, r3, #32
 8005b1e:	bfbc      	itt	lt
 8005b20:	4632      	movlt	r2, r6
 8005b22:	4616      	movlt	r6, r2
 8005b24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b28:	d005      	beq.n	8005b36 <__cvt+0x42>
 8005b2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b2e:	d100      	bne.n	8005b32 <__cvt+0x3e>
 8005b30:	3401      	adds	r4, #1
 8005b32:	2102      	movs	r1, #2
 8005b34:	e000      	b.n	8005b38 <__cvt+0x44>
 8005b36:	2103      	movs	r1, #3
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	ab02      	add	r3, sp, #8
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	ec47 6b10 	vmov	d0, r6, r7
 8005b44:	4653      	mov	r3, sl
 8005b46:	4622      	mov	r2, r4
 8005b48:	f000 fe5a 	bl	8006800 <_dtoa_r>
 8005b4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b50:	4605      	mov	r5, r0
 8005b52:	d119      	bne.n	8005b88 <__cvt+0x94>
 8005b54:	f019 0f01 	tst.w	r9, #1
 8005b58:	d00e      	beq.n	8005b78 <__cvt+0x84>
 8005b5a:	eb00 0904 	add.w	r9, r0, r4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa ffd7 	bl	8000b18 <__aeabi_dcmpeq>
 8005b6a:	b108      	cbz	r0, 8005b70 <__cvt+0x7c>
 8005b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b70:	2230      	movs	r2, #48	@ 0x30
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	454b      	cmp	r3, r9
 8005b76:	d31e      	bcc.n	8005bb6 <__cvt+0xc2>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b7c:	1b5b      	subs	r3, r3, r5
 8005b7e:	4628      	mov	r0, r5
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	b004      	add	sp, #16
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b8c:	eb00 0904 	add.w	r9, r0, r4
 8005b90:	d1e5      	bne.n	8005b5e <__cvt+0x6a>
 8005b92:	7803      	ldrb	r3, [r0, #0]
 8005b94:	2b30      	cmp	r3, #48	@ 0x30
 8005b96:	d10a      	bne.n	8005bae <__cvt+0xba>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa ffba 	bl	8000b18 <__aeabi_dcmpeq>
 8005ba4:	b918      	cbnz	r0, 8005bae <__cvt+0xba>
 8005ba6:	f1c4 0401 	rsb	r4, r4, #1
 8005baa:	f8ca 4000 	str.w	r4, [sl]
 8005bae:	f8da 3000 	ldr.w	r3, [sl]
 8005bb2:	4499      	add	r9, r3
 8005bb4:	e7d3      	b.n	8005b5e <__cvt+0x6a>
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	9103      	str	r1, [sp, #12]
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e7d9      	b.n	8005b72 <__cvt+0x7e>

08005bbe <__exponent>:
 8005bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	bfba      	itte	lt
 8005bc4:	4249      	neglt	r1, r1
 8005bc6:	232d      	movlt	r3, #45	@ 0x2d
 8005bc8:	232b      	movge	r3, #43	@ 0x2b
 8005bca:	2909      	cmp	r1, #9
 8005bcc:	7002      	strb	r2, [r0, #0]
 8005bce:	7043      	strb	r3, [r0, #1]
 8005bd0:	dd29      	ble.n	8005c26 <__exponent+0x68>
 8005bd2:	f10d 0307 	add.w	r3, sp, #7
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	270a      	movs	r7, #10
 8005bda:	461a      	mov	r2, r3
 8005bdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005be0:	fb07 1416 	mls	r4, r7, r6, r1
 8005be4:	3430      	adds	r4, #48	@ 0x30
 8005be6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005bea:	460c      	mov	r4, r1
 8005bec:	2c63      	cmp	r4, #99	@ 0x63
 8005bee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	dcf1      	bgt.n	8005bda <__exponent+0x1c>
 8005bf6:	3130      	adds	r1, #48	@ 0x30
 8005bf8:	1e94      	subs	r4, r2, #2
 8005bfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bfe:	1c41      	adds	r1, r0, #1
 8005c00:	4623      	mov	r3, r4
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	d30a      	bcc.n	8005c1c <__exponent+0x5e>
 8005c06:	f10d 0309 	add.w	r3, sp, #9
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ac      	cmp	r4, r5
 8005c0e:	bf88      	it	hi
 8005c10:	2300      	movhi	r3, #0
 8005c12:	3302      	adds	r3, #2
 8005c14:	4403      	add	r3, r0
 8005c16:	1a18      	subs	r0, r3, r0
 8005c18:	b003      	add	sp, #12
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c24:	e7ed      	b.n	8005c02 <__exponent+0x44>
 8005c26:	2330      	movs	r3, #48	@ 0x30
 8005c28:	3130      	adds	r1, #48	@ 0x30
 8005c2a:	7083      	strb	r3, [r0, #2]
 8005c2c:	70c1      	strb	r1, [r0, #3]
 8005c2e:	1d03      	adds	r3, r0, #4
 8005c30:	e7f1      	b.n	8005c16 <__exponent+0x58>
	...

08005c34 <_printf_float>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	b08d      	sub	sp, #52	@ 0x34
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c40:	4616      	mov	r6, r2
 8005c42:	461f      	mov	r7, r3
 8005c44:	4605      	mov	r5, r0
 8005c46:	f000 fcdb 	bl	8006600 <_localeconv_r>
 8005c4a:	6803      	ldr	r3, [r0, #0]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fb36 	bl	80002c0 <strlen>
 8005c54:	2300      	movs	r3, #0
 8005c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c58:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5c:	9005      	str	r0, [sp, #20]
 8005c5e:	3307      	adds	r3, #7
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	f103 0208 	add.w	r2, r3, #8
 8005c68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c70:	f8c8 2000 	str.w	r2, [r8]
 8005c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c7c:	9307      	str	r3, [sp, #28]
 8005c7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8005efc <_printf_float+0x2c8>)
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c90:	f7fa ff74 	bl	8000b7c <__aeabi_dcmpun>
 8005c94:	bb70      	cbnz	r0, 8005cf4 <_printf_float+0xc0>
 8005c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c9a:	4b98      	ldr	r3, [pc, #608]	@ (8005efc <_printf_float+0x2c8>)
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ca0:	f7fa ff4e 	bl	8000b40 <__aeabi_dcmple>
 8005ca4:	bb30      	cbnz	r0, 8005cf4 <_printf_float+0xc0>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f7fa ff3d 	bl	8000b2c <__aeabi_dcmplt>
 8005cb2:	b110      	cbz	r0, 8005cba <_printf_float+0x86>
 8005cb4:	232d      	movs	r3, #45	@ 0x2d
 8005cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cba:	4a91      	ldr	r2, [pc, #580]	@ (8005f00 <_printf_float+0x2cc>)
 8005cbc:	4b91      	ldr	r3, [pc, #580]	@ (8005f04 <_printf_float+0x2d0>)
 8005cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005cc2:	bf8c      	ite	hi
 8005cc4:	4690      	movhi	r8, r2
 8005cc6:	4698      	movls	r8, r3
 8005cc8:	2303      	movs	r3, #3
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	f02b 0304 	bic.w	r3, fp, #4
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	f04f 0900 	mov.w	r9, #0
 8005cd6:	9700      	str	r7, [sp, #0]
 8005cd8:	4633      	mov	r3, r6
 8005cda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f9d2 	bl	8006088 <_printf_common>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f040 808d 	bne.w	8005e04 <_printf_float+0x1d0>
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cee:	b00d      	add	sp, #52	@ 0x34
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	f7fa ff3e 	bl	8000b7c <__aeabi_dcmpun>
 8005d00:	b140      	cbz	r0, 8005d14 <_printf_float+0xe0>
 8005d02:	464b      	mov	r3, r9
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfbc      	itt	lt
 8005d08:	232d      	movlt	r3, #45	@ 0x2d
 8005d0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f08 <_printf_float+0x2d4>)
 8005d10:	4b7e      	ldr	r3, [pc, #504]	@ (8005f0c <_printf_float+0x2d8>)
 8005d12:	e7d4      	b.n	8005cbe <_printf_float+0x8a>
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d1a:	9206      	str	r2, [sp, #24]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	d13b      	bne.n	8005d98 <_printf_float+0x164>
 8005d20:	2306      	movs	r3, #6
 8005d22:	6063      	str	r3, [r4, #4]
 8005d24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	9303      	str	r3, [sp, #12]
 8005d2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d34:	ab09      	add	r3, sp, #36	@ 0x24
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	6861      	ldr	r1, [r4, #4]
 8005d3a:	ec49 8b10 	vmov	d0, r8, r9
 8005d3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff fed6 	bl	8005af4 <__cvt>
 8005d48:	9b06      	ldr	r3, [sp, #24]
 8005d4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d4c:	2b47      	cmp	r3, #71	@ 0x47
 8005d4e:	4680      	mov	r8, r0
 8005d50:	d129      	bne.n	8005da6 <_printf_float+0x172>
 8005d52:	1cc8      	adds	r0, r1, #3
 8005d54:	db02      	blt.n	8005d5c <_printf_float+0x128>
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	dd41      	ble.n	8005de0 <_printf_float+0x1ac>
 8005d5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d60:	fa5f fa8a 	uxtb.w	sl, sl
 8005d64:	3901      	subs	r1, #1
 8005d66:	4652      	mov	r2, sl
 8005d68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d6e:	f7ff ff26 	bl	8005bbe <__exponent>
 8005d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d74:	1813      	adds	r3, r2, r0
 8005d76:	2a01      	cmp	r2, #1
 8005d78:	4681      	mov	r9, r0
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	dc02      	bgt.n	8005d84 <_printf_float+0x150>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	07d2      	lsls	r2, r2, #31
 8005d82:	d501      	bpl.n	8005d88 <_printf_float+0x154>
 8005d84:	3301      	adds	r3, #1
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0a2      	beq.n	8005cd6 <_printf_float+0xa2>
 8005d90:	232d      	movs	r3, #45	@ 0x2d
 8005d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d96:	e79e      	b.n	8005cd6 <_printf_float+0xa2>
 8005d98:	9a06      	ldr	r2, [sp, #24]
 8005d9a:	2a47      	cmp	r2, #71	@ 0x47
 8005d9c:	d1c2      	bne.n	8005d24 <_printf_float+0xf0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1c0      	bne.n	8005d24 <_printf_float+0xf0>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7bd      	b.n	8005d22 <_printf_float+0xee>
 8005da6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005daa:	d9db      	bls.n	8005d64 <_printf_float+0x130>
 8005dac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005db0:	d118      	bne.n	8005de4 <_printf_float+0x1b0>
 8005db2:	2900      	cmp	r1, #0
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	dd0b      	ble.n	8005dd0 <_printf_float+0x19c>
 8005db8:	6121      	str	r1, [r4, #16]
 8005dba:	b913      	cbnz	r3, 8005dc2 <_printf_float+0x18e>
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	07d0      	lsls	r0, r2, #31
 8005dc0:	d502      	bpl.n	8005dc8 <_printf_float+0x194>
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	440b      	add	r3, r1
 8005dc6:	6123      	str	r3, [r4, #16]
 8005dc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	e7db      	b.n	8005d88 <_printf_float+0x154>
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_printf_float+0x1a4>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	07d2      	lsls	r2, r2, #31
 8005dd6:	d501      	bpl.n	8005ddc <_printf_float+0x1a8>
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7f4      	b.n	8005dc6 <_printf_float+0x192>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f2      	b.n	8005dc6 <_printf_float+0x192>
 8005de0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005de6:	4299      	cmp	r1, r3
 8005de8:	db05      	blt.n	8005df6 <_printf_float+0x1c2>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	6121      	str	r1, [r4, #16]
 8005dee:	07d8      	lsls	r0, r3, #31
 8005df0:	d5ea      	bpl.n	8005dc8 <_printf_float+0x194>
 8005df2:	1c4b      	adds	r3, r1, #1
 8005df4:	e7e7      	b.n	8005dc6 <_printf_float+0x192>
 8005df6:	2900      	cmp	r1, #0
 8005df8:	bfd4      	ite	le
 8005dfa:	f1c1 0202 	rsble	r2, r1, #2
 8005dfe:	2201      	movgt	r2, #1
 8005e00:	4413      	add	r3, r2
 8005e02:	e7e0      	b.n	8005dc6 <_printf_float+0x192>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	055a      	lsls	r2, r3, #21
 8005e08:	d407      	bmi.n	8005e1a <_printf_float+0x1e6>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	d12b      	bne.n	8005e70 <_printf_float+0x23c>
 8005e18:	e767      	b.n	8005cea <_printf_float+0xb6>
 8005e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e1e:	f240 80dd 	bls.w	8005fdc <_printf_float+0x3a8>
 8005e22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e26:	2200      	movs	r2, #0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f7fa fe75 	bl	8000b18 <__aeabi_dcmpeq>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d033      	beq.n	8005e9a <_printf_float+0x266>
 8005e32:	4a37      	ldr	r2, [pc, #220]	@ (8005f10 <_printf_float+0x2dc>)
 8005e34:	2301      	movs	r3, #1
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f af54 	beq.w	8005cea <_printf_float+0xb6>
 8005e42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e46:	4543      	cmp	r3, r8
 8005e48:	db02      	blt.n	8005e50 <_printf_float+0x21c>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	07d8      	lsls	r0, r3, #31
 8005e4e:	d50f      	bpl.n	8005e70 <_printf_float+0x23c>
 8005e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af45 	beq.w	8005cea <_printf_float+0xb6>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005e68:	f104 0a1a 	add.w	sl, r4, #26
 8005e6c:	45c8      	cmp	r8, r9
 8005e6e:	dc09      	bgt.n	8005e84 <_printf_float+0x250>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	f100 8103 	bmi.w	800607e <_printf_float+0x44a>
 8005e78:	68e0      	ldr	r0, [r4, #12]
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	bfb8      	it	lt
 8005e80:	4618      	movlt	r0, r3
 8005e82:	e734      	b.n	8005cee <_printf_float+0xba>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4652      	mov	r2, sl
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af2b 	beq.w	8005cea <_printf_float+0xb6>
 8005e94:	f109 0901 	add.w	r9, r9, #1
 8005e98:	e7e8      	b.n	8005e6c <_printf_float+0x238>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dc39      	bgt.n	8005f14 <_printf_float+0x2e0>
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <_printf_float+0x2dc>)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f af1d 	beq.w	8005cea <_printf_float+0xb6>
 8005eb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005eb4:	ea59 0303 	orrs.w	r3, r9, r3
 8005eb8:	d102      	bne.n	8005ec0 <_printf_float+0x28c>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	d5d7      	bpl.n	8005e70 <_printf_float+0x23c>
 8005ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af0d 	beq.w	8005cea <_printf_float+0xb6>
 8005ed0:	f04f 0a00 	mov.w	sl, #0
 8005ed4:	f104 0b1a 	add.w	fp, r4, #26
 8005ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eda:	425b      	negs	r3, r3
 8005edc:	4553      	cmp	r3, sl
 8005ede:	dc01      	bgt.n	8005ee4 <_printf_float+0x2b0>
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	e793      	b.n	8005e0c <_printf_float+0x1d8>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	465a      	mov	r2, fp
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f aefb 	beq.w	8005cea <_printf_float+0xb6>
 8005ef4:	f10a 0a01 	add.w	sl, sl, #1
 8005ef8:	e7ee      	b.n	8005ed8 <_printf_float+0x2a4>
 8005efa:	bf00      	nop
 8005efc:	7fefffff 	.word	0x7fefffff
 8005f00:	080087f0 	.word	0x080087f0
 8005f04:	080087ec 	.word	0x080087ec
 8005f08:	080087f8 	.word	0x080087f8
 8005f0c:	080087f4 	.word	0x080087f4
 8005f10:	080087fc 	.word	0x080087fc
 8005f14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f1a:	4553      	cmp	r3, sl
 8005f1c:	bfa8      	it	ge
 8005f1e:	4653      	movge	r3, sl
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	4699      	mov	r9, r3
 8005f24:	dc36      	bgt.n	8005f94 <_printf_float+0x360>
 8005f26:	f04f 0b00 	mov.w	fp, #0
 8005f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f2e:	f104 021a 	add.w	r2, r4, #26
 8005f32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f34:	9306      	str	r3, [sp, #24]
 8005f36:	eba3 0309 	sub.w	r3, r3, r9
 8005f3a:	455b      	cmp	r3, fp
 8005f3c:	dc31      	bgt.n	8005fa2 <_printf_float+0x36e>
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	459a      	cmp	sl, r3
 8005f42:	dc3a      	bgt.n	8005fba <_printf_float+0x386>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	07da      	lsls	r2, r3, #31
 8005f48:	d437      	bmi.n	8005fba <_printf_float+0x386>
 8005f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4c:	ebaa 0903 	sub.w	r9, sl, r3
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	ebaa 0303 	sub.w	r3, sl, r3
 8005f56:	4599      	cmp	r9, r3
 8005f58:	bfa8      	it	ge
 8005f5a:	4699      	movge	r9, r3
 8005f5c:	f1b9 0f00 	cmp.w	r9, #0
 8005f60:	dc33      	bgt.n	8005fca <_printf_float+0x396>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6a:	f104 0b1a 	add.w	fp, r4, #26
 8005f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f70:	ebaa 0303 	sub.w	r3, sl, r3
 8005f74:	eba3 0309 	sub.w	r3, r3, r9
 8005f78:	4543      	cmp	r3, r8
 8005f7a:	f77f af79 	ble.w	8005e70 <_printf_float+0x23c>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	465a      	mov	r2, fp
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f aeae 	beq.w	8005cea <_printf_float+0xb6>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	e7ec      	b.n	8005f6e <_printf_float+0x33a>
 8005f94:	4642      	mov	r2, r8
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d1c2      	bne.n	8005f26 <_printf_float+0x2f2>
 8005fa0:	e6a3      	b.n	8005cea <_printf_float+0xb6>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	9206      	str	r2, [sp, #24]
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f ae9c 	beq.w	8005cea <_printf_float+0xb6>
 8005fb2:	9a06      	ldr	r2, [sp, #24]
 8005fb4:	f10b 0b01 	add.w	fp, fp, #1
 8005fb8:	e7bb      	b.n	8005f32 <_printf_float+0x2fe>
 8005fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d1c0      	bne.n	8005f4a <_printf_float+0x316>
 8005fc8:	e68f      	b.n	8005cea <_printf_float+0xb6>
 8005fca:	9a06      	ldr	r2, [sp, #24]
 8005fcc:	464b      	mov	r3, r9
 8005fce:	4442      	add	r2, r8
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d1c3      	bne.n	8005f62 <_printf_float+0x32e>
 8005fda:	e686      	b.n	8005cea <_printf_float+0xb6>
 8005fdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fe0:	f1ba 0f01 	cmp.w	sl, #1
 8005fe4:	dc01      	bgt.n	8005fea <_printf_float+0x3b6>
 8005fe6:	07db      	lsls	r3, r3, #31
 8005fe8:	d536      	bpl.n	8006058 <_printf_float+0x424>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4642      	mov	r2, r8
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae78 	beq.w	8005cea <_printf_float+0xb6>
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae70 	beq.w	8005cea <_printf_float+0xb6>
 800600a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006016:	f7fa fd7f 	bl	8000b18 <__aeabi_dcmpeq>
 800601a:	b9c0      	cbnz	r0, 800604e <_printf_float+0x41a>
 800601c:	4653      	mov	r3, sl
 800601e:	f108 0201 	add.w	r2, r8, #1
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d10c      	bne.n	8006046 <_printf_float+0x412>
 800602c:	e65d      	b.n	8005cea <_printf_float+0xb6>
 800602e:	2301      	movs	r3, #1
 8006030:	465a      	mov	r2, fp
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae56 	beq.w	8005cea <_printf_float+0xb6>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	45d0      	cmp	r8, sl
 8006044:	dbf3      	blt.n	800602e <_printf_float+0x3fa>
 8006046:	464b      	mov	r3, r9
 8006048:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800604c:	e6df      	b.n	8005e0e <_printf_float+0x1da>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0b1a 	add.w	fp, r4, #26
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x40e>
 8006058:	2301      	movs	r3, #1
 800605a:	4642      	mov	r2, r8
 800605c:	e7e1      	b.n	8006022 <_printf_float+0x3ee>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f ae3e 	beq.w	8005cea <_printf_float+0xb6>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006076:	1a5b      	subs	r3, r3, r1
 8006078:	4543      	cmp	r3, r8
 800607a:	dcf0      	bgt.n	800605e <_printf_float+0x42a>
 800607c:	e6fc      	b.n	8005e78 <_printf_float+0x244>
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	f104 0919 	add.w	r9, r4, #25
 8006086:	e7f4      	b.n	8006072 <_printf_float+0x43e>

08006088 <_printf_common>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	4698      	mov	r8, r3
 8006090:	688a      	ldr	r2, [r1, #8]
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006098:	4293      	cmp	r3, r2
 800609a:	bfb8      	it	lt
 800609c:	4613      	movlt	r3, r2
 800609e:	6033      	str	r3, [r6, #0]
 80060a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060a4:	4607      	mov	r7, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b10a      	cbz	r2, 80060ae <_printf_common+0x26>
 80060aa:	3301      	adds	r3, #1
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	0699      	lsls	r1, r3, #26
 80060b2:	bf42      	ittt	mi
 80060b4:	6833      	ldrmi	r3, [r6, #0]
 80060b6:	3302      	addmi	r3, #2
 80060b8:	6033      	strmi	r3, [r6, #0]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	f015 0506 	ands.w	r5, r5, #6
 80060c0:	d106      	bne.n	80060d0 <_printf_common+0x48>
 80060c2:	f104 0a19 	add.w	sl, r4, #25
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	6832      	ldr	r2, [r6, #0]
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dc26      	bgt.n	800611e <_printf_common+0x96>
 80060d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	3b00      	subs	r3, #0
 80060d8:	bf18      	it	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	0692      	lsls	r2, r2, #26
 80060de:	d42b      	bmi.n	8006138 <_printf_common+0xb0>
 80060e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060e4:	4641      	mov	r1, r8
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c8      	blx	r9
 80060ea:	3001      	adds	r0, #1
 80060ec:	d01e      	beq.n	800612c <_printf_common+0xa4>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf02      	ittt	eq
 80060fa:	68e5      	ldreq	r5, [r4, #12]
 80060fc:	6833      	ldreq	r3, [r6, #0]
 80060fe:	1aed      	subeq	r5, r5, r3
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	bf0c      	ite	eq
 8006104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006108:	2500      	movne	r5, #0
 800610a:	4293      	cmp	r3, r2
 800610c:	bfc4      	itt	gt
 800610e:	1a9b      	subgt	r3, r3, r2
 8006110:	18ed      	addgt	r5, r5, r3
 8006112:	2600      	movs	r6, #0
 8006114:	341a      	adds	r4, #26
 8006116:	42b5      	cmp	r5, r6
 8006118:	d11a      	bne.n	8006150 <_printf_common+0xc8>
 800611a:	2000      	movs	r0, #0
 800611c:	e008      	b.n	8006130 <_printf_common+0xa8>
 800611e:	2301      	movs	r3, #1
 8006120:	4652      	mov	r2, sl
 8006122:	4641      	mov	r1, r8
 8006124:	4638      	mov	r0, r7
 8006126:	47c8      	blx	r9
 8006128:	3001      	adds	r0, #1
 800612a:	d103      	bne.n	8006134 <_printf_common+0xac>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006134:	3501      	adds	r5, #1
 8006136:	e7c6      	b.n	80060c6 <_printf_common+0x3e>
 8006138:	18e1      	adds	r1, r4, r3
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	2030      	movs	r0, #48	@ 0x30
 800613e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006142:	4422      	add	r2, r4
 8006144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800614c:	3302      	adds	r3, #2
 800614e:	e7c7      	b.n	80060e0 <_printf_common+0x58>
 8006150:	2301      	movs	r3, #1
 8006152:	4622      	mov	r2, r4
 8006154:	4641      	mov	r1, r8
 8006156:	4638      	mov	r0, r7
 8006158:	47c8      	blx	r9
 800615a:	3001      	adds	r0, #1
 800615c:	d0e6      	beq.n	800612c <_printf_common+0xa4>
 800615e:	3601      	adds	r6, #1
 8006160:	e7d9      	b.n	8006116 <_printf_common+0x8e>
	...

08006164 <_printf_i>:
 8006164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	7e0f      	ldrb	r7, [r1, #24]
 800616a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800616c:	2f78      	cmp	r7, #120	@ 0x78
 800616e:	4691      	mov	r9, r2
 8006170:	4680      	mov	r8, r0
 8006172:	460c      	mov	r4, r1
 8006174:	469a      	mov	sl, r3
 8006176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800617a:	d807      	bhi.n	800618c <_printf_i+0x28>
 800617c:	2f62      	cmp	r7, #98	@ 0x62
 800617e:	d80a      	bhi.n	8006196 <_printf_i+0x32>
 8006180:	2f00      	cmp	r7, #0
 8006182:	f000 80d1 	beq.w	8006328 <_printf_i+0x1c4>
 8006186:	2f58      	cmp	r7, #88	@ 0x58
 8006188:	f000 80b8 	beq.w	80062fc <_printf_i+0x198>
 800618c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006194:	e03a      	b.n	800620c <_printf_i+0xa8>
 8006196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800619a:	2b15      	cmp	r3, #21
 800619c:	d8f6      	bhi.n	800618c <_printf_i+0x28>
 800619e:	a101      	add	r1, pc, #4	@ (adr r1, 80061a4 <_printf_i+0x40>)
 80061a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	08006211 	.word	0x08006211
 80061ac:	0800618d 	.word	0x0800618d
 80061b0:	0800618d 	.word	0x0800618d
 80061b4:	0800618d 	.word	0x0800618d
 80061b8:	0800618d 	.word	0x0800618d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800618d 	.word	0x0800618d
 80061c4:	0800618d 	.word	0x0800618d
 80061c8:	0800618d 	.word	0x0800618d
 80061cc:	0800618d 	.word	0x0800618d
 80061d0:	0800630f 	.word	0x0800630f
 80061d4:	0800623b 	.word	0x0800623b
 80061d8:	080062c9 	.word	0x080062c9
 80061dc:	0800618d 	.word	0x0800618d
 80061e0:	0800618d 	.word	0x0800618d
 80061e4:	08006331 	.word	0x08006331
 80061e8:	0800618d 	.word	0x0800618d
 80061ec:	0800623b 	.word	0x0800623b
 80061f0:	0800618d 	.word	0x0800618d
 80061f4:	0800618d 	.word	0x0800618d
 80061f8:	080062d1 	.word	0x080062d1
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800620c:	2301      	movs	r3, #1
 800620e:	e09c      	b.n	800634a <_printf_i+0x1e6>
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	1d19      	adds	r1, r3, #4
 8006216:	6031      	str	r1, [r6, #0]
 8006218:	0606      	lsls	r6, r0, #24
 800621a:	d501      	bpl.n	8006220 <_printf_i+0xbc>
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	e003      	b.n	8006228 <_printf_i+0xc4>
 8006220:	0645      	lsls	r5, r0, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0xb8>
 8006224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006228:	2d00      	cmp	r5, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xd0>
 800622c:	232d      	movs	r3, #45	@ 0x2d
 800622e:	426d      	negs	r5, r5
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006234:	4858      	ldr	r0, [pc, #352]	@ (8006398 <_printf_i+0x234>)
 8006236:	230a      	movs	r3, #10
 8006238:	e011      	b.n	800625e <_printf_i+0xfa>
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	0608      	lsls	r0, r1, #24
 8006240:	f853 5b04 	ldr.w	r5, [r3], #4
 8006244:	d402      	bmi.n	800624c <_printf_i+0xe8>
 8006246:	0649      	lsls	r1, r1, #25
 8006248:	bf48      	it	mi
 800624a:	b2ad      	uxthmi	r5, r5
 800624c:	2f6f      	cmp	r7, #111	@ 0x6f
 800624e:	4852      	ldr	r0, [pc, #328]	@ (8006398 <_printf_i+0x234>)
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	bf14      	ite	ne
 8006254:	230a      	movne	r3, #10
 8006256:	2308      	moveq	r3, #8
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800625e:	6866      	ldr	r6, [r4, #4]
 8006260:	60a6      	str	r6, [r4, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	db05      	blt.n	8006272 <_printf_i+0x10e>
 8006266:	6821      	ldr	r1, [r4, #0]
 8006268:	432e      	orrs	r6, r5
 800626a:	f021 0104 	bic.w	r1, r1, #4
 800626e:	6021      	str	r1, [r4, #0]
 8006270:	d04b      	beq.n	800630a <_printf_i+0x1a6>
 8006272:	4616      	mov	r6, r2
 8006274:	fbb5 f1f3 	udiv	r1, r5, r3
 8006278:	fb03 5711 	mls	r7, r3, r1, r5
 800627c:	5dc7      	ldrb	r7, [r0, r7]
 800627e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006282:	462f      	mov	r7, r5
 8006284:	42bb      	cmp	r3, r7
 8006286:	460d      	mov	r5, r1
 8006288:	d9f4      	bls.n	8006274 <_printf_i+0x110>
 800628a:	2b08      	cmp	r3, #8
 800628c:	d10b      	bne.n	80062a6 <_printf_i+0x142>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	07df      	lsls	r7, r3, #31
 8006292:	d508      	bpl.n	80062a6 <_printf_i+0x142>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	6861      	ldr	r1, [r4, #4]
 8006298:	4299      	cmp	r1, r3
 800629a:	bfde      	ittt	le
 800629c:	2330      	movle	r3, #48	@ 0x30
 800629e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80062a6:	1b92      	subs	r2, r2, r6
 80062a8:	6122      	str	r2, [r4, #16]
 80062aa:	f8cd a000 	str.w	sl, [sp]
 80062ae:	464b      	mov	r3, r9
 80062b0:	aa03      	add	r2, sp, #12
 80062b2:	4621      	mov	r1, r4
 80062b4:	4640      	mov	r0, r8
 80062b6:	f7ff fee7 	bl	8006088 <_printf_common>
 80062ba:	3001      	adds	r0, #1
 80062bc:	d14a      	bne.n	8006354 <_printf_i+0x1f0>
 80062be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062c2:	b004      	add	sp, #16
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	f043 0320 	orr.w	r3, r3, #32
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	4832      	ldr	r0, [pc, #200]	@ (800639c <_printf_i+0x238>)
 80062d2:	2778      	movs	r7, #120	@ 0x78
 80062d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	6831      	ldr	r1, [r6, #0]
 80062dc:	061f      	lsls	r7, r3, #24
 80062de:	f851 5b04 	ldr.w	r5, [r1], #4
 80062e2:	d402      	bmi.n	80062ea <_printf_i+0x186>
 80062e4:	065f      	lsls	r7, r3, #25
 80062e6:	bf48      	it	mi
 80062e8:	b2ad      	uxthmi	r5, r5
 80062ea:	6031      	str	r1, [r6, #0]
 80062ec:	07d9      	lsls	r1, r3, #31
 80062ee:	bf44      	itt	mi
 80062f0:	f043 0320 	orrmi.w	r3, r3, #32
 80062f4:	6023      	strmi	r3, [r4, #0]
 80062f6:	b11d      	cbz	r5, 8006300 <_printf_i+0x19c>
 80062f8:	2310      	movs	r3, #16
 80062fa:	e7ad      	b.n	8006258 <_printf_i+0xf4>
 80062fc:	4826      	ldr	r0, [pc, #152]	@ (8006398 <_printf_i+0x234>)
 80062fe:	e7e9      	b.n	80062d4 <_printf_i+0x170>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	f023 0320 	bic.w	r3, r3, #32
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	e7f6      	b.n	80062f8 <_printf_i+0x194>
 800630a:	4616      	mov	r6, r2
 800630c:	e7bd      	b.n	800628a <_printf_i+0x126>
 800630e:	6833      	ldr	r3, [r6, #0]
 8006310:	6825      	ldr	r5, [r4, #0]
 8006312:	6961      	ldr	r1, [r4, #20]
 8006314:	1d18      	adds	r0, r3, #4
 8006316:	6030      	str	r0, [r6, #0]
 8006318:	062e      	lsls	r6, r5, #24
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	d501      	bpl.n	8006322 <_printf_i+0x1be>
 800631e:	6019      	str	r1, [r3, #0]
 8006320:	e002      	b.n	8006328 <_printf_i+0x1c4>
 8006322:	0668      	lsls	r0, r5, #25
 8006324:	d5fb      	bpl.n	800631e <_printf_i+0x1ba>
 8006326:	8019      	strh	r1, [r3, #0]
 8006328:	2300      	movs	r3, #0
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	4616      	mov	r6, r2
 800632e:	e7bc      	b.n	80062aa <_printf_i+0x146>
 8006330:	6833      	ldr	r3, [r6, #0]
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	6032      	str	r2, [r6, #0]
 8006336:	681e      	ldr	r6, [r3, #0]
 8006338:	6862      	ldr	r2, [r4, #4]
 800633a:	2100      	movs	r1, #0
 800633c:	4630      	mov	r0, r6
 800633e:	f7f9 ff6f 	bl	8000220 <memchr>
 8006342:	b108      	cbz	r0, 8006348 <_printf_i+0x1e4>
 8006344:	1b80      	subs	r0, r0, r6
 8006346:	6060      	str	r0, [r4, #4]
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	2300      	movs	r3, #0
 800634e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006352:	e7aa      	b.n	80062aa <_printf_i+0x146>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	4632      	mov	r2, r6
 8006358:	4649      	mov	r1, r9
 800635a:	4640      	mov	r0, r8
 800635c:	47d0      	blx	sl
 800635e:	3001      	adds	r0, #1
 8006360:	d0ad      	beq.n	80062be <_printf_i+0x15a>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	079b      	lsls	r3, r3, #30
 8006366:	d413      	bmi.n	8006390 <_printf_i+0x22c>
 8006368:	68e0      	ldr	r0, [r4, #12]
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	4298      	cmp	r0, r3
 800636e:	bfb8      	it	lt
 8006370:	4618      	movlt	r0, r3
 8006372:	e7a6      	b.n	80062c2 <_printf_i+0x15e>
 8006374:	2301      	movs	r3, #1
 8006376:	4632      	mov	r2, r6
 8006378:	4649      	mov	r1, r9
 800637a:	4640      	mov	r0, r8
 800637c:	47d0      	blx	sl
 800637e:	3001      	adds	r0, #1
 8006380:	d09d      	beq.n	80062be <_printf_i+0x15a>
 8006382:	3501      	adds	r5, #1
 8006384:	68e3      	ldr	r3, [r4, #12]
 8006386:	9903      	ldr	r1, [sp, #12]
 8006388:	1a5b      	subs	r3, r3, r1
 800638a:	42ab      	cmp	r3, r5
 800638c:	dcf2      	bgt.n	8006374 <_printf_i+0x210>
 800638e:	e7eb      	b.n	8006368 <_printf_i+0x204>
 8006390:	2500      	movs	r5, #0
 8006392:	f104 0619 	add.w	r6, r4, #25
 8006396:	e7f5      	b.n	8006384 <_printf_i+0x220>
 8006398:	080087fe 	.word	0x080087fe
 800639c:	0800880f 	.word	0x0800880f

080063a0 <std>:
 80063a0:	2300      	movs	r3, #0
 80063a2:	b510      	push	{r4, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	e9c0 3300 	strd	r3, r3, [r0]
 80063aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ae:	6083      	str	r3, [r0, #8]
 80063b0:	8181      	strh	r1, [r0, #12]
 80063b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063b4:	81c2      	strh	r2, [r0, #14]
 80063b6:	6183      	str	r3, [r0, #24]
 80063b8:	4619      	mov	r1, r3
 80063ba:	2208      	movs	r2, #8
 80063bc:	305c      	adds	r0, #92	@ 0x5c
 80063be:	f000 f916 	bl	80065ee <memset>
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <std+0x58>)
 80063c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <std+0x5c>)
 80063c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x60>)
 80063cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x64>)
 80063d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <std+0x68>)
 80063d4:	6224      	str	r4, [r4, #32]
 80063d6:	429c      	cmp	r4, r3
 80063d8:	d006      	beq.n	80063e8 <std+0x48>
 80063da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063de:	4294      	cmp	r4, r2
 80063e0:	d002      	beq.n	80063e8 <std+0x48>
 80063e2:	33d0      	adds	r3, #208	@ 0xd0
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d105      	bne.n	80063f4 <std+0x54>
 80063e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f0:	f000 b97a 	b.w	80066e8 <__retarget_lock_init_recursive>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	08006569 	.word	0x08006569
 80063fc:	0800658b 	.word	0x0800658b
 8006400:	080065c3 	.word	0x080065c3
 8006404:	080065e7 	.word	0x080065e7
 8006408:	2000043c 	.word	0x2000043c

0800640c <stdio_exit_handler>:
 800640c:	4a02      	ldr	r2, [pc, #8]	@ (8006418 <stdio_exit_handler+0xc>)
 800640e:	4903      	ldr	r1, [pc, #12]	@ (800641c <stdio_exit_handler+0x10>)
 8006410:	4803      	ldr	r0, [pc, #12]	@ (8006420 <stdio_exit_handler+0x14>)
 8006412:	f000 b869 	b.w	80064e8 <_fwalk_sglue>
 8006416:	bf00      	nop
 8006418:	20000014 	.word	0x20000014
 800641c:	0800804d 	.word	0x0800804d
 8006420:	20000024 	.word	0x20000024

08006424 <cleanup_stdio>:
 8006424:	6841      	ldr	r1, [r0, #4]
 8006426:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <cleanup_stdio+0x34>)
 8006428:	4299      	cmp	r1, r3
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	d001      	beq.n	8006434 <cleanup_stdio+0x10>
 8006430:	f001 fe0c 	bl	800804c <_fflush_r>
 8006434:	68a1      	ldr	r1, [r4, #8]
 8006436:	4b09      	ldr	r3, [pc, #36]	@ (800645c <cleanup_stdio+0x38>)
 8006438:	4299      	cmp	r1, r3
 800643a:	d002      	beq.n	8006442 <cleanup_stdio+0x1e>
 800643c:	4620      	mov	r0, r4
 800643e:	f001 fe05 	bl	800804c <_fflush_r>
 8006442:	68e1      	ldr	r1, [r4, #12]
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <cleanup_stdio+0x3c>)
 8006446:	4299      	cmp	r1, r3
 8006448:	d004      	beq.n	8006454 <cleanup_stdio+0x30>
 800644a:	4620      	mov	r0, r4
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f001 bdfc 	b.w	800804c <_fflush_r>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	2000043c 	.word	0x2000043c
 800645c:	200004a4 	.word	0x200004a4
 8006460:	2000050c 	.word	0x2000050c

08006464 <global_stdio_init.part.0>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <global_stdio_init.part.0+0x30>)
 8006468:	4c0b      	ldr	r4, [pc, #44]	@ (8006498 <global_stdio_init.part.0+0x34>)
 800646a:	4a0c      	ldr	r2, [pc, #48]	@ (800649c <global_stdio_init.part.0+0x38>)
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	4620      	mov	r0, r4
 8006470:	2200      	movs	r2, #0
 8006472:	2104      	movs	r1, #4
 8006474:	f7ff ff94 	bl	80063a0 <std>
 8006478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800647c:	2201      	movs	r2, #1
 800647e:	2109      	movs	r1, #9
 8006480:	f7ff ff8e 	bl	80063a0 <std>
 8006484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006488:	2202      	movs	r2, #2
 800648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648e:	2112      	movs	r1, #18
 8006490:	f7ff bf86 	b.w	80063a0 <std>
 8006494:	20000574 	.word	0x20000574
 8006498:	2000043c 	.word	0x2000043c
 800649c:	0800640d 	.word	0x0800640d

080064a0 <__sfp_lock_acquire>:
 80064a0:	4801      	ldr	r0, [pc, #4]	@ (80064a8 <__sfp_lock_acquire+0x8>)
 80064a2:	f000 b922 	b.w	80066ea <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	2000057d 	.word	0x2000057d

080064ac <__sfp_lock_release>:
 80064ac:	4801      	ldr	r0, [pc, #4]	@ (80064b4 <__sfp_lock_release+0x8>)
 80064ae:	f000 b91d 	b.w	80066ec <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	2000057d 	.word	0x2000057d

080064b8 <__sinit>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4604      	mov	r4, r0
 80064bc:	f7ff fff0 	bl	80064a0 <__sfp_lock_acquire>
 80064c0:	6a23      	ldr	r3, [r4, #32]
 80064c2:	b11b      	cbz	r3, 80064cc <__sinit+0x14>
 80064c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c8:	f7ff bff0 	b.w	80064ac <__sfp_lock_release>
 80064cc:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <__sinit+0x28>)
 80064ce:	6223      	str	r3, [r4, #32]
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <__sinit+0x2c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f5      	bne.n	80064c4 <__sinit+0xc>
 80064d8:	f7ff ffc4 	bl	8006464 <global_stdio_init.part.0>
 80064dc:	e7f2      	b.n	80064c4 <__sinit+0xc>
 80064de:	bf00      	nop
 80064e0:	08006425 	.word	0x08006425
 80064e4:	20000574 	.word	0x20000574

080064e8 <_fwalk_sglue>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	4607      	mov	r7, r0
 80064ee:	4688      	mov	r8, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	2600      	movs	r6, #0
 80064f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f8:	f1b9 0901 	subs.w	r9, r9, #1
 80064fc:	d505      	bpl.n	800650a <_fwalk_sglue+0x22>
 80064fe:	6824      	ldr	r4, [r4, #0]
 8006500:	2c00      	cmp	r4, #0
 8006502:	d1f7      	bne.n	80064f4 <_fwalk_sglue+0xc>
 8006504:	4630      	mov	r0, r6
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d907      	bls.n	8006520 <_fwalk_sglue+0x38>
 8006510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006514:	3301      	adds	r3, #1
 8006516:	d003      	beq.n	8006520 <_fwalk_sglue+0x38>
 8006518:	4629      	mov	r1, r5
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	4306      	orrs	r6, r0
 8006520:	3568      	adds	r5, #104	@ 0x68
 8006522:	e7e9      	b.n	80064f8 <_fwalk_sglue+0x10>

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b510      	push	{r4, lr}
 8006528:	b09d      	sub	sp, #116	@ 0x74
 800652a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006534:	480a      	ldr	r0, [pc, #40]	@ (8006560 <siprintf+0x3c>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	490a      	ldr	r1, [pc, #40]	@ (8006564 <siprintf+0x40>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	2400      	movs	r4, #0
 8006544:	a902      	add	r1, sp, #8
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800654c:	f001 fbfe 	bl	8007d4c <_svfiprintf_r>
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	701c      	strb	r4, [r3, #0]
 8006554:	b01d      	add	sp, #116	@ 0x74
 8006556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655a:	b003      	add	sp, #12
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000020 	.word	0x20000020
 8006564:	ffff0208 	.word	0xffff0208

08006568 <__sread>:
 8006568:	b510      	push	{r4, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006570:	f000 f86c 	bl	800664c <_read_r>
 8006574:	2800      	cmp	r0, #0
 8006576:	bfab      	itete	ge
 8006578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800657a:	89a3      	ldrhlt	r3, [r4, #12]
 800657c:	181b      	addge	r3, r3, r0
 800657e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006582:	bfac      	ite	ge
 8006584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006586:	81a3      	strhlt	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__swrite>:
 800658a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658e:	461f      	mov	r7, r3
 8006590:	898b      	ldrh	r3, [r1, #12]
 8006592:	05db      	lsls	r3, r3, #23
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4616      	mov	r6, r2
 800659a:	d505      	bpl.n	80065a8 <__swrite+0x1e>
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	2302      	movs	r3, #2
 80065a2:	2200      	movs	r2, #0
 80065a4:	f000 f840 	bl	8006628 <_lseek_r>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	4632      	mov	r2, r6
 80065b6:	463b      	mov	r3, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	f000 b857 	b.w	8006670 <_write_r>

080065c2 <__sseek>:
 80065c2:	b510      	push	{r4, lr}
 80065c4:	460c      	mov	r4, r1
 80065c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ca:	f000 f82d 	bl	8006628 <_lseek_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	bf15      	itete	ne
 80065d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065de:	81a3      	strheq	r3, [r4, #12]
 80065e0:	bf18      	it	ne
 80065e2:	81a3      	strhne	r3, [r4, #12]
 80065e4:	bd10      	pop	{r4, pc}

080065e6 <__sclose>:
 80065e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ea:	f000 b80d 	b.w	8006608 <_close_r>

080065ee <memset>:
 80065ee:	4402      	add	r2, r0
 80065f0:	4603      	mov	r3, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	f803 1b01 	strb.w	r1, [r3], #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <_localeconv_r>:
 8006600:	4800      	ldr	r0, [pc, #0]	@ (8006604 <_localeconv_r+0x4>)
 8006602:	4770      	bx	lr
 8006604:	20000160 	.word	0x20000160

08006608 <_close_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	@ (8006624 <_close_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fb f858 	bl	80016c8 <_close>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_close_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_close_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000578 	.word	0x20000578

08006628 <_lseek_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	@ (8006648 <_lseek_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fb f86d 	bl	8001716 <_lseek>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_lseek_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_lseek_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000578 	.word	0x20000578

0800664c <_read_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	@ (800666c <_read_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fffb 	bl	8001656 <_read>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_read_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_read_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	20000578 	.word	0x20000578

08006670 <_write_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	@ (8006690 <_write_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fb f806 	bl	8001690 <_write>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_write_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_write_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	20000578 	.word	0x20000578

08006694 <__errno>:
 8006694:	4b01      	ldr	r3, [pc, #4]	@ (800669c <__errno+0x8>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000020 	.word	0x20000020

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4d0d      	ldr	r5, [pc, #52]	@ (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	@ (80066dc <__libc_init_array+0x3c>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2600      	movs	r6, #0
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4d0b      	ldr	r5, [pc, #44]	@ (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	@ (80066e4 <__libc_init_array+0x44>)
 80066b4:	f002 f868 	bl	8008788 <_init>
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2600      	movs	r6, #0
 80066be:	42a6      	cmp	r6, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c8:	4798      	blx	r3
 80066ca:	3601      	adds	r6, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d2:	4798      	blx	r3
 80066d4:	3601      	adds	r6, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	08008b6c 	.word	0x08008b6c
 80066dc:	08008b6c 	.word	0x08008b6c
 80066e0:	08008b6c 	.word	0x08008b6c
 80066e4:	08008b70 	.word	0x08008b70

080066e8 <__retarget_lock_init_recursive>:
 80066e8:	4770      	bx	lr

080066ea <__retarget_lock_acquire_recursive>:
 80066ea:	4770      	bx	lr

080066ec <__retarget_lock_release_recursive>:
 80066ec:	4770      	bx	lr

080066ee <quorem>:
 80066ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f2:	6903      	ldr	r3, [r0, #16]
 80066f4:	690c      	ldr	r4, [r1, #16]
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	4607      	mov	r7, r0
 80066fa:	db7e      	blt.n	80067fa <quorem+0x10c>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f101 0814 	add.w	r8, r1, #20
 8006702:	00a3      	lsls	r3, r4, #2
 8006704:	f100 0514 	add.w	r5, r0, #20
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006718:	3301      	adds	r3, #1
 800671a:	429a      	cmp	r2, r3
 800671c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006720:	fbb2 f6f3 	udiv	r6, r2, r3
 8006724:	d32e      	bcc.n	8006784 <quorem+0x96>
 8006726:	f04f 0a00 	mov.w	sl, #0
 800672a:	46c4      	mov	ip, r8
 800672c:	46ae      	mov	lr, r5
 800672e:	46d3      	mov	fp, sl
 8006730:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006734:	b298      	uxth	r0, r3
 8006736:	fb06 a000 	mla	r0, r6, r0, sl
 800673a:	0c02      	lsrs	r2, r0, #16
 800673c:	0c1b      	lsrs	r3, r3, #16
 800673e:	fb06 2303 	mla	r3, r6, r3, r2
 8006742:	f8de 2000 	ldr.w	r2, [lr]
 8006746:	b280      	uxth	r0, r0
 8006748:	b292      	uxth	r2, r2
 800674a:	1a12      	subs	r2, r2, r0
 800674c:	445a      	add	r2, fp
 800674e:	f8de 0000 	ldr.w	r0, [lr]
 8006752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006756:	b29b      	uxth	r3, r3
 8006758:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800675c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006760:	b292      	uxth	r2, r2
 8006762:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006766:	45e1      	cmp	r9, ip
 8006768:	f84e 2b04 	str.w	r2, [lr], #4
 800676c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006770:	d2de      	bcs.n	8006730 <quorem+0x42>
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	58eb      	ldr	r3, [r5, r3]
 8006776:	b92b      	cbnz	r3, 8006784 <quorem+0x96>
 8006778:	9b01      	ldr	r3, [sp, #4]
 800677a:	3b04      	subs	r3, #4
 800677c:	429d      	cmp	r5, r3
 800677e:	461a      	mov	r2, r3
 8006780:	d32f      	bcc.n	80067e2 <quorem+0xf4>
 8006782:	613c      	str	r4, [r7, #16]
 8006784:	4638      	mov	r0, r7
 8006786:	f001 f97d 	bl	8007a84 <__mcmp>
 800678a:	2800      	cmp	r0, #0
 800678c:	db25      	blt.n	80067da <quorem+0xec>
 800678e:	4629      	mov	r1, r5
 8006790:	2000      	movs	r0, #0
 8006792:	f858 2b04 	ldr.w	r2, [r8], #4
 8006796:	f8d1 c000 	ldr.w	ip, [r1]
 800679a:	fa1f fe82 	uxth.w	lr, r2
 800679e:	fa1f f38c 	uxth.w	r3, ip
 80067a2:	eba3 030e 	sub.w	r3, r3, lr
 80067a6:	4403      	add	r3, r0
 80067a8:	0c12      	lsrs	r2, r2, #16
 80067aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b8:	45c1      	cmp	r9, r8
 80067ba:	f841 3b04 	str.w	r3, [r1], #4
 80067be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067c2:	d2e6      	bcs.n	8006792 <quorem+0xa4>
 80067c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067cc:	b922      	cbnz	r2, 80067d8 <quorem+0xea>
 80067ce:	3b04      	subs	r3, #4
 80067d0:	429d      	cmp	r5, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	d30b      	bcc.n	80067ee <quorem+0x100>
 80067d6:	613c      	str	r4, [r7, #16]
 80067d8:	3601      	adds	r6, #1
 80067da:	4630      	mov	r0, r6
 80067dc:	b003      	add	sp, #12
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d1cb      	bne.n	8006782 <quorem+0x94>
 80067ea:	3c01      	subs	r4, #1
 80067ec:	e7c6      	b.n	800677c <quorem+0x8e>
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	d1ef      	bne.n	80067d6 <quorem+0xe8>
 80067f6:	3c01      	subs	r4, #1
 80067f8:	e7ea      	b.n	80067d0 <quorem+0xe2>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e7ee      	b.n	80067dc <quorem+0xee>
	...

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	69c7      	ldr	r7, [r0, #28]
 8006806:	b097      	sub	sp, #92	@ 0x5c
 8006808:	ed8d 0b04 	vstr	d0, [sp, #16]
 800680c:	ec55 4b10 	vmov	r4, r5, d0
 8006810:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006812:	9107      	str	r1, [sp, #28]
 8006814:	4681      	mov	r9, r0
 8006816:	920c      	str	r2, [sp, #48]	@ 0x30
 8006818:	9311      	str	r3, [sp, #68]	@ 0x44
 800681a:	b97f      	cbnz	r7, 800683c <_dtoa_r+0x3c>
 800681c:	2010      	movs	r0, #16
 800681e:	f000 fe09 	bl	8007434 <malloc>
 8006822:	4602      	mov	r2, r0
 8006824:	f8c9 001c 	str.w	r0, [r9, #28]
 8006828:	b920      	cbnz	r0, 8006834 <_dtoa_r+0x34>
 800682a:	4ba9      	ldr	r3, [pc, #676]	@ (8006ad0 <_dtoa_r+0x2d0>)
 800682c:	21ef      	movs	r1, #239	@ 0xef
 800682e:	48a9      	ldr	r0, [pc, #676]	@ (8006ad4 <_dtoa_r+0x2d4>)
 8006830:	f001 fc6c 	bl	800810c <__assert_func>
 8006834:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006838:	6007      	str	r7, [r0, #0]
 800683a:	60c7      	str	r7, [r0, #12]
 800683c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	b159      	cbz	r1, 800685c <_dtoa_r+0x5c>
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	604a      	str	r2, [r1, #4]
 8006848:	2301      	movs	r3, #1
 800684a:	4093      	lsls	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
 800684e:	4648      	mov	r0, r9
 8006850:	f000 fee6 	bl	8007620 <_Bfree>
 8006854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	1e2b      	subs	r3, r5, #0
 800685e:	bfb9      	ittee	lt
 8006860:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006864:	9305      	strlt	r3, [sp, #20]
 8006866:	2300      	movge	r3, #0
 8006868:	6033      	strge	r3, [r6, #0]
 800686a:	9f05      	ldr	r7, [sp, #20]
 800686c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad8 <_dtoa_r+0x2d8>)
 800686e:	bfbc      	itt	lt
 8006870:	2201      	movlt	r2, #1
 8006872:	6032      	strlt	r2, [r6, #0]
 8006874:	43bb      	bics	r3, r7
 8006876:	d112      	bne.n	800689e <_dtoa_r+0x9e>
 8006878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800687a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006884:	4323      	orrs	r3, r4
 8006886:	f000 855a 	beq.w	800733e <_dtoa_r+0xb3e>
 800688a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800688c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006aec <_dtoa_r+0x2ec>
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 855c 	beq.w	800734e <_dtoa_r+0xb4e>
 8006896:	f10a 0303 	add.w	r3, sl, #3
 800689a:	f000 bd56 	b.w	800734a <_dtoa_r+0xb4a>
 800689e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80068a2:	2200      	movs	r2, #0
 80068a4:	ec51 0b17 	vmov	r0, r1, d7
 80068a8:	2300      	movs	r3, #0
 80068aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80068ae:	f7fa f933 	bl	8000b18 <__aeabi_dcmpeq>
 80068b2:	4680      	mov	r8, r0
 80068b4:	b158      	cbz	r0, 80068ce <_dtoa_r+0xce>
 80068b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068b8:	2301      	movs	r3, #1
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068be:	b113      	cbz	r3, 80068c6 <_dtoa_r+0xc6>
 80068c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80068c2:	4b86      	ldr	r3, [pc, #536]	@ (8006adc <_dtoa_r+0x2dc>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006af0 <_dtoa_r+0x2f0>
 80068ca:	f000 bd40 	b.w	800734e <_dtoa_r+0xb4e>
 80068ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80068d2:	aa14      	add	r2, sp, #80	@ 0x50
 80068d4:	a915      	add	r1, sp, #84	@ 0x54
 80068d6:	4648      	mov	r0, r9
 80068d8:	f001 f984 	bl	8007be4 <__d2b>
 80068dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068e0:	9002      	str	r0, [sp, #8]
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d078      	beq.n	80069d8 <_dtoa_r+0x1d8>
 80068e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80068ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006900:	4619      	mov	r1, r3
 8006902:	2200      	movs	r2, #0
 8006904:	4b76      	ldr	r3, [pc, #472]	@ (8006ae0 <_dtoa_r+0x2e0>)
 8006906:	f7f9 fce7 	bl	80002d8 <__aeabi_dsub>
 800690a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ab8 <_dtoa_r+0x2b8>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fe9a 	bl	8000648 <__aeabi_dmul>
 8006914:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ac0 <_dtoa_r+0x2c0>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f7f9 fcdf 	bl	80002dc <__adddf3>
 800691e:	4604      	mov	r4, r0
 8006920:	4630      	mov	r0, r6
 8006922:	460d      	mov	r5, r1
 8006924:	f7f9 fe26 	bl	8000574 <__aeabi_i2d>
 8006928:	a367      	add	r3, pc, #412	@ (adr r3, 8006ac8 <_dtoa_r+0x2c8>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fe8b 	bl	8000648 <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	f7f9 fccf 	bl	80002dc <__adddf3>
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	f7fa f931 	bl	8000ba8 <__aeabi_d2iz>
 8006946:	2200      	movs	r2, #0
 8006948:	4607      	mov	r7, r0
 800694a:	2300      	movs	r3, #0
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmplt>
 8006954:	b140      	cbz	r0, 8006968 <_dtoa_r+0x168>
 8006956:	4638      	mov	r0, r7
 8006958:	f7f9 fe0c 	bl	8000574 <__aeabi_i2d>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	f7fa f8da 	bl	8000b18 <__aeabi_dcmpeq>
 8006964:	b900      	cbnz	r0, 8006968 <_dtoa_r+0x168>
 8006966:	3f01      	subs	r7, #1
 8006968:	2f16      	cmp	r7, #22
 800696a:	d852      	bhi.n	8006a12 <_dtoa_r+0x212>
 800696c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ae4 <_dtoa_r+0x2e4>)
 800696e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800697a:	f7fa f8d7 	bl	8000b2c <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	d049      	beq.n	8006a16 <_dtoa_r+0x216>
 8006982:	3f01      	subs	r7, #1
 8006984:	2300      	movs	r3, #0
 8006986:	9310      	str	r3, [sp, #64]	@ 0x40
 8006988:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800698a:	1b9b      	subs	r3, r3, r6
 800698c:	1e5a      	subs	r2, r3, #1
 800698e:	bf45      	ittet	mi
 8006990:	f1c3 0301 	rsbmi	r3, r3, #1
 8006994:	9300      	strmi	r3, [sp, #0]
 8006996:	2300      	movpl	r3, #0
 8006998:	2300      	movmi	r3, #0
 800699a:	9206      	str	r2, [sp, #24]
 800699c:	bf54      	ite	pl
 800699e:	9300      	strpl	r3, [sp, #0]
 80069a0:	9306      	strmi	r3, [sp, #24]
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	db39      	blt.n	8006a1a <_dtoa_r+0x21a>
 80069a6:	9b06      	ldr	r3, [sp, #24]
 80069a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80069aa:	443b      	add	r3, r7
 80069ac:	9306      	str	r3, [sp, #24]
 80069ae:	2300      	movs	r3, #0
 80069b0:	9308      	str	r3, [sp, #32]
 80069b2:	9b07      	ldr	r3, [sp, #28]
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d863      	bhi.n	8006a80 <_dtoa_r+0x280>
 80069b8:	2b05      	cmp	r3, #5
 80069ba:	bfc4      	itt	gt
 80069bc:	3b04      	subgt	r3, #4
 80069be:	9307      	strgt	r3, [sp, #28]
 80069c0:	9b07      	ldr	r3, [sp, #28]
 80069c2:	f1a3 0302 	sub.w	r3, r3, #2
 80069c6:	bfcc      	ite	gt
 80069c8:	2400      	movgt	r4, #0
 80069ca:	2401      	movle	r4, #1
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d863      	bhi.n	8006a98 <_dtoa_r+0x298>
 80069d0:	e8df f003 	tbb	[pc, r3]
 80069d4:	2b375452 	.word	0x2b375452
 80069d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069dc:	441e      	add	r6, r3
 80069de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	bfc1      	itttt	gt
 80069e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ea:	409f      	lslgt	r7, r3
 80069ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069f4:	bfd6      	itet	le
 80069f6:	f1c3 0320 	rsble	r3, r3, #32
 80069fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80069fe:	fa04 f003 	lslle.w	r0, r4, r3
 8006a02:	f7f9 fda7 	bl	8000554 <__aeabi_ui2d>
 8006a06:	2201      	movs	r2, #1
 8006a08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a0c:	3e01      	subs	r6, #1
 8006a0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a10:	e776      	b.n	8006900 <_dtoa_r+0x100>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7b7      	b.n	8006986 <_dtoa_r+0x186>
 8006a16:	9010      	str	r0, [sp, #64]	@ 0x40
 8006a18:	e7b6      	b.n	8006988 <_dtoa_r+0x188>
 8006a1a:	9b00      	ldr	r3, [sp, #0]
 8006a1c:	1bdb      	subs	r3, r3, r7
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	427b      	negs	r3, r7
 8006a22:	9308      	str	r3, [sp, #32]
 8006a24:	2300      	movs	r3, #0
 8006a26:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a28:	e7c3      	b.n	80069b2 <_dtoa_r+0x1b2>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a30:	eb07 0b03 	add.w	fp, r7, r3
 8006a34:	f10b 0301 	add.w	r3, fp, #1
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	9303      	str	r3, [sp, #12]
 8006a3c:	bfb8      	it	lt
 8006a3e:	2301      	movlt	r3, #1
 8006a40:	e006      	b.n	8006a50 <_dtoa_r+0x250>
 8006a42:	2301      	movs	r3, #1
 8006a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dd28      	ble.n	8006a9e <_dtoa_r+0x29e>
 8006a4c:	469b      	mov	fp, r3
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a54:	2100      	movs	r1, #0
 8006a56:	2204      	movs	r2, #4
 8006a58:	f102 0514 	add.w	r5, r2, #20
 8006a5c:	429d      	cmp	r5, r3
 8006a5e:	d926      	bls.n	8006aae <_dtoa_r+0x2ae>
 8006a60:	6041      	str	r1, [r0, #4]
 8006a62:	4648      	mov	r0, r9
 8006a64:	f000 fd9c 	bl	80075a0 <_Balloc>
 8006a68:	4682      	mov	sl, r0
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d142      	bne.n	8006af4 <_dtoa_r+0x2f4>
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <_dtoa_r+0x2e8>)
 8006a70:	4602      	mov	r2, r0
 8006a72:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a76:	e6da      	b.n	800682e <_dtoa_r+0x2e>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e7e3      	b.n	8006a44 <_dtoa_r+0x244>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e7d5      	b.n	8006a2c <_dtoa_r+0x22c>
 8006a80:	2401      	movs	r4, #1
 8006a82:	2300      	movs	r3, #0
 8006a84:	9307      	str	r3, [sp, #28]
 8006a86:	9409      	str	r4, [sp, #36]	@ 0x24
 8006a88:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a92:	2312      	movs	r3, #18
 8006a94:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a96:	e7db      	b.n	8006a50 <_dtoa_r+0x250>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a9c:	e7f4      	b.n	8006a88 <_dtoa_r+0x288>
 8006a9e:	f04f 0b01 	mov.w	fp, #1
 8006aa2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006aa6:	465b      	mov	r3, fp
 8006aa8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006aac:	e7d0      	b.n	8006a50 <_dtoa_r+0x250>
 8006aae:	3101      	adds	r1, #1
 8006ab0:	0052      	lsls	r2, r2, #1
 8006ab2:	e7d1      	b.n	8006a58 <_dtoa_r+0x258>
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	636f4361 	.word	0x636f4361
 8006abc:	3fd287a7 	.word	0x3fd287a7
 8006ac0:	8b60c8b3 	.word	0x8b60c8b3
 8006ac4:	3fc68a28 	.word	0x3fc68a28
 8006ac8:	509f79fb 	.word	0x509f79fb
 8006acc:	3fd34413 	.word	0x3fd34413
 8006ad0:	0800882d 	.word	0x0800882d
 8006ad4:	08008844 	.word	0x08008844
 8006ad8:	7ff00000 	.word	0x7ff00000
 8006adc:	080087fd 	.word	0x080087fd
 8006ae0:	3ff80000 	.word	0x3ff80000
 8006ae4:	08008998 	.word	0x08008998
 8006ae8:	0800889c 	.word	0x0800889c
 8006aec:	08008829 	.word	0x08008829
 8006af0:	080087fc 	.word	0x080087fc
 8006af4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006af8:	6018      	str	r0, [r3, #0]
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	2b0e      	cmp	r3, #14
 8006afe:	f200 80a1 	bhi.w	8006c44 <_dtoa_r+0x444>
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	f000 809e 	beq.w	8006c44 <_dtoa_r+0x444>
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	dd33      	ble.n	8006b74 <_dtoa_r+0x374>
 8006b0c:	4b9c      	ldr	r3, [pc, #624]	@ (8006d80 <_dtoa_r+0x580>)
 8006b0e:	f007 020f 	and.w	r2, r7, #15
 8006b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b16:	ed93 7b00 	vldr	d7, [r3]
 8006b1a:	05f8      	lsls	r0, r7, #23
 8006b1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006b20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b24:	d516      	bpl.n	8006b54 <_dtoa_r+0x354>
 8006b26:	4b97      	ldr	r3, [pc, #604]	@ (8006d84 <_dtoa_r+0x584>)
 8006b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b30:	f7f9 feb4 	bl	800089c <__aeabi_ddiv>
 8006b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b38:	f004 040f 	and.w	r4, r4, #15
 8006b3c:	2603      	movs	r6, #3
 8006b3e:	4d91      	ldr	r5, [pc, #580]	@ (8006d84 <_dtoa_r+0x584>)
 8006b40:	b954      	cbnz	r4, 8006b58 <_dtoa_r+0x358>
 8006b42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b4a:	f7f9 fea7 	bl	800089c <__aeabi_ddiv>
 8006b4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b52:	e028      	b.n	8006ba6 <_dtoa_r+0x3a6>
 8006b54:	2602      	movs	r6, #2
 8006b56:	e7f2      	b.n	8006b3e <_dtoa_r+0x33e>
 8006b58:	07e1      	lsls	r1, r4, #31
 8006b5a:	d508      	bpl.n	8006b6e <_dtoa_r+0x36e>
 8006b5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b64:	f7f9 fd70 	bl	8000648 <__aeabi_dmul>
 8006b68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	1064      	asrs	r4, r4, #1
 8006b70:	3508      	adds	r5, #8
 8006b72:	e7e5      	b.n	8006b40 <_dtoa_r+0x340>
 8006b74:	f000 80af 	beq.w	8006cd6 <_dtoa_r+0x4d6>
 8006b78:	427c      	negs	r4, r7
 8006b7a:	4b81      	ldr	r3, [pc, #516]	@ (8006d80 <_dtoa_r+0x580>)
 8006b7c:	4d81      	ldr	r5, [pc, #516]	@ (8006d84 <_dtoa_r+0x584>)
 8006b7e:	f004 020f 	and.w	r2, r4, #15
 8006b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b8e:	f7f9 fd5b 	bl	8000648 <__aeabi_dmul>
 8006b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b96:	1124      	asrs	r4, r4, #4
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2602      	movs	r6, #2
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	f040 808f 	bne.w	8006cc0 <_dtoa_r+0x4c0>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1d3      	bne.n	8006b4e <_dtoa_r+0x34e>
 8006ba6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ba8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8094 	beq.w	8006cda <_dtoa_r+0x4da>
 8006bb2:	4b75      	ldr	r3, [pc, #468]	@ (8006d88 <_dtoa_r+0x588>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 ffb7 	bl	8000b2c <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f000 808b 	beq.w	8006cda <_dtoa_r+0x4da>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8087 	beq.w	8006cda <_dtoa_r+0x4da>
 8006bcc:	f1bb 0f00 	cmp.w	fp, #0
 8006bd0:	dd34      	ble.n	8006c3c <_dtoa_r+0x43c>
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8006d8c <_dtoa_r+0x58c>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fd35 	bl	8000648 <__aeabi_dmul>
 8006bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006be6:	3601      	adds	r6, #1
 8006be8:	465c      	mov	r4, fp
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7f9 fcc2 	bl	8000574 <__aeabi_i2d>
 8006bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf4:	f7f9 fd28 	bl	8000648 <__aeabi_dmul>
 8006bf8:	4b65      	ldr	r3, [pc, #404]	@ (8006d90 <_dtoa_r+0x590>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 fb6e 	bl	80002dc <__adddf3>
 8006c00:	4605      	mov	r5, r0
 8006c02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	d16a      	bne.n	8006ce0 <_dtoa_r+0x4e0>
 8006c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0e:	4b61      	ldr	r3, [pc, #388]	@ (8006d94 <_dtoa_r+0x594>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	f7f9 fb61 	bl	80002d8 <__aeabi_dsub>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c1e:	462a      	mov	r2, r5
 8006c20:	4633      	mov	r3, r6
 8006c22:	f7f9 ffa1 	bl	8000b68 <__aeabi_dcmpgt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f040 8298 	bne.w	800715c <_dtoa_r+0x95c>
 8006c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c30:	462a      	mov	r2, r5
 8006c32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c36:	f7f9 ff79 	bl	8000b2c <__aeabi_dcmplt>
 8006c3a:	bb38      	cbnz	r0, 8006c8c <_dtoa_r+0x48c>
 8006c3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006c40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f2c0 8157 	blt.w	8006efa <_dtoa_r+0x6fa>
 8006c4c:	2f0e      	cmp	r7, #14
 8006c4e:	f300 8154 	bgt.w	8006efa <_dtoa_r+0x6fa>
 8006c52:	4b4b      	ldr	r3, [pc, #300]	@ (8006d80 <_dtoa_r+0x580>)
 8006c54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c58:	ed93 7b00 	vldr	d7, [r3]
 8006c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	ed8d 7b00 	vstr	d7, [sp]
 8006c64:	f280 80e5 	bge.w	8006e32 <_dtoa_r+0x632>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f300 80e1 	bgt.w	8006e32 <_dtoa_r+0x632>
 8006c70:	d10c      	bne.n	8006c8c <_dtoa_r+0x48c>
 8006c72:	4b48      	ldr	r3, [pc, #288]	@ (8006d94 <_dtoa_r+0x594>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	ec51 0b17 	vmov	r0, r1, d7
 8006c7a:	f7f9 fce5 	bl	8000648 <__aeabi_dmul>
 8006c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c82:	f7f9 ff67 	bl	8000b54 <__aeabi_dcmpge>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f000 8266 	beq.w	8007158 <_dtoa_r+0x958>
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	4625      	mov	r5, r4
 8006c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c92:	4656      	mov	r6, sl
 8006c94:	ea6f 0803 	mvn.w	r8, r3
 8006c98:	2700      	movs	r7, #0
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	f000 fcbf 	bl	8007620 <_Bfree>
 8006ca2:	2d00      	cmp	r5, #0
 8006ca4:	f000 80bd 	beq.w	8006e22 <_dtoa_r+0x622>
 8006ca8:	b12f      	cbz	r7, 8006cb6 <_dtoa_r+0x4b6>
 8006caa:	42af      	cmp	r7, r5
 8006cac:	d003      	beq.n	8006cb6 <_dtoa_r+0x4b6>
 8006cae:	4639      	mov	r1, r7
 8006cb0:	4648      	mov	r0, r9
 8006cb2:	f000 fcb5 	bl	8007620 <_Bfree>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4648      	mov	r0, r9
 8006cba:	f000 fcb1 	bl	8007620 <_Bfree>
 8006cbe:	e0b0      	b.n	8006e22 <_dtoa_r+0x622>
 8006cc0:	07e2      	lsls	r2, r4, #31
 8006cc2:	d505      	bpl.n	8006cd0 <_dtoa_r+0x4d0>
 8006cc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cc8:	f7f9 fcbe 	bl	8000648 <__aeabi_dmul>
 8006ccc:	3601      	adds	r6, #1
 8006cce:	2301      	movs	r3, #1
 8006cd0:	1064      	asrs	r4, r4, #1
 8006cd2:	3508      	adds	r5, #8
 8006cd4:	e762      	b.n	8006b9c <_dtoa_r+0x39c>
 8006cd6:	2602      	movs	r6, #2
 8006cd8:	e765      	b.n	8006ba6 <_dtoa_r+0x3a6>
 8006cda:	9c03      	ldr	r4, [sp, #12]
 8006cdc:	46b8      	mov	r8, r7
 8006cde:	e784      	b.n	8006bea <_dtoa_r+0x3ea>
 8006ce0:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <_dtoa_r+0x580>)
 8006ce2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ce4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cec:	4454      	add	r4, sl
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d054      	beq.n	8006d9c <_dtoa_r+0x59c>
 8006cf2:	4929      	ldr	r1, [pc, #164]	@ (8006d98 <_dtoa_r+0x598>)
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7f9 fdd1 	bl	800089c <__aeabi_ddiv>
 8006cfa:	4633      	mov	r3, r6
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	f7f9 faeb 	bl	80002d8 <__aeabi_dsub>
 8006d02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d06:	4656      	mov	r6, sl
 8006d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0c:	f7f9 ff4c 	bl	8000ba8 <__aeabi_d2iz>
 8006d10:	4605      	mov	r5, r0
 8006d12:	f7f9 fc2f 	bl	8000574 <__aeabi_i2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1e:	f7f9 fadb 	bl	80002d8 <__aeabi_dsub>
 8006d22:	3530      	adds	r5, #48	@ 0x30
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d2c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d34:	f7f9 fefa 	bl	8000b2c <__aeabi_dcmplt>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d172      	bne.n	8006e22 <_dtoa_r+0x622>
 8006d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d40:	4911      	ldr	r1, [pc, #68]	@ (8006d88 <_dtoa_r+0x588>)
 8006d42:	2000      	movs	r0, #0
 8006d44:	f7f9 fac8 	bl	80002d8 <__aeabi_dsub>
 8006d48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d4c:	f7f9 feee 	bl	8000b2c <__aeabi_dcmplt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f040 80b4 	bne.w	8006ebe <_dtoa_r+0x6be>
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	f43f af70 	beq.w	8006c3c <_dtoa_r+0x43c>
 8006d5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d60:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <_dtoa_r+0x58c>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7f9 fc70 	bl	8000648 <__aeabi_dmul>
 8006d68:	4b08      	ldr	r3, [pc, #32]	@ (8006d8c <_dtoa_r+0x58c>)
 8006d6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d6e:	2200      	movs	r2, #0
 8006d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d74:	f7f9 fc68 	bl	8000648 <__aeabi_dmul>
 8006d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7c:	e7c4      	b.n	8006d08 <_dtoa_r+0x508>
 8006d7e:	bf00      	nop
 8006d80:	08008998 	.word	0x08008998
 8006d84:	08008970 	.word	0x08008970
 8006d88:	3ff00000 	.word	0x3ff00000
 8006d8c:	40240000 	.word	0x40240000
 8006d90:	401c0000 	.word	0x401c0000
 8006d94:	40140000 	.word	0x40140000
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7f9 fc52 	bl	8000648 <__aeabi_dmul>
 8006da4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006da8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006daa:	4656      	mov	r6, sl
 8006dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db0:	f7f9 fefa 	bl	8000ba8 <__aeabi_d2iz>
 8006db4:	4605      	mov	r5, r0
 8006db6:	f7f9 fbdd 	bl	8000574 <__aeabi_i2d>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc2:	f7f9 fa89 	bl	80002d8 <__aeabi_dsub>
 8006dc6:	3530      	adds	r5, #48	@ 0x30
 8006dc8:	f806 5b01 	strb.w	r5, [r6], #1
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	d124      	bne.n	8006e26 <_dtoa_r+0x626>
 8006ddc:	4baf      	ldr	r3, [pc, #700]	@ (800709c <_dtoa_r+0x89c>)
 8006dde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006de2:	f7f9 fa7b 	bl	80002dc <__adddf3>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	f7f9 febb 	bl	8000b68 <__aeabi_dcmpgt>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d163      	bne.n	8006ebe <_dtoa_r+0x6be>
 8006df6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006dfa:	49a8      	ldr	r1, [pc, #672]	@ (800709c <_dtoa_r+0x89c>)
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f7f9 fa6b 	bl	80002d8 <__aeabi_dsub>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e0a:	f7f9 fe8f 	bl	8000b2c <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f af14 	beq.w	8006c3c <_dtoa_r+0x43c>
 8006e14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e16:	1e73      	subs	r3, r6, #1
 8006e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e1e:	2b30      	cmp	r3, #48	@ 0x30
 8006e20:	d0f8      	beq.n	8006e14 <_dtoa_r+0x614>
 8006e22:	4647      	mov	r7, r8
 8006e24:	e03b      	b.n	8006e9e <_dtoa_r+0x69e>
 8006e26:	4b9e      	ldr	r3, [pc, #632]	@ (80070a0 <_dtoa_r+0x8a0>)
 8006e28:	f7f9 fc0e 	bl	8000648 <__aeabi_dmul>
 8006e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e30:	e7bc      	b.n	8006dac <_dtoa_r+0x5ac>
 8006e32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e36:	4656      	mov	r6, sl
 8006e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fd2c 	bl	800089c <__aeabi_ddiv>
 8006e44:	f7f9 feb0 	bl	8000ba8 <__aeabi_d2iz>
 8006e48:	4680      	mov	r8, r0
 8006e4a:	f7f9 fb93 	bl	8000574 <__aeabi_i2d>
 8006e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e52:	f7f9 fbf9 	bl	8000648 <__aeabi_dmul>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e62:	f7f9 fa39 	bl	80002d8 <__aeabi_dsub>
 8006e66:	f806 4b01 	strb.w	r4, [r6], #1
 8006e6a:	9d03      	ldr	r5, [sp, #12]
 8006e6c:	eba6 040a 	sub.w	r4, r6, sl
 8006e70:	42a5      	cmp	r5, r4
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	d133      	bne.n	8006ee0 <_dtoa_r+0x6e0>
 8006e78:	f7f9 fa30 	bl	80002dc <__adddf3>
 8006e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e80:	4604      	mov	r4, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	f7f9 fe70 	bl	8000b68 <__aeabi_dcmpgt>
 8006e88:	b9c0      	cbnz	r0, 8006ebc <_dtoa_r+0x6bc>
 8006e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fe41 	bl	8000b18 <__aeabi_dcmpeq>
 8006e96:	b110      	cbz	r0, 8006e9e <_dtoa_r+0x69e>
 8006e98:	f018 0f01 	tst.w	r8, #1
 8006e9c:	d10e      	bne.n	8006ebc <_dtoa_r+0x6bc>
 8006e9e:	9902      	ldr	r1, [sp, #8]
 8006ea0:	4648      	mov	r0, r9
 8006ea2:	f000 fbbd 	bl	8007620 <_Bfree>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	7033      	strb	r3, [r6, #0]
 8006eaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006eac:	3701      	adds	r7, #1
 8006eae:	601f      	str	r7, [r3, #0]
 8006eb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 824b 	beq.w	800734e <_dtoa_r+0xb4e>
 8006eb8:	601e      	str	r6, [r3, #0]
 8006eba:	e248      	b.n	800734e <_dtoa_r+0xb4e>
 8006ebc:	46b8      	mov	r8, r7
 8006ebe:	4633      	mov	r3, r6
 8006ec0:	461e      	mov	r6, r3
 8006ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec6:	2a39      	cmp	r2, #57	@ 0x39
 8006ec8:	d106      	bne.n	8006ed8 <_dtoa_r+0x6d8>
 8006eca:	459a      	cmp	sl, r3
 8006ecc:	d1f8      	bne.n	8006ec0 <_dtoa_r+0x6c0>
 8006ece:	2230      	movs	r2, #48	@ 0x30
 8006ed0:	f108 0801 	add.w	r8, r8, #1
 8006ed4:	f88a 2000 	strb.w	r2, [sl]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	3201      	adds	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	e7a0      	b.n	8006e22 <_dtoa_r+0x622>
 8006ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80070a0 <_dtoa_r+0x8a0>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7f9 fbb0 	bl	8000648 <__aeabi_dmul>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	f7f9 fe12 	bl	8000b18 <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d09f      	beq.n	8006e38 <_dtoa_r+0x638>
 8006ef8:	e7d1      	b.n	8006e9e <_dtoa_r+0x69e>
 8006efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	f000 80ea 	beq.w	80070d6 <_dtoa_r+0x8d6>
 8006f02:	9a07      	ldr	r2, [sp, #28]
 8006f04:	2a01      	cmp	r2, #1
 8006f06:	f300 80cd 	bgt.w	80070a4 <_dtoa_r+0x8a4>
 8006f0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	f000 80c1 	beq.w	8007094 <_dtoa_r+0x894>
 8006f12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f16:	9c08      	ldr	r4, [sp, #32]
 8006f18:	9e00      	ldr	r6, [sp, #0]
 8006f1a:	9a00      	ldr	r2, [sp, #0]
 8006f1c:	441a      	add	r2, r3
 8006f1e:	9200      	str	r2, [sp, #0]
 8006f20:	9a06      	ldr	r2, [sp, #24]
 8006f22:	2101      	movs	r1, #1
 8006f24:	441a      	add	r2, r3
 8006f26:	4648      	mov	r0, r9
 8006f28:	9206      	str	r2, [sp, #24]
 8006f2a:	f000 fc2d 	bl	8007788 <__i2b>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b166      	cbz	r6, 8006f4c <_dtoa_r+0x74c>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dd09      	ble.n	8006f4c <_dtoa_r+0x74c>
 8006f38:	42b3      	cmp	r3, r6
 8006f3a:	9a00      	ldr	r2, [sp, #0]
 8006f3c:	bfa8      	it	ge
 8006f3e:	4633      	movge	r3, r6
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	9200      	str	r2, [sp, #0]
 8006f44:	9a06      	ldr	r2, [sp, #24]
 8006f46:	1af6      	subs	r6, r6, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	9306      	str	r3, [sp, #24]
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	b30b      	cbz	r3, 8006f94 <_dtoa_r+0x794>
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80c6 	beq.w	80070e4 <_dtoa_r+0x8e4>
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	f000 80c0 	beq.w	80070de <_dtoa_r+0x8de>
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4622      	mov	r2, r4
 8006f62:	4648      	mov	r0, r9
 8006f64:	f000 fcc8 	bl	80078f8 <__pow5mult>
 8006f68:	9a02      	ldr	r2, [sp, #8]
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fc20 	bl	80077b4 <__multiply>
 8006f74:	9902      	ldr	r1, [sp, #8]
 8006f76:	4680      	mov	r8, r0
 8006f78:	4648      	mov	r0, r9
 8006f7a:	f000 fb51 	bl	8007620 <_Bfree>
 8006f7e:	9b08      	ldr	r3, [sp, #32]
 8006f80:	1b1b      	subs	r3, r3, r4
 8006f82:	9308      	str	r3, [sp, #32]
 8006f84:	f000 80b1 	beq.w	80070ea <_dtoa_r+0x8ea>
 8006f88:	9a08      	ldr	r2, [sp, #32]
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	f000 fcb3 	bl	80078f8 <__pow5mult>
 8006f92:	9002      	str	r0, [sp, #8]
 8006f94:	2101      	movs	r1, #1
 8006f96:	4648      	mov	r0, r9
 8006f98:	f000 fbf6 	bl	8007788 <__i2b>
 8006f9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 81d8 	beq.w	8007356 <_dtoa_r+0xb56>
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4601      	mov	r1, r0
 8006faa:	4648      	mov	r0, r9
 8006fac:	f000 fca4 	bl	80078f8 <__pow5mult>
 8006fb0:	9b07      	ldr	r3, [sp, #28]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	f300 809f 	bgt.w	80070f8 <_dtoa_r+0x8f8>
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f040 8097 	bne.w	80070f0 <_dtoa_r+0x8f0>
 8006fc2:	9b05      	ldr	r3, [sp, #20]
 8006fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 8093 	bne.w	80070f4 <_dtoa_r+0x8f4>
 8006fce:	9b05      	ldr	r3, [sp, #20]
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fd4:	0d1b      	lsrs	r3, r3, #20
 8006fd6:	051b      	lsls	r3, r3, #20
 8006fd8:	b133      	cbz	r3, 8006fe8 <_dtoa_r+0x7e8>
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	9306      	str	r3, [sp, #24]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 81b8 	beq.w	8007362 <_dtoa_r+0xb62>
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ff8:	6918      	ldr	r0, [r3, #16]
 8006ffa:	f000 fb79 	bl	80076f0 <__hi0bits>
 8006ffe:	f1c0 0020 	rsb	r0, r0, #32
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	4418      	add	r0, r3
 8007006:	f010 001f 	ands.w	r0, r0, #31
 800700a:	f000 8082 	beq.w	8007112 <_dtoa_r+0x912>
 800700e:	f1c0 0320 	rsb	r3, r0, #32
 8007012:	2b04      	cmp	r3, #4
 8007014:	dd73      	ble.n	80070fe <_dtoa_r+0x8fe>
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	f1c0 001c 	rsb	r0, r0, #28
 800701c:	4403      	add	r3, r0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	9b06      	ldr	r3, [sp, #24]
 8007022:	4403      	add	r3, r0
 8007024:	4406      	add	r6, r0
 8007026:	9306      	str	r3, [sp, #24]
 8007028:	9b00      	ldr	r3, [sp, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd05      	ble.n	800703a <_dtoa_r+0x83a>
 800702e:	9902      	ldr	r1, [sp, #8]
 8007030:	461a      	mov	r2, r3
 8007032:	4648      	mov	r0, r9
 8007034:	f000 fcba 	bl	80079ac <__lshift>
 8007038:	9002      	str	r0, [sp, #8]
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	dd05      	ble.n	800704c <_dtoa_r+0x84c>
 8007040:	4621      	mov	r1, r4
 8007042:	461a      	mov	r2, r3
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fcb1 	bl	80079ac <__lshift>
 800704a:	4604      	mov	r4, r0
 800704c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d061      	beq.n	8007116 <_dtoa_r+0x916>
 8007052:	9802      	ldr	r0, [sp, #8]
 8007054:	4621      	mov	r1, r4
 8007056:	f000 fd15 	bl	8007a84 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	da5b      	bge.n	8007116 <_dtoa_r+0x916>
 800705e:	2300      	movs	r3, #0
 8007060:	9902      	ldr	r1, [sp, #8]
 8007062:	220a      	movs	r2, #10
 8007064:	4648      	mov	r0, r9
 8007066:	f000 fafd 	bl	8007664 <__multadd>
 800706a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706c:	9002      	str	r0, [sp, #8]
 800706e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8177 	beq.w	8007366 <_dtoa_r+0xb66>
 8007078:	4629      	mov	r1, r5
 800707a:	2300      	movs	r3, #0
 800707c:	220a      	movs	r2, #10
 800707e:	4648      	mov	r0, r9
 8007080:	f000 faf0 	bl	8007664 <__multadd>
 8007084:	f1bb 0f00 	cmp.w	fp, #0
 8007088:	4605      	mov	r5, r0
 800708a:	dc6f      	bgt.n	800716c <_dtoa_r+0x96c>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	2b02      	cmp	r3, #2
 8007090:	dc49      	bgt.n	8007126 <_dtoa_r+0x926>
 8007092:	e06b      	b.n	800716c <_dtoa_r+0x96c>
 8007094:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800709a:	e73c      	b.n	8006f16 <_dtoa_r+0x716>
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	40240000 	.word	0x40240000
 80070a4:	9b03      	ldr	r3, [sp, #12]
 80070a6:	1e5c      	subs	r4, r3, #1
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	db09      	blt.n	80070c2 <_dtoa_r+0x8c2>
 80070ae:	1b1c      	subs	r4, r3, r4
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f6bf af30 	bge.w	8006f18 <_dtoa_r+0x718>
 80070b8:	9b00      	ldr	r3, [sp, #0]
 80070ba:	9a03      	ldr	r2, [sp, #12]
 80070bc:	1a9e      	subs	r6, r3, r2
 80070be:	2300      	movs	r3, #0
 80070c0:	e72b      	b.n	8006f1a <_dtoa_r+0x71a>
 80070c2:	9b08      	ldr	r3, [sp, #32]
 80070c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070c6:	9408      	str	r4, [sp, #32]
 80070c8:	1ae3      	subs	r3, r4, r3
 80070ca:	441a      	add	r2, r3
 80070cc:	9e00      	ldr	r6, [sp, #0]
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80070d2:	2400      	movs	r4, #0
 80070d4:	e721      	b.n	8006f1a <_dtoa_r+0x71a>
 80070d6:	9c08      	ldr	r4, [sp, #32]
 80070d8:	9e00      	ldr	r6, [sp, #0]
 80070da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80070dc:	e728      	b.n	8006f30 <_dtoa_r+0x730>
 80070de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80070e2:	e751      	b.n	8006f88 <_dtoa_r+0x788>
 80070e4:	9a08      	ldr	r2, [sp, #32]
 80070e6:	9902      	ldr	r1, [sp, #8]
 80070e8:	e750      	b.n	8006f8c <_dtoa_r+0x78c>
 80070ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80070ee:	e751      	b.n	8006f94 <_dtoa_r+0x794>
 80070f0:	2300      	movs	r3, #0
 80070f2:	e779      	b.n	8006fe8 <_dtoa_r+0x7e8>
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	e777      	b.n	8006fe8 <_dtoa_r+0x7e8>
 80070f8:	2300      	movs	r3, #0
 80070fa:	9308      	str	r3, [sp, #32]
 80070fc:	e779      	b.n	8006ff2 <_dtoa_r+0x7f2>
 80070fe:	d093      	beq.n	8007028 <_dtoa_r+0x828>
 8007100:	9a00      	ldr	r2, [sp, #0]
 8007102:	331c      	adds	r3, #28
 8007104:	441a      	add	r2, r3
 8007106:	9200      	str	r2, [sp, #0]
 8007108:	9a06      	ldr	r2, [sp, #24]
 800710a:	441a      	add	r2, r3
 800710c:	441e      	add	r6, r3
 800710e:	9206      	str	r2, [sp, #24]
 8007110:	e78a      	b.n	8007028 <_dtoa_r+0x828>
 8007112:	4603      	mov	r3, r0
 8007114:	e7f4      	b.n	8007100 <_dtoa_r+0x900>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	46b8      	mov	r8, r7
 800711c:	dc20      	bgt.n	8007160 <_dtoa_r+0x960>
 800711e:	469b      	mov	fp, r3
 8007120:	9b07      	ldr	r3, [sp, #28]
 8007122:	2b02      	cmp	r3, #2
 8007124:	dd1e      	ble.n	8007164 <_dtoa_r+0x964>
 8007126:	f1bb 0f00 	cmp.w	fp, #0
 800712a:	f47f adb1 	bne.w	8006c90 <_dtoa_r+0x490>
 800712e:	4621      	mov	r1, r4
 8007130:	465b      	mov	r3, fp
 8007132:	2205      	movs	r2, #5
 8007134:	4648      	mov	r0, r9
 8007136:	f000 fa95 	bl	8007664 <__multadd>
 800713a:	4601      	mov	r1, r0
 800713c:	4604      	mov	r4, r0
 800713e:	9802      	ldr	r0, [sp, #8]
 8007140:	f000 fca0 	bl	8007a84 <__mcmp>
 8007144:	2800      	cmp	r0, #0
 8007146:	f77f ada3 	ble.w	8006c90 <_dtoa_r+0x490>
 800714a:	4656      	mov	r6, sl
 800714c:	2331      	movs	r3, #49	@ 0x31
 800714e:	f806 3b01 	strb.w	r3, [r6], #1
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e59f      	b.n	8006c98 <_dtoa_r+0x498>
 8007158:	9c03      	ldr	r4, [sp, #12]
 800715a:	46b8      	mov	r8, r7
 800715c:	4625      	mov	r5, r4
 800715e:	e7f4      	b.n	800714a <_dtoa_r+0x94a>
 8007160:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8101 	beq.w	800736e <_dtoa_r+0xb6e>
 800716c:	2e00      	cmp	r6, #0
 800716e:	dd05      	ble.n	800717c <_dtoa_r+0x97c>
 8007170:	4629      	mov	r1, r5
 8007172:	4632      	mov	r2, r6
 8007174:	4648      	mov	r0, r9
 8007176:	f000 fc19 	bl	80079ac <__lshift>
 800717a:	4605      	mov	r5, r0
 800717c:	9b08      	ldr	r3, [sp, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d05c      	beq.n	800723c <_dtoa_r+0xa3c>
 8007182:	6869      	ldr	r1, [r5, #4]
 8007184:	4648      	mov	r0, r9
 8007186:	f000 fa0b 	bl	80075a0 <_Balloc>
 800718a:	4606      	mov	r6, r0
 800718c:	b928      	cbnz	r0, 800719a <_dtoa_r+0x99a>
 800718e:	4b82      	ldr	r3, [pc, #520]	@ (8007398 <_dtoa_r+0xb98>)
 8007190:	4602      	mov	r2, r0
 8007192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007196:	f7ff bb4a 	b.w	800682e <_dtoa_r+0x2e>
 800719a:	692a      	ldr	r2, [r5, #16]
 800719c:	3202      	adds	r2, #2
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	f105 010c 	add.w	r1, r5, #12
 80071a4:	300c      	adds	r0, #12
 80071a6:	f000 ffa3 	bl	80080f0 <memcpy>
 80071aa:	2201      	movs	r2, #1
 80071ac:	4631      	mov	r1, r6
 80071ae:	4648      	mov	r0, r9
 80071b0:	f000 fbfc 	bl	80079ac <__lshift>
 80071b4:	f10a 0301 	add.w	r3, sl, #1
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	eb0a 030b 	add.w	r3, sl, fp
 80071be:	9308      	str	r3, [sp, #32]
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	462f      	mov	r7, r5
 80071c8:	9306      	str	r3, [sp, #24]
 80071ca:	4605      	mov	r5, r0
 80071cc:	9b00      	ldr	r3, [sp, #0]
 80071ce:	9802      	ldr	r0, [sp, #8]
 80071d0:	4621      	mov	r1, r4
 80071d2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80071d6:	f7ff fa8a 	bl	80066ee <quorem>
 80071da:	4603      	mov	r3, r0
 80071dc:	3330      	adds	r3, #48	@ 0x30
 80071de:	9003      	str	r0, [sp, #12]
 80071e0:	4639      	mov	r1, r7
 80071e2:	9802      	ldr	r0, [sp, #8]
 80071e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e6:	f000 fc4d 	bl	8007a84 <__mcmp>
 80071ea:	462a      	mov	r2, r5
 80071ec:	9004      	str	r0, [sp, #16]
 80071ee:	4621      	mov	r1, r4
 80071f0:	4648      	mov	r0, r9
 80071f2:	f000 fc63 	bl	8007abc <__mdiff>
 80071f6:	68c2      	ldr	r2, [r0, #12]
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	4606      	mov	r6, r0
 80071fc:	bb02      	cbnz	r2, 8007240 <_dtoa_r+0xa40>
 80071fe:	4601      	mov	r1, r0
 8007200:	9802      	ldr	r0, [sp, #8]
 8007202:	f000 fc3f 	bl	8007a84 <__mcmp>
 8007206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007208:	4602      	mov	r2, r0
 800720a:	4631      	mov	r1, r6
 800720c:	4648      	mov	r0, r9
 800720e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007210:	9309      	str	r3, [sp, #36]	@ 0x24
 8007212:	f000 fa05 	bl	8007620 <_Bfree>
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800721a:	9e00      	ldr	r6, [sp, #0]
 800721c:	ea42 0103 	orr.w	r1, r2, r3
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	4319      	orrs	r1, r3
 8007224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007226:	d10d      	bne.n	8007244 <_dtoa_r+0xa44>
 8007228:	2b39      	cmp	r3, #57	@ 0x39
 800722a:	d027      	beq.n	800727c <_dtoa_r+0xa7c>
 800722c:	9a04      	ldr	r2, [sp, #16]
 800722e:	2a00      	cmp	r2, #0
 8007230:	dd01      	ble.n	8007236 <_dtoa_r+0xa36>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	3331      	adds	r3, #49	@ 0x31
 8007236:	f88b 3000 	strb.w	r3, [fp]
 800723a:	e52e      	b.n	8006c9a <_dtoa_r+0x49a>
 800723c:	4628      	mov	r0, r5
 800723e:	e7b9      	b.n	80071b4 <_dtoa_r+0x9b4>
 8007240:	2201      	movs	r2, #1
 8007242:	e7e2      	b.n	800720a <_dtoa_r+0xa0a>
 8007244:	9904      	ldr	r1, [sp, #16]
 8007246:	2900      	cmp	r1, #0
 8007248:	db04      	blt.n	8007254 <_dtoa_r+0xa54>
 800724a:	9807      	ldr	r0, [sp, #28]
 800724c:	4301      	orrs	r1, r0
 800724e:	9806      	ldr	r0, [sp, #24]
 8007250:	4301      	orrs	r1, r0
 8007252:	d120      	bne.n	8007296 <_dtoa_r+0xa96>
 8007254:	2a00      	cmp	r2, #0
 8007256:	ddee      	ble.n	8007236 <_dtoa_r+0xa36>
 8007258:	9902      	ldr	r1, [sp, #8]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	4648      	mov	r0, r9
 8007260:	f000 fba4 	bl	80079ac <__lshift>
 8007264:	4621      	mov	r1, r4
 8007266:	9002      	str	r0, [sp, #8]
 8007268:	f000 fc0c 	bl	8007a84 <__mcmp>
 800726c:	2800      	cmp	r0, #0
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	dc02      	bgt.n	8007278 <_dtoa_r+0xa78>
 8007272:	d1e0      	bne.n	8007236 <_dtoa_r+0xa36>
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	d5de      	bpl.n	8007236 <_dtoa_r+0xa36>
 8007278:	2b39      	cmp	r3, #57	@ 0x39
 800727a:	d1da      	bne.n	8007232 <_dtoa_r+0xa32>
 800727c:	2339      	movs	r3, #57	@ 0x39
 800727e:	f88b 3000 	strb.w	r3, [fp]
 8007282:	4633      	mov	r3, r6
 8007284:	461e      	mov	r6, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800728c:	2a39      	cmp	r2, #57	@ 0x39
 800728e:	d04e      	beq.n	800732e <_dtoa_r+0xb2e>
 8007290:	3201      	adds	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e501      	b.n	8006c9a <_dtoa_r+0x49a>
 8007296:	2a00      	cmp	r2, #0
 8007298:	dd03      	ble.n	80072a2 <_dtoa_r+0xaa2>
 800729a:	2b39      	cmp	r3, #57	@ 0x39
 800729c:	d0ee      	beq.n	800727c <_dtoa_r+0xa7c>
 800729e:	3301      	adds	r3, #1
 80072a0:	e7c9      	b.n	8007236 <_dtoa_r+0xa36>
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	9908      	ldr	r1, [sp, #32]
 80072a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072aa:	428a      	cmp	r2, r1
 80072ac:	d028      	beq.n	8007300 <_dtoa_r+0xb00>
 80072ae:	9902      	ldr	r1, [sp, #8]
 80072b0:	2300      	movs	r3, #0
 80072b2:	220a      	movs	r2, #10
 80072b4:	4648      	mov	r0, r9
 80072b6:	f000 f9d5 	bl	8007664 <__multadd>
 80072ba:	42af      	cmp	r7, r5
 80072bc:	9002      	str	r0, [sp, #8]
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	f04f 020a 	mov.w	r2, #10
 80072c6:	4639      	mov	r1, r7
 80072c8:	4648      	mov	r0, r9
 80072ca:	d107      	bne.n	80072dc <_dtoa_r+0xadc>
 80072cc:	f000 f9ca 	bl	8007664 <__multadd>
 80072d0:	4607      	mov	r7, r0
 80072d2:	4605      	mov	r5, r0
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	e777      	b.n	80071cc <_dtoa_r+0x9cc>
 80072dc:	f000 f9c2 	bl	8007664 <__multadd>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4607      	mov	r7, r0
 80072e4:	2300      	movs	r3, #0
 80072e6:	220a      	movs	r2, #10
 80072e8:	4648      	mov	r0, r9
 80072ea:	f000 f9bb 	bl	8007664 <__multadd>
 80072ee:	4605      	mov	r5, r0
 80072f0:	e7f0      	b.n	80072d4 <_dtoa_r+0xad4>
 80072f2:	f1bb 0f00 	cmp.w	fp, #0
 80072f6:	bfcc      	ite	gt
 80072f8:	465e      	movgt	r6, fp
 80072fa:	2601      	movle	r6, #1
 80072fc:	4456      	add	r6, sl
 80072fe:	2700      	movs	r7, #0
 8007300:	9902      	ldr	r1, [sp, #8]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2201      	movs	r2, #1
 8007306:	4648      	mov	r0, r9
 8007308:	f000 fb50 	bl	80079ac <__lshift>
 800730c:	4621      	mov	r1, r4
 800730e:	9002      	str	r0, [sp, #8]
 8007310:	f000 fbb8 	bl	8007a84 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	dcb4      	bgt.n	8007282 <_dtoa_r+0xa82>
 8007318:	d102      	bne.n	8007320 <_dtoa_r+0xb20>
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	07db      	lsls	r3, r3, #31
 800731e:	d4b0      	bmi.n	8007282 <_dtoa_r+0xa82>
 8007320:	4633      	mov	r3, r6
 8007322:	461e      	mov	r6, r3
 8007324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007328:	2a30      	cmp	r2, #48	@ 0x30
 800732a:	d0fa      	beq.n	8007322 <_dtoa_r+0xb22>
 800732c:	e4b5      	b.n	8006c9a <_dtoa_r+0x49a>
 800732e:	459a      	cmp	sl, r3
 8007330:	d1a8      	bne.n	8007284 <_dtoa_r+0xa84>
 8007332:	2331      	movs	r3, #49	@ 0x31
 8007334:	f108 0801 	add.w	r8, r8, #1
 8007338:	f88a 3000 	strb.w	r3, [sl]
 800733c:	e4ad      	b.n	8006c9a <_dtoa_r+0x49a>
 800733e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007340:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800739c <_dtoa_r+0xb9c>
 8007344:	b11b      	cbz	r3, 800734e <_dtoa_r+0xb4e>
 8007346:	f10a 0308 	add.w	r3, sl, #8
 800734a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	4650      	mov	r0, sl
 8007350:	b017      	add	sp, #92	@ 0x5c
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	2b01      	cmp	r3, #1
 800735a:	f77f ae2e 	ble.w	8006fba <_dtoa_r+0x7ba>
 800735e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	2001      	movs	r0, #1
 8007364:	e64d      	b.n	8007002 <_dtoa_r+0x802>
 8007366:	f1bb 0f00 	cmp.w	fp, #0
 800736a:	f77f aed9 	ble.w	8007120 <_dtoa_r+0x920>
 800736e:	4656      	mov	r6, sl
 8007370:	9802      	ldr	r0, [sp, #8]
 8007372:	4621      	mov	r1, r4
 8007374:	f7ff f9bb 	bl	80066ee <quorem>
 8007378:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800737c:	f806 3b01 	strb.w	r3, [r6], #1
 8007380:	eba6 020a 	sub.w	r2, r6, sl
 8007384:	4593      	cmp	fp, r2
 8007386:	ddb4      	ble.n	80072f2 <_dtoa_r+0xaf2>
 8007388:	9902      	ldr	r1, [sp, #8]
 800738a:	2300      	movs	r3, #0
 800738c:	220a      	movs	r2, #10
 800738e:	4648      	mov	r0, r9
 8007390:	f000 f968 	bl	8007664 <__multadd>
 8007394:	9002      	str	r0, [sp, #8]
 8007396:	e7eb      	b.n	8007370 <_dtoa_r+0xb70>
 8007398:	0800889c 	.word	0x0800889c
 800739c:	08008820 	.word	0x08008820

080073a0 <_free_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4605      	mov	r5, r0
 80073a4:	2900      	cmp	r1, #0
 80073a6:	d041      	beq.n	800742c <_free_r+0x8c>
 80073a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ac:	1f0c      	subs	r4, r1, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfb8      	it	lt
 80073b2:	18e4      	addlt	r4, r4, r3
 80073b4:	f000 f8e8 	bl	8007588 <__malloc_lock>
 80073b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007430 <_free_r+0x90>)
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	b933      	cbnz	r3, 80073cc <_free_r+0x2c>
 80073be:	6063      	str	r3, [r4, #4]
 80073c0:	6014      	str	r4, [r2, #0]
 80073c2:	4628      	mov	r0, r5
 80073c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073c8:	f000 b8e4 	b.w	8007594 <__malloc_unlock>
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	d908      	bls.n	80073e2 <_free_r+0x42>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf01      	itttt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	1809      	addeq	r1, r1, r0
 80073de:	6021      	streq	r1, [r4, #0]
 80073e0:	e7ed      	b.n	80073be <_free_r+0x1e>
 80073e2:	461a      	mov	r2, r3
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b10b      	cbz	r3, 80073ec <_free_r+0x4c>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d9fa      	bls.n	80073e2 <_free_r+0x42>
 80073ec:	6811      	ldr	r1, [r2, #0]
 80073ee:	1850      	adds	r0, r2, r1
 80073f0:	42a0      	cmp	r0, r4
 80073f2:	d10b      	bne.n	800740c <_free_r+0x6c>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	4401      	add	r1, r0
 80073f8:	1850      	adds	r0, r2, r1
 80073fa:	4283      	cmp	r3, r0
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	d1e0      	bne.n	80073c2 <_free_r+0x22>
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	6053      	str	r3, [r2, #4]
 8007406:	4408      	add	r0, r1
 8007408:	6010      	str	r0, [r2, #0]
 800740a:	e7da      	b.n	80073c2 <_free_r+0x22>
 800740c:	d902      	bls.n	8007414 <_free_r+0x74>
 800740e:	230c      	movs	r3, #12
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	e7d6      	b.n	80073c2 <_free_r+0x22>
 8007414:	6820      	ldr	r0, [r4, #0]
 8007416:	1821      	adds	r1, r4, r0
 8007418:	428b      	cmp	r3, r1
 800741a:	bf04      	itt	eq
 800741c:	6819      	ldreq	r1, [r3, #0]
 800741e:	685b      	ldreq	r3, [r3, #4]
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	bf04      	itt	eq
 8007424:	1809      	addeq	r1, r1, r0
 8007426:	6021      	streq	r1, [r4, #0]
 8007428:	6054      	str	r4, [r2, #4]
 800742a:	e7ca      	b.n	80073c2 <_free_r+0x22>
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	20000584 	.word	0x20000584

08007434 <malloc>:
 8007434:	4b02      	ldr	r3, [pc, #8]	@ (8007440 <malloc+0xc>)
 8007436:	4601      	mov	r1, r0
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f000 b825 	b.w	8007488 <_malloc_r>
 800743e:	bf00      	nop
 8007440:	20000020 	.word	0x20000020

08007444 <sbrk_aligned>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4e0f      	ldr	r6, [pc, #60]	@ (8007484 <sbrk_aligned+0x40>)
 8007448:	460c      	mov	r4, r1
 800744a:	6831      	ldr	r1, [r6, #0]
 800744c:	4605      	mov	r5, r0
 800744e:	b911      	cbnz	r1, 8007456 <sbrk_aligned+0x12>
 8007450:	f000 fe3e 	bl	80080d0 <_sbrk_r>
 8007454:	6030      	str	r0, [r6, #0]
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f000 fe39 	bl	80080d0 <_sbrk_r>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d103      	bne.n	800746a <sbrk_aligned+0x26>
 8007462:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007466:	4620      	mov	r0, r4
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	1cc4      	adds	r4, r0, #3
 800746c:	f024 0403 	bic.w	r4, r4, #3
 8007470:	42a0      	cmp	r0, r4
 8007472:	d0f8      	beq.n	8007466 <sbrk_aligned+0x22>
 8007474:	1a21      	subs	r1, r4, r0
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fe2a 	bl	80080d0 <_sbrk_r>
 800747c:	3001      	adds	r0, #1
 800747e:	d1f2      	bne.n	8007466 <sbrk_aligned+0x22>
 8007480:	e7ef      	b.n	8007462 <sbrk_aligned+0x1e>
 8007482:	bf00      	nop
 8007484:	20000580 	.word	0x20000580

08007488 <_malloc_r>:
 8007488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748c:	1ccd      	adds	r5, r1, #3
 800748e:	f025 0503 	bic.w	r5, r5, #3
 8007492:	3508      	adds	r5, #8
 8007494:	2d0c      	cmp	r5, #12
 8007496:	bf38      	it	cc
 8007498:	250c      	movcc	r5, #12
 800749a:	2d00      	cmp	r5, #0
 800749c:	4606      	mov	r6, r0
 800749e:	db01      	blt.n	80074a4 <_malloc_r+0x1c>
 80074a0:	42a9      	cmp	r1, r5
 80074a2:	d904      	bls.n	80074ae <_malloc_r+0x26>
 80074a4:	230c      	movs	r3, #12
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	2000      	movs	r0, #0
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007584 <_malloc_r+0xfc>
 80074b2:	f000 f869 	bl	8007588 <__malloc_lock>
 80074b6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ba:	461c      	mov	r4, r3
 80074bc:	bb44      	cbnz	r4, 8007510 <_malloc_r+0x88>
 80074be:	4629      	mov	r1, r5
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff ffbf 	bl	8007444 <sbrk_aligned>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	4604      	mov	r4, r0
 80074ca:	d158      	bne.n	800757e <_malloc_r+0xf6>
 80074cc:	f8d8 4000 	ldr.w	r4, [r8]
 80074d0:	4627      	mov	r7, r4
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d143      	bne.n	800755e <_malloc_r+0xd6>
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	d04b      	beq.n	8007572 <_malloc_r+0xea>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	4639      	mov	r1, r7
 80074de:	4630      	mov	r0, r6
 80074e0:	eb04 0903 	add.w	r9, r4, r3
 80074e4:	f000 fdf4 	bl	80080d0 <_sbrk_r>
 80074e8:	4581      	cmp	r9, r0
 80074ea:	d142      	bne.n	8007572 <_malloc_r+0xea>
 80074ec:	6821      	ldr	r1, [r4, #0]
 80074ee:	1a6d      	subs	r5, r5, r1
 80074f0:	4629      	mov	r1, r5
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ffa6 	bl	8007444 <sbrk_aligned>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d03a      	beq.n	8007572 <_malloc_r+0xea>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	442b      	add	r3, r5
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	f8d8 3000 	ldr.w	r3, [r8]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	bb62      	cbnz	r2, 8007564 <_malloc_r+0xdc>
 800750a:	f8c8 7000 	str.w	r7, [r8]
 800750e:	e00f      	b.n	8007530 <_malloc_r+0xa8>
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	1b52      	subs	r2, r2, r5
 8007514:	d420      	bmi.n	8007558 <_malloc_r+0xd0>
 8007516:	2a0b      	cmp	r2, #11
 8007518:	d917      	bls.n	800754a <_malloc_r+0xc2>
 800751a:	1961      	adds	r1, r4, r5
 800751c:	42a3      	cmp	r3, r4
 800751e:	6025      	str	r5, [r4, #0]
 8007520:	bf18      	it	ne
 8007522:	6059      	strne	r1, [r3, #4]
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	bf08      	it	eq
 8007528:	f8c8 1000 	streq.w	r1, [r8]
 800752c:	5162      	str	r2, [r4, r5]
 800752e:	604b      	str	r3, [r1, #4]
 8007530:	4630      	mov	r0, r6
 8007532:	f000 f82f 	bl	8007594 <__malloc_unlock>
 8007536:	f104 000b 	add.w	r0, r4, #11
 800753a:	1d23      	adds	r3, r4, #4
 800753c:	f020 0007 	bic.w	r0, r0, #7
 8007540:	1ac2      	subs	r2, r0, r3
 8007542:	bf1c      	itt	ne
 8007544:	1a1b      	subne	r3, r3, r0
 8007546:	50a3      	strne	r3, [r4, r2]
 8007548:	e7af      	b.n	80074aa <_malloc_r+0x22>
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	42a3      	cmp	r3, r4
 800754e:	bf0c      	ite	eq
 8007550:	f8c8 2000 	streq.w	r2, [r8]
 8007554:	605a      	strne	r2, [r3, #4]
 8007556:	e7eb      	b.n	8007530 <_malloc_r+0xa8>
 8007558:	4623      	mov	r3, r4
 800755a:	6864      	ldr	r4, [r4, #4]
 800755c:	e7ae      	b.n	80074bc <_malloc_r+0x34>
 800755e:	463c      	mov	r4, r7
 8007560:	687f      	ldr	r7, [r7, #4]
 8007562:	e7b6      	b.n	80074d2 <_malloc_r+0x4a>
 8007564:	461a      	mov	r2, r3
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	42a3      	cmp	r3, r4
 800756a:	d1fb      	bne.n	8007564 <_malloc_r+0xdc>
 800756c:	2300      	movs	r3, #0
 800756e:	6053      	str	r3, [r2, #4]
 8007570:	e7de      	b.n	8007530 <_malloc_r+0xa8>
 8007572:	230c      	movs	r3, #12
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	4630      	mov	r0, r6
 8007578:	f000 f80c 	bl	8007594 <__malloc_unlock>
 800757c:	e794      	b.n	80074a8 <_malloc_r+0x20>
 800757e:	6005      	str	r5, [r0, #0]
 8007580:	e7d6      	b.n	8007530 <_malloc_r+0xa8>
 8007582:	bf00      	nop
 8007584:	20000584 	.word	0x20000584

08007588 <__malloc_lock>:
 8007588:	4801      	ldr	r0, [pc, #4]	@ (8007590 <__malloc_lock+0x8>)
 800758a:	f7ff b8ae 	b.w	80066ea <__retarget_lock_acquire_recursive>
 800758e:	bf00      	nop
 8007590:	2000057c 	.word	0x2000057c

08007594 <__malloc_unlock>:
 8007594:	4801      	ldr	r0, [pc, #4]	@ (800759c <__malloc_unlock+0x8>)
 8007596:	f7ff b8a9 	b.w	80066ec <__retarget_lock_release_recursive>
 800759a:	bf00      	nop
 800759c:	2000057c 	.word	0x2000057c

080075a0 <_Balloc>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	69c6      	ldr	r6, [r0, #28]
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	b976      	cbnz	r6, 80075c8 <_Balloc+0x28>
 80075aa:	2010      	movs	r0, #16
 80075ac:	f7ff ff42 	bl	8007434 <malloc>
 80075b0:	4602      	mov	r2, r0
 80075b2:	61e0      	str	r0, [r4, #28]
 80075b4:	b920      	cbnz	r0, 80075c0 <_Balloc+0x20>
 80075b6:	4b18      	ldr	r3, [pc, #96]	@ (8007618 <_Balloc+0x78>)
 80075b8:	4818      	ldr	r0, [pc, #96]	@ (800761c <_Balloc+0x7c>)
 80075ba:	216b      	movs	r1, #107	@ 0x6b
 80075bc:	f000 fda6 	bl	800810c <__assert_func>
 80075c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c4:	6006      	str	r6, [r0, #0]
 80075c6:	60c6      	str	r6, [r0, #12]
 80075c8:	69e6      	ldr	r6, [r4, #28]
 80075ca:	68f3      	ldr	r3, [r6, #12]
 80075cc:	b183      	cbz	r3, 80075f0 <_Balloc+0x50>
 80075ce:	69e3      	ldr	r3, [r4, #28]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075d6:	b9b8      	cbnz	r0, 8007608 <_Balloc+0x68>
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f605 	lsl.w	r6, r1, r5
 80075de:	1d72      	adds	r2, r6, #5
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fdb0 	bl	8008148 <_calloc_r>
 80075e8:	b160      	cbz	r0, 8007604 <_Balloc+0x64>
 80075ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ee:	e00e      	b.n	800760e <_Balloc+0x6e>
 80075f0:	2221      	movs	r2, #33	@ 0x21
 80075f2:	2104      	movs	r1, #4
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fda7 	bl	8008148 <_calloc_r>
 80075fa:	69e3      	ldr	r3, [r4, #28]
 80075fc:	60f0      	str	r0, [r6, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e4      	bne.n	80075ce <_Balloc+0x2e>
 8007604:	2000      	movs	r0, #0
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	6802      	ldr	r2, [r0, #0]
 800760a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800760e:	2300      	movs	r3, #0
 8007610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007614:	e7f7      	b.n	8007606 <_Balloc+0x66>
 8007616:	bf00      	nop
 8007618:	0800882d 	.word	0x0800882d
 800761c:	080088ad 	.word	0x080088ad

08007620 <_Bfree>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	69c6      	ldr	r6, [r0, #28]
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b976      	cbnz	r6, 8007648 <_Bfree+0x28>
 800762a:	2010      	movs	r0, #16
 800762c:	f7ff ff02 	bl	8007434 <malloc>
 8007630:	4602      	mov	r2, r0
 8007632:	61e8      	str	r0, [r5, #28]
 8007634:	b920      	cbnz	r0, 8007640 <_Bfree+0x20>
 8007636:	4b09      	ldr	r3, [pc, #36]	@ (800765c <_Bfree+0x3c>)
 8007638:	4809      	ldr	r0, [pc, #36]	@ (8007660 <_Bfree+0x40>)
 800763a:	218f      	movs	r1, #143	@ 0x8f
 800763c:	f000 fd66 	bl	800810c <__assert_func>
 8007640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007644:	6006      	str	r6, [r0, #0]
 8007646:	60c6      	str	r6, [r0, #12]
 8007648:	b13c      	cbz	r4, 800765a <_Bfree+0x3a>
 800764a:	69eb      	ldr	r3, [r5, #28]
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007654:	6021      	str	r1, [r4, #0]
 8007656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	0800882d 	.word	0x0800882d
 8007660:	080088ad 	.word	0x080088ad

08007664 <__multadd>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	690d      	ldr	r5, [r1, #16]
 800766a:	4607      	mov	r7, r0
 800766c:	460c      	mov	r4, r1
 800766e:	461e      	mov	r6, r3
 8007670:	f101 0c14 	add.w	ip, r1, #20
 8007674:	2000      	movs	r0, #0
 8007676:	f8dc 3000 	ldr.w	r3, [ip]
 800767a:	b299      	uxth	r1, r3
 800767c:	fb02 6101 	mla	r1, r2, r1, r6
 8007680:	0c1e      	lsrs	r6, r3, #16
 8007682:	0c0b      	lsrs	r3, r1, #16
 8007684:	fb02 3306 	mla	r3, r2, r6, r3
 8007688:	b289      	uxth	r1, r1
 800768a:	3001      	adds	r0, #1
 800768c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007690:	4285      	cmp	r5, r0
 8007692:	f84c 1b04 	str.w	r1, [ip], #4
 8007696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800769a:	dcec      	bgt.n	8007676 <__multadd+0x12>
 800769c:	b30e      	cbz	r6, 80076e2 <__multadd+0x7e>
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc19      	bgt.n	80076d8 <__multadd+0x74>
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	4638      	mov	r0, r7
 80076a8:	3101      	adds	r1, #1
 80076aa:	f7ff ff79 	bl	80075a0 <_Balloc>
 80076ae:	4680      	mov	r8, r0
 80076b0:	b928      	cbnz	r0, 80076be <__multadd+0x5a>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <__multadd+0x84>)
 80076b6:	480d      	ldr	r0, [pc, #52]	@ (80076ec <__multadd+0x88>)
 80076b8:	21ba      	movs	r1, #186	@ 0xba
 80076ba:	f000 fd27 	bl	800810c <__assert_func>
 80076be:	6922      	ldr	r2, [r4, #16]
 80076c0:	3202      	adds	r2, #2
 80076c2:	f104 010c 	add.w	r1, r4, #12
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	300c      	adds	r0, #12
 80076ca:	f000 fd11 	bl	80080f0 <memcpy>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa5 	bl	8007620 <_Bfree>
 80076d6:	4644      	mov	r4, r8
 80076d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076dc:	3501      	adds	r5, #1
 80076de:	615e      	str	r6, [r3, #20]
 80076e0:	6125      	str	r5, [r4, #16]
 80076e2:	4620      	mov	r0, r4
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e8:	0800889c 	.word	0x0800889c
 80076ec:	080088ad 	.word	0x080088ad

080076f0 <__hi0bits>:
 80076f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076f4:	4603      	mov	r3, r0
 80076f6:	bf36      	itet	cc
 80076f8:	0403      	lslcc	r3, r0, #16
 80076fa:	2000      	movcs	r0, #0
 80076fc:	2010      	movcc	r0, #16
 80076fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007702:	bf3c      	itt	cc
 8007704:	021b      	lslcc	r3, r3, #8
 8007706:	3008      	addcc	r0, #8
 8007708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770c:	bf3c      	itt	cc
 800770e:	011b      	lslcc	r3, r3, #4
 8007710:	3004      	addcc	r0, #4
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007716:	bf3c      	itt	cc
 8007718:	009b      	lslcc	r3, r3, #2
 800771a:	3002      	addcc	r0, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	db05      	blt.n	800772c <__hi0bits+0x3c>
 8007720:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007724:	f100 0001 	add.w	r0, r0, #1
 8007728:	bf08      	it	eq
 800772a:	2020      	moveq	r0, #32
 800772c:	4770      	bx	lr

0800772e <__lo0bits>:
 800772e:	6803      	ldr	r3, [r0, #0]
 8007730:	4602      	mov	r2, r0
 8007732:	f013 0007 	ands.w	r0, r3, #7
 8007736:	d00b      	beq.n	8007750 <__lo0bits+0x22>
 8007738:	07d9      	lsls	r1, r3, #31
 800773a:	d421      	bmi.n	8007780 <__lo0bits+0x52>
 800773c:	0798      	lsls	r0, r3, #30
 800773e:	bf49      	itett	mi
 8007740:	085b      	lsrmi	r3, r3, #1
 8007742:	089b      	lsrpl	r3, r3, #2
 8007744:	2001      	movmi	r0, #1
 8007746:	6013      	strmi	r3, [r2, #0]
 8007748:	bf5c      	itt	pl
 800774a:	6013      	strpl	r3, [r2, #0]
 800774c:	2002      	movpl	r0, #2
 800774e:	4770      	bx	lr
 8007750:	b299      	uxth	r1, r3
 8007752:	b909      	cbnz	r1, 8007758 <__lo0bits+0x2a>
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	2010      	movs	r0, #16
 8007758:	b2d9      	uxtb	r1, r3
 800775a:	b909      	cbnz	r1, 8007760 <__lo0bits+0x32>
 800775c:	3008      	adds	r0, #8
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	bf04      	itt	eq
 8007764:	091b      	lsreq	r3, r3, #4
 8007766:	3004      	addeq	r0, #4
 8007768:	0799      	lsls	r1, r3, #30
 800776a:	bf04      	itt	eq
 800776c:	089b      	lsreq	r3, r3, #2
 800776e:	3002      	addeq	r0, #2
 8007770:	07d9      	lsls	r1, r3, #31
 8007772:	d403      	bmi.n	800777c <__lo0bits+0x4e>
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	f100 0001 	add.w	r0, r0, #1
 800777a:	d003      	beq.n	8007784 <__lo0bits+0x56>
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4770      	bx	lr
 8007780:	2000      	movs	r0, #0
 8007782:	4770      	bx	lr
 8007784:	2020      	movs	r0, #32
 8007786:	4770      	bx	lr

08007788 <__i2b>:
 8007788:	b510      	push	{r4, lr}
 800778a:	460c      	mov	r4, r1
 800778c:	2101      	movs	r1, #1
 800778e:	f7ff ff07 	bl	80075a0 <_Balloc>
 8007792:	4602      	mov	r2, r0
 8007794:	b928      	cbnz	r0, 80077a2 <__i2b+0x1a>
 8007796:	4b05      	ldr	r3, [pc, #20]	@ (80077ac <__i2b+0x24>)
 8007798:	4805      	ldr	r0, [pc, #20]	@ (80077b0 <__i2b+0x28>)
 800779a:	f240 1145 	movw	r1, #325	@ 0x145
 800779e:	f000 fcb5 	bl	800810c <__assert_func>
 80077a2:	2301      	movs	r3, #1
 80077a4:	6144      	str	r4, [r0, #20]
 80077a6:	6103      	str	r3, [r0, #16]
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	0800889c 	.word	0x0800889c
 80077b0:	080088ad 	.word	0x080088ad

080077b4 <__multiply>:
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	4617      	mov	r7, r2
 80077ba:	690a      	ldr	r2, [r1, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	429a      	cmp	r2, r3
 80077c0:	bfa8      	it	ge
 80077c2:	463b      	movge	r3, r7
 80077c4:	4689      	mov	r9, r1
 80077c6:	bfa4      	itt	ge
 80077c8:	460f      	movge	r7, r1
 80077ca:	4699      	movge	r9, r3
 80077cc:	693d      	ldr	r5, [r7, #16]
 80077ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	eb05 060a 	add.w	r6, r5, sl
 80077da:	42b3      	cmp	r3, r6
 80077dc:	b085      	sub	sp, #20
 80077de:	bfb8      	it	lt
 80077e0:	3101      	addlt	r1, #1
 80077e2:	f7ff fedd 	bl	80075a0 <_Balloc>
 80077e6:	b930      	cbnz	r0, 80077f6 <__multiply+0x42>
 80077e8:	4602      	mov	r2, r0
 80077ea:	4b41      	ldr	r3, [pc, #260]	@ (80078f0 <__multiply+0x13c>)
 80077ec:	4841      	ldr	r0, [pc, #260]	@ (80078f4 <__multiply+0x140>)
 80077ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077f2:	f000 fc8b 	bl	800810c <__assert_func>
 80077f6:	f100 0414 	add.w	r4, r0, #20
 80077fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077fe:	4623      	mov	r3, r4
 8007800:	2200      	movs	r2, #0
 8007802:	4573      	cmp	r3, lr
 8007804:	d320      	bcc.n	8007848 <__multiply+0x94>
 8007806:	f107 0814 	add.w	r8, r7, #20
 800780a:	f109 0114 	add.w	r1, r9, #20
 800780e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007812:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	1beb      	subs	r3, r5, r7
 800781a:	3b15      	subs	r3, #21
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	3304      	adds	r3, #4
 8007822:	3715      	adds	r7, #21
 8007824:	42bd      	cmp	r5, r7
 8007826:	bf38      	it	cc
 8007828:	2304      	movcc	r3, #4
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	9103      	str	r1, [sp, #12]
 8007830:	428b      	cmp	r3, r1
 8007832:	d80c      	bhi.n	800784e <__multiply+0x9a>
 8007834:	2e00      	cmp	r6, #0
 8007836:	dd03      	ble.n	8007840 <__multiply+0x8c>
 8007838:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800783c:	2b00      	cmp	r3, #0
 800783e:	d055      	beq.n	80078ec <__multiply+0x138>
 8007840:	6106      	str	r6, [r0, #16]
 8007842:	b005      	add	sp, #20
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007848:	f843 2b04 	str.w	r2, [r3], #4
 800784c:	e7d9      	b.n	8007802 <__multiply+0x4e>
 800784e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	d01f      	beq.n	8007898 <__multiply+0xe4>
 8007858:	46c4      	mov	ip, r8
 800785a:	46a1      	mov	r9, r4
 800785c:	2700      	movs	r7, #0
 800785e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007862:	f8d9 3000 	ldr.w	r3, [r9]
 8007866:	fa1f fb82 	uxth.w	fp, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007870:	443b      	add	r3, r7
 8007872:	f8d9 7000 	ldr.w	r7, [r9]
 8007876:	0c12      	lsrs	r2, r2, #16
 8007878:	0c3f      	lsrs	r7, r7, #16
 800787a:	fb0a 7202 	mla	r2, sl, r2, r7
 800787e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007882:	b29b      	uxth	r3, r3
 8007884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007888:	4565      	cmp	r5, ip
 800788a:	f849 3b04 	str.w	r3, [r9], #4
 800788e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007892:	d8e4      	bhi.n	800785e <__multiply+0xaa>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	50e7      	str	r7, [r4, r3]
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800789e:	3104      	adds	r1, #4
 80078a0:	f1b9 0f00 	cmp.w	r9, #0
 80078a4:	d020      	beq.n	80078e8 <__multiply+0x134>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	4647      	mov	r7, r8
 80078aa:	46a4      	mov	ip, r4
 80078ac:	f04f 0a00 	mov.w	sl, #0
 80078b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80078b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80078b8:	fb09 220b 	mla	r2, r9, fp, r2
 80078bc:	4452      	add	r2, sl
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078c4:	f84c 3b04 	str.w	r3, [ip], #4
 80078c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80078cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80078d4:	fb09 330a 	mla	r3, r9, sl, r3
 80078d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078dc:	42bd      	cmp	r5, r7
 80078de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078e2:	d8e5      	bhi.n	80078b0 <__multiply+0xfc>
 80078e4:	9a01      	ldr	r2, [sp, #4]
 80078e6:	50a3      	str	r3, [r4, r2]
 80078e8:	3404      	adds	r4, #4
 80078ea:	e79f      	b.n	800782c <__multiply+0x78>
 80078ec:	3e01      	subs	r6, #1
 80078ee:	e7a1      	b.n	8007834 <__multiply+0x80>
 80078f0:	0800889c 	.word	0x0800889c
 80078f4:	080088ad 	.word	0x080088ad

080078f8 <__pow5mult>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	4615      	mov	r5, r2
 80078fe:	f012 0203 	ands.w	r2, r2, #3
 8007902:	4607      	mov	r7, r0
 8007904:	460e      	mov	r6, r1
 8007906:	d007      	beq.n	8007918 <__pow5mult+0x20>
 8007908:	4c25      	ldr	r4, [pc, #148]	@ (80079a0 <__pow5mult+0xa8>)
 800790a:	3a01      	subs	r2, #1
 800790c:	2300      	movs	r3, #0
 800790e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007912:	f7ff fea7 	bl	8007664 <__multadd>
 8007916:	4606      	mov	r6, r0
 8007918:	10ad      	asrs	r5, r5, #2
 800791a:	d03d      	beq.n	8007998 <__pow5mult+0xa0>
 800791c:	69fc      	ldr	r4, [r7, #28]
 800791e:	b97c      	cbnz	r4, 8007940 <__pow5mult+0x48>
 8007920:	2010      	movs	r0, #16
 8007922:	f7ff fd87 	bl	8007434 <malloc>
 8007926:	4602      	mov	r2, r0
 8007928:	61f8      	str	r0, [r7, #28]
 800792a:	b928      	cbnz	r0, 8007938 <__pow5mult+0x40>
 800792c:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <__pow5mult+0xac>)
 800792e:	481e      	ldr	r0, [pc, #120]	@ (80079a8 <__pow5mult+0xb0>)
 8007930:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007934:	f000 fbea 	bl	800810c <__assert_func>
 8007938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	60c4      	str	r4, [r0, #12]
 8007940:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007948:	b94c      	cbnz	r4, 800795e <__pow5mult+0x66>
 800794a:	f240 2171 	movw	r1, #625	@ 0x271
 800794e:	4638      	mov	r0, r7
 8007950:	f7ff ff1a 	bl	8007788 <__i2b>
 8007954:	2300      	movs	r3, #0
 8007956:	f8c8 0008 	str.w	r0, [r8, #8]
 800795a:	4604      	mov	r4, r0
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	07eb      	lsls	r3, r5, #31
 8007964:	d50a      	bpl.n	800797c <__pow5mult+0x84>
 8007966:	4631      	mov	r1, r6
 8007968:	4622      	mov	r2, r4
 800796a:	4638      	mov	r0, r7
 800796c:	f7ff ff22 	bl	80077b4 <__multiply>
 8007970:	4631      	mov	r1, r6
 8007972:	4680      	mov	r8, r0
 8007974:	4638      	mov	r0, r7
 8007976:	f7ff fe53 	bl	8007620 <_Bfree>
 800797a:	4646      	mov	r6, r8
 800797c:	106d      	asrs	r5, r5, #1
 800797e:	d00b      	beq.n	8007998 <__pow5mult+0xa0>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	b938      	cbnz	r0, 8007994 <__pow5mult+0x9c>
 8007984:	4622      	mov	r2, r4
 8007986:	4621      	mov	r1, r4
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ff13 	bl	80077b4 <__multiply>
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f8c0 9000 	str.w	r9, [r0]
 8007994:	4604      	mov	r4, r0
 8007996:	e7e4      	b.n	8007962 <__pow5mult+0x6a>
 8007998:	4630      	mov	r0, r6
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	bf00      	nop
 80079a0:	08008960 	.word	0x08008960
 80079a4:	0800882d 	.word	0x0800882d
 80079a8:	080088ad 	.word	0x080088ad

080079ac <__lshift>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	460c      	mov	r4, r1
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	4607      	mov	r7, r0
 80079be:	4691      	mov	r9, r2
 80079c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c4:	f108 0601 	add.w	r6, r8, #1
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	db0b      	blt.n	80079e4 <__lshift+0x38>
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff fde7 	bl	80075a0 <_Balloc>
 80079d2:	4605      	mov	r5, r0
 80079d4:	b948      	cbnz	r0, 80079ea <__lshift+0x3e>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b28      	ldr	r3, [pc, #160]	@ (8007a7c <__lshift+0xd0>)
 80079da:	4829      	ldr	r0, [pc, #164]	@ (8007a80 <__lshift+0xd4>)
 80079dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079e0:	f000 fb94 	bl	800810c <__assert_func>
 80079e4:	3101      	adds	r1, #1
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	e7ee      	b.n	80079c8 <__lshift+0x1c>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f100 0114 	add.w	r1, r0, #20
 80079f0:	f100 0210 	add.w	r2, r0, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	4553      	cmp	r3, sl
 80079f8:	db33      	blt.n	8007a62 <__lshift+0xb6>
 80079fa:	6920      	ldr	r0, [r4, #16]
 80079fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a00:	f104 0314 	add.w	r3, r4, #20
 8007a04:	f019 091f 	ands.w	r9, r9, #31
 8007a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a10:	d02b      	beq.n	8007a6a <__lshift+0xbe>
 8007a12:	f1c9 0e20 	rsb	lr, r9, #32
 8007a16:	468a      	mov	sl, r1
 8007a18:	2200      	movs	r2, #0
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a20:	4310      	orrs	r0, r2
 8007a22:	f84a 0b04 	str.w	r0, [sl], #4
 8007a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2a:	459c      	cmp	ip, r3
 8007a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a30:	d8f3      	bhi.n	8007a1a <__lshift+0x6e>
 8007a32:	ebac 0304 	sub.w	r3, ip, r4
 8007a36:	3b15      	subs	r3, #21
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	f104 0015 	add.w	r0, r4, #21
 8007a42:	4560      	cmp	r0, ip
 8007a44:	bf88      	it	hi
 8007a46:	2304      	movhi	r3, #4
 8007a48:	50ca      	str	r2, [r1, r3]
 8007a4a:	b10a      	cbz	r2, 8007a50 <__lshift+0xa4>
 8007a4c:	f108 0602 	add.w	r6, r8, #2
 8007a50:	3e01      	subs	r6, #1
 8007a52:	4638      	mov	r0, r7
 8007a54:	612e      	str	r6, [r5, #16]
 8007a56:	4621      	mov	r1, r4
 8007a58:	f7ff fde2 	bl	8007620 <_Bfree>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a66:	3301      	adds	r3, #1
 8007a68:	e7c5      	b.n	80079f6 <__lshift+0x4a>
 8007a6a:	3904      	subs	r1, #4
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a74:	459c      	cmp	ip, r3
 8007a76:	d8f9      	bhi.n	8007a6c <__lshift+0xc0>
 8007a78:	e7ea      	b.n	8007a50 <__lshift+0xa4>
 8007a7a:	bf00      	nop
 8007a7c:	0800889c 	.word	0x0800889c
 8007a80:	080088ad 	.word	0x080088ad

08007a84 <__mcmp>:
 8007a84:	690a      	ldr	r2, [r1, #16]
 8007a86:	4603      	mov	r3, r0
 8007a88:	6900      	ldr	r0, [r0, #16]
 8007a8a:	1a80      	subs	r0, r0, r2
 8007a8c:	b530      	push	{r4, r5, lr}
 8007a8e:	d10e      	bne.n	8007aae <__mcmp+0x2a>
 8007a90:	3314      	adds	r3, #20
 8007a92:	3114      	adds	r1, #20
 8007a94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007aa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007aa4:	4295      	cmp	r5, r2
 8007aa6:	d003      	beq.n	8007ab0 <__mcmp+0x2c>
 8007aa8:	d205      	bcs.n	8007ab6 <__mcmp+0x32>
 8007aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d3f3      	bcc.n	8007a9c <__mcmp+0x18>
 8007ab4:	e7fb      	b.n	8007aae <__mcmp+0x2a>
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	e7f9      	b.n	8007aae <__mcmp+0x2a>
	...

08007abc <__mdiff>:
 8007abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	4689      	mov	r9, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4648      	mov	r0, r9
 8007ac8:	4614      	mov	r4, r2
 8007aca:	f7ff ffdb 	bl	8007a84 <__mcmp>
 8007ace:	1e05      	subs	r5, r0, #0
 8007ad0:	d112      	bne.n	8007af8 <__mdiff+0x3c>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff fd63 	bl	80075a0 <_Balloc>
 8007ada:	4602      	mov	r2, r0
 8007adc:	b928      	cbnz	r0, 8007aea <__mdiff+0x2e>
 8007ade:	4b3f      	ldr	r3, [pc, #252]	@ (8007bdc <__mdiff+0x120>)
 8007ae0:	f240 2137 	movw	r1, #567	@ 0x237
 8007ae4:	483e      	ldr	r0, [pc, #248]	@ (8007be0 <__mdiff+0x124>)
 8007ae6:	f000 fb11 	bl	800810c <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007af0:	4610      	mov	r0, r2
 8007af2:	b003      	add	sp, #12
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	bfbc      	itt	lt
 8007afa:	464b      	movlt	r3, r9
 8007afc:	46a1      	movlt	r9, r4
 8007afe:	4630      	mov	r0, r6
 8007b00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b04:	bfba      	itte	lt
 8007b06:	461c      	movlt	r4, r3
 8007b08:	2501      	movlt	r5, #1
 8007b0a:	2500      	movge	r5, #0
 8007b0c:	f7ff fd48 	bl	80075a0 <_Balloc>
 8007b10:	4602      	mov	r2, r0
 8007b12:	b918      	cbnz	r0, 8007b1c <__mdiff+0x60>
 8007b14:	4b31      	ldr	r3, [pc, #196]	@ (8007bdc <__mdiff+0x120>)
 8007b16:	f240 2145 	movw	r1, #581	@ 0x245
 8007b1a:	e7e3      	b.n	8007ae4 <__mdiff+0x28>
 8007b1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b20:	6926      	ldr	r6, [r4, #16]
 8007b22:	60c5      	str	r5, [r0, #12]
 8007b24:	f109 0310 	add.w	r3, r9, #16
 8007b28:	f109 0514 	add.w	r5, r9, #20
 8007b2c:	f104 0e14 	add.w	lr, r4, #20
 8007b30:	f100 0b14 	add.w	fp, r0, #20
 8007b34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	46d9      	mov	r9, fp
 8007b40:	f04f 0c00 	mov.w	ip, #0
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	fa1f f38a 	uxth.w	r3, sl
 8007b54:	4619      	mov	r1, r3
 8007b56:	b283      	uxth	r3, r0
 8007b58:	1acb      	subs	r3, r1, r3
 8007b5a:	0c00      	lsrs	r0, r0, #16
 8007b5c:	4463      	add	r3, ip
 8007b5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b6c:	4576      	cmp	r6, lr
 8007b6e:	f849 3b04 	str.w	r3, [r9], #4
 8007b72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b76:	d8e5      	bhi.n	8007b44 <__mdiff+0x88>
 8007b78:	1b33      	subs	r3, r6, r4
 8007b7a:	3b15      	subs	r3, #21
 8007b7c:	f023 0303 	bic.w	r3, r3, #3
 8007b80:	3415      	adds	r4, #21
 8007b82:	3304      	adds	r3, #4
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	bf38      	it	cc
 8007b88:	2304      	movcc	r3, #4
 8007b8a:	441d      	add	r5, r3
 8007b8c:	445b      	add	r3, fp
 8007b8e:	461e      	mov	r6, r3
 8007b90:	462c      	mov	r4, r5
 8007b92:	4544      	cmp	r4, r8
 8007b94:	d30e      	bcc.n	8007bb4 <__mdiff+0xf8>
 8007b96:	f108 0103 	add.w	r1, r8, #3
 8007b9a:	1b49      	subs	r1, r1, r5
 8007b9c:	f021 0103 	bic.w	r1, r1, #3
 8007ba0:	3d03      	subs	r5, #3
 8007ba2:	45a8      	cmp	r8, r5
 8007ba4:	bf38      	it	cc
 8007ba6:	2100      	movcc	r1, #0
 8007ba8:	440b      	add	r3, r1
 8007baa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bae:	b191      	cbz	r1, 8007bd6 <__mdiff+0x11a>
 8007bb0:	6117      	str	r7, [r2, #16]
 8007bb2:	e79d      	b.n	8007af0 <__mdiff+0x34>
 8007bb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bb8:	46e6      	mov	lr, ip
 8007bba:	0c08      	lsrs	r0, r1, #16
 8007bbc:	fa1c fc81 	uxtah	ip, ip, r1
 8007bc0:	4471      	add	r1, lr
 8007bc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bc6:	b289      	uxth	r1, r1
 8007bc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bcc:	f846 1b04 	str.w	r1, [r6], #4
 8007bd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bd4:	e7dd      	b.n	8007b92 <__mdiff+0xd6>
 8007bd6:	3f01      	subs	r7, #1
 8007bd8:	e7e7      	b.n	8007baa <__mdiff+0xee>
 8007bda:	bf00      	nop
 8007bdc:	0800889c 	.word	0x0800889c
 8007be0:	080088ad 	.word	0x080088ad

08007be4 <__d2b>:
 8007be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	460f      	mov	r7, r1
 8007bea:	2101      	movs	r1, #1
 8007bec:	ec59 8b10 	vmov	r8, r9, d0
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	f7ff fcd5 	bl	80075a0 <_Balloc>
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	b930      	cbnz	r0, 8007c08 <__d2b+0x24>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4b23      	ldr	r3, [pc, #140]	@ (8007c8c <__d2b+0xa8>)
 8007bfe:	4824      	ldr	r0, [pc, #144]	@ (8007c90 <__d2b+0xac>)
 8007c00:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c04:	f000 fa82 	bl	800810c <__assert_func>
 8007c08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c10:	b10d      	cbz	r5, 8007c16 <__d2b+0x32>
 8007c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	f1b8 0300 	subs.w	r3, r8, #0
 8007c1c:	d023      	beq.n	8007c66 <__d2b+0x82>
 8007c1e:	4668      	mov	r0, sp
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	f7ff fd84 	bl	800772e <__lo0bits>
 8007c26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c2a:	b1d0      	cbz	r0, 8007c62 <__d2b+0x7e>
 8007c2c:	f1c0 0320 	rsb	r3, r0, #32
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	430b      	orrs	r3, r1
 8007c36:	40c2      	lsrs	r2, r0
 8007c38:	6163      	str	r3, [r4, #20]
 8007c3a:	9201      	str	r2, [sp, #4]
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	61a3      	str	r3, [r4, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf0c      	ite	eq
 8007c44:	2201      	moveq	r2, #1
 8007c46:	2202      	movne	r2, #2
 8007c48:	6122      	str	r2, [r4, #16]
 8007c4a:	b1a5      	cbz	r5, 8007c76 <__d2b+0x92>
 8007c4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c50:	4405      	add	r5, r0
 8007c52:	603d      	str	r5, [r7, #0]
 8007c54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c58:	6030      	str	r0, [r6, #0]
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	b003      	add	sp, #12
 8007c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c62:	6161      	str	r1, [r4, #20]
 8007c64:	e7ea      	b.n	8007c3c <__d2b+0x58>
 8007c66:	a801      	add	r0, sp, #4
 8007c68:	f7ff fd61 	bl	800772e <__lo0bits>
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	6163      	str	r3, [r4, #20]
 8007c70:	3020      	adds	r0, #32
 8007c72:	2201      	movs	r2, #1
 8007c74:	e7e8      	b.n	8007c48 <__d2b+0x64>
 8007c76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c7e:	6038      	str	r0, [r7, #0]
 8007c80:	6918      	ldr	r0, [r3, #16]
 8007c82:	f7ff fd35 	bl	80076f0 <__hi0bits>
 8007c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c8a:	e7e5      	b.n	8007c58 <__d2b+0x74>
 8007c8c:	0800889c 	.word	0x0800889c
 8007c90:	080088ad 	.word	0x080088ad

08007c94 <__ssputs_r>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	688e      	ldr	r6, [r1, #8]
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	42be      	cmp	r6, r7
 8007c9e:	680b      	ldr	r3, [r1, #0]
 8007ca0:	4682      	mov	sl, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4690      	mov	r8, r2
 8007ca6:	d82d      	bhi.n	8007d04 <__ssputs_r+0x70>
 8007ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cb0:	d026      	beq.n	8007d00 <__ssputs_r+0x6c>
 8007cb2:	6965      	ldr	r5, [r4, #20]
 8007cb4:	6909      	ldr	r1, [r1, #16]
 8007cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cba:	eba3 0901 	sub.w	r9, r3, r1
 8007cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc2:	1c7b      	adds	r3, r7, #1
 8007cc4:	444b      	add	r3, r9
 8007cc6:	106d      	asrs	r5, r5, #1
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	bf38      	it	cc
 8007ccc:	461d      	movcc	r5, r3
 8007cce:	0553      	lsls	r3, r2, #21
 8007cd0:	d527      	bpl.n	8007d22 <__ssputs_r+0x8e>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7ff fbd8 	bl	8007488 <_malloc_r>
 8007cd8:	4606      	mov	r6, r0
 8007cda:	b360      	cbz	r0, 8007d36 <__ssputs_r+0xa2>
 8007cdc:	6921      	ldr	r1, [r4, #16]
 8007cde:	464a      	mov	r2, r9
 8007ce0:	f000 fa06 	bl	80080f0 <memcpy>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	6126      	str	r6, [r4, #16]
 8007cf2:	6165      	str	r5, [r4, #20]
 8007cf4:	444e      	add	r6, r9
 8007cf6:	eba5 0509 	sub.w	r5, r5, r9
 8007cfa:	6026      	str	r6, [r4, #0]
 8007cfc:	60a5      	str	r5, [r4, #8]
 8007cfe:	463e      	mov	r6, r7
 8007d00:	42be      	cmp	r6, r7
 8007d02:	d900      	bls.n	8007d06 <__ssputs_r+0x72>
 8007d04:	463e      	mov	r6, r7
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	f000 f9c6 	bl	800809c <memmove>
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	1b9b      	subs	r3, r3, r6
 8007d14:	60a3      	str	r3, [r4, #8]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	4433      	add	r3, r6
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	462a      	mov	r2, r5
 8007d24:	f000 fa36 	bl	8008194 <_realloc_r>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1e0      	bne.n	8007cf0 <__ssputs_r+0x5c>
 8007d2e:	6921      	ldr	r1, [r4, #16]
 8007d30:	4650      	mov	r0, sl
 8007d32:	f7ff fb35 	bl	80073a0 <_free_r>
 8007d36:	230c      	movs	r3, #12
 8007d38:	f8ca 3000 	str.w	r3, [sl]
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d48:	e7e9      	b.n	8007d1e <__ssputs_r+0x8a>
	...

08007d4c <_svfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	b09d      	sub	sp, #116	@ 0x74
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	d510      	bpl.n	8007d82 <_svfiprintf_r+0x36>
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	b973      	cbnz	r3, 8007d82 <_svfiprintf_r+0x36>
 8007d64:	2140      	movs	r1, #64	@ 0x40
 8007d66:	f7ff fb8f 	bl	8007488 <_malloc_r>
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	6128      	str	r0, [r5, #16]
 8007d6e:	b930      	cbnz	r0, 8007d7e <_svfiprintf_r+0x32>
 8007d70:	230c      	movs	r3, #12
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d78:	b01d      	add	sp, #116	@ 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	2340      	movs	r3, #64	@ 0x40
 8007d80:	616b      	str	r3, [r5, #20]
 8007d82:	2300      	movs	r3, #0
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	2320      	movs	r3, #32
 8007d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d90:	2330      	movs	r3, #48	@ 0x30
 8007d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f30 <_svfiprintf_r+0x1e4>
 8007d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d9a:	f04f 0901 	mov.w	r9, #1
 8007d9e:	4623      	mov	r3, r4
 8007da0:	469a      	mov	sl, r3
 8007da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da6:	b10a      	cbz	r2, 8007dac <_svfiprintf_r+0x60>
 8007da8:	2a25      	cmp	r2, #37	@ 0x25
 8007daa:	d1f9      	bne.n	8007da0 <_svfiprintf_r+0x54>
 8007dac:	ebba 0b04 	subs.w	fp, sl, r4
 8007db0:	d00b      	beq.n	8007dca <_svfiprintf_r+0x7e>
 8007db2:	465b      	mov	r3, fp
 8007db4:	4622      	mov	r2, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ff6b 	bl	8007c94 <__ssputs_r>
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f000 80a7 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc6:	445a      	add	r2, fp
 8007dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 809f 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dde:	f10a 0a01 	add.w	sl, sl, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dec:	4654      	mov	r4, sl
 8007dee:	2205      	movs	r2, #5
 8007df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df4:	484e      	ldr	r0, [pc, #312]	@ (8007f30 <_svfiprintf_r+0x1e4>)
 8007df6:	f7f8 fa13 	bl	8000220 <memchr>
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	b9d8      	cbnz	r0, 8007e36 <_svfiprintf_r+0xea>
 8007dfe:	06d0      	lsls	r0, r2, #27
 8007e00:	bf44      	itt	mi
 8007e02:	2320      	movmi	r3, #32
 8007e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e08:	0711      	lsls	r1, r2, #28
 8007e0a:	bf44      	itt	mi
 8007e0c:	232b      	movmi	r3, #43	@ 0x2b
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e18:	d015      	beq.n	8007e46 <_svfiprintf_r+0xfa>
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f04f 0c0a 	mov.w	ip, #10
 8007e24:	4621      	mov	r1, r4
 8007e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2a:	3b30      	subs	r3, #48	@ 0x30
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d94b      	bls.n	8007ec8 <_svfiprintf_r+0x17c>
 8007e30:	b1b0      	cbz	r0, 8007e60 <_svfiprintf_r+0x114>
 8007e32:	9207      	str	r2, [sp, #28]
 8007e34:	e014      	b.n	8007e60 <_svfiprintf_r+0x114>
 8007e36:	eba0 0308 	sub.w	r3, r0, r8
 8007e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	46a2      	mov	sl, r4
 8007e44:	e7d2      	b.n	8007dec <_svfiprintf_r+0xa0>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	1d19      	adds	r1, r3, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	9103      	str	r1, [sp, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bfbb      	ittet	lt
 8007e52:	425b      	neglt	r3, r3
 8007e54:	f042 0202 	orrlt.w	r2, r2, #2
 8007e58:	9307      	strge	r3, [sp, #28]
 8007e5a:	9307      	strlt	r3, [sp, #28]
 8007e5c:	bfb8      	it	lt
 8007e5e:	9204      	strlt	r2, [sp, #16]
 8007e60:	7823      	ldrb	r3, [r4, #0]
 8007e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e64:	d10a      	bne.n	8007e7c <_svfiprintf_r+0x130>
 8007e66:	7863      	ldrb	r3, [r4, #1]
 8007e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6a:	d132      	bne.n	8007ed2 <_svfiprintf_r+0x186>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e78:	3402      	adds	r4, #2
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f40 <_svfiprintf_r+0x1f4>
 8007e80:	7821      	ldrb	r1, [r4, #0]
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	f7f8 f9cb 	bl	8000220 <memchr>
 8007e8a:	b138      	cbz	r0, 8007e9c <_svfiprintf_r+0x150>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	eba0 000a 	sub.w	r0, r0, sl
 8007e92:	2240      	movs	r2, #64	@ 0x40
 8007e94:	4082      	lsls	r2, r0
 8007e96:	4313      	orrs	r3, r2
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea0:	4824      	ldr	r0, [pc, #144]	@ (8007f34 <_svfiprintf_r+0x1e8>)
 8007ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	f7f8 f9ba 	bl	8000220 <memchr>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d036      	beq.n	8007f1e <_svfiprintf_r+0x1d2>
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <_svfiprintf_r+0x1ec>)
 8007eb2:	bb1b      	cbnz	r3, 8007efc <_svfiprintf_r+0x1b0>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec2:	4433      	add	r3, r6
 8007ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec6:	e76a      	b.n	8007d9e <_svfiprintf_r+0x52>
 8007ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7a8      	b.n	8007e24 <_svfiprintf_r+0xd8>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	3401      	adds	r4, #1
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee4:	3a30      	subs	r2, #48	@ 0x30
 8007ee6:	2a09      	cmp	r2, #9
 8007ee8:	d903      	bls.n	8007ef2 <_svfiprintf_r+0x1a6>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c6      	beq.n	8007e7c <_svfiprintf_r+0x130>
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	e7c4      	b.n	8007e7c <_svfiprintf_r+0x130>
 8007ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f0      	b.n	8007ede <_svfiprintf_r+0x192>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7fd fe94 	bl	8005c34 <_printf_float>
 8007f0c:	1c42      	adds	r2, r0, #1
 8007f0e:	4606      	mov	r6, r0
 8007f10:	d1d6      	bne.n	8007ec0 <_svfiprintf_r+0x174>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	065b      	lsls	r3, r3, #25
 8007f16:	f53f af2d 	bmi.w	8007d74 <_svfiprintf_r+0x28>
 8007f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f1c:	e72c      	b.n	8007d78 <_svfiprintf_r+0x2c>
 8007f1e:	ab03      	add	r3, sp, #12
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	462a      	mov	r2, r5
 8007f24:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f26:	a904      	add	r1, sp, #16
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7fe f91b 	bl	8006164 <_printf_i>
 8007f2e:	e7ed      	b.n	8007f0c <_svfiprintf_r+0x1c0>
 8007f30:	08008906 	.word	0x08008906
 8007f34:	08008910 	.word	0x08008910
 8007f38:	08005c35 	.word	0x08005c35
 8007f3c:	08007c95 	.word	0x08007c95
 8007f40:	0800890c 	.word	0x0800890c

08007f44 <__sflush_r>:
 8007f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4c:	0716      	lsls	r6, r2, #28
 8007f4e:	4605      	mov	r5, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	d454      	bmi.n	8007ffe <__sflush_r+0xba>
 8007f54:	684b      	ldr	r3, [r1, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dc02      	bgt.n	8007f60 <__sflush_r+0x1c>
 8007f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd48      	ble.n	8007ff2 <__sflush_r+0xae>
 8007f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	d045      	beq.n	8007ff2 <__sflush_r+0xae>
 8007f66:	2300      	movs	r3, #0
 8007f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f6c:	682f      	ldr	r7, [r5, #0]
 8007f6e:	6a21      	ldr	r1, [r4, #32]
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	d030      	beq.n	8007fd6 <__sflush_r+0x92>
 8007f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	0759      	lsls	r1, r3, #29
 8007f7a:	d505      	bpl.n	8007f88 <__sflush_r+0x44>
 8007f7c:	6863      	ldr	r3, [r4, #4]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f82:	b10b      	cbz	r3, 8007f88 <__sflush_r+0x44>
 8007f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f8c:	6a21      	ldr	r1, [r4, #32]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b0      	blx	r6
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	d106      	bne.n	8007fa6 <__sflush_r+0x62>
 8007f98:	6829      	ldr	r1, [r5, #0]
 8007f9a:	291d      	cmp	r1, #29
 8007f9c:	d82b      	bhi.n	8007ff6 <__sflush_r+0xb2>
 8007f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008048 <__sflush_r+0x104>)
 8007fa0:	40ca      	lsrs	r2, r1
 8007fa2:	07d6      	lsls	r6, r2, #31
 8007fa4:	d527      	bpl.n	8007ff6 <__sflush_r+0xb2>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	6062      	str	r2, [r4, #4]
 8007faa:	04d9      	lsls	r1, r3, #19
 8007fac:	6922      	ldr	r2, [r4, #16]
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	d504      	bpl.n	8007fbc <__sflush_r+0x78>
 8007fb2:	1c42      	adds	r2, r0, #1
 8007fb4:	d101      	bne.n	8007fba <__sflush_r+0x76>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	b903      	cbnz	r3, 8007fbc <__sflush_r+0x78>
 8007fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fbe:	602f      	str	r7, [r5, #0]
 8007fc0:	b1b9      	cbz	r1, 8007ff2 <__sflush_r+0xae>
 8007fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	d002      	beq.n	8007fd0 <__sflush_r+0x8c>
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f7ff f9e8 	bl	80073a0 <_free_r>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fd4:	e00d      	b.n	8007ff2 <__sflush_r+0xae>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b0      	blx	r6
 8007fdc:	4602      	mov	r2, r0
 8007fde:	1c50      	adds	r0, r2, #1
 8007fe0:	d1c9      	bne.n	8007f76 <__sflush_r+0x32>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0c6      	beq.n	8007f76 <__sflush_r+0x32>
 8007fe8:	2b1d      	cmp	r3, #29
 8007fea:	d001      	beq.n	8007ff0 <__sflush_r+0xac>
 8007fec:	2b16      	cmp	r3, #22
 8007fee:	d11e      	bne.n	800802e <__sflush_r+0xea>
 8007ff0:	602f      	str	r7, [r5, #0]
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	e022      	b.n	800803c <__sflush_r+0xf8>
 8007ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffa:	b21b      	sxth	r3, r3
 8007ffc:	e01b      	b.n	8008036 <__sflush_r+0xf2>
 8007ffe:	690f      	ldr	r7, [r1, #16]
 8008000:	2f00      	cmp	r7, #0
 8008002:	d0f6      	beq.n	8007ff2 <__sflush_r+0xae>
 8008004:	0793      	lsls	r3, r2, #30
 8008006:	680e      	ldr	r6, [r1, #0]
 8008008:	bf08      	it	eq
 800800a:	694b      	ldreq	r3, [r1, #20]
 800800c:	600f      	str	r7, [r1, #0]
 800800e:	bf18      	it	ne
 8008010:	2300      	movne	r3, #0
 8008012:	eba6 0807 	sub.w	r8, r6, r7
 8008016:	608b      	str	r3, [r1, #8]
 8008018:	f1b8 0f00 	cmp.w	r8, #0
 800801c:	dde9      	ble.n	8007ff2 <__sflush_r+0xae>
 800801e:	6a21      	ldr	r1, [r4, #32]
 8008020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008022:	4643      	mov	r3, r8
 8008024:	463a      	mov	r2, r7
 8008026:	4628      	mov	r0, r5
 8008028:	47b0      	blx	r6
 800802a:	2800      	cmp	r0, #0
 800802c:	dc08      	bgt.n	8008040 <__sflush_r+0xfc>
 800802e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008040:	4407      	add	r7, r0
 8008042:	eba8 0800 	sub.w	r8, r8, r0
 8008046:	e7e7      	b.n	8008018 <__sflush_r+0xd4>
 8008048:	20400001 	.word	0x20400001

0800804c <_fflush_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	690b      	ldr	r3, [r1, #16]
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b913      	cbnz	r3, 800805c <_fflush_r+0x10>
 8008056:	2500      	movs	r5, #0
 8008058:	4628      	mov	r0, r5
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	b118      	cbz	r0, 8008066 <_fflush_r+0x1a>
 800805e:	6a03      	ldr	r3, [r0, #32]
 8008060:	b90b      	cbnz	r3, 8008066 <_fflush_r+0x1a>
 8008062:	f7fe fa29 	bl	80064b8 <__sinit>
 8008066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f3      	beq.n	8008056 <_fflush_r+0xa>
 800806e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d404      	bmi.n	800807e <_fflush_r+0x32>
 8008074:	0599      	lsls	r1, r3, #22
 8008076:	d402      	bmi.n	800807e <_fflush_r+0x32>
 8008078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800807a:	f7fe fb36 	bl	80066ea <__retarget_lock_acquire_recursive>
 800807e:	4628      	mov	r0, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7ff ff5f 	bl	8007f44 <__sflush_r>
 8008086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008088:	07da      	lsls	r2, r3, #31
 800808a:	4605      	mov	r5, r0
 800808c:	d4e4      	bmi.n	8008058 <_fflush_r+0xc>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d4e1      	bmi.n	8008058 <_fflush_r+0xc>
 8008094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008096:	f7fe fb29 	bl	80066ec <__retarget_lock_release_recursive>
 800809a:	e7dd      	b.n	8008058 <_fflush_r+0xc>

0800809c <memmove>:
 800809c:	4288      	cmp	r0, r1
 800809e:	b510      	push	{r4, lr}
 80080a0:	eb01 0402 	add.w	r4, r1, r2
 80080a4:	d902      	bls.n	80080ac <memmove+0x10>
 80080a6:	4284      	cmp	r4, r0
 80080a8:	4623      	mov	r3, r4
 80080aa:	d807      	bhi.n	80080bc <memmove+0x20>
 80080ac:	1e43      	subs	r3, r0, #1
 80080ae:	42a1      	cmp	r1, r4
 80080b0:	d008      	beq.n	80080c4 <memmove+0x28>
 80080b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ba:	e7f8      	b.n	80080ae <memmove+0x12>
 80080bc:	4402      	add	r2, r0
 80080be:	4601      	mov	r1, r0
 80080c0:	428a      	cmp	r2, r1
 80080c2:	d100      	bne.n	80080c6 <memmove+0x2a>
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ce:	e7f7      	b.n	80080c0 <memmove+0x24>

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	@ (80080ec <_sbrk_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 fb28 	bl	8001730 <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20000578 	.word	0x20000578

080080f0 <memcpy>:
 80080f0:	440a      	add	r2, r1
 80080f2:	4291      	cmp	r1, r2
 80080f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	4770      	bx	lr
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008106:	4291      	cmp	r1, r2
 8008108:	d1f9      	bne.n	80080fe <memcpy+0xe>
 800810a:	bd10      	pop	{r4, pc}

0800810c <__assert_func>:
 800810c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800810e:	4614      	mov	r4, r2
 8008110:	461a      	mov	r2, r3
 8008112:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <__assert_func+0x2c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4605      	mov	r5, r0
 8008118:	68d8      	ldr	r0, [r3, #12]
 800811a:	b14c      	cbz	r4, 8008130 <__assert_func+0x24>
 800811c:	4b07      	ldr	r3, [pc, #28]	@ (800813c <__assert_func+0x30>)
 800811e:	9100      	str	r1, [sp, #0]
 8008120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008124:	4906      	ldr	r1, [pc, #24]	@ (8008140 <__assert_func+0x34>)
 8008126:	462b      	mov	r3, r5
 8008128:	f000 f870 	bl	800820c <fiprintf>
 800812c:	f000 f880 	bl	8008230 <abort>
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <__assert_func+0x38>)
 8008132:	461c      	mov	r4, r3
 8008134:	e7f3      	b.n	800811e <__assert_func+0x12>
 8008136:	bf00      	nop
 8008138:	20000020 	.word	0x20000020
 800813c:	08008921 	.word	0x08008921
 8008140:	0800892e 	.word	0x0800892e
 8008144:	0800895c 	.word	0x0800895c

08008148 <_calloc_r>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	fba1 5402 	umull	r5, r4, r1, r2
 800814e:	b934      	cbnz	r4, 800815e <_calloc_r+0x16>
 8008150:	4629      	mov	r1, r5
 8008152:	f7ff f999 	bl	8007488 <_malloc_r>
 8008156:	4606      	mov	r6, r0
 8008158:	b928      	cbnz	r0, 8008166 <_calloc_r+0x1e>
 800815a:	4630      	mov	r0, r6
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	220c      	movs	r2, #12
 8008160:	6002      	str	r2, [r0, #0]
 8008162:	2600      	movs	r6, #0
 8008164:	e7f9      	b.n	800815a <_calloc_r+0x12>
 8008166:	462a      	mov	r2, r5
 8008168:	4621      	mov	r1, r4
 800816a:	f7fe fa40 	bl	80065ee <memset>
 800816e:	e7f4      	b.n	800815a <_calloc_r+0x12>

08008170 <__ascii_mbtowc>:
 8008170:	b082      	sub	sp, #8
 8008172:	b901      	cbnz	r1, 8008176 <__ascii_mbtowc+0x6>
 8008174:	a901      	add	r1, sp, #4
 8008176:	b142      	cbz	r2, 800818a <__ascii_mbtowc+0x1a>
 8008178:	b14b      	cbz	r3, 800818e <__ascii_mbtowc+0x1e>
 800817a:	7813      	ldrb	r3, [r2, #0]
 800817c:	600b      	str	r3, [r1, #0]
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	1e10      	subs	r0, r2, #0
 8008182:	bf18      	it	ne
 8008184:	2001      	movne	r0, #1
 8008186:	b002      	add	sp, #8
 8008188:	4770      	bx	lr
 800818a:	4610      	mov	r0, r2
 800818c:	e7fb      	b.n	8008186 <__ascii_mbtowc+0x16>
 800818e:	f06f 0001 	mvn.w	r0, #1
 8008192:	e7f8      	b.n	8008186 <__ascii_mbtowc+0x16>

08008194 <_realloc_r>:
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008198:	4607      	mov	r7, r0
 800819a:	4614      	mov	r4, r2
 800819c:	460d      	mov	r5, r1
 800819e:	b921      	cbnz	r1, 80081aa <_realloc_r+0x16>
 80081a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	4611      	mov	r1, r2
 80081a6:	f7ff b96f 	b.w	8007488 <_malloc_r>
 80081aa:	b92a      	cbnz	r2, 80081b8 <_realloc_r+0x24>
 80081ac:	f7ff f8f8 	bl	80073a0 <_free_r>
 80081b0:	4625      	mov	r5, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	f000 f841 	bl	800823e <_malloc_usable_size_r>
 80081bc:	4284      	cmp	r4, r0
 80081be:	4606      	mov	r6, r0
 80081c0:	d802      	bhi.n	80081c8 <_realloc_r+0x34>
 80081c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081c6:	d8f4      	bhi.n	80081b2 <_realloc_r+0x1e>
 80081c8:	4621      	mov	r1, r4
 80081ca:	4638      	mov	r0, r7
 80081cc:	f7ff f95c 	bl	8007488 <_malloc_r>
 80081d0:	4680      	mov	r8, r0
 80081d2:	b908      	cbnz	r0, 80081d8 <_realloc_r+0x44>
 80081d4:	4645      	mov	r5, r8
 80081d6:	e7ec      	b.n	80081b2 <_realloc_r+0x1e>
 80081d8:	42b4      	cmp	r4, r6
 80081da:	4622      	mov	r2, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	bf28      	it	cs
 80081e0:	4632      	movcs	r2, r6
 80081e2:	f7ff ff85 	bl	80080f0 <memcpy>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4638      	mov	r0, r7
 80081ea:	f7ff f8d9 	bl	80073a0 <_free_r>
 80081ee:	e7f1      	b.n	80081d4 <_realloc_r+0x40>

080081f0 <__ascii_wctomb>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	4608      	mov	r0, r1
 80081f4:	b141      	cbz	r1, 8008208 <__ascii_wctomb+0x18>
 80081f6:	2aff      	cmp	r2, #255	@ 0xff
 80081f8:	d904      	bls.n	8008204 <__ascii_wctomb+0x14>
 80081fa:	228a      	movs	r2, #138	@ 0x8a
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008202:	4770      	bx	lr
 8008204:	700a      	strb	r2, [r1, #0]
 8008206:	2001      	movs	r0, #1
 8008208:	4770      	bx	lr
	...

0800820c <fiprintf>:
 800820c:	b40e      	push	{r1, r2, r3}
 800820e:	b503      	push	{r0, r1, lr}
 8008210:	4601      	mov	r1, r0
 8008212:	ab03      	add	r3, sp, #12
 8008214:	4805      	ldr	r0, [pc, #20]	@ (800822c <fiprintf+0x20>)
 8008216:	f853 2b04 	ldr.w	r2, [r3], #4
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	f000 f83f 	bl	80082a0 <_vfiprintf_r>
 8008222:	b002      	add	sp, #8
 8008224:	f85d eb04 	ldr.w	lr, [sp], #4
 8008228:	b003      	add	sp, #12
 800822a:	4770      	bx	lr
 800822c:	20000020 	.word	0x20000020

08008230 <abort>:
 8008230:	b508      	push	{r3, lr}
 8008232:	2006      	movs	r0, #6
 8008234:	f000 fa08 	bl	8008648 <raise>
 8008238:	2001      	movs	r0, #1
 800823a:	f7f9 fa01 	bl	8001640 <_exit>

0800823e <_malloc_usable_size_r>:
 800823e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008242:	1f18      	subs	r0, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfbc      	itt	lt
 8008248:	580b      	ldrlt	r3, [r1, r0]
 800824a:	18c0      	addlt	r0, r0, r3
 800824c:	4770      	bx	lr

0800824e <__sfputc_r>:
 800824e:	6893      	ldr	r3, [r2, #8]
 8008250:	3b01      	subs	r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	b410      	push	{r4}
 8008256:	6093      	str	r3, [r2, #8]
 8008258:	da08      	bge.n	800826c <__sfputc_r+0x1e>
 800825a:	6994      	ldr	r4, [r2, #24]
 800825c:	42a3      	cmp	r3, r4
 800825e:	db01      	blt.n	8008264 <__sfputc_r+0x16>
 8008260:	290a      	cmp	r1, #10
 8008262:	d103      	bne.n	800826c <__sfputc_r+0x1e>
 8008264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008268:	f000 b932 	b.w	80084d0 <__swbuf_r>
 800826c:	6813      	ldr	r3, [r2, #0]
 800826e:	1c58      	adds	r0, r3, #1
 8008270:	6010      	str	r0, [r2, #0]
 8008272:	7019      	strb	r1, [r3, #0]
 8008274:	4608      	mov	r0, r1
 8008276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827a:	4770      	bx	lr

0800827c <__sfputs_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	4614      	mov	r4, r2
 8008284:	18d5      	adds	r5, r2, r3
 8008286:	42ac      	cmp	r4, r5
 8008288:	d101      	bne.n	800828e <__sfputs_r+0x12>
 800828a:	2000      	movs	r0, #0
 800828c:	e007      	b.n	800829e <__sfputs_r+0x22>
 800828e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008292:	463a      	mov	r2, r7
 8008294:	4630      	mov	r0, r6
 8008296:	f7ff ffda 	bl	800824e <__sfputc_r>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	d1f3      	bne.n	8008286 <__sfputs_r+0xa>
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082a0 <_vfiprintf_r>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	460d      	mov	r5, r1
 80082a6:	b09d      	sub	sp, #116	@ 0x74
 80082a8:	4614      	mov	r4, r2
 80082aa:	4698      	mov	r8, r3
 80082ac:	4606      	mov	r6, r0
 80082ae:	b118      	cbz	r0, 80082b8 <_vfiprintf_r+0x18>
 80082b0:	6a03      	ldr	r3, [r0, #32]
 80082b2:	b90b      	cbnz	r3, 80082b8 <_vfiprintf_r+0x18>
 80082b4:	f7fe f900 	bl	80064b8 <__sinit>
 80082b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_vfiprintf_r+0x2a>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_vfiprintf_r+0x2a>
 80082c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c6:	f7fe fa10 	bl	80066ea <__retarget_lock_acquire_recursive>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	071b      	lsls	r3, r3, #28
 80082ce:	d501      	bpl.n	80082d4 <_vfiprintf_r+0x34>
 80082d0:	692b      	ldr	r3, [r5, #16]
 80082d2:	b99b      	cbnz	r3, 80082fc <_vfiprintf_r+0x5c>
 80082d4:	4629      	mov	r1, r5
 80082d6:	4630      	mov	r0, r6
 80082d8:	f000 f938 	bl	800854c <__swsetup_r>
 80082dc:	b170      	cbz	r0, 80082fc <_vfiprintf_r+0x5c>
 80082de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082e0:	07dc      	lsls	r4, r3, #31
 80082e2:	d504      	bpl.n	80082ee <_vfiprintf_r+0x4e>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082e8:	b01d      	add	sp, #116	@ 0x74
 80082ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	0598      	lsls	r0, r3, #22
 80082f2:	d4f7      	bmi.n	80082e4 <_vfiprintf_r+0x44>
 80082f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082f6:	f7fe f9f9 	bl	80066ec <__retarget_lock_release_recursive>
 80082fa:	e7f3      	b.n	80082e4 <_vfiprintf_r+0x44>
 80082fc:	2300      	movs	r3, #0
 80082fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008300:	2320      	movs	r3, #32
 8008302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008306:	f8cd 800c 	str.w	r8, [sp, #12]
 800830a:	2330      	movs	r3, #48	@ 0x30
 800830c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084bc <_vfiprintf_r+0x21c>
 8008310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008314:	f04f 0901 	mov.w	r9, #1
 8008318:	4623      	mov	r3, r4
 800831a:	469a      	mov	sl, r3
 800831c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008320:	b10a      	cbz	r2, 8008326 <_vfiprintf_r+0x86>
 8008322:	2a25      	cmp	r2, #37	@ 0x25
 8008324:	d1f9      	bne.n	800831a <_vfiprintf_r+0x7a>
 8008326:	ebba 0b04 	subs.w	fp, sl, r4
 800832a:	d00b      	beq.n	8008344 <_vfiprintf_r+0xa4>
 800832c:	465b      	mov	r3, fp
 800832e:	4622      	mov	r2, r4
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ffa2 	bl	800827c <__sfputs_r>
 8008338:	3001      	adds	r0, #1
 800833a:	f000 80a7 	beq.w	800848c <_vfiprintf_r+0x1ec>
 800833e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008340:	445a      	add	r2, fp
 8008342:	9209      	str	r2, [sp, #36]	@ 0x24
 8008344:	f89a 3000 	ldrb.w	r3, [sl]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 809f 	beq.w	800848c <_vfiprintf_r+0x1ec>
 800834e:	2300      	movs	r3, #0
 8008350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008358:	f10a 0a01 	add.w	sl, sl, #1
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	9307      	str	r3, [sp, #28]
 8008360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008364:	931a      	str	r3, [sp, #104]	@ 0x68
 8008366:	4654      	mov	r4, sl
 8008368:	2205      	movs	r2, #5
 800836a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836e:	4853      	ldr	r0, [pc, #332]	@ (80084bc <_vfiprintf_r+0x21c>)
 8008370:	f7f7 ff56 	bl	8000220 <memchr>
 8008374:	9a04      	ldr	r2, [sp, #16]
 8008376:	b9d8      	cbnz	r0, 80083b0 <_vfiprintf_r+0x110>
 8008378:	06d1      	lsls	r1, r2, #27
 800837a:	bf44      	itt	mi
 800837c:	2320      	movmi	r3, #32
 800837e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008382:	0713      	lsls	r3, r2, #28
 8008384:	bf44      	itt	mi
 8008386:	232b      	movmi	r3, #43	@ 0x2b
 8008388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800838c:	f89a 3000 	ldrb.w	r3, [sl]
 8008390:	2b2a      	cmp	r3, #42	@ 0x2a
 8008392:	d015      	beq.n	80083c0 <_vfiprintf_r+0x120>
 8008394:	9a07      	ldr	r2, [sp, #28]
 8008396:	4654      	mov	r4, sl
 8008398:	2000      	movs	r0, #0
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4621      	mov	r1, r4
 80083a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a4:	3b30      	subs	r3, #48	@ 0x30
 80083a6:	2b09      	cmp	r3, #9
 80083a8:	d94b      	bls.n	8008442 <_vfiprintf_r+0x1a2>
 80083aa:	b1b0      	cbz	r0, 80083da <_vfiprintf_r+0x13a>
 80083ac:	9207      	str	r2, [sp, #28]
 80083ae:	e014      	b.n	80083da <_vfiprintf_r+0x13a>
 80083b0:	eba0 0308 	sub.w	r3, r0, r8
 80083b4:	fa09 f303 	lsl.w	r3, r9, r3
 80083b8:	4313      	orrs	r3, r2
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	46a2      	mov	sl, r4
 80083be:	e7d2      	b.n	8008366 <_vfiprintf_r+0xc6>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	1d19      	adds	r1, r3, #4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	9103      	str	r1, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfbb      	ittet	lt
 80083cc:	425b      	neglt	r3, r3
 80083ce:	f042 0202 	orrlt.w	r2, r2, #2
 80083d2:	9307      	strge	r3, [sp, #28]
 80083d4:	9307      	strlt	r3, [sp, #28]
 80083d6:	bfb8      	it	lt
 80083d8:	9204      	strlt	r2, [sp, #16]
 80083da:	7823      	ldrb	r3, [r4, #0]
 80083dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083de:	d10a      	bne.n	80083f6 <_vfiprintf_r+0x156>
 80083e0:	7863      	ldrb	r3, [r4, #1]
 80083e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e4:	d132      	bne.n	800844c <_vfiprintf_r+0x1ac>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	1d1a      	adds	r2, r3, #4
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	9203      	str	r2, [sp, #12]
 80083ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083f2:	3402      	adds	r4, #2
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084cc <_vfiprintf_r+0x22c>
 80083fa:	7821      	ldrb	r1, [r4, #0]
 80083fc:	2203      	movs	r2, #3
 80083fe:	4650      	mov	r0, sl
 8008400:	f7f7 ff0e 	bl	8000220 <memchr>
 8008404:	b138      	cbz	r0, 8008416 <_vfiprintf_r+0x176>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	eba0 000a 	sub.w	r0, r0, sl
 800840c:	2240      	movs	r2, #64	@ 0x40
 800840e:	4082      	lsls	r2, r0
 8008410:	4313      	orrs	r3, r2
 8008412:	3401      	adds	r4, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841a:	4829      	ldr	r0, [pc, #164]	@ (80084c0 <_vfiprintf_r+0x220>)
 800841c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008420:	2206      	movs	r2, #6
 8008422:	f7f7 fefd 	bl	8000220 <memchr>
 8008426:	2800      	cmp	r0, #0
 8008428:	d03f      	beq.n	80084aa <_vfiprintf_r+0x20a>
 800842a:	4b26      	ldr	r3, [pc, #152]	@ (80084c4 <_vfiprintf_r+0x224>)
 800842c:	bb1b      	cbnz	r3, 8008476 <_vfiprintf_r+0x1d6>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	3307      	adds	r3, #7
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	3308      	adds	r3, #8
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843c:	443b      	add	r3, r7
 800843e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008440:	e76a      	b.n	8008318 <_vfiprintf_r+0x78>
 8008442:	fb0c 3202 	mla	r2, ip, r2, r3
 8008446:	460c      	mov	r4, r1
 8008448:	2001      	movs	r0, #1
 800844a:	e7a8      	b.n	800839e <_vfiprintf_r+0xfe>
 800844c:	2300      	movs	r3, #0
 800844e:	3401      	adds	r4, #1
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	4619      	mov	r1, r3
 8008454:	f04f 0c0a 	mov.w	ip, #10
 8008458:	4620      	mov	r0, r4
 800845a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845e:	3a30      	subs	r2, #48	@ 0x30
 8008460:	2a09      	cmp	r2, #9
 8008462:	d903      	bls.n	800846c <_vfiprintf_r+0x1cc>
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0c6      	beq.n	80083f6 <_vfiprintf_r+0x156>
 8008468:	9105      	str	r1, [sp, #20]
 800846a:	e7c4      	b.n	80083f6 <_vfiprintf_r+0x156>
 800846c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008470:	4604      	mov	r4, r0
 8008472:	2301      	movs	r3, #1
 8008474:	e7f0      	b.n	8008458 <_vfiprintf_r+0x1b8>
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	462a      	mov	r2, r5
 800847c:	4b12      	ldr	r3, [pc, #72]	@ (80084c8 <_vfiprintf_r+0x228>)
 800847e:	a904      	add	r1, sp, #16
 8008480:	4630      	mov	r0, r6
 8008482:	f7fd fbd7 	bl	8005c34 <_printf_float>
 8008486:	4607      	mov	r7, r0
 8008488:	1c78      	adds	r0, r7, #1
 800848a:	d1d6      	bne.n	800843a <_vfiprintf_r+0x19a>
 800848c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d405      	bmi.n	800849e <_vfiprintf_r+0x1fe>
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	059a      	lsls	r2, r3, #22
 8008496:	d402      	bmi.n	800849e <_vfiprintf_r+0x1fe>
 8008498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800849a:	f7fe f927 	bl	80066ec <__retarget_lock_release_recursive>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	065b      	lsls	r3, r3, #25
 80084a2:	f53f af1f 	bmi.w	80082e4 <_vfiprintf_r+0x44>
 80084a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084a8:	e71e      	b.n	80082e8 <_vfiprintf_r+0x48>
 80084aa:	ab03      	add	r3, sp, #12
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	462a      	mov	r2, r5
 80084b0:	4b05      	ldr	r3, [pc, #20]	@ (80084c8 <_vfiprintf_r+0x228>)
 80084b2:	a904      	add	r1, sp, #16
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7fd fe55 	bl	8006164 <_printf_i>
 80084ba:	e7e4      	b.n	8008486 <_vfiprintf_r+0x1e6>
 80084bc:	08008906 	.word	0x08008906
 80084c0:	08008910 	.word	0x08008910
 80084c4:	08005c35 	.word	0x08005c35
 80084c8:	0800827d 	.word	0x0800827d
 80084cc:	0800890c 	.word	0x0800890c

080084d0 <__swbuf_r>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	460e      	mov	r6, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	4605      	mov	r5, r0
 80084d8:	b118      	cbz	r0, 80084e2 <__swbuf_r+0x12>
 80084da:	6a03      	ldr	r3, [r0, #32]
 80084dc:	b90b      	cbnz	r3, 80084e2 <__swbuf_r+0x12>
 80084de:	f7fd ffeb 	bl	80064b8 <__sinit>
 80084e2:	69a3      	ldr	r3, [r4, #24]
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	071a      	lsls	r2, r3, #28
 80084ea:	d501      	bpl.n	80084f0 <__swbuf_r+0x20>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	b943      	cbnz	r3, 8008502 <__swbuf_r+0x32>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 f82a 	bl	800854c <__swsetup_r>
 80084f8:	b118      	cbz	r0, 8008502 <__swbuf_r+0x32>
 80084fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80084fe:	4638      	mov	r0, r7
 8008500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	1a98      	subs	r0, r3, r2
 8008508:	6963      	ldr	r3, [r4, #20]
 800850a:	b2f6      	uxtb	r6, r6
 800850c:	4283      	cmp	r3, r0
 800850e:	4637      	mov	r7, r6
 8008510:	dc05      	bgt.n	800851e <__swbuf_r+0x4e>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f7ff fd99 	bl	800804c <_fflush_r>
 800851a:	2800      	cmp	r0, #0
 800851c:	d1ed      	bne.n	80084fa <__swbuf_r+0x2a>
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	3b01      	subs	r3, #1
 8008522:	60a3      	str	r3, [r4, #8]
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	6022      	str	r2, [r4, #0]
 800852a:	701e      	strb	r6, [r3, #0]
 800852c:	6962      	ldr	r2, [r4, #20]
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	429a      	cmp	r2, r3
 8008532:	d004      	beq.n	800853e <__swbuf_r+0x6e>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	07db      	lsls	r3, r3, #31
 8008538:	d5e1      	bpl.n	80084fe <__swbuf_r+0x2e>
 800853a:	2e0a      	cmp	r6, #10
 800853c:	d1df      	bne.n	80084fe <__swbuf_r+0x2e>
 800853e:	4621      	mov	r1, r4
 8008540:	4628      	mov	r0, r5
 8008542:	f7ff fd83 	bl	800804c <_fflush_r>
 8008546:	2800      	cmp	r0, #0
 8008548:	d0d9      	beq.n	80084fe <__swbuf_r+0x2e>
 800854a:	e7d6      	b.n	80084fa <__swbuf_r+0x2a>

0800854c <__swsetup_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4b29      	ldr	r3, [pc, #164]	@ (80085f4 <__swsetup_r+0xa8>)
 8008550:	4605      	mov	r5, r0
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	460c      	mov	r4, r1
 8008556:	b118      	cbz	r0, 8008560 <__swsetup_r+0x14>
 8008558:	6a03      	ldr	r3, [r0, #32]
 800855a:	b90b      	cbnz	r3, 8008560 <__swsetup_r+0x14>
 800855c:	f7fd ffac 	bl	80064b8 <__sinit>
 8008560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008564:	0719      	lsls	r1, r3, #28
 8008566:	d422      	bmi.n	80085ae <__swsetup_r+0x62>
 8008568:	06da      	lsls	r2, r3, #27
 800856a:	d407      	bmi.n	800857c <__swsetup_r+0x30>
 800856c:	2209      	movs	r2, #9
 800856e:	602a      	str	r2, [r5, #0]
 8008570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800857a:	e033      	b.n	80085e4 <__swsetup_r+0x98>
 800857c:	0758      	lsls	r0, r3, #29
 800857e:	d512      	bpl.n	80085a6 <__swsetup_r+0x5a>
 8008580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008582:	b141      	cbz	r1, 8008596 <__swsetup_r+0x4a>
 8008584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008588:	4299      	cmp	r1, r3
 800858a:	d002      	beq.n	8008592 <__swsetup_r+0x46>
 800858c:	4628      	mov	r0, r5
 800858e:	f7fe ff07 	bl	80073a0 <_free_r>
 8008592:	2300      	movs	r3, #0
 8008594:	6363      	str	r3, [r4, #52]	@ 0x34
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	2300      	movs	r3, #0
 80085a0:	6063      	str	r3, [r4, #4]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f043 0308 	orr.w	r3, r3, #8
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	b94b      	cbnz	r3, 80085c6 <__swsetup_r+0x7a>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085bc:	d003      	beq.n	80085c6 <__swsetup_r+0x7a>
 80085be:	4621      	mov	r1, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f883 	bl	80086cc <__smakebuf_r>
 80085c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ca:	f013 0201 	ands.w	r2, r3, #1
 80085ce:	d00a      	beq.n	80085e6 <__swsetup_r+0x9a>
 80085d0:	2200      	movs	r2, #0
 80085d2:	60a2      	str	r2, [r4, #8]
 80085d4:	6962      	ldr	r2, [r4, #20]
 80085d6:	4252      	negs	r2, r2
 80085d8:	61a2      	str	r2, [r4, #24]
 80085da:	6922      	ldr	r2, [r4, #16]
 80085dc:	b942      	cbnz	r2, 80085f0 <__swsetup_r+0xa4>
 80085de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085e2:	d1c5      	bne.n	8008570 <__swsetup_r+0x24>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	0799      	lsls	r1, r3, #30
 80085e8:	bf58      	it	pl
 80085ea:	6962      	ldrpl	r2, [r4, #20]
 80085ec:	60a2      	str	r2, [r4, #8]
 80085ee:	e7f4      	b.n	80085da <__swsetup_r+0x8e>
 80085f0:	2000      	movs	r0, #0
 80085f2:	e7f7      	b.n	80085e4 <__swsetup_r+0x98>
 80085f4:	20000020 	.word	0x20000020

080085f8 <_raise_r>:
 80085f8:	291f      	cmp	r1, #31
 80085fa:	b538      	push	{r3, r4, r5, lr}
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	d904      	bls.n	800860c <_raise_r+0x14>
 8008602:	2316      	movs	r3, #22
 8008604:	6003      	str	r3, [r0, #0]
 8008606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800860e:	b112      	cbz	r2, 8008616 <_raise_r+0x1e>
 8008610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008614:	b94b      	cbnz	r3, 800862a <_raise_r+0x32>
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f830 	bl	800867c <_getpid_r>
 800861c:	4622      	mov	r2, r4
 800861e:	4601      	mov	r1, r0
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008626:	f000 b817 	b.w	8008658 <_kill_r>
 800862a:	2b01      	cmp	r3, #1
 800862c:	d00a      	beq.n	8008644 <_raise_r+0x4c>
 800862e:	1c59      	adds	r1, r3, #1
 8008630:	d103      	bne.n	800863a <_raise_r+0x42>
 8008632:	2316      	movs	r3, #22
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	2001      	movs	r0, #1
 8008638:	e7e7      	b.n	800860a <_raise_r+0x12>
 800863a:	2100      	movs	r1, #0
 800863c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008640:	4620      	mov	r0, r4
 8008642:	4798      	blx	r3
 8008644:	2000      	movs	r0, #0
 8008646:	e7e0      	b.n	800860a <_raise_r+0x12>

08008648 <raise>:
 8008648:	4b02      	ldr	r3, [pc, #8]	@ (8008654 <raise+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f7ff bfd3 	b.w	80085f8 <_raise_r>
 8008652:	bf00      	nop
 8008654:	20000020 	.word	0x20000020

08008658 <_kill_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	@ (8008678 <_kill_r+0x20>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	f7f8 ffdb 	bl	8001620 <_kill>
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	d102      	bne.n	8008674 <_kill_r+0x1c>
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	b103      	cbz	r3, 8008674 <_kill_r+0x1c>
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	bd38      	pop	{r3, r4, r5, pc}
 8008676:	bf00      	nop
 8008678:	20000578 	.word	0x20000578

0800867c <_getpid_r>:
 800867c:	f7f8 bfc8 	b.w	8001610 <_getpid>

08008680 <__swhatbuf_r>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	460c      	mov	r4, r1
 8008684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008688:	2900      	cmp	r1, #0
 800868a:	b096      	sub	sp, #88	@ 0x58
 800868c:	4615      	mov	r5, r2
 800868e:	461e      	mov	r6, r3
 8008690:	da0d      	bge.n	80086ae <__swhatbuf_r+0x2e>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008698:	f04f 0100 	mov.w	r1, #0
 800869c:	bf14      	ite	ne
 800869e:	2340      	movne	r3, #64	@ 0x40
 80086a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086a4:	2000      	movs	r0, #0
 80086a6:	6031      	str	r1, [r6, #0]
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	b016      	add	sp, #88	@ 0x58
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
 80086ae:	466a      	mov	r2, sp
 80086b0:	f000 f848 	bl	8008744 <_fstat_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	dbec      	blt.n	8008692 <__swhatbuf_r+0x12>
 80086b8:	9901      	ldr	r1, [sp, #4]
 80086ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086c2:	4259      	negs	r1, r3
 80086c4:	4159      	adcs	r1, r3
 80086c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086ca:	e7eb      	b.n	80086a4 <__swhatbuf_r+0x24>

080086cc <__smakebuf_r>:
 80086cc:	898b      	ldrh	r3, [r1, #12]
 80086ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086d0:	079d      	lsls	r5, r3, #30
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	d507      	bpl.n	80086e8 <__smakebuf_r+0x1c>
 80086d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2301      	movs	r3, #1
 80086e2:	6163      	str	r3, [r4, #20]
 80086e4:	b003      	add	sp, #12
 80086e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e8:	ab01      	add	r3, sp, #4
 80086ea:	466a      	mov	r2, sp
 80086ec:	f7ff ffc8 	bl	8008680 <__swhatbuf_r>
 80086f0:	9f00      	ldr	r7, [sp, #0]
 80086f2:	4605      	mov	r5, r0
 80086f4:	4639      	mov	r1, r7
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7fe fec6 	bl	8007488 <_malloc_r>
 80086fc:	b948      	cbnz	r0, 8008712 <__smakebuf_r+0x46>
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	059a      	lsls	r2, r3, #22
 8008704:	d4ee      	bmi.n	80086e4 <__smakebuf_r+0x18>
 8008706:	f023 0303 	bic.w	r3, r3, #3
 800870a:	f043 0302 	orr.w	r3, r3, #2
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	e7e2      	b.n	80086d8 <__smakebuf_r+0xc>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	6020      	str	r0, [r4, #0]
 8008716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008722:	b15b      	cbz	r3, 800873c <__smakebuf_r+0x70>
 8008724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008728:	4630      	mov	r0, r6
 800872a:	f000 f81d 	bl	8008768 <_isatty_r>
 800872e:	b128      	cbz	r0, 800873c <__smakebuf_r+0x70>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	431d      	orrs	r5, r3
 8008740:	81a5      	strh	r5, [r4, #12]
 8008742:	e7cf      	b.n	80086e4 <__smakebuf_r+0x18>

08008744 <_fstat_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	@ (8008764 <_fstat_r+0x20>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	f7f8 ffc5 	bl	80016e0 <_fstat>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d102      	bne.n	8008760 <_fstat_r+0x1c>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b103      	cbz	r3, 8008760 <_fstat_r+0x1c>
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	20000578 	.word	0x20000578

08008768 <_isatty_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	@ (8008784 <_isatty_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f8 ffc4 	bl	8001700 <_isatty>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_isatty_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_isatty_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	20000578 	.word	0x20000578

08008788 <_init>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

08008794 <_fini>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr
