
Encoder_Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004028  08004028  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004028  08004028  00005028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004030  08004030  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004034  08004034  00005034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004038  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000005c  08004094  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004094  0000632c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e8  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002570  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  0001b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b1f  00000000  00000000  0001c36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001287a  00000000  00000000  00042e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbce6  00000000  00000000  00055705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001513eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  00151430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00155c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003f90 	.word	0x08003f90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003f90 	.word	0x08003f90

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB6   ------> S_TIM8_ETR
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a36      	ldr	r2, [pc, #216]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a30      	ldr	r2, [pc, #192]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_GPIO_Init+0xf4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067a:	f000 fddd 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000684:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <MX_GPIO_Init+0xf8>)
 8000696:	f000 fc4d 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069a:	2320      	movs	r3, #32
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f000 fc3e 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006b8:	2340      	movs	r3, #64	@ 0x40
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 80006c8:	2306      	movs	r3, #6
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_GPIO_Init+0xfc>)
 80006d4:	f000 fc2e 	bl	8000f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2028      	movs	r0, #40	@ 0x28
 80006de:	f000 fbf4 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e2:	2028      	movs	r0, #40	@ 0x28
 80006e4:	f000 fc0b 	bl	8000efe <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	@ 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800
 80006f8:	48000400 	.word	0x48000400

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fa97 	bl	8000c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f83e 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f7ff ff78 	bl	80005fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800070c:	f000 f9c6 	bl	8000a9c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000710:	f000 f92e 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000714:	213c      	movs	r1, #60	@ 0x3c
 8000716:	4815      	ldr	r0, [pc, #84]	@ (800076c <main+0x70>)
 8000718:	f001 fea0 	bl	800245c <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Value = __HAL_TIM_GET_COUNTER(&htim3);
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <main+0x70>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <main+0x74>)
 8000726:	801a      	strh	r2, [r3, #0]
	  if (LastValue != Value)
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <main+0x78>)
 800072a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <main+0x74>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	429a      	cmp	r2, r3
 8000736:	d012      	beq.n	800075e <main+0x62>
	  {
	  sprintf(Message, "Value = %d\n", Value);
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <main+0x74>)
 800073a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800073e:	461a      	mov	r2, r3
 8000740:	490d      	ldr	r1, [pc, #52]	@ (8000778 <main+0x7c>)
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <main+0x80>)
 8000744:	f002 ff84 	bl	8003650 <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) Message, strlen(Message), HAL_MAX_DELAY);
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <main+0x80>)
 800074a:	f7ff fd69 	bl	8000220 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	b29a      	uxth	r2, r3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000756:	4909      	ldr	r1, [pc, #36]	@ (800077c <main+0x80>)
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <main+0x84>)
 800075a:	f002 f8cd 	bl	80028f8 <HAL_UART_Transmit>
	  }

	  LastValue = Value;
 800075e:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <main+0x74>)
 8000760:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <main+0x78>)
 8000766:	801a      	strh	r2, [r3, #0]
	  Value = __HAL_TIM_GET_COUNTER(&htim3);
 8000768:	e7d8      	b.n	800071c <main+0x20>
 800076a:	bf00      	nop
 800076c:	20000100 	.word	0x20000100
 8000770:	200000f8 	.word	0x200000f8
 8000774:	200000fa 	.word	0x200000fa
 8000778:	08003fa8 	.word	0x08003fa8
 800077c:	20000078 	.word	0x20000078
 8000780:	2000014c 	.word	0x2000014c

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2238      	movs	r2, #56	@ 0x38
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 ff7e 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fd82 	bl	80012b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007c6:	2355      	movs	r3, #85	@ 0x55
 80007c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fe1c 	bl	8001418 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007e6:	f000 f818 	bl	800081a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2104      	movs	r1, #4
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f91a 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800080e:	f000 f804 	bl	800081a <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	@ 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081e:	b672      	cpsid	i
}
 8000820:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085e:	f000 fdcb 	bl	80013f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 fa07 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}

080008ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008d6:	f000 fcc7 	bl	8001268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	@ (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f002 fec8 	bl	80036a4 <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20020000 	.word	0x20020000
 8000940:	00000400 	.word	0x00000400
 8000944:	200000fc 	.word	0x200000fc
 8000948:	20000330 	.word	0x20000330

0800094c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fe88 	bl	8003694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 8000990:	4a20      	ldr	r2, [pc, #128]	@ (8000a14 <MX_TIM3_Init+0xa4>)
 8000992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009a2:	224f      	movs	r2, #79	@ 0x4f
 80009a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ba:	2301      	movs	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009c2:	230a      	movs	r3, #10
 80009c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ca:	2301      	movs	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009de:	f001 fc97 	bl	8002310 <HAL_TIM_Encoder_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f7ff ff17 	bl	800081a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_TIM3_Init+0xa0>)
 80009fa:	f001 fe97 	bl	800272c <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a04:	f7ff ff09 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	@ 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000100 	.word	0x20000100
 8000a14:	40000400 	.word	0x40000400

08000a18 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d128      	bne.n	8000a8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_TIM_Encoder_MspInit+0x80>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6a:	23c0      	movs	r3, #192	@ 0xc0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f000 fa54 	bl	8000f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40000400 	.word	0x40000400
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <MX_LPUART1_UART_Init+0x90>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000ae0:	f001 feba 	bl	8002858 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f7ff fe96 	bl	800081a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000af2:	f002 fce3 	bl	80034bc <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000afc:	f7ff fe8d 	bl	800081a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000b04:	f002 fd18 	bl	8003538 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b0e:	f7ff fe84 	bl	800081a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_LPUART1_UART_Init+0x8c>)
 8000b14:	f002 fc99 	bl	800344a <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b1e:	f7ff fe7c 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000014c 	.word	0x2000014c
 8000b2c:	40008000 	.word	0x40008000

08000b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09e      	sub	sp, #120	@ 0x78
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2254      	movs	r2, #84	@ 0x54
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fd9f 	bl	8003694 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_UART_MspInit+0xa8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d136      	bne.n	8000bce <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b60:	2320      	movs	r3, #32
 8000b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 f981 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b78:	f7ff fe4f 	bl	800081a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b80:	4a16      	ldr	r2, [pc, #88]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bac:	230c      	movs	r3, #12
 8000bae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bca:	f000 f9b3 	bl	8000f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3778      	adds	r7, #120	@ 0x78
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40008000 	.word	0x40008000
 8000bdc:	40021000 	.word	0x40021000

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff feb2 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	@ (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	@ (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fd4f 	bl	80036b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fd73 	bl	80006fc <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c24:	08004038 	.word	0x08004038
  ldr r2, =_sbss
 8000c28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c2c:	2000032c 	.word	0x2000032c

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f939 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fde8 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]

}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_InitTick+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d022      	beq.n	8000cbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_InitTick+0x6c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_InitTick+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f944 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10f      	bne.n	8000cb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d809      	bhi.n	8000cb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca6:	f000 f910 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_InitTick+0x70>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e004      	b.n	8000cc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e001      	b.n	8000cc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a03      	ldr	r2, [pc, #12]	@ (8000cf4 <HAL_IncTick+0x1c>)
 8000ce8:	6013      	str	r3, [r2, #0]
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	200001e0 	.word	0x200001e0
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200001e0 	.word	0x200001e0

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	@ (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff40 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff33 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa4 	bl	8000e70 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f42:	e15a      	b.n	80011fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 814c 	beq.w	80011f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 0201 	and.w	r2, r3, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d017      	beq.n	8001012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	6939      	ldr	r1, [r7, #16]
 8001062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0203 	and.w	r2, r3, #3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a6 	beq.w	80011f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001218 <HAL_GPIO_Init+0x2e4>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x2e4>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b4:	4b58      	ldr	r3, [pc, #352]	@ (8001218 <HAL_GPIO_Init+0x2e4>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c0:	4a56      	ldr	r2, [pc, #344]	@ (800121c <HAL_GPIO_Init+0x2e8>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ea:	d01f      	beq.n	800112c <HAL_GPIO_Init+0x1f8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001220 <HAL_GPIO_Init+0x2ec>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d019      	beq.n	8001128 <HAL_GPIO_Init+0x1f4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001224 <HAL_GPIO_Init+0x2f0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d013      	beq.n	8001124 <HAL_GPIO_Init+0x1f0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001228 <HAL_GPIO_Init+0x2f4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1ec>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a49      	ldr	r2, [pc, #292]	@ (800122c <HAL_GPIO_Init+0x2f8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1e8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a48      	ldr	r2, [pc, #288]	@ (8001230 <HAL_GPIO_Init+0x2fc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1e4>
 8001114:	2305      	movs	r3, #5
 8001116:	e00a      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 8001118:	2306      	movs	r3, #6
 800111a:	e008      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 800111c:	2304      	movs	r3, #4
 800111e:	e006      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 8001120:	2303      	movs	r3, #3
 8001122:	e004      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 8001124:	2302      	movs	r3, #2
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_GPIO_Init+0x1fa>
 800112c:	2300      	movs	r3, #0
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4093      	lsls	r3, r2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113e:	4937      	ldr	r1, [pc, #220]	@ (800121c <HAL_GPIO_Init+0x2e8>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114c:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <HAL_GPIO_Init+0x300>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001170:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x300>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x300>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119a:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x300>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ee:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_GPIO_Init+0x300>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f ae9d 	bne.w	8000f44 <HAL_GPIO_Init+0x10>
  }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	48000c00 	.word	0x48000c00
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f806 	bl	8001298 <HAL_GPIO_EXTI_Callback>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d141      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012be:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ca:	d131      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012cc:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012d2:	4a46      	ldr	r2, [pc, #280]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012e4:	4a41      	ldr	r2, [pc, #260]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ec:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2232      	movs	r2, #50	@ 0x32
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	4a3f      	ldr	r2, [pc, #252]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	0c9b      	lsrs	r3, r3, #18
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001302:	e002      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3b01      	subs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130a:	4b38      	ldr	r3, [pc, #224]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001316:	d102      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f2      	bne.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800131e:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132a:	d158      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e057      	b.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001330:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001336:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800133c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001340:	e04d      	b.n	80013de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001348:	d141      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d131      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2232      	movs	r2, #50	@ 0x32
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	e002      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a2:	d102      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f2      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b6:	d112      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e011      	b.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013cc:	e007      	b.n	80013de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40007000 	.word	0x40007000
 80013f0:	20000000 	.word	0x20000000
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001406:	6093      	str	r3, [r2, #8]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2fe      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b97      	ldr	r3, [pc, #604]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b94      	ldr	r3, [pc, #592]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d102      	bne.n	8001456 <HAL_RCC_OscConfig+0x3e>
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d002      	beq.n	800145c <HAL_RCC_OscConfig+0x44>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b8d      	ldr	r3, [pc, #564]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05b      	beq.n	8001520 <HAL_RCC_OscConfig+0x108>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d157      	bne.n	8001520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2d9      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x74>
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a84      	ldr	r2, [pc, #528]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b7f      	ldr	r3, [pc, #508]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 80014b0:	4b78      	ldr	r3, [pc, #480]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a77      	ldr	r2, [pc, #476]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a74      	ldr	r2, [pc, #464]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc14 	bl	8000cfc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fc10 	bl	8000cfc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	@ 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e29e      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc00 	bl	8000cfc <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fbfc 	bl	8000cfc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e28a      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xe8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d075      	beq.n	800161a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4b56      	ldr	r3, [pc, #344]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x136>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0x13c>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d11f      	bne.n	8001594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b4f      	ldr	r3, [pc, #316]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x154>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e25d      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4946      	ldr	r1, [pc, #280]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001580:	4b45      	ldr	r3, [pc, #276]	@ (8001698 <HAL_RCC_OscConfig+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb6d 	bl	8000c64 <HAL_InitTick>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d043      	beq.n	8001618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e249      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d023      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fba8 	bl	8000cfc <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fba4 	bl	8000cfc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e232      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c2:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	061b      	lsls	r3, r3, #24
 80015dc:	492d      	ldr	r1, [pc, #180]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e01a      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb84 	bl	8000cfc <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fb80 	bl	8000cfc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e20e      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1e0>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d041      	beq.n	80016aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff fb5d 	bl	8000cfc <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fb59 	bl	8000cfc <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1e7      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ef      	beq.n	8001646 <HAL_RCC_OscConfig+0x22e>
 8001666:	e020      	b.n	80016aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb40 	bl	8000cfc <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167e:	e00d      	b.n	800169c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb3c 	bl	8000cfc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d906      	bls.n	800169c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1ca      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169c:	4b8c      	ldr	r3, [pc, #560]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ea      	bne.n	8001680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80a6 	beq.w	8001804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016bc:	4b84      	ldr	r3, [pc, #528]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x2b4>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x2b6>
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	4a7e      	ldr	r2, [pc, #504]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016de:	4b7c      	ldr	r3, [pc, #496]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	4b79      	ldr	r3, [pc, #484]	@ (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fa:	4b76      	ldr	r3, [pc, #472]	@ (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a75      	ldr	r2, [pc, #468]	@ (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff faf9 	bl	8000cfc <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170e:	f7ff faf5 	bl	8000cfc <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e183      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4b6c      	ldr	r3, [pc, #432]	@ (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_RCC_OscConfig+0x32e>
 8001734:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a65      	ldr	r2, [pc, #404]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	e024      	b.n	8001790 <HAL_RCC_OscConfig+0x378>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d110      	bne.n	8001770 <HAL_RCC_OscConfig+0x358>
 800174e:	4b60      	ldr	r3, [pc, #384]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001754:	4a5e      	ldr	r2, [pc, #376]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175e:	4b5c      	ldr	r3, [pc, #368]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001764:	4a5a      	ldr	r2, [pc, #360]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176e:	e00f      	b.n	8001790 <HAL_RCC_OscConfig+0x378>
 8001770:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001776:	4a56      	ldr	r2, [pc, #344]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d016      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fab0 	bl	8000cfc <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff faac 	bl	8000cfc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e138      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b6:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ed      	beq.n	80017a0 <HAL_RCC_OscConfig+0x388>
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fa99 	bl	8000cfc <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fa95 	bl	8000cfc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e121      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	4b3a      	ldr	r3, [pc, #232]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ed      	bne.n	80017ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03c      	beq.n	800188a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01c      	beq.n	8001852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001818:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181e:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fa68 	bl	8000cfc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001830:	f7ff fa64 	bl	8000cfc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0f2      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ef      	beq.n	8001830 <HAL_RCC_OscConfig+0x418>
 8001850:	e01b      	b.n	800188a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001858:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fa4b 	bl	8000cfc <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186a:	f7ff fa47 	bl	8000cfc <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0d5      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80c9 	beq.w	8001a26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001894:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b0c      	cmp	r3, #12
 800189e:	f000 8083 	beq.w	80019a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d15e      	bne.n	8001968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa21 	bl	8000cfc <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e00c      	b.n	80018d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fa1d 	bl	8000cfc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d905      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0ab      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b55      	ldr	r3, [pc, #340]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b52      	ldr	r3, [pc, #328]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b52      	ldr	r3, [pc, #328]	@ (8001a34 <HAL_RCC_OscConfig+0x61c>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6a11      	ldr	r1, [r2, #32]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018fe:	0212      	lsls	r2, r2, #8
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001906:	0852      	lsrs	r2, r2, #1
 8001908:	3a01      	subs	r2, #1
 800190a:	0552      	lsls	r2, r2, #21
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001912:	0852      	lsrs	r2, r2, #1
 8001914:	3a01      	subs	r2, #1
 8001916:	0652      	lsls	r2, r2, #25
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800191e:	06d2      	lsls	r2, r2, #27
 8001920:	430a      	orrs	r2, r1
 8001922:	4943      	ldr	r1, [pc, #268]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001924:	4313      	orrs	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a40      	ldr	r2, [pc, #256]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001934:	4b3e      	ldr	r3, [pc, #248]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a3d      	ldr	r2, [pc, #244]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f9dc 	bl	8000cfc <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f9d8 	bl	8000cfc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e066      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x530>
 8001966:	e05e      	b.n	8001a26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f9c2 	bl	8000cfc <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f9be 	bl	8000cfc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e04c      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4924      	ldr	r1, [pc, #144]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <HAL_RCC_OscConfig+0x620>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
 80019a6:	e03e      	b.n	8001a26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e039      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_RCC_OscConfig+0x618>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d12c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	3b01      	subs	r3, #1
 80019d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d123      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d11b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d113      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	019f800c 	.word	0x019f800c
 8001a38:	feeefffc 	.word	0xfeeefffc

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e11e      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b91      	ldr	r3, [pc, #580]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b8e      	ldr	r3, [pc, #568]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	498c      	ldr	r1, [pc, #560]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b8a      	ldr	r3, [pc, #552]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e106      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d073      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d129      	bne.n	8001aec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	4b81      	ldr	r3, [pc, #516]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0f4      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa8:	f000 f99e 	bl	8001de8 <RCC_GetSysClockFreqFromPLLSource>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d93f      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d033      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12f      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad6:	4b72      	ldr	r3, [pc, #456]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ade:	4a70      	ldr	r2, [pc, #448]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e024      	b.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0c6      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b66      	ldr	r3, [pc, #408]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0be      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b14:	f000 f8ce 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a61      	ldr	r2, [pc, #388]	@ (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d909      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4957      	ldr	r1, [pc, #348]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f8d8 	bl	8000cfc <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f8d4 	bl	8000cfc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e095      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a42      	ldr	r2, [pc, #264]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4936      	ldr	r1, [pc, #216]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
 8001bca:	e008      	b.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b80      	cmp	r3, #128	@ 0x80
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bde:	4b2f      	ldr	r3, [pc, #188]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d21d      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 020f 	bic.w	r2, r3, #15
 8001bf4:	4929      	ldr	r1, [pc, #164]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f87e 	bl	8000cfc <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f87a 	bl	8000cfc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1ed      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4917      	ldr	r1, [pc, #92]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490f      	ldr	r1, [pc, #60]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c66:	f000 f825 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <HAL_RCC_ClockConfig+0x26c>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_RCC_ClockConfig+0x270>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_RCC_ClockConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ffea 	bl	8000c64 <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	04c4b400 	.word	0x04c4b400
 8001ca8:	08003fb4 	.word	0x08003fb4
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cba:	4b2c      	ldr	r3, [pc, #176]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e047      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ccc:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e03e      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cde:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d136      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d08:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	68d2      	ldr	r2, [r2, #12]
 8001d14:	0a12      	lsrs	r2, r2, #8
 8001d16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e00c      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	0a12      	lsrs	r2, r2, #8
 8001d30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0e5b      	lsrs	r3, r3, #25
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e001      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	016e3600 	.word	0x016e3600

08001d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	@ (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003fc4 	.word	0x08003fc4

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc0:	f7ff ffda 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	@ (8001de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003fc4 	.word	0x08003fc4

08001de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dee:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10c      	bne.n	8001e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e16:	68d2      	ldr	r2, [r2, #12]
 8001e18:	0a12      	lsrs	r2, r2, #8
 8001e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
    break;
 8001e24:	e00c      	b.n	8001e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	0a12      	lsrs	r2, r2, #8
 8001e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    break;
 8001e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	016e3600 	.word	0x016e3600
 8001e70:	00f42400 	.word	0x00f42400

08001e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8098 	beq.w	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a39      	ldr	r2, [pc, #228]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eca:	f7fe ff17 	bl	8000cfc <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7fe ff13 	bl	8000cfc <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d902      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee6:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ef      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d159      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01e      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d019      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f20:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f36:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe fed3 	bl	8000cfc <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f58:	e00b      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7fe fecf 	bl	8000cfc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d902      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ec      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f94:	4903      	ldr	r1, [pc, #12]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	74bb      	strb	r3, [r7, #18]
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb0:	7c7b      	ldrb	r3, [r7, #17]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4ba7      	ldr	r3, [pc, #668]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4aa6      	ldr	r2, [pc, #664]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fce:	4ba1      	ldr	r3, [pc, #644]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd4:	f023 0203 	bic.w	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	499d      	ldr	r1, [pc, #628]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff0:	4b98      	ldr	r3, [pc, #608]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f023 020c 	bic.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4995      	ldr	r1, [pc, #596]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002012:	4b90      	ldr	r3, [pc, #576]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002018:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	498c      	ldr	r1, [pc, #560]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002034:	4b87      	ldr	r3, [pc, #540]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4984      	ldr	r1, [pc, #528]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002056:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	497b      	ldr	r1, [pc, #492]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002078:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	4973      	ldr	r1, [pc, #460]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800209a:	4b6e      	ldr	r3, [pc, #440]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	496a      	ldr	r1, [pc, #424]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020bc:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4962      	ldr	r1, [pc, #392]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020de:	4b5d      	ldr	r3, [pc, #372]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	4959      	ldr	r1, [pc, #356]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002100:	4b54      	ldr	r3, [pc, #336]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	4951      	ldr	r1, [pc, #324]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	4948      	ldr	r1, [pc, #288]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d015      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4940      	ldr	r1, [pc, #256]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002164:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a3a      	ldr	r2, [pc, #232]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800216e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	4932      	ldr	r1, [pc, #200]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800219a:	d105      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c2:	4924      	ldr	r1, [pc, #144]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	4916      	ldr	r1, [pc, #88]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800220a:	d105      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a10      	ldr	r2, [pc, #64]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d019      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	4908      	ldr	r1, [pc, #32]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002242:	d109      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a02      	ldr	r2, [pc, #8]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
 8002250:	e002      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002264:	4b29      	ldr	r3, [pc, #164]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	4926      	ldr	r1, [pc, #152]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a20      	ldr	r2, [pc, #128]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022aa:	4918      	ldr	r1, [pc, #96]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a12      	ldr	r2, [pc, #72]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	490a      	ldr	r1, [pc, #40]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002300:	7cbb      	ldrb	r3, [r7, #18]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e097      	b.n	8002454 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe fb6d 	bl	8000a18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002354:	f023 0307 	bic.w	r3, r3, #7
 8002358:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f000 f907 	bl	8002578 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4313      	orrs	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80023b0:	f023 030c 	bic.w	r3, r3, #12
 80023b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4313      	orrs	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	011a      	lsls	r2, r3, #4
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	4313      	orrs	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80023f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	4313      	orrs	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800246c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002474:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800247c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002484:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d110      	bne.n	80024ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d001      	beq.n	800249c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e069      	b.n	8002570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ac:	e031      	b.n	8002512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d110      	bne.n	80024d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80024ba:	7b3b      	ldrb	r3, [r7, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d001      	beq.n	80024c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e055      	b.n	8002570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024d4:	e01d      	b.n	8002512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d105      	bne.n	80024ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80024e8:	7b3b      	ldrb	r3, [r7, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e03e      	b.n	8002570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_TIM_Encoder_Start+0xc4>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d008      	beq.n	8002530 <HAL_TIM_Encoder_Start+0xd4>
 800251e:	e00f      	b.n	8002540 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f8d9 	bl	80026e0 <TIM_CCxChannelCmd>
      break;
 800252e:	e016      	b.n	800255e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	2104      	movs	r1, #4
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f8d1 	bl	80026e0 <TIM_CCxChannelCmd>
      break;
 800253e:	e00e      	b.n	800255e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f8c9 	bl	80026e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	2104      	movs	r1, #4
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f8c2 	bl	80026e0 <TIM_CCxChannelCmd>
      break;
 800255c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4c      	ldr	r2, [pc, #304]	@ (80026bc <TIM_Base_SetConfig+0x144>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d017      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002596:	d013      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a49      	ldr	r2, [pc, #292]	@ (80026c0 <TIM_Base_SetConfig+0x148>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00f      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a48      	ldr	r2, [pc, #288]	@ (80026c4 <TIM_Base_SetConfig+0x14c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a47      	ldr	r2, [pc, #284]	@ (80026c8 <TIM_Base_SetConfig+0x150>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a46      	ldr	r2, [pc, #280]	@ (80026cc <TIM_Base_SetConfig+0x154>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0x48>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a45      	ldr	r2, [pc, #276]	@ (80026d0 <TIM_Base_SetConfig+0x158>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d108      	bne.n	80025d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a39      	ldr	r2, [pc, #228]	@ (80026bc <TIM_Base_SetConfig+0x144>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d023      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e0:	d01f      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <TIM_Base_SetConfig+0x148>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01b      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a35      	ldr	r2, [pc, #212]	@ (80026c4 <TIM_Base_SetConfig+0x14c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d017      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a34      	ldr	r2, [pc, #208]	@ (80026c8 <TIM_Base_SetConfig+0x150>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a33      	ldr	r2, [pc, #204]	@ (80026cc <TIM_Base_SetConfig+0x154>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00f      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a33      	ldr	r2, [pc, #204]	@ (80026d4 <TIM_Base_SetConfig+0x15c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a32      	ldr	r2, [pc, #200]	@ (80026d8 <TIM_Base_SetConfig+0x160>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a31      	ldr	r2, [pc, #196]	@ (80026dc <TIM_Base_SetConfig+0x164>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0xaa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2c      	ldr	r2, [pc, #176]	@ (80026d0 <TIM_Base_SetConfig+0x158>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <TIM_Base_SetConfig+0x144>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <TIM_Base_SetConfig+0x110>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a1a      	ldr	r2, [pc, #104]	@ (80026cc <TIM_Base_SetConfig+0x154>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0x110>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <TIM_Base_SetConfig+0x15c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x110>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <TIM_Base_SetConfig+0x160>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x110>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a18      	ldr	r2, [pc, #96]	@ (80026dc <TIM_Base_SetConfig+0x164>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x110>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <TIM_Base_SetConfig+0x158>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]
  }
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	40013400 	.word	0x40013400
 80026d0:	40015000 	.word	0x40015000
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400
 80026dc:	40014800 	.word	0x40014800

080026e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2201      	movs	r2, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e074      	b.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a34      	ldr	r2, [pc, #208]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a33      	ldr	r2, [pc, #204]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a31      	ldr	r2, [pc, #196]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800279a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a21      	ldr	r2, [pc, #132]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c4:	d01d      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	@ (800284c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10c      	bne.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	4313      	orrs	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40013400 	.word	0x40013400
 8002844:	40015000 	.word	0x40015000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40014000 	.word	0x40014000

08002858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e042      	b.n	80028f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fe f957 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2224      	movs	r2, #36	@ 0x24
 8002886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fbb2 	bl	800300c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8b3 	bl	8002a14 <UART_SetConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e01b      	b.n	80028f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fc31 	bl	8003150 <UART_CheckIdleState>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	2b20      	cmp	r3, #32
 8002910:	d17b      	bne.n	8002a0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_UART_Transmit+0x26>
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e074      	b.n	8002a0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	@ 0x21
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002932:	f7fe f9e3 	bl	8000cfc <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002950:	d108      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e003      	b.n	800296c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800296c:	e030      	b.n	80029d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fc93 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03d      	b.n	8002a0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1c8      	bne.n	800296e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2140      	movs	r1, #64	@ 0x40
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fc5c 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e006      	b.n	8002a0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b08c      	sub	sp, #48	@ 0x30
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4baa      	ldr	r3, [pc, #680]	@ (8002cec <UART_SetConfig+0x2d8>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a9f      	ldr	r2, [pc, #636]	@ (8002cf0 <UART_SetConfig+0x2dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	f023 010f 	bic.w	r1, r3, #15
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a90      	ldr	r2, [pc, #576]	@ (8002cf4 <UART_SetConfig+0x2e0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d125      	bne.n	8002b04 <UART_SetConfig+0xf0>
 8002ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d81a      	bhi.n	8002afc <UART_SetConfig+0xe8>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <UART_SetConfig+0xb8>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002aed 	.word	0x08002aed
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002af5 	.word	0x08002af5
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae2:	e116      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aea:	e112      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002aec:	2304      	movs	r3, #4
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af2:	e10e      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002af4:	2308      	movs	r3, #8
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002afa:	e10a      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002afc:	2310      	movs	r3, #16
 8002afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b02:	e106      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a7c      	ldr	r2, [pc, #496]	@ (8002cfc <UART_SetConfig+0x2e8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d138      	bne.n	8002b80 <UART_SetConfig+0x16c>
 8002b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	d82d      	bhi.n	8002b78 <UART_SetConfig+0x164>
 8002b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b24 <UART_SetConfig+0x110>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002b79 	.word	0x08002b79
 8002b2c:	08002b79 	.word	0x08002b79
 8002b30:	08002b79 	.word	0x08002b79
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b79 	.word	0x08002b79
 8002b3c:	08002b79 	.word	0x08002b79
 8002b40:	08002b79 	.word	0x08002b79
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	08002b79 	.word	0x08002b79
 8002b4c:	08002b79 	.word	0x08002b79
 8002b50:	08002b79 	.word	0x08002b79
 8002b54:	08002b71 	.word	0x08002b71
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b5e:	e0d8      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b60:	2302      	movs	r3, #2
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b66:	e0d4      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b6e:	e0d0      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b70:	2308      	movs	r3, #8
 8002b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b76:	e0cc      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b7e:	e0c8      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5e      	ldr	r2, [pc, #376]	@ (8002d00 <UART_SetConfig+0x2ec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d125      	bne.n	8002bd6 <UART_SetConfig+0x1c2>
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b94:	2b30      	cmp	r3, #48	@ 0x30
 8002b96:	d016      	beq.n	8002bc6 <UART_SetConfig+0x1b2>
 8002b98:	2b30      	cmp	r3, #48	@ 0x30
 8002b9a:	d818      	bhi.n	8002bce <UART_SetConfig+0x1ba>
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d00a      	beq.n	8002bb6 <UART_SetConfig+0x1a2>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d814      	bhi.n	8002bce <UART_SetConfig+0x1ba>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <UART_SetConfig+0x19a>
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d008      	beq.n	8002bbe <UART_SetConfig+0x1aa>
 8002bac:	e00f      	b.n	8002bce <UART_SetConfig+0x1ba>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb4:	e0ad      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bbc:	e0a9      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc4:	e0a5      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bcc:	e0a1      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002bce:	2310      	movs	r3, #16
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd4:	e09d      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4a      	ldr	r2, [pc, #296]	@ (8002d04 <UART_SetConfig+0x2f0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d125      	bne.n	8002c2c <UART_SetConfig+0x218>
 8002be0:	4b45      	ldr	r3, [pc, #276]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bec:	d016      	beq.n	8002c1c <UART_SetConfig+0x208>
 8002bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bf0:	d818      	bhi.n	8002c24 <UART_SetConfig+0x210>
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d00a      	beq.n	8002c0c <UART_SetConfig+0x1f8>
 8002bf6:	2b80      	cmp	r3, #128	@ 0x80
 8002bf8:	d814      	bhi.n	8002c24 <UART_SetConfig+0x210>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <UART_SetConfig+0x1f0>
 8002bfe:	2b40      	cmp	r3, #64	@ 0x40
 8002c00:	d008      	beq.n	8002c14 <UART_SetConfig+0x200>
 8002c02:	e00f      	b.n	8002c24 <UART_SetConfig+0x210>
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c0a:	e082      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c12:	e07e      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c14:	2304      	movs	r3, #4
 8002c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c1a:	e07a      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c22:	e076      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c24:	2310      	movs	r3, #16
 8002c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2a:	e072      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a35      	ldr	r2, [pc, #212]	@ (8002d08 <UART_SetConfig+0x2f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12a      	bne.n	8002c8c <UART_SetConfig+0x278>
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c44:	d01a      	beq.n	8002c7c <UART_SetConfig+0x268>
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c4a:	d81b      	bhi.n	8002c84 <UART_SetConfig+0x270>
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c50:	d00c      	beq.n	8002c6c <UART_SetConfig+0x258>
 8002c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c56:	d815      	bhi.n	8002c84 <UART_SetConfig+0x270>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <UART_SetConfig+0x250>
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c60:	d008      	beq.n	8002c74 <UART_SetConfig+0x260>
 8002c62:	e00f      	b.n	8002c84 <UART_SetConfig+0x270>
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6a:	e052      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c72:	e04e      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7a:	e04a      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c82:	e046      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8a:	e042      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <UART_SetConfig+0x2dc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d13a      	bne.n	8002d0c <UART_SetConfig+0x2f8>
 8002c96:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <UART_SetConfig+0x2e4>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ca4:	d01a      	beq.n	8002cdc <UART_SetConfig+0x2c8>
 8002ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002caa:	d81b      	bhi.n	8002ce4 <UART_SetConfig+0x2d0>
 8002cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb0:	d00c      	beq.n	8002ccc <UART_SetConfig+0x2b8>
 8002cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb6:	d815      	bhi.n	8002ce4 <UART_SetConfig+0x2d0>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <UART_SetConfig+0x2b0>
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc0:	d008      	beq.n	8002cd4 <UART_SetConfig+0x2c0>
 8002cc2:	e00f      	b.n	8002ce4 <UART_SetConfig+0x2d0>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cca:	e022      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd2:	e01e      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cda:	e01a      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	e016      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e012      	b.n	8002d12 <UART_SetConfig+0x2fe>
 8002cec:	cfff69f3 	.word	0xcfff69f3
 8002cf0:	40008000 	.word	0x40008000
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40004400 	.word	0x40004400
 8002d00:	40004800 	.word	0x40004800
 8002d04:	40004c00 	.word	0x40004c00
 8002d08:	40005000 	.word	0x40005000
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4aae      	ldr	r2, [pc, #696]	@ (8002fd0 <UART_SetConfig+0x5bc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 8097 	bne.w	8002e4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d823      	bhi.n	8002d6e <UART_SetConfig+0x35a>
 8002d26:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <UART_SetConfig+0x318>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d5f 	.word	0x08002d5f
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d6f 	.word	0x08002d6f
 8002d48:	08002d6f 	.word	0x08002d6f
 8002d4c:	08002d67 	.word	0x08002d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d50:	f7ff f81e 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d56:	e010      	b.n	8002d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d58:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd4 <UART_SetConfig+0x5c0>)
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d5c:	e00d      	b.n	8002d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7fe ffa9 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d64:	e009      	b.n	8002d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d6c:	e005      	b.n	8002d7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8130 	beq.w	8002fe2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	4a94      	ldr	r2, [pc, #592]	@ (8002fd8 <UART_SetConfig+0x5c4>)
 8002d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d305      	bcc.n	8002db2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d903      	bls.n	8002dba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002db8:	e113      	b.n	8002fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	60fa      	str	r2, [r7, #12]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	4a84      	ldr	r2, [pc, #528]	@ (8002fd8 <UART_SetConfig+0x5c4>)
 8002dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ddc:	f7fd fa78 	bl	80002d0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	020b      	lsls	r3, r1, #8
 8002df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002df6:	0202      	lsls	r2, r0, #8
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	6849      	ldr	r1, [r1, #4]
 8002dfc:	0849      	lsrs	r1, r1, #1
 8002dfe:	2000      	movs	r0, #0
 8002e00:	460c      	mov	r4, r1
 8002e02:	4605      	mov	r5, r0
 8002e04:	eb12 0804 	adds.w	r8, r2, r4
 8002e08:	eb43 0905 	adc.w	r9, r3, r5
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	469a      	mov	sl, r3
 8002e14:	4693      	mov	fp, r2
 8002e16:	4652      	mov	r2, sl
 8002e18:	465b      	mov	r3, fp
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	f7fd fa57 	bl	80002d0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e30:	d308      	bcc.n	8002e44 <UART_SetConfig+0x430>
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e38:	d204      	bcs.n	8002e44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e0ce      	b.n	8002fe2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e4a:	e0ca      	b.n	8002fe2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e54:	d166      	bne.n	8002f24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002e56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d827      	bhi.n	8002eae <UART_SetConfig+0x49a>
 8002e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <UART_SetConfig+0x450>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e89 	.word	0x08002e89
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	08002eaf 	.word	0x08002eaf
 8002e74:	08002e9f 	.word	0x08002e9f
 8002e78:	08002eaf 	.word	0x08002eaf
 8002e7c:	08002eaf 	.word	0x08002eaf
 8002e80:	08002eaf 	.word	0x08002eaf
 8002e84:	08002ea7 	.word	0x08002ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e88:	f7fe ff82 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e8e:	e014      	b.n	8002eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e90:	f7fe ff94 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e96:	e010      	b.n	8002eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e98:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd4 <UART_SetConfig+0x5c0>)
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e9c:	e00d      	b.n	8002eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9e:	f7fe ff09 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ea4:	e009      	b.n	8002eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002eac:	e005      	b.n	8002eba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8090 	beq.w	8002fe2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	4a44      	ldr	r2, [pc, #272]	@ (8002fd8 <UART_SetConfig+0x5c4>)
 8002ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	441a      	add	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d916      	bls.n	8002f1c <UART_SetConfig+0x508>
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d212      	bcs.n	8002f1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f023 030f 	bic.w	r3, r3, #15
 8002efe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	8bfb      	ldrh	r3, [r7, #30]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	8bfa      	ldrh	r2, [r7, #30]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e062      	b.n	8002fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f22:	e05e      	b.n	8002fe2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d828      	bhi.n	8002f7e <UART_SetConfig+0x56a>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <UART_SetConfig+0x520>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f7f 	.word	0x08002f7f
 8002f44:	08002f6f 	.word	0x08002f6f
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002f7f 	.word	0x08002f7f
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08002f77 	.word	0x08002f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7fe ff1a 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f5e:	e014      	b.n	8002f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7fe ff2c 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f66:	e010      	b.n	8002f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <UART_SetConfig+0x5c0>)
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f6c:	e00d      	b.n	8002f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6e:	f7fe fea1 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f74:	e009      	b.n	8002f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f7c:	e005      	b.n	8002f8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f88:	bf00      	nop
    }

    if (pclk != 0U)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d028      	beq.n	8002fe2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	4a10      	ldr	r2, [pc, #64]	@ (8002fd8 <UART_SetConfig+0x5c4>)
 8002f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	441a      	add	r2, r3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	d910      	bls.n	8002fdc <UART_SetConfig+0x5c8>
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc0:	d20c      	bcs.n	8002fdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	e009      	b.n	8002fe2 <UART_SetConfig+0x5ce>
 8002fce:	bf00      	nop
 8002fd0:	40008000 	.word	0x40008000
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	08003fcc 	.word	0x08003fcc
      }
      else
      {
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ffe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003002:	4618      	mov	r0, r3
 8003004:	3730      	adds	r7, #48	@ 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800300c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01a      	beq.n	8003122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310a:	d10a      	bne.n	8003122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b098      	sub	sp, #96	@ 0x60
 8003154:	af02      	add	r7, sp, #8
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003160:	f7fd fdcc 	bl	8000cfc <HAL_GetTick>
 8003164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d12f      	bne.n	80031d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f88e 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d022      	beq.n	80031d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e6      	bne.n	800318e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e063      	b.n	800329c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d149      	bne.n	8003276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f857 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d03c      	beq.n	8003276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	623b      	str	r3, [r7, #32]
   return(result);
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30
 800321c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e6      	bne.n	80031fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3308      	adds	r3, #8
 8003234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	60fb      	str	r3, [r7, #12]
   return(result);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3308      	adds	r3, #8
 800324c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800324e:	61fa      	str	r2, [r7, #28]
 8003250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	617b      	str	r3, [r7, #20]
   return(result);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e012      	b.n	800329c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3758      	adds	r7, #88	@ 0x58
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	e04f      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032bc:	d04b      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fd fd1d 	bl	8000cfc <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e04e      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d037      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b80      	cmp	r3, #128	@ 0x80
 80032ea:	d034      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d031      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d110      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f838 	bl	800337e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2208      	movs	r2, #8
 8003312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e029      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800332c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003330:	d111      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800333a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f81e 	bl	800337e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e00f      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d0a0      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800337e:	b480      	push	{r7}
 8003380:	b095      	sub	sp, #84	@ 0x54
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e6      	bne.n	8003386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e3      	bne.n	80033b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d118      	bne.n	800342a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	60bb      	str	r3, [r7, #8]
   return(result);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f023 0310 	bic.w	r3, r3, #16
 800340c:	647b      	str	r3, [r7, #68]	@ 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	613b      	str	r3, [r7, #16]
   return(result);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e6      	bne.n	80033f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800343e:	bf00      	nop
 8003440:	3754      	adds	r7, #84	@ 0x54
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_UARTEx_DisableFifoMode+0x16>
 800345c:	2302      	movs	r3, #2
 800345e:	e027      	b.n	80034b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	@ 0x24
 800346c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800348e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e02d      	b.n	8003530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f84f 	bl	80035b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e02d      	b.n	80035ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	@ 0x24
 800355c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f811 	bl	80035b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035d4:	e031      	b.n	800363a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035d6:	2308      	movs	r3, #8
 80035d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035da:	2308      	movs	r3, #8
 80035dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	0e5b      	lsrs	r3, r3, #25
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	0f5b      	lsrs	r3, r3, #29
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	7b3a      	ldrb	r2, [r7, #12]
 8003602:	4911      	ldr	r1, [pc, #68]	@ (8003648 <UARTEx_SetNbDataToProcess+0x94>)
 8003604:	5c8a      	ldrb	r2, [r1, r2]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800360a:	7b3a      	ldrb	r2, [r7, #12]
 800360c:	490f      	ldr	r1, [pc, #60]	@ (800364c <UARTEx_SetNbDataToProcess+0x98>)
 800360e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003610:	fb93 f3f2 	sdiv	r3, r3, r2
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	7b7a      	ldrb	r2, [r7, #13]
 8003620:	4909      	ldr	r1, [pc, #36]	@ (8003648 <UARTEx_SetNbDataToProcess+0x94>)
 8003622:	5c8a      	ldrb	r2, [r1, r2]
 8003624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003628:	7b7a      	ldrb	r2, [r7, #13]
 800362a:	4908      	ldr	r1, [pc, #32]	@ (800364c <UARTEx_SetNbDataToProcess+0x98>)
 800362c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800362e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	08003fe4 	.word	0x08003fe4
 800364c:	08003fec 	.word	0x08003fec

08003650 <siprintf>:
 8003650:	b40e      	push	{r1, r2, r3}
 8003652:	b510      	push	{r4, lr}
 8003654:	b09d      	sub	sp, #116	@ 0x74
 8003656:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003658:	9002      	str	r0, [sp, #8]
 800365a:	9006      	str	r0, [sp, #24]
 800365c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003660:	480a      	ldr	r0, [pc, #40]	@ (800368c <siprintf+0x3c>)
 8003662:	9107      	str	r1, [sp, #28]
 8003664:	9104      	str	r1, [sp, #16]
 8003666:	490a      	ldr	r1, [pc, #40]	@ (8003690 <siprintf+0x40>)
 8003668:	f853 2b04 	ldr.w	r2, [r3], #4
 800366c:	9105      	str	r1, [sp, #20]
 800366e:	2400      	movs	r4, #0
 8003670:	a902      	add	r1, sp, #8
 8003672:	6800      	ldr	r0, [r0, #0]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003678:	f000 f994 	bl	80039a4 <_svfiprintf_r>
 800367c:	9b02      	ldr	r3, [sp, #8]
 800367e:	701c      	strb	r4, [r3, #0]
 8003680:	b01d      	add	sp, #116	@ 0x74
 8003682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003686:	b003      	add	sp, #12
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c
 8003690:	ffff0208 	.word	0xffff0208

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <__errno>:
 80036a4:	4b01      	ldr	r3, [pc, #4]	@ (80036ac <__errno+0x8>)
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4d0d      	ldr	r5, [pc, #52]	@ (80036e8 <__libc_init_array+0x38>)
 80036b4:	4c0d      	ldr	r4, [pc, #52]	@ (80036ec <__libc_init_array+0x3c>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	2600      	movs	r6, #0
 80036bc:	42a6      	cmp	r6, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	4d0b      	ldr	r5, [pc, #44]	@ (80036f0 <__libc_init_array+0x40>)
 80036c2:	4c0c      	ldr	r4, [pc, #48]	@ (80036f4 <__libc_init_array+0x44>)
 80036c4:	f000 fc64 	bl	8003f90 <_init>
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	2600      	movs	r6, #0
 80036ce:	42a6      	cmp	r6, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d8:	4798      	blx	r3
 80036da:	3601      	adds	r6, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e2:	4798      	blx	r3
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08004030 	.word	0x08004030
 80036ec:	08004030 	.word	0x08004030
 80036f0:	08004030 	.word	0x08004030
 80036f4:	08004034 	.word	0x08004034

080036f8 <__retarget_lock_acquire_recursive>:
 80036f8:	4770      	bx	lr

080036fa <__retarget_lock_release_recursive>:
 80036fa:	4770      	bx	lr

080036fc <_free_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4605      	mov	r5, r0
 8003700:	2900      	cmp	r1, #0
 8003702:	d041      	beq.n	8003788 <_free_r+0x8c>
 8003704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003708:	1f0c      	subs	r4, r1, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfb8      	it	lt
 800370e:	18e4      	addlt	r4, r4, r3
 8003710:	f000 f8e0 	bl	80038d4 <__malloc_lock>
 8003714:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <_free_r+0x90>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	b933      	cbnz	r3, 8003728 <_free_r+0x2c>
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	6014      	str	r4, [r2, #0]
 800371e:	4628      	mov	r0, r5
 8003720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003724:	f000 b8dc 	b.w	80038e0 <__malloc_unlock>
 8003728:	42a3      	cmp	r3, r4
 800372a:	d908      	bls.n	800373e <_free_r+0x42>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	1821      	adds	r1, r4, r0
 8003730:	428b      	cmp	r3, r1
 8003732:	bf01      	itttt	eq
 8003734:	6819      	ldreq	r1, [r3, #0]
 8003736:	685b      	ldreq	r3, [r3, #4]
 8003738:	1809      	addeq	r1, r1, r0
 800373a:	6021      	streq	r1, [r4, #0]
 800373c:	e7ed      	b.n	800371a <_free_r+0x1e>
 800373e:	461a      	mov	r2, r3
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b10b      	cbz	r3, 8003748 <_free_r+0x4c>
 8003744:	42a3      	cmp	r3, r4
 8003746:	d9fa      	bls.n	800373e <_free_r+0x42>
 8003748:	6811      	ldr	r1, [r2, #0]
 800374a:	1850      	adds	r0, r2, r1
 800374c:	42a0      	cmp	r0, r4
 800374e:	d10b      	bne.n	8003768 <_free_r+0x6c>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	4401      	add	r1, r0
 8003754:	1850      	adds	r0, r2, r1
 8003756:	4283      	cmp	r3, r0
 8003758:	6011      	str	r1, [r2, #0]
 800375a:	d1e0      	bne.n	800371e <_free_r+0x22>
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	6053      	str	r3, [r2, #4]
 8003762:	4408      	add	r0, r1
 8003764:	6010      	str	r0, [r2, #0]
 8003766:	e7da      	b.n	800371e <_free_r+0x22>
 8003768:	d902      	bls.n	8003770 <_free_r+0x74>
 800376a:	230c      	movs	r3, #12
 800376c:	602b      	str	r3, [r5, #0]
 800376e:	e7d6      	b.n	800371e <_free_r+0x22>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	1821      	adds	r1, r4, r0
 8003774:	428b      	cmp	r3, r1
 8003776:	bf04      	itt	eq
 8003778:	6819      	ldreq	r1, [r3, #0]
 800377a:	685b      	ldreq	r3, [r3, #4]
 800377c:	6063      	str	r3, [r4, #4]
 800377e:	bf04      	itt	eq
 8003780:	1809      	addeq	r1, r1, r0
 8003782:	6021      	streq	r1, [r4, #0]
 8003784:	6054      	str	r4, [r2, #4]
 8003786:	e7ca      	b.n	800371e <_free_r+0x22>
 8003788:	bd38      	pop	{r3, r4, r5, pc}
 800378a:	bf00      	nop
 800378c:	20000328 	.word	0x20000328

08003790 <sbrk_aligned>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	4e0f      	ldr	r6, [pc, #60]	@ (80037d0 <sbrk_aligned+0x40>)
 8003794:	460c      	mov	r4, r1
 8003796:	6831      	ldr	r1, [r6, #0]
 8003798:	4605      	mov	r5, r0
 800379a:	b911      	cbnz	r1, 80037a2 <sbrk_aligned+0x12>
 800379c:	f000 fba4 	bl	8003ee8 <_sbrk_r>
 80037a0:	6030      	str	r0, [r6, #0]
 80037a2:	4621      	mov	r1, r4
 80037a4:	4628      	mov	r0, r5
 80037a6:	f000 fb9f 	bl	8003ee8 <_sbrk_r>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	d103      	bne.n	80037b6 <sbrk_aligned+0x26>
 80037ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80037b2:	4620      	mov	r0, r4
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	1cc4      	adds	r4, r0, #3
 80037b8:	f024 0403 	bic.w	r4, r4, #3
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d0f8      	beq.n	80037b2 <sbrk_aligned+0x22>
 80037c0:	1a21      	subs	r1, r4, r0
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 fb90 	bl	8003ee8 <_sbrk_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d1f2      	bne.n	80037b2 <sbrk_aligned+0x22>
 80037cc:	e7ef      	b.n	80037ae <sbrk_aligned+0x1e>
 80037ce:	bf00      	nop
 80037d0:	20000324 	.word	0x20000324

080037d4 <_malloc_r>:
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d8:	1ccd      	adds	r5, r1, #3
 80037da:	f025 0503 	bic.w	r5, r5, #3
 80037de:	3508      	adds	r5, #8
 80037e0:	2d0c      	cmp	r5, #12
 80037e2:	bf38      	it	cc
 80037e4:	250c      	movcc	r5, #12
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	4606      	mov	r6, r0
 80037ea:	db01      	blt.n	80037f0 <_malloc_r+0x1c>
 80037ec:	42a9      	cmp	r1, r5
 80037ee:	d904      	bls.n	80037fa <_malloc_r+0x26>
 80037f0:	230c      	movs	r3, #12
 80037f2:	6033      	str	r3, [r6, #0]
 80037f4:	2000      	movs	r0, #0
 80037f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038d0 <_malloc_r+0xfc>
 80037fe:	f000 f869 	bl	80038d4 <__malloc_lock>
 8003802:	f8d8 3000 	ldr.w	r3, [r8]
 8003806:	461c      	mov	r4, r3
 8003808:	bb44      	cbnz	r4, 800385c <_malloc_r+0x88>
 800380a:	4629      	mov	r1, r5
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff ffbf 	bl	8003790 <sbrk_aligned>
 8003812:	1c43      	adds	r3, r0, #1
 8003814:	4604      	mov	r4, r0
 8003816:	d158      	bne.n	80038ca <_malloc_r+0xf6>
 8003818:	f8d8 4000 	ldr.w	r4, [r8]
 800381c:	4627      	mov	r7, r4
 800381e:	2f00      	cmp	r7, #0
 8003820:	d143      	bne.n	80038aa <_malloc_r+0xd6>
 8003822:	2c00      	cmp	r4, #0
 8003824:	d04b      	beq.n	80038be <_malloc_r+0xea>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	4639      	mov	r1, r7
 800382a:	4630      	mov	r0, r6
 800382c:	eb04 0903 	add.w	r9, r4, r3
 8003830:	f000 fb5a 	bl	8003ee8 <_sbrk_r>
 8003834:	4581      	cmp	r9, r0
 8003836:	d142      	bne.n	80038be <_malloc_r+0xea>
 8003838:	6821      	ldr	r1, [r4, #0]
 800383a:	1a6d      	subs	r5, r5, r1
 800383c:	4629      	mov	r1, r5
 800383e:	4630      	mov	r0, r6
 8003840:	f7ff ffa6 	bl	8003790 <sbrk_aligned>
 8003844:	3001      	adds	r0, #1
 8003846:	d03a      	beq.n	80038be <_malloc_r+0xea>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	442b      	add	r3, r5
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	f8d8 3000 	ldr.w	r3, [r8]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	bb62      	cbnz	r2, 80038b0 <_malloc_r+0xdc>
 8003856:	f8c8 7000 	str.w	r7, [r8]
 800385a:	e00f      	b.n	800387c <_malloc_r+0xa8>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	1b52      	subs	r2, r2, r5
 8003860:	d420      	bmi.n	80038a4 <_malloc_r+0xd0>
 8003862:	2a0b      	cmp	r2, #11
 8003864:	d917      	bls.n	8003896 <_malloc_r+0xc2>
 8003866:	1961      	adds	r1, r4, r5
 8003868:	42a3      	cmp	r3, r4
 800386a:	6025      	str	r5, [r4, #0]
 800386c:	bf18      	it	ne
 800386e:	6059      	strne	r1, [r3, #4]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	bf08      	it	eq
 8003874:	f8c8 1000 	streq.w	r1, [r8]
 8003878:	5162      	str	r2, [r4, r5]
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	4630      	mov	r0, r6
 800387e:	f000 f82f 	bl	80038e0 <__malloc_unlock>
 8003882:	f104 000b 	add.w	r0, r4, #11
 8003886:	1d23      	adds	r3, r4, #4
 8003888:	f020 0007 	bic.w	r0, r0, #7
 800388c:	1ac2      	subs	r2, r0, r3
 800388e:	bf1c      	itt	ne
 8003890:	1a1b      	subne	r3, r3, r0
 8003892:	50a3      	strne	r3, [r4, r2]
 8003894:	e7af      	b.n	80037f6 <_malloc_r+0x22>
 8003896:	6862      	ldr	r2, [r4, #4]
 8003898:	42a3      	cmp	r3, r4
 800389a:	bf0c      	ite	eq
 800389c:	f8c8 2000 	streq.w	r2, [r8]
 80038a0:	605a      	strne	r2, [r3, #4]
 80038a2:	e7eb      	b.n	800387c <_malloc_r+0xa8>
 80038a4:	4623      	mov	r3, r4
 80038a6:	6864      	ldr	r4, [r4, #4]
 80038a8:	e7ae      	b.n	8003808 <_malloc_r+0x34>
 80038aa:	463c      	mov	r4, r7
 80038ac:	687f      	ldr	r7, [r7, #4]
 80038ae:	e7b6      	b.n	800381e <_malloc_r+0x4a>
 80038b0:	461a      	mov	r2, r3
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d1fb      	bne.n	80038b0 <_malloc_r+0xdc>
 80038b8:	2300      	movs	r3, #0
 80038ba:	6053      	str	r3, [r2, #4]
 80038bc:	e7de      	b.n	800387c <_malloc_r+0xa8>
 80038be:	230c      	movs	r3, #12
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 f80c 	bl	80038e0 <__malloc_unlock>
 80038c8:	e794      	b.n	80037f4 <_malloc_r+0x20>
 80038ca:	6005      	str	r5, [r0, #0]
 80038cc:	e7d6      	b.n	800387c <_malloc_r+0xa8>
 80038ce:	bf00      	nop
 80038d0:	20000328 	.word	0x20000328

080038d4 <__malloc_lock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	@ (80038dc <__malloc_lock+0x8>)
 80038d6:	f7ff bf0f 	b.w	80036f8 <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	20000320 	.word	0x20000320

080038e0 <__malloc_unlock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	@ (80038e8 <__malloc_unlock+0x8>)
 80038e2:	f7ff bf0a 	b.w	80036fa <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000320 	.word	0x20000320

080038ec <__ssputs_r>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	688e      	ldr	r6, [r1, #8]
 80038f2:	461f      	mov	r7, r3
 80038f4:	42be      	cmp	r6, r7
 80038f6:	680b      	ldr	r3, [r1, #0]
 80038f8:	4682      	mov	sl, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	4690      	mov	r8, r2
 80038fe:	d82d      	bhi.n	800395c <__ssputs_r+0x70>
 8003900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003908:	d026      	beq.n	8003958 <__ssputs_r+0x6c>
 800390a:	6965      	ldr	r5, [r4, #20]
 800390c:	6909      	ldr	r1, [r1, #16]
 800390e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003912:	eba3 0901 	sub.w	r9, r3, r1
 8003916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800391a:	1c7b      	adds	r3, r7, #1
 800391c:	444b      	add	r3, r9
 800391e:	106d      	asrs	r5, r5, #1
 8003920:	429d      	cmp	r5, r3
 8003922:	bf38      	it	cc
 8003924:	461d      	movcc	r5, r3
 8003926:	0553      	lsls	r3, r2, #21
 8003928:	d527      	bpl.n	800397a <__ssputs_r+0x8e>
 800392a:	4629      	mov	r1, r5
 800392c:	f7ff ff52 	bl	80037d4 <_malloc_r>
 8003930:	4606      	mov	r6, r0
 8003932:	b360      	cbz	r0, 800398e <__ssputs_r+0xa2>
 8003934:	6921      	ldr	r1, [r4, #16]
 8003936:	464a      	mov	r2, r9
 8003938:	f000 fae6 	bl	8003f08 <memcpy>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	6126      	str	r6, [r4, #16]
 800394a:	6165      	str	r5, [r4, #20]
 800394c:	444e      	add	r6, r9
 800394e:	eba5 0509 	sub.w	r5, r5, r9
 8003952:	6026      	str	r6, [r4, #0]
 8003954:	60a5      	str	r5, [r4, #8]
 8003956:	463e      	mov	r6, r7
 8003958:	42be      	cmp	r6, r7
 800395a:	d900      	bls.n	800395e <__ssputs_r+0x72>
 800395c:	463e      	mov	r6, r7
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	4632      	mov	r2, r6
 8003962:	4641      	mov	r1, r8
 8003964:	f000 faa6 	bl	8003eb4 <memmove>
 8003968:	68a3      	ldr	r3, [r4, #8]
 800396a:	1b9b      	subs	r3, r3, r6
 800396c:	60a3      	str	r3, [r4, #8]
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	4433      	add	r3, r6
 8003972:	6023      	str	r3, [r4, #0]
 8003974:	2000      	movs	r0, #0
 8003976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397a:	462a      	mov	r2, r5
 800397c:	f000 fad2 	bl	8003f24 <_realloc_r>
 8003980:	4606      	mov	r6, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d1e0      	bne.n	8003948 <__ssputs_r+0x5c>
 8003986:	6921      	ldr	r1, [r4, #16]
 8003988:	4650      	mov	r0, sl
 800398a:	f7ff feb7 	bl	80036fc <_free_r>
 800398e:	230c      	movs	r3, #12
 8003990:	f8ca 3000 	str.w	r3, [sl]
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399a:	81a3      	strh	r3, [r4, #12]
 800399c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039a0:	e7e9      	b.n	8003976 <__ssputs_r+0x8a>
	...

080039a4 <_svfiprintf_r>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	4698      	mov	r8, r3
 80039aa:	898b      	ldrh	r3, [r1, #12]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	b09d      	sub	sp, #116	@ 0x74
 80039b0:	4607      	mov	r7, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	d510      	bpl.n	80039da <_svfiprintf_r+0x36>
 80039b8:	690b      	ldr	r3, [r1, #16]
 80039ba:	b973      	cbnz	r3, 80039da <_svfiprintf_r+0x36>
 80039bc:	2140      	movs	r1, #64	@ 0x40
 80039be:	f7ff ff09 	bl	80037d4 <_malloc_r>
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	6128      	str	r0, [r5, #16]
 80039c6:	b930      	cbnz	r0, 80039d6 <_svfiprintf_r+0x32>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039d0:	b01d      	add	sp, #116	@ 0x74
 80039d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d6:	2340      	movs	r3, #64	@ 0x40
 80039d8:	616b      	str	r3, [r5, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80039de:	2320      	movs	r3, #32
 80039e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e8:	2330      	movs	r3, #48	@ 0x30
 80039ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b88 <_svfiprintf_r+0x1e4>
 80039ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039f2:	f04f 0901 	mov.w	r9, #1
 80039f6:	4623      	mov	r3, r4
 80039f8:	469a      	mov	sl, r3
 80039fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fe:	b10a      	cbz	r2, 8003a04 <_svfiprintf_r+0x60>
 8003a00:	2a25      	cmp	r2, #37	@ 0x25
 8003a02:	d1f9      	bne.n	80039f8 <_svfiprintf_r+0x54>
 8003a04:	ebba 0b04 	subs.w	fp, sl, r4
 8003a08:	d00b      	beq.n	8003a22 <_svfiprintf_r+0x7e>
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4638      	mov	r0, r7
 8003a12:	f7ff ff6b 	bl	80038ec <__ssputs_r>
 8003a16:	3001      	adds	r0, #1
 8003a18:	f000 80a7 	beq.w	8003b6a <_svfiprintf_r+0x1c6>
 8003a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a1e:	445a      	add	r2, fp
 8003a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a22:	f89a 3000 	ldrb.w	r3, [sl]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 809f 	beq.w	8003b6a <_svfiprintf_r+0x1c6>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a36:	f10a 0a01 	add.w	sl, sl, #1
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	9307      	str	r3, [sp, #28]
 8003a3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a42:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a44:	4654      	mov	r4, sl
 8003a46:	2205      	movs	r2, #5
 8003a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4c:	484e      	ldr	r0, [pc, #312]	@ (8003b88 <_svfiprintf_r+0x1e4>)
 8003a4e:	f7fc fbef 	bl	8000230 <memchr>
 8003a52:	9a04      	ldr	r2, [sp, #16]
 8003a54:	b9d8      	cbnz	r0, 8003a8e <_svfiprintf_r+0xea>
 8003a56:	06d0      	lsls	r0, r2, #27
 8003a58:	bf44      	itt	mi
 8003a5a:	2320      	movmi	r3, #32
 8003a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a60:	0711      	lsls	r1, r2, #28
 8003a62:	bf44      	itt	mi
 8003a64:	232b      	movmi	r3, #43	@ 0x2b
 8003a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a70:	d015      	beq.n	8003a9e <_svfiprintf_r+0xfa>
 8003a72:	9a07      	ldr	r2, [sp, #28]
 8003a74:	4654      	mov	r4, sl
 8003a76:	2000      	movs	r0, #0
 8003a78:	f04f 0c0a 	mov.w	ip, #10
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a82:	3b30      	subs	r3, #48	@ 0x30
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d94b      	bls.n	8003b20 <_svfiprintf_r+0x17c>
 8003a88:	b1b0      	cbz	r0, 8003ab8 <_svfiprintf_r+0x114>
 8003a8a:	9207      	str	r2, [sp, #28]
 8003a8c:	e014      	b.n	8003ab8 <_svfiprintf_r+0x114>
 8003a8e:	eba0 0308 	sub.w	r3, r0, r8
 8003a92:	fa09 f303 	lsl.w	r3, r9, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	9304      	str	r3, [sp, #16]
 8003a9a:	46a2      	mov	sl, r4
 8003a9c:	e7d2      	b.n	8003a44 <_svfiprintf_r+0xa0>
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	1d19      	adds	r1, r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bfbb      	ittet	lt
 8003aaa:	425b      	neglt	r3, r3
 8003aac:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab0:	9307      	strge	r3, [sp, #28]
 8003ab2:	9307      	strlt	r3, [sp, #28]
 8003ab4:	bfb8      	it	lt
 8003ab6:	9204      	strlt	r2, [sp, #16]
 8003ab8:	7823      	ldrb	r3, [r4, #0]
 8003aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003abc:	d10a      	bne.n	8003ad4 <_svfiprintf_r+0x130>
 8003abe:	7863      	ldrb	r3, [r4, #1]
 8003ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ac2:	d132      	bne.n	8003b2a <_svfiprintf_r+0x186>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	9203      	str	r2, [sp, #12]
 8003acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ad0:	3402      	adds	r4, #2
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b98 <_svfiprintf_r+0x1f4>
 8003ad8:	7821      	ldrb	r1, [r4, #0]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7fc fba7 	bl	8000230 <memchr>
 8003ae2:	b138      	cbz	r0, 8003af4 <_svfiprintf_r+0x150>
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	eba0 000a 	sub.w	r0, r0, sl
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	4082      	lsls	r2, r0
 8003aee:	4313      	orrs	r3, r2
 8003af0:	3401      	adds	r4, #1
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	4824      	ldr	r0, [pc, #144]	@ (8003b8c <_svfiprintf_r+0x1e8>)
 8003afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003afe:	2206      	movs	r2, #6
 8003b00:	f7fc fb96 	bl	8000230 <memchr>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d036      	beq.n	8003b76 <_svfiprintf_r+0x1d2>
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <_svfiprintf_r+0x1ec>)
 8003b0a:	bb1b      	cbnz	r3, 8003b54 <_svfiprintf_r+0x1b0>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	3307      	adds	r3, #7
 8003b10:	f023 0307 	bic.w	r3, r3, #7
 8003b14:	3308      	adds	r3, #8
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b1a:	4433      	add	r3, r6
 8003b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b1e:	e76a      	b.n	80039f6 <_svfiprintf_r+0x52>
 8003b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b24:	460c      	mov	r4, r1
 8003b26:	2001      	movs	r0, #1
 8003b28:	e7a8      	b.n	8003a7c <_svfiprintf_r+0xd8>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	3401      	adds	r4, #1
 8003b2e:	9305      	str	r3, [sp, #20]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f04f 0c0a 	mov.w	ip, #10
 8003b36:	4620      	mov	r0, r4
 8003b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b3c:	3a30      	subs	r2, #48	@ 0x30
 8003b3e:	2a09      	cmp	r2, #9
 8003b40:	d903      	bls.n	8003b4a <_svfiprintf_r+0x1a6>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0c6      	beq.n	8003ad4 <_svfiprintf_r+0x130>
 8003b46:	9105      	str	r1, [sp, #20]
 8003b48:	e7c4      	b.n	8003ad4 <_svfiprintf_r+0x130>
 8003b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b4e:	4604      	mov	r4, r0
 8003b50:	2301      	movs	r3, #1
 8003b52:	e7f0      	b.n	8003b36 <_svfiprintf_r+0x192>
 8003b54:	ab03      	add	r3, sp, #12
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <_svfiprintf_r+0x1f0>)
 8003b5c:	a904      	add	r1, sp, #16
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f3af 8000 	nop.w
 8003b64:	1c42      	adds	r2, r0, #1
 8003b66:	4606      	mov	r6, r0
 8003b68:	d1d6      	bne.n	8003b18 <_svfiprintf_r+0x174>
 8003b6a:	89ab      	ldrh	r3, [r5, #12]
 8003b6c:	065b      	lsls	r3, r3, #25
 8003b6e:	f53f af2d 	bmi.w	80039cc <_svfiprintf_r+0x28>
 8003b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b74:	e72c      	b.n	80039d0 <_svfiprintf_r+0x2c>
 8003b76:	ab03      	add	r3, sp, #12
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	462a      	mov	r2, r5
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <_svfiprintf_r+0x1f0>)
 8003b7e:	a904      	add	r1, sp, #16
 8003b80:	4638      	mov	r0, r7
 8003b82:	f000 f879 	bl	8003c78 <_printf_i>
 8003b86:	e7ed      	b.n	8003b64 <_svfiprintf_r+0x1c0>
 8003b88:	08003ff4 	.word	0x08003ff4
 8003b8c:	08003ffe 	.word	0x08003ffe
 8003b90:	00000000 	.word	0x00000000
 8003b94:	080038ed 	.word	0x080038ed
 8003b98:	08003ffa 	.word	0x08003ffa

08003b9c <_printf_common>:
 8003b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	4698      	mov	r8, r3
 8003ba4:	688a      	ldr	r2, [r1, #8]
 8003ba6:	690b      	ldr	r3, [r1, #16]
 8003ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bfb8      	it	lt
 8003bb0:	4613      	movlt	r3, r2
 8003bb2:	6033      	str	r3, [r6, #0]
 8003bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bb8:	4607      	mov	r7, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	b10a      	cbz	r2, 8003bc2 <_printf_common+0x26>
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	6033      	str	r3, [r6, #0]
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	0699      	lsls	r1, r3, #26
 8003bc6:	bf42      	ittt	mi
 8003bc8:	6833      	ldrmi	r3, [r6, #0]
 8003bca:	3302      	addmi	r3, #2
 8003bcc:	6033      	strmi	r3, [r6, #0]
 8003bce:	6825      	ldr	r5, [r4, #0]
 8003bd0:	f015 0506 	ands.w	r5, r5, #6
 8003bd4:	d106      	bne.n	8003be4 <_printf_common+0x48>
 8003bd6:	f104 0a19 	add.w	sl, r4, #25
 8003bda:	68e3      	ldr	r3, [r4, #12]
 8003bdc:	6832      	ldr	r2, [r6, #0]
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	42ab      	cmp	r3, r5
 8003be2:	dc26      	bgt.n	8003c32 <_printf_common+0x96>
 8003be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003be8:	6822      	ldr	r2, [r4, #0]
 8003bea:	3b00      	subs	r3, #0
 8003bec:	bf18      	it	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	0692      	lsls	r2, r2, #26
 8003bf2:	d42b      	bmi.n	8003c4c <_printf_common+0xb0>
 8003bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	47c8      	blx	r9
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d01e      	beq.n	8003c40 <_printf_common+0xa4>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	f003 0306 	and.w	r3, r3, #6
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	bf02      	ittt	eq
 8003c0e:	68e5      	ldreq	r5, [r4, #12]
 8003c10:	6833      	ldreq	r3, [r6, #0]
 8003c12:	1aed      	subeq	r5, r5, r3
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	bf0c      	ite	eq
 8003c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c1c:	2500      	movne	r5, #0
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	bfc4      	itt	gt
 8003c22:	1a9b      	subgt	r3, r3, r2
 8003c24:	18ed      	addgt	r5, r5, r3
 8003c26:	2600      	movs	r6, #0
 8003c28:	341a      	adds	r4, #26
 8003c2a:	42b5      	cmp	r5, r6
 8003c2c:	d11a      	bne.n	8003c64 <_printf_common+0xc8>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e008      	b.n	8003c44 <_printf_common+0xa8>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4652      	mov	r2, sl
 8003c36:	4641      	mov	r1, r8
 8003c38:	4638      	mov	r0, r7
 8003c3a:	47c8      	blx	r9
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d103      	bne.n	8003c48 <_printf_common+0xac>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c48:	3501      	adds	r5, #1
 8003c4a:	e7c6      	b.n	8003bda <_printf_common+0x3e>
 8003c4c:	18e1      	adds	r1, r4, r3
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	2030      	movs	r0, #48	@ 0x30
 8003c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c56:	4422      	add	r2, r4
 8003c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c60:	3302      	adds	r3, #2
 8003c62:	e7c7      	b.n	8003bf4 <_printf_common+0x58>
 8003c64:	2301      	movs	r3, #1
 8003c66:	4622      	mov	r2, r4
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	47c8      	blx	r9
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d0e6      	beq.n	8003c40 <_printf_common+0xa4>
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7d9      	b.n	8003c2a <_printf_common+0x8e>
	...

08003c78 <_printf_i>:
 8003c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	7e0f      	ldrb	r7, [r1, #24]
 8003c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c80:	2f78      	cmp	r7, #120	@ 0x78
 8003c82:	4691      	mov	r9, r2
 8003c84:	4680      	mov	r8, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	469a      	mov	sl, r3
 8003c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c8e:	d807      	bhi.n	8003ca0 <_printf_i+0x28>
 8003c90:	2f62      	cmp	r7, #98	@ 0x62
 8003c92:	d80a      	bhi.n	8003caa <_printf_i+0x32>
 8003c94:	2f00      	cmp	r7, #0
 8003c96:	f000 80d1 	beq.w	8003e3c <_printf_i+0x1c4>
 8003c9a:	2f58      	cmp	r7, #88	@ 0x58
 8003c9c:	f000 80b8 	beq.w	8003e10 <_printf_i+0x198>
 8003ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ca8:	e03a      	b.n	8003d20 <_printf_i+0xa8>
 8003caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cae:	2b15      	cmp	r3, #21
 8003cb0:	d8f6      	bhi.n	8003ca0 <_printf_i+0x28>
 8003cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8003cb8 <_printf_i+0x40>)
 8003cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d25 	.word	0x08003d25
 8003cc0:	08003ca1 	.word	0x08003ca1
 8003cc4:	08003ca1 	.word	0x08003ca1
 8003cc8:	08003ca1 	.word	0x08003ca1
 8003ccc:	08003ca1 	.word	0x08003ca1
 8003cd0:	08003d25 	.word	0x08003d25
 8003cd4:	08003ca1 	.word	0x08003ca1
 8003cd8:	08003ca1 	.word	0x08003ca1
 8003cdc:	08003ca1 	.word	0x08003ca1
 8003ce0:	08003ca1 	.word	0x08003ca1
 8003ce4:	08003e23 	.word	0x08003e23
 8003ce8:	08003d4f 	.word	0x08003d4f
 8003cec:	08003ddd 	.word	0x08003ddd
 8003cf0:	08003ca1 	.word	0x08003ca1
 8003cf4:	08003ca1 	.word	0x08003ca1
 8003cf8:	08003e45 	.word	0x08003e45
 8003cfc:	08003ca1 	.word	0x08003ca1
 8003d00:	08003d4f 	.word	0x08003d4f
 8003d04:	08003ca1 	.word	0x08003ca1
 8003d08:	08003ca1 	.word	0x08003ca1
 8003d0c:	08003de5 	.word	0x08003de5
 8003d10:	6833      	ldr	r3, [r6, #0]
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6032      	str	r2, [r6, #0]
 8003d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d20:	2301      	movs	r3, #1
 8003d22:	e09c      	b.n	8003e5e <_printf_i+0x1e6>
 8003d24:	6833      	ldr	r3, [r6, #0]
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	1d19      	adds	r1, r3, #4
 8003d2a:	6031      	str	r1, [r6, #0]
 8003d2c:	0606      	lsls	r6, r0, #24
 8003d2e:	d501      	bpl.n	8003d34 <_printf_i+0xbc>
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	e003      	b.n	8003d3c <_printf_i+0xc4>
 8003d34:	0645      	lsls	r5, r0, #25
 8003d36:	d5fb      	bpl.n	8003d30 <_printf_i+0xb8>
 8003d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	da03      	bge.n	8003d48 <_printf_i+0xd0>
 8003d40:	232d      	movs	r3, #45	@ 0x2d
 8003d42:	426d      	negs	r5, r5
 8003d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d48:	4858      	ldr	r0, [pc, #352]	@ (8003eac <_printf_i+0x234>)
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e011      	b.n	8003d72 <_printf_i+0xfa>
 8003d4e:	6821      	ldr	r1, [r4, #0]
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	0608      	lsls	r0, r1, #24
 8003d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d58:	d402      	bmi.n	8003d60 <_printf_i+0xe8>
 8003d5a:	0649      	lsls	r1, r1, #25
 8003d5c:	bf48      	it	mi
 8003d5e:	b2ad      	uxthmi	r5, r5
 8003d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d62:	4852      	ldr	r0, [pc, #328]	@ (8003eac <_printf_i+0x234>)
 8003d64:	6033      	str	r3, [r6, #0]
 8003d66:	bf14      	ite	ne
 8003d68:	230a      	movne	r3, #10
 8003d6a:	2308      	moveq	r3, #8
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d72:	6866      	ldr	r6, [r4, #4]
 8003d74:	60a6      	str	r6, [r4, #8]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	db05      	blt.n	8003d86 <_printf_i+0x10e>
 8003d7a:	6821      	ldr	r1, [r4, #0]
 8003d7c:	432e      	orrs	r6, r5
 8003d7e:	f021 0104 	bic.w	r1, r1, #4
 8003d82:	6021      	str	r1, [r4, #0]
 8003d84:	d04b      	beq.n	8003e1e <_printf_i+0x1a6>
 8003d86:	4616      	mov	r6, r2
 8003d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d90:	5dc7      	ldrb	r7, [r0, r7]
 8003d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d96:	462f      	mov	r7, r5
 8003d98:	42bb      	cmp	r3, r7
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	d9f4      	bls.n	8003d88 <_printf_i+0x110>
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d10b      	bne.n	8003dba <_printf_i+0x142>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	07df      	lsls	r7, r3, #31
 8003da6:	d508      	bpl.n	8003dba <_printf_i+0x142>
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	6861      	ldr	r1, [r4, #4]
 8003dac:	4299      	cmp	r1, r3
 8003dae:	bfde      	ittt	le
 8003db0:	2330      	movle	r3, #48	@ 0x30
 8003db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003dba:	1b92      	subs	r2, r2, r6
 8003dbc:	6122      	str	r2, [r4, #16]
 8003dbe:	f8cd a000 	str.w	sl, [sp]
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	aa03      	add	r2, sp, #12
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4640      	mov	r0, r8
 8003dca:	f7ff fee7 	bl	8003b9c <_printf_common>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d14a      	bne.n	8003e68 <_printf_i+0x1f0>
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dd6:	b004      	add	sp, #16
 8003dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f043 0320 	orr.w	r3, r3, #32
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	4832      	ldr	r0, [pc, #200]	@ (8003eb0 <_printf_i+0x238>)
 8003de6:	2778      	movs	r7, #120	@ 0x78
 8003de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	6831      	ldr	r1, [r6, #0]
 8003df0:	061f      	lsls	r7, r3, #24
 8003df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003df6:	d402      	bmi.n	8003dfe <_printf_i+0x186>
 8003df8:	065f      	lsls	r7, r3, #25
 8003dfa:	bf48      	it	mi
 8003dfc:	b2ad      	uxthmi	r5, r5
 8003dfe:	6031      	str	r1, [r6, #0]
 8003e00:	07d9      	lsls	r1, r3, #31
 8003e02:	bf44      	itt	mi
 8003e04:	f043 0320 	orrmi.w	r3, r3, #32
 8003e08:	6023      	strmi	r3, [r4, #0]
 8003e0a:	b11d      	cbz	r5, 8003e14 <_printf_i+0x19c>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	e7ad      	b.n	8003d6c <_printf_i+0xf4>
 8003e10:	4826      	ldr	r0, [pc, #152]	@ (8003eac <_printf_i+0x234>)
 8003e12:	e7e9      	b.n	8003de8 <_printf_i+0x170>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	f023 0320 	bic.w	r3, r3, #32
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	e7f6      	b.n	8003e0c <_printf_i+0x194>
 8003e1e:	4616      	mov	r6, r2
 8003e20:	e7bd      	b.n	8003d9e <_printf_i+0x126>
 8003e22:	6833      	ldr	r3, [r6, #0]
 8003e24:	6825      	ldr	r5, [r4, #0]
 8003e26:	6961      	ldr	r1, [r4, #20]
 8003e28:	1d18      	adds	r0, r3, #4
 8003e2a:	6030      	str	r0, [r6, #0]
 8003e2c:	062e      	lsls	r6, r5, #24
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	d501      	bpl.n	8003e36 <_printf_i+0x1be>
 8003e32:	6019      	str	r1, [r3, #0]
 8003e34:	e002      	b.n	8003e3c <_printf_i+0x1c4>
 8003e36:	0668      	lsls	r0, r5, #25
 8003e38:	d5fb      	bpl.n	8003e32 <_printf_i+0x1ba>
 8003e3a:	8019      	strh	r1, [r3, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	4616      	mov	r6, r2
 8003e42:	e7bc      	b.n	8003dbe <_printf_i+0x146>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	6032      	str	r2, [r6, #0]
 8003e4a:	681e      	ldr	r6, [r3, #0]
 8003e4c:	6862      	ldr	r2, [r4, #4]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4630      	mov	r0, r6
 8003e52:	f7fc f9ed 	bl	8000230 <memchr>
 8003e56:	b108      	cbz	r0, 8003e5c <_printf_i+0x1e4>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	6060      	str	r0, [r4, #4]
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	6123      	str	r3, [r4, #16]
 8003e60:	2300      	movs	r3, #0
 8003e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e66:	e7aa      	b.n	8003dbe <_printf_i+0x146>
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	4640      	mov	r0, r8
 8003e70:	47d0      	blx	sl
 8003e72:	3001      	adds	r0, #1
 8003e74:	d0ad      	beq.n	8003dd2 <_printf_i+0x15a>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	079b      	lsls	r3, r3, #30
 8003e7a:	d413      	bmi.n	8003ea4 <_printf_i+0x22c>
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	4298      	cmp	r0, r3
 8003e82:	bfb8      	it	lt
 8003e84:	4618      	movlt	r0, r3
 8003e86:	e7a6      	b.n	8003dd6 <_printf_i+0x15e>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4632      	mov	r2, r6
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4640      	mov	r0, r8
 8003e90:	47d0      	blx	sl
 8003e92:	3001      	adds	r0, #1
 8003e94:	d09d      	beq.n	8003dd2 <_printf_i+0x15a>
 8003e96:	3501      	adds	r5, #1
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	9903      	ldr	r1, [sp, #12]
 8003e9c:	1a5b      	subs	r3, r3, r1
 8003e9e:	42ab      	cmp	r3, r5
 8003ea0:	dcf2      	bgt.n	8003e88 <_printf_i+0x210>
 8003ea2:	e7eb      	b.n	8003e7c <_printf_i+0x204>
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	f104 0619 	add.w	r6, r4, #25
 8003eaa:	e7f5      	b.n	8003e98 <_printf_i+0x220>
 8003eac:	08004005 	.word	0x08004005
 8003eb0:	08004016 	.word	0x08004016

08003eb4 <memmove>:
 8003eb4:	4288      	cmp	r0, r1
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	eb01 0402 	add.w	r4, r1, r2
 8003ebc:	d902      	bls.n	8003ec4 <memmove+0x10>
 8003ebe:	4284      	cmp	r4, r0
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	d807      	bhi.n	8003ed4 <memmove+0x20>
 8003ec4:	1e43      	subs	r3, r0, #1
 8003ec6:	42a1      	cmp	r1, r4
 8003ec8:	d008      	beq.n	8003edc <memmove+0x28>
 8003eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ed2:	e7f8      	b.n	8003ec6 <memmove+0x12>
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	428a      	cmp	r2, r1
 8003eda:	d100      	bne.n	8003ede <memmove+0x2a>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ee6:	e7f7      	b.n	8003ed8 <memmove+0x24>

08003ee8 <_sbrk_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d06      	ldr	r5, [pc, #24]	@ (8003f04 <_sbrk_r+0x1c>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fc fcf4 	bl	80008e0 <_sbrk>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_sbrk_r+0x1a>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_sbrk_r+0x1a>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	2000031c 	.word	0x2000031c

08003f08 <memcpy>:
 8003f08:	440a      	add	r2, r1
 8003f0a:	4291      	cmp	r1, r2
 8003f0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f10:	d100      	bne.n	8003f14 <memcpy+0xc>
 8003f12:	4770      	bx	lr
 8003f14:	b510      	push	{r4, lr}
 8003f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f1e:	4291      	cmp	r1, r2
 8003f20:	d1f9      	bne.n	8003f16 <memcpy+0xe>
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_realloc_r>:
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f28:	4607      	mov	r7, r0
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	b921      	cbnz	r1, 8003f3a <_realloc_r+0x16>
 8003f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f34:	4611      	mov	r1, r2
 8003f36:	f7ff bc4d 	b.w	80037d4 <_malloc_r>
 8003f3a:	b92a      	cbnz	r2, 8003f48 <_realloc_r+0x24>
 8003f3c:	f7ff fbde 	bl	80036fc <_free_r>
 8003f40:	4625      	mov	r5, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f48:	f000 f81a 	bl	8003f80 <_malloc_usable_size_r>
 8003f4c:	4284      	cmp	r4, r0
 8003f4e:	4606      	mov	r6, r0
 8003f50:	d802      	bhi.n	8003f58 <_realloc_r+0x34>
 8003f52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f56:	d8f4      	bhi.n	8003f42 <_realloc_r+0x1e>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff fc3a 	bl	80037d4 <_malloc_r>
 8003f60:	4680      	mov	r8, r0
 8003f62:	b908      	cbnz	r0, 8003f68 <_realloc_r+0x44>
 8003f64:	4645      	mov	r5, r8
 8003f66:	e7ec      	b.n	8003f42 <_realloc_r+0x1e>
 8003f68:	42b4      	cmp	r4, r6
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	bf28      	it	cs
 8003f70:	4632      	movcs	r2, r6
 8003f72:	f7ff ffc9 	bl	8003f08 <memcpy>
 8003f76:	4629      	mov	r1, r5
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f7ff fbbf 	bl	80036fc <_free_r>
 8003f7e:	e7f1      	b.n	8003f64 <_realloc_r+0x40>

08003f80 <_malloc_usable_size_r>:
 8003f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f84:	1f18      	subs	r0, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bfbc      	itt	lt
 8003f8a:	580b      	ldrlt	r3, [r1, r0]
 8003f8c:	18c0      	addlt	r0, r0, r3
 8003f8e:	4770      	bx	lr

08003f90 <_init>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	bf00      	nop
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr

08003f9c <_fini>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr
