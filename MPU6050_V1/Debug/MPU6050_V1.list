
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004948  08004948  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004950  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  080049ac  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080049ac  00006344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011044  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d7  00000000  00000000  000170d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000196a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  0001a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260c9  00000000  00000000  0001ae4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112c3  00000000  00000000  00040f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed33a  00000000  00000000  000521d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  0013f558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00143074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080048ac 	.word	0x080048ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080048ac 	.word	0x080048ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MPU6050_Init>:
float gy_offset = 0.0f;
float gz_offset = 0.0f;


void MPU6050_Init(MPU6050_t *MPU6050, I2C_HandleTypeDef *Hi2c, uint16_t Address)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	80fb      	strh	r3, [r7, #6]
	MPU6050->hi2c 		= 	Hi2c;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	601a      	str	r2, [r3, #0]
	MPU6050->address 	= 	Address;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	88fa      	ldrh	r2, [r7, #6]
 8000604:	809a      	strh	r2, [r3, #4]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <MPU6050_WakeUp>:

HAL_StatusTypeDef MPU6050_WakeUp(MPU6050_t *MPU6050)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t Register;
	if ((MPU6050_MemRead(MPU6050, MPU6050_PWR_MGMT_1, &Register, 1)) != HAL_OK)
 800061a:	f107 020f 	add.w	r2, r7, #15
 800061e:	2301      	movs	r3, #1
 8000620:	216b      	movs	r1, #107	@ 0x6b
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f825 	bl	8000672 <MPU6050_MemRead>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MPU6050_WakeUp+0x20>
	{
		return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00b      	b.n	800064a <MPU6050_WakeUp+0x38>
	}

	//Setting 6th bit to 0 to disable sleep mode
	Register &= ~(1 << 6);		//wyzeruj bit 6
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000638:	b2db      	uxtb	r3, r3
 800063a:	73fb      	strb	r3, [r7, #15]
	return MPU6050_MemWrite(MPU6050, MPU6050_PWR_MGMT_1, Register);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	461a      	mov	r2, r3
 8000640:	216b      	movs	r1, #107	@ 0x6b
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f836 	bl	80006b4 <MPU6050_MemWrite>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <MPU6050_WHO_AM_I>:

HAL_StatusTypeDef MPU6050_WHO_AM_I (MPU6050_t *MPU6050, uint8_t *Who_am_I)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
	return MPU6050_MemRead(MPU6050, WHO_AM_I, Who_am_I, 1);
 800065c:	2301      	movs	r3, #1
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	2175      	movs	r1, #117	@ 0x75
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f805 	bl	8000672 <MPU6050_MemRead>
 8000668:	4603      	mov	r3, r0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <MPU6050_MemRead>:



HAL_StatusTypeDef MPU6050_MemRead(MPU6050_t *MPU6050, uint8_t Reg, uint8_t *Data, uint16_t Size)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b088      	sub	sp, #32
 8000676:	af04      	add	r7, sp, #16
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	461a      	mov	r2, r3
 800067e:	460b      	mov	r3, r1
 8000680:	72fb      	strb	r3, [r7, #11]
 8000682:	4613      	mov	r3, r2
 8000684:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(MPU6050->hi2c, (MPU6050->address << 1), Reg, I2C_MEMADD_SIZE_8BIT, Data, Size, HAL_MAX_DELAY);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	b299      	uxth	r1, r3
 8000692:	7afb      	ldrb	r3, [r7, #11]
 8000694:	b29a      	uxth	r2, r3
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	893b      	ldrh	r3, [r7, #8]
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	f001 f8c1 	bl	800182c <HAL_I2C_Mem_Read>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MPU6050_MemWrite>:

HAL_StatusTypeDef MPU6050_MemWrite(MPU6050_t *MPU6050, uint8_t Reg, uint8_t Data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
 80006c0:	4613      	mov	r3, r2
 80006c2:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(MPU6050->hi2c, (MPU6050->address << 1), Reg, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	889b      	ldrh	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	b299      	uxth	r1, r3
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	1cbb      	adds	r3, r7, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	f000 ff8e 	bl	8001604 <HAL_I2C_Mem_Write>
 80006e8:	4603      	mov	r3, r0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <MPU6050_SetGyroRange>:

HAL_StatusTypeDef MPU6050_SetGyroRange(MPU6050_t *MPU6050)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t Register;
	if ((MPU6050_MemRead(MPU6050, GYRO_CONFIG, &Register, 1)) != HAL_OK)
 80006fa:	f107 020f 	add.w	r2, r7, #15
 80006fe:	2301      	movs	r3, #1
 8000700:	211b      	movs	r1, #27
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ffb5 	bl	8000672 <MPU6050_MemRead>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MPU6050_SetGyroRange+0x20>
	{
		return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e00b      	b.n	800072a <MPU6050_SetGyroRange+0x38>
	}

	//setting FS_SEL[1:0] in order to setfull scale range
	Register &= (~((1 << 4) | (1 << 5)));		//setting 250 stopni na sekunde
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000718:	b2db      	uxtb	r3, r3
 800071a:	73fb      	strb	r3, [r7, #15]
	return MPU6050_MemWrite(MPU6050, GYRO_CONFIG, Register);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	461a      	mov	r2, r3
 8000720:	211b      	movs	r1, #27
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff ffc6 	bl	80006b4 <MPU6050_MemWrite>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MPU6050_ReadAcceleration>:
	Register &= (~((1 << 4)|(1 << 5)));		//setting acceleration to -/+ 2g
	return MPU6050_MemWrite(MPU6050, ACCEL_CONFIG, Register);
}

HAL_StatusTypeDef MPU6050_ReadAcceleration(MPU6050_t *MPU6050, Accel_t *Accelerations)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]


	uint8_t AccelData[6];

	//Read Acceleration value
	if ((MPU6050_MemRead(MPU6050, ACCEL_XOUT_H, AccelData, 6)) == HAL_ERROR)
 800073e:	f107 0208 	add.w	r2, r7, #8
 8000742:	2306      	movs	r3, #6
 8000744:	213b      	movs	r1, #59	@ 0x3b
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff93 	bl	8000672 <MPU6050_MemRead>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d101      	bne.n	8000756 <MPU6050_ReadAcceleration+0x22>
	{
		return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e042      	b.n	80007dc <MPU6050_ReadAcceleration+0xa8>
	*Gx = AccelX.Var16u;
	*Gy = AccelY.Var16u;
	*Gz = AccelZ.Var16u;
	*/

	Accelerations->AccelX = ((int16_t) (AccelData[0] << 8) | (AccelData[1])) / 16384.0f;
 8000756:	7a3b      	ldrb	r3, [r7, #8]
 8000758:	b21b      	sxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21b      	sxth	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	7a7b      	ldrb	r3, [r7, #9]
 8000762:	4313      	orrs	r3, r2
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800076c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80007e4 <MPU6050_ReadAcceleration+0xb0>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	b21a      	sxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	801a      	strh	r2, [r3, #0]
	Accelerations->AccelY = ((int16_t) (AccelData[2] << 8) | (AccelData[3])) / 16384.0f;
 8000782:	7abb      	ldrb	r3, [r7, #10]
 8000784:	b21b      	sxth	r3, r3
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21b      	sxth	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	4313      	orrs	r3, r2
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000798:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80007e4 <MPU6050_ReadAcceleration+0xb0>
 800079c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	805a      	strh	r2, [r3, #2]
	Accelerations->AccelZ = ((int16_t) (AccelData[4] << 8) | (AccelData[5])) / 16384.0f;
 80007ae:	7b3b      	ldrb	r3, [r7, #12]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80007e4 <MPU6050_ReadAcceleration+0xb0>
 80007c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d0:	ee17 3a90 	vmov	r3, s15
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	809a      	strh	r2, [r3, #4]


	return HAL_OK;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	46800000 	.word	0x46800000

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a2e      	ldr	r2, [pc, #184]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a28      	ldr	r2, [pc, #160]	@ (80008bc <MX_GPIO_Init+0xd4>)
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <MX_GPIO_Init+0xd4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_GPIO_Init+0xd4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f000 fdf7 	bl	8001458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000870:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <MX_GPIO_Init+0xd8>)
 8000882:	f000 fc67 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 fc58 	bl	8001154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2028      	movs	r0, #40	@ 0x28
 80008aa:	f000 fc1e 	bl	80010ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ae:	2028      	movs	r0, #40	@ 0x28
 80008b0:	f000 fc35 	bl	800111e <HAL_NVIC_EnableIRQ>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_I2C1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_I2C1_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000900:	f000 fde5 	bl	80014ce <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f90a 	bl	8000b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000912:	f001 fb67 	bl	8001fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f901 	bl	8000b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000924:	f001 fba9 	bl	800207a <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f8f8 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000078 	.word	0x20000078
 800093c:	40005400 	.word	0x40005400
 8000940:	40b285c2 	.word	0x40b285c2

08000944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09e      	sub	sp, #120	@ 0x78
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2254      	movs	r2, #84	@ 0x54
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fb23 	bl	8003fb0 <memset>
  if(i2cHandle->Instance==I2C1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1f      	ldr	r2, [pc, #124]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d136      	bne.n	80009e2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4618      	mov	r0, r3
 8000982:	f002 f9a9 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f000 f8c9 	bl	8000b22 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	2312      	movs	r3, #18
 80009b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <HAL_I2C_MspInit+0xb0>)
 80009c6:	f000 fbc5 	bl	8001154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	3778      	adds	r7, #120	@ 0x78
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fa07 	bl	8000e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f844 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff fef0 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a08:	f7ff ff5c 	bl	80008c4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000a0c:	f000 f934 	bl	8000c78 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialize MPU6050
  MPU6050_Init(&MPU6050, &hi2c1, 0x68);
 8000a10:	2268      	movs	r2, #104	@ 0x68
 8000a12:	4917      	ldr	r1, [pc, #92]	@ (8000a70 <main+0x78>)
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <main+0x7c>)
 8000a16:	f7ff fde9 	bl	80005ec <MPU6050_Init>

  //check adress correctness
  MPU6050_WHO_AM_I(&MPU6050, &DeviceAddress);
 8000a1a:	4917      	ldr	r1, [pc, #92]	@ (8000a78 <main+0x80>)
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <main+0x7c>)
 8000a1e:	f7ff fe18 	bl	8000652 <MPU6050_WHO_AM_I>

  HAL_UART_Transmit(&hlpuart1, &DeviceAddress, sizeof(uint8_t), HAL_MAX_DELAY);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a26:	2201      	movs	r2, #1
 8000a28:	4913      	ldr	r1, [pc, #76]	@ (8000a78 <main+0x80>)
 8000a2a:	4814      	ldr	r0, [pc, #80]	@ (8000a7c <main+0x84>)
 8000a2c:	f002 fbf2 	bl	8003214 <HAL_UART_Transmit>

  MPU6050_WakeUp(&MPU6050);
 8000a30:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <main+0x7c>)
 8000a32:	f7ff fdee 	bl	8000612 <MPU6050_WakeUp>
  MPU6050_SetGyroRange(&MPU6050);
 8000a36:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <main+0x7c>)
 8000a38:	f7ff fe5b 	bl	80006f2 <MPU6050_SetGyroRange>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_ReadAcceleration(&MPU6050, &Accelerations);
 8000a3c:	4910      	ldr	r1, [pc, #64]	@ (8000a80 <main+0x88>)
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <main+0x7c>)
 8000a40:	f7ff fe78 	bl	8000734 <MPU6050_ReadAcceleration>

	  sprintf(Message, "X: %d\n\r", Accelerations.AccelX);
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <main+0x88>)
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <main+0x8c>)
 8000a4e:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <main+0x90>)
 8000a50:	f003 fa8c 	bl	8003f6c <siprintf>
	  HAL_UART_Transmit(&hlpuart1, Message, sizeof(Message), HAL_MAX_DELAY);
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	490b      	ldr	r1, [pc, #44]	@ (8000a88 <main+0x90>)
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <main+0x84>)
 8000a5e:	f002 fbd9 	bl	8003214 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a66:	f000 fa43 	bl	8000ef0 <HAL_Delay>
	  MPU6050_ReadAcceleration(&MPU6050, &Accelerations);
 8000a6a:	bf00      	nop
 8000a6c:	e7e6      	b.n	8000a3c <main+0x44>
 8000a6e:	bf00      	nop
 8000a70:	20000078 	.word	0x20000078
 8000a74:	200000cc 	.word	0x200000cc
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	20000164 	.word	0x20000164
 8000a80:	200000d8 	.word	0x200000d8
 8000a84:	080048c4 	.word	0x080048c4
 8000a88:	200000e0 	.word	0x200000e0

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	@ 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	2238      	movs	r2, #56	@ 0x38
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fa88 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f001 fb30 	bl	8002114 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abe:	2340      	movs	r3, #64	@ 0x40
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ace:	2355      	movs	r3, #85	@ 0x55
 8000ad0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fbca 	bl	800227c <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000aee:	f000 f818 	bl	8000b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2303      	movs	r3, #3
 8000af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fec8 	bl	80028a0 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b16:	f000 f804 	bl	8000b22 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b26:	b672      	cpsid	i
}
 8000b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b66:	f001 fb79 	bl	800225c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f971 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bda:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bde:	f000 fc53 	bl	8001488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f003 f9d2 	bl	8003fc0 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20020000 	.word	0x20020000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000160 	.word	0x20000160
 8000c50:	20000348 	.word	0x20000348

08000c54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <MX_LPUART1_UART_Init+0x90>)
 8000c80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cba:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000cbc:	f002 fa5a 	bl	8003174 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f7ff ff2c 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000cce:	f003 f883 	bl	8003dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000cd8:	f7ff ff23 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000ce0:	f003 f8b8 	bl	8003e54 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000cea:	f7ff ff1a 	bl	8000b22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_LPUART1_UART_Init+0x8c>)
 8000cf0:	f003 f839 	bl	8003d66 <HAL_UARTEx_DisableFifoMode>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000cfa:	f7ff ff12 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000164 	.word	0x20000164
 8000d08:	40008000 	.word	0x40008000

08000d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09e      	sub	sp, #120	@ 0x78
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2254      	movs	r2, #84	@ 0x54
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 f93f 	bl	8003fb0 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d136      	bne.n	8000daa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 ffc5 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fee5 	bl	8000b22 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f000 f9d5 	bl	8001154 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	3778      	adds	r7, #120	@ 0x78
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40008000 	.word	0x40008000
 8000db8:	40021000 	.word	0x40021000

08000dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff ff48 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 f8ef 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dee:	f7ff fe03 	bl	80009f8 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e00:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 8000e04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e08:	20000344 	.word	0x20000344

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>

08000e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f95b 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f80e 	bl	8000e40 <HAL_InitTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e30:	f7ff fe7e 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	79fb      	ldrb	r3, [r7, #7]

}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_InitTick+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d022      	beq.n	8000e9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_InitTick+0x6c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <HAL_InitTick+0x68>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f966 	bl	800113a <HAL_SYSTICK_Config>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10f      	bne.n	8000e94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b0f      	cmp	r3, #15
 8000e78:	d809      	bhi.n	8000e8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e82:	f000 f932 	bl	80010ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_InitTick+0x70>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e004      	b.n	8000e9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e001      	b.n	8000e9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_IncTick+0x1c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a03      	ldr	r2, [pc, #12]	@ (8000ed0 <HAL_IncTick+0x1c>)
 8000ec4:	6013      	str	r3, [r2, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	200001f8 	.word	0x200001f8
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200001f8 	.word	0x200001f8

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f08:	d004      	beq.n	8000f14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_Delay+0x40>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f14:	bf00      	nop
 8000f16:	f7ff ffdf 	bl	8000ed8 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d8f7      	bhi.n	8000f16 <HAL_Delay+0x26>
  {
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff40 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff90 	bl	8001028 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5f 	bl	8000fd4 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff33 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa4 	bl	8001090 <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001162:	e15a      	b.n	800141a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 814c 	beq.w	8001414 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d005      	beq.n	8001194 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001190:	2b02      	cmp	r3, #2
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 0201 	and.w	r2, r3, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d017      	beq.n	8001232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80a6 	beq.w	8001414 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <HAL_GPIO_Init+0x2e4>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001438 <HAL_GPIO_Init+0x2e4>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d4:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <HAL_GPIO_Init+0x2e4>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e0:	4a56      	ldr	r2, [pc, #344]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800130a:	d01f      	beq.n	800134c <HAL_GPIO_Init+0x1f8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <HAL_GPIO_Init+0x2ec>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d019      	beq.n	8001348 <HAL_GPIO_Init+0x1f4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_GPIO_Init+0x2f0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1f0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4a      	ldr	r2, [pc, #296]	@ (8001448 <HAL_GPIO_Init+0x2f4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1ec>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a49      	ldr	r2, [pc, #292]	@ (800144c <HAL_GPIO_Init+0x2f8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1e8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a48      	ldr	r2, [pc, #288]	@ (8001450 <HAL_GPIO_Init+0x2fc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001334:	2305      	movs	r3, #5
 8001336:	e00a      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 8001338:	2306      	movs	r3, #6
 800133a:	e008      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 800133c:	2304      	movs	r3, #4
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 8001340:	2303      	movs	r3, #3
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1fa>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135e:	4937      	ldr	r1, [pc, #220]	@ (800143c <HAL_GPIO_Init+0x2e8>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136c:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <HAL_GPIO_Init+0x300>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001390:	4a30      	ldr	r2, [pc, #192]	@ (8001454 <HAL_GPIO_Init+0x300>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_GPIO_Init+0x300>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ba:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_GPIO_Init+0x300>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_GPIO_Init+0x300>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f ae9d 	bne.w	8001164 <HAL_GPIO_Init+0x10>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	48001000 	.word	0x48001000
 8001450:	48001400 	.word	0x48001400
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f806 	bl	80014b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e08d      	b.n	80015fc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fa25 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2224      	movs	r2, #36	@ 0x24
 80014fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800151e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800152e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	e006      	b.n	8001556 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001554:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d108      	bne.n	8001570 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e007      	b.n	8001580 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800157e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001592:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69d9      	ldr	r1, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	817b      	strh	r3, [r7, #10]
 8001616:	460b      	mov	r3, r1
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 80f9 	bne.w	800181e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_I2C_Mem_Write+0x34>
 8001632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ed      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Mem_Write+0x4e>
 800164e:	2302      	movs	r3, #2
 8001650:	e0e6      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800165a:	f7ff fc3d 	bl	8000ed8 <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fac3 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d1      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2221      	movs	r2, #33	@ 0x21
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800169c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a4:	88f8      	ldrh	r0, [r7, #6]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f9d3 	bl	8001a60 <I2C_RequestMemoryWrite>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a9      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2bff      	cmp	r3, #255	@ 0xff
 80016d4:	d90e      	bls.n	80016f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	22ff      	movs	r2, #255	@ 0xff
 80016da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	8979      	ldrh	r1, [r7, #10]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fc47 	bl	8001f80 <I2C_TransferConfig>
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fc36 	bl	8001f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fac6 	bl	8001caa <I2C_WaitOnTXISFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e07b      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d034      	beq.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001766:	2b00      	cmp	r3, #0
 8001768:	d130      	bne.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa3f 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e04d      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2bff      	cmp	r3, #255	@ 0xff
 800178c:	d90e      	bls.n	80017ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	@ 0xff
 8001792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fbeb 	bl	8001f80 <I2C_TransferConfig>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fbda 	bl	8001f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d19e      	bne.n	8001714 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 faac 	bl	8001d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01a      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_I2C_Mem_Write+0x224>)
 80017fe:	400b      	ands	r3, r1
 8001800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
  }
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	f040 80fd 	bne.w	8001a4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_I2C_Mem_Read+0x34>
 800185a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0f1      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_I2C_Mem_Read+0x4e>
 8001876:	2302      	movs	r3, #2
 8001878:	e0ea      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001882:	f7ff fb29 	bl	8000ed8 <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f9af 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0d5      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2222      	movs	r2, #34	@ 0x22
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4603      	mov	r3, r0
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f913 	bl	8001b08 <I2C_RequestMemoryRead>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0ad      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2bff      	cmp	r3, #255	@ 0xff
 80018fc:	d90e      	bls.n	800191c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	22ff      	movs	r2, #255	@ 0xff
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	b2da      	uxtb	r2, r3
 800190a:	8979      	ldrh	r1, [r7, #10]
 800190c:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <HAL_I2C_Mem_Read+0x22c>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fb33 	bl	8001f80 <I2C_TransferConfig>
 800191a:	e00f      	b.n	800193c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192a:	b2da      	uxtb	r2, r3
 800192c:	8979      	ldrh	r1, [r7, #10]
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_I2C_Mem_Read+0x22c>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fb22 	bl	8001f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f956 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07c      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d130      	bne.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f927 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04d      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	@ 0xff
 80019bc:	d90e      	bls.n	80019dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	22ff      	movs	r2, #255	@ 0xff
 80019c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fad3 	bl	8001f80 <I2C_TransferConfig>
 80019da:	e00f      	b.n	80019fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fac2 	bl	8001f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d19a      	bne.n	800193c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f994 	bl	8001d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01a      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_I2C_Mem_Read+0x230>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	80002400 	.word	0x80002400
 8001a5c:	fe00e800 	.word	0xfe00e800

08001a60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	817b      	strh	r3, [r7, #10]
 8001a72:	460b      	mov	r3, r1
 8001a74:	813b      	strh	r3, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <I2C_RequestMemoryWrite+0xa4>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fa79 	bl	8001f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f909 	bl	8001caa <I2C_WaitOnTXISFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e02c      	b.n	8001afc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ab2:	e015      	b.n	8001ae0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab4:	893b      	ldrh	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	69b9      	ldr	r1, [r7, #24]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f8ef 	bl	8001caa <I2C_WaitOnTXISFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e012      	b.n	8001afc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ad6:	893b      	ldrh	r3, [r7, #8]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f884 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	80002000 	.word	0x80002000

08001b08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	8979      	ldrh	r1, [r7, #10]
 8001b28:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <I2C_RequestMemoryRead+0xa4>)
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa26 	bl	8001f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f8b6 	bl	8001caa <I2C_WaitOnTXISFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e02c      	b.n	8001ba2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b58:	e015      	b.n	8001b86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b5a:	893b      	ldrh	r3, [r7, #8]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f89c 	bl	8001caa <I2C_WaitOnTXISFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e012      	b.n	8001ba2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f831 	bl	8001bf8 <I2C_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	80002000 	.word	0x80002000

08001bb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d103      	bne.n	8001bce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d007      	beq.n	8001bec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	619a      	str	r2, [r3, #24]
  }
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c08:	e03b      	b.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f8d6 	bl	8001dc0 <I2C_IsErrorOccurred>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c24:	d02d      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c26:	f7ff f957 	bl	8000ed8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d122      	bne.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4013      	ands	r3, r2
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d113      	bne.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f043 0220 	orr.w	r2, r3, #32
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d0b4      	beq.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb6:	e033      	b.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f87f 	bl	8001dc0 <I2C_IsErrorOccurred>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e031      	b.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cd2:	d025      	beq.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7ff f900 	bl	8000ed8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d302      	bcc.n	8001cea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d11a      	bne.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d013      	beq.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e007      	b.n	8001d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d1c4      	bne.n	8001cb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d44:	e02f      	b.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f838 	bl	8001dc0 <I2C_IsErrorOccurred>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e02d      	b.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f8bd 	bl	8000ed8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11a      	bne.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d013      	beq.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e007      	b.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d1c8      	bne.n	8001d46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d068      	beq.n	8001ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2210      	movs	r2, #16
 8001df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df4:	e049      	b.n	8001e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dfc:	d045      	beq.n	8001e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff f86b 	bl	8000ed8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_IsErrorOccurred+0x54>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d13a      	bne.n	8001e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e36:	d121      	bne.n	8001e7c <I2C_IsErrorOccurred+0xbc>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e3e:	d01d      	beq.n	8001e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d01a      	beq.n	8001e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e56:	f7ff f83f 	bl	8000ed8 <HAL_GetTick>
 8001e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e5c:	e00e      	b.n	8001e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e5e:	f7ff f83b 	bl	8000ed8 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b19      	cmp	r3, #25
 8001e6a:	d907      	bls.n	8001e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e7a:	e006      	b.n	8001e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d1e9      	bne.n	8001e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d003      	beq.n	8001ea0 <I2C_IsErrorOccurred+0xe0>
 8001e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0aa      	beq.n	8001df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2220      	movs	r2, #32
 8001eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01c      	beq.n	8001f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fe3b 	bl	8001bb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <I2C_IsErrorOccurred+0x1bc>)
 8001f46:	400b      	ands	r3, r1
 8001f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	fe00e800 	.word	0xfe00e800

08001f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f98:	7a7b      	ldrb	r3, [r7, #9]
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	0d5b      	lsrs	r3, r3, #21
 8001fba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <I2C_TransferConfig+0x60>)
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	ea02 0103 	and.w	r1, r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	03ff63ff 	.word	0x03ff63ff

08001fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d138      	bne.n	800206c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002004:	2302      	movs	r3, #2
 8002006:	e032      	b.n	800206e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b20      	cmp	r3, #32
 800208e:	d139      	bne.n	8002104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800209a:	2302      	movs	r3, #2
 800209c:	e033      	b.n	8002106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2224      	movs	r2, #36	@ 0x24
 80020aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d141      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212e:	d131      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002130:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	4a46      	ldr	r2, [pc, #280]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800213c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	4b43      	ldr	r3, [pc, #268]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002148:	4a41      	ldr	r2, [pc, #260]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002150:	4b40      	ldr	r3, [pc, #256]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2232      	movs	r2, #50	@ 0x32
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a3f      	ldr	r2, [pc, #252]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002166:	e002      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216e:	4b38      	ldr	r3, [pc, #224]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d102      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f2      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b33      	ldr	r3, [pc, #204]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218e:	d158      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e057      	b.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	4b2e      	ldr	r3, [pc, #184]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219a:	4a2d      	ldr	r2, [pc, #180]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021a4:	e04d      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ac:	d141      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ae:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ba:	d131      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021bc:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021c2:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2232      	movs	r2, #50	@ 0x32
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f2:	e002      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002206:	d102      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f2      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221a:	d112      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e011      	b.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002230:	e007      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002240:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40007000 	.word	0x40007000
 8002254:	20000000 	.word	0x20000000
 8002258:	431bde83 	.word	0x431bde83

0800225c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800226a:	6093      	str	r3, [r2, #8]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e2fe      	b.n	800288c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d075      	beq.n	8002386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b97      	ldr	r3, [pc, #604]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a4:	4b94      	ldr	r3, [pc, #592]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x3e>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_OscConfig+0x44>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b8d      	ldr	r3, [pc, #564]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d05b      	beq.n	8002384 <HAL_RCC_OscConfig+0x108>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d157      	bne.n	8002384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e2d9      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x74>
 80022e2:	4b85      	ldr	r3, [pc, #532]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a84      	ldr	r2, [pc, #528]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b7f      	ldr	r3, [pc, #508]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7e      	ldr	r2, [pc, #504]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b7c      	ldr	r3, [pc, #496]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7b      	ldr	r2, [pc, #492]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 8002314:	4b78      	ldr	r3, [pc, #480]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a77      	ldr	r2, [pc, #476]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b75      	ldr	r3, [pc, #468]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a74      	ldr	r2, [pc, #464]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fdd0 	bl	8000ed8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe fdcc 	bl	8000ed8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	@ 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e29e      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	4b6a      	ldr	r3, [pc, #424]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xc0>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fdbc 	bl	8000ed8 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fdb8 	bl	8000ed8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e28a      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xe8>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x136>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_OscConfig+0x13c>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11f      	bne.n	80023f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	4b4f      	ldr	r3, [pc, #316]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x154>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e25d      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b49      	ldr	r3, [pc, #292]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	4946      	ldr	r1, [pc, #280]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023e4:	4b45      	ldr	r3, [pc, #276]	@ (80024fc <HAL_RCC_OscConfig+0x280>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fd29 	bl	8000e40 <HAL_InitTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d043      	beq.n	800247c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e249      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3c      	ldr	r2, [pc, #240]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fd64 	bl	8000ed8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe fd60 	bl	8000ed8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e232      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002426:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	492d      	ldr	r1, [pc, #180]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
 8002446:	e01a      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002448:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2a      	ldr	r2, [pc, #168]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800244e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fd40 	bl	8000ed8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fd3c 	bl	8000ed8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e20e      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246e:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1e0>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d041      	beq.n	800250e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01c      	beq.n	80024cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002498:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fd19 	bl	8000ed8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fd15 	bl	8000ed8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1e7      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024bc:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ef      	beq.n	80024aa <HAL_RCC_OscConfig+0x22e>
 80024ca:	e020      	b.n	800250e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fcfc 	bl	8000ed8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e2:	e00d      	b.n	8002500 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fcf8 	bl	8000ed8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d906      	bls.n	8002500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1ca      	b.n	800288c <HAL_RCC_OscConfig+0x610>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002500:	4b8c      	ldr	r3, [pc, #560]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ea      	bne.n	80024e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80a6 	beq.w	8002668 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002520:	4b84      	ldr	r3, [pc, #528]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x2b4>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x2b6>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b7f      	ldr	r3, [pc, #508]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a7e      	ldr	r2, [pc, #504]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
 8002542:	4b7c      	ldr	r3, [pc, #496]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4b79      	ldr	r3, [pc, #484]	@ (8002738 <HAL_RCC_OscConfig+0x4bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255e:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_RCC_OscConfig+0x4bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	@ (8002738 <HAL_RCC_OscConfig+0x4bc>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7fe fcb5 	bl	8000ed8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7fe fcb1 	bl	8000ed8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e183      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002584:	4b6c      	ldr	r3, [pc, #432]	@ (8002738 <HAL_RCC_OscConfig+0x4bc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_RCC_OscConfig+0x32e>
 8002598:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a8:	e024      	b.n	80025f4 <HAL_RCC_OscConfig+0x378>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d110      	bne.n	80025d4 <HAL_RCC_OscConfig+0x358>
 80025b2:	4b60      	ldr	r3, [pc, #384]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d2:	e00f      	b.n	80025f4 <HAL_RCC_OscConfig+0x378>
 80025d4:	4b57      	ldr	r3, [pc, #348]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	4a56      	ldr	r2, [pc, #344]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e4:	4b53      	ldr	r3, [pc, #332]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	4a52      	ldr	r2, [pc, #328]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fc6c 	bl	8000ed8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fc68 	bl	8000ed8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e138      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261a:	4b46      	ldr	r3, [pc, #280]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ed      	beq.n	8002604 <HAL_RCC_OscConfig+0x388>
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fc55 	bl	8000ed8 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fc51 	bl	8000ed8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e121      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002648:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ed      	bne.n	8002632 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b35      	ldr	r3, [pc, #212]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d03c      	beq.n	80026ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800267c:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002682:	4a2c      	ldr	r2, [pc, #176]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fc24 	bl	8000ed8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002694:	f7fe fc20 	bl	8000ed8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0f2      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a6:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <HAL_RCC_OscConfig+0x418>
 80026b4:	e01b      	b.n	80026ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80026b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fc07 	bl	8000ed8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ce:	f7fe fc03 	bl	8000ed8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0d5      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80c9 	beq.w	800288a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b0c      	cmp	r3, #12
 8002702:	f000 8083 	beq.w	800280c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d15e      	bne.n	80027cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a08      	ldr	r2, [pc, #32]	@ (8002734 <HAL_RCC_OscConfig+0x4b8>)
 8002714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fbdd 	bl	8000ed8 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	e00c      	b.n	800273c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe fbd9 	bl	8000ed8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d905      	bls.n	800273c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ab      	b.n	800288c <HAL_RCC_OscConfig+0x610>
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	4b55      	ldr	r3, [pc, #340]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ec      	bne.n	8002722 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b52      	ldr	r3, [pc, #328]	@ (8002898 <HAL_RCC_OscConfig+0x61c>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6a11      	ldr	r1, [r2, #32]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002758:	3a01      	subs	r2, #1
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002762:	0212      	lsls	r2, r2, #8
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0552      	lsls	r2, r2, #21
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0652      	lsls	r2, r2, #25
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002782:	06d2      	lsls	r2, r2, #27
 8002784:	430a      	orrs	r2, r1
 8002786:	4943      	ldr	r1, [pc, #268]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a40      	ldr	r2, [pc, #256]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002798:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a3d      	ldr	r2, [pc, #244]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb98 	bl	8000ed8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fb94 	bl	8000ed8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e066      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	4b35      	ldr	r3, [pc, #212]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x530>
 80027ca:	e05e      	b.n	800288a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a30      	ldr	r2, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fb7e 	bl	8000ed8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fb7a 	bl	8000ed8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04c      	b.n	800288c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027fe:	4b25      	ldr	r3, [pc, #148]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4924      	ldr	r1, [pc, #144]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <HAL_RCC_OscConfig+0x620>)
 8002806:	4013      	ands	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
 800280a:	e03e      	b.n	800288a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e039      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002818:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_RCC_OscConfig+0x618>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	429a      	cmp	r2, r3
 800282a:	d12c      	bne.n	8002886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d123      	bne.n	8002886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11b      	bne.n	8002886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d113      	bne.n	8002886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d109      	bne.n	8002886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	019f800c 	.word	0x019f800c
 800289c:	feeefffc 	.word	0xfeeefffc

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e11e      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b91      	ldr	r3, [pc, #580]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d910      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b8e      	ldr	r3, [pc, #568]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	498c      	ldr	r1, [pc, #560]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e106      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d073      	beq.n	80029dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d129      	bne.n	8002950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fc:	4b81      	ldr	r3, [pc, #516]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0f4      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800290c:	f000 f99e 	bl	8002c4c <RCC_GetSysClockFreqFromPLLSource>
 8002910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4a7c      	ldr	r2, [pc, #496]	@ (8002b08 <HAL_RCC_ClockConfig+0x268>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d93f      	bls.n	800299a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800291a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800292e:	2b00      	cmp	r3, #0
 8002930:	d033      	beq.n	800299a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12f      	bne.n	800299a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800293a:	4b72      	ldr	r3, [pc, #456]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002942:	4a70      	ldr	r2, [pc, #448]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e024      	b.n	800299a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d107      	bne.n	8002968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002958:	4b6a      	ldr	r3, [pc, #424]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0c6      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0be      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002978:	f000 f8ce 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 800297c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4a61      	ldr	r2, [pc, #388]	@ (8002b08 <HAL_RCC_ClockConfig+0x268>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d909      	bls.n	800299a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800298e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b5a      	ldr	r3, [pc, #360]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4957      	ldr	r1, [pc, #348]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fe fa94 	bl	8000ed8 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fa90 	bl	8000ed8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e095      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a42      	ldr	r2, [pc, #264]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a14:	4a3b      	ldr	r2, [pc, #236]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4936      	ldr	r1, [pc, #216]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a36:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4a32      	ldr	r2, [pc, #200]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a42:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d21d      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	4b2b      	ldr	r3, [pc, #172]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 020f 	bic.w	r2, r3, #15
 8002a58:	4929      	ldr	r1, [pc, #164]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fa3a 	bl	8000ed8 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fa36 	bl	8000ed8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e03b      	b.n	8002af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1ed      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4917      	ldr	r1, [pc, #92]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490f      	ldr	r1, [pc, #60]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aca:	f000 f825 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <HAL_RCC_ClockConfig+0x264>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <HAL_RCC_ClockConfig+0x26c>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <HAL_RCC_ClockConfig+0x270>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_RCC_ClockConfig+0x274>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f9a6 	bl	8000e40 <HAL_InitTick>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	04c4b400 	.word	0x04c4b400
 8002b0c:	080048cc 	.word	0x080048cc
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e047      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b3c:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e03e      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b42:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d136      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b58:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d10c      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	68d2      	ldr	r2, [r2, #12]
 8002b78:	0a12      	lsrs	r2, r2, #8
 8002b7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
      break;
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b86:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4a10      	ldr	r2, [pc, #64]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	0a12      	lsrs	r2, r2, #8
 8002b94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0e5b      	lsrs	r3, r3, #25
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e001      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bc0:	693b      	ldr	r3, [r7, #16]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	016e3600 	.word	0x016e3600

08002bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4904      	ldr	r1, [pc, #16]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080048dc 	.word	0x080048dc

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c24:	f7ff ffda 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0adb      	lsrs	r3, r3, #11
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4904      	ldr	r1, [pc, #16]	@ (8002c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	080048dc 	.word	0x080048dc

08002c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d10c      	bne.n	8002c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c70:	4a17      	ldr	r2, [pc, #92]	@ (8002cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c7a:	68d2      	ldr	r2, [r2, #12]
 8002c7c:	0a12      	lsrs	r2, r2, #8
 8002c7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
    break;
 8002c88:	e00c      	b.n	8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	0a12      	lsrs	r2, r2, #8
 8002c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    break;
 8002ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0e5b      	lsrs	r3, r3, #25
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cbe:	687b      	ldr	r3, [r7, #4]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	016e3600 	.word	0x016e3600
 8002cd4:	00f42400 	.word	0x00f42400

08002cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8098 	beq.w	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d12:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d22:	4b3a      	ldr	r3, [pc, #232]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a39      	ldr	r2, [pc, #228]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f8d3 	bl	8000ed8 <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d34:	e009      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe f8cf 	bl	8000ed8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d902      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	74fb      	strb	r3, [r7, #19]
        break;
 8002d48:	e005      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4a:	4b30      	ldr	r3, [pc, #192]	@ (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ef      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d159      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01e      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d019      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d78:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da4:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f88f 	bl	8000ed8 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f88b 	bl	8000ed8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d902      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ec      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dea:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df8:	4903      	ldr	r1, [pc, #12]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e00:	e008      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	74bb      	strb	r3, [r7, #18]
 8002e06:	e005      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e14:	7c7b      	ldrb	r3, [r7, #17]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4ba7      	ldr	r3, [pc, #668]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	4aa6      	ldr	r2, [pc, #664]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e32:	4ba1      	ldr	r3, [pc, #644]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	499d      	ldr	r1, [pc, #628]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e54:	4b98      	ldr	r3, [pc, #608]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 020c 	bic.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4995      	ldr	r1, [pc, #596]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e76:	4b90      	ldr	r3, [pc, #576]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	498c      	ldr	r1, [pc, #560]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e98:	4b87      	ldr	r3, [pc, #540]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	4984      	ldr	r1, [pc, #528]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eba:	4b7f      	ldr	r3, [pc, #508]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	497b      	ldr	r1, [pc, #492]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002edc:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4973      	ldr	r1, [pc, #460]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efe:	4b6e      	ldr	r3, [pc, #440]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	496a      	ldr	r1, [pc, #424]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f20:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4962      	ldr	r1, [pc, #392]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f42:	4b5d      	ldr	r3, [pc, #372]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	4959      	ldr	r1, [pc, #356]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f64:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	4951      	ldr	r1, [pc, #324]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4948      	ldr	r1, [pc, #288]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4940      	ldr	r1, [pc, #256]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fe0:	4b35      	ldr	r3, [pc, #212]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fee:	4932      	ldr	r1, [pc, #200]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a2c      	ldr	r2, [pc, #176]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003018:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4924      	ldr	r1, [pc, #144]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003036:	d105      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a1e      	ldr	r2, [pc, #120]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003042:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	4916      	ldr	r1, [pc, #88]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a10      	ldr	r2, [pc, #64]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	4908      	ldr	r1, [pc, #32]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a6:	d109      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a8:	4b03      	ldr	r3, [pc, #12]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a02      	ldr	r2, [pc, #8]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030b2:	60d3      	str	r3, [r2, #12]
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030c8:	4b29      	ldr	r3, [pc, #164]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	4926      	ldr	r1, [pc, #152]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030e6:	d105      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a20      	ldr	r2, [pc, #128]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003100:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310e:	4918      	ldr	r1, [pc, #96]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311e:	d105      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a12      	ldr	r2, [pc, #72]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800313e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	490a      	ldr	r1, [pc, #40]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003156:	d105      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800315e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003164:	7cbb      	ldrb	r3, [r7, #18]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e042      	b.n	800320c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd fdb7 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2224      	movs	r2, #36	@ 0x24
 80031a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fbb2 	bl	8003928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f8b3 	bl	8003330 <UART_SetConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01b      	b.n	800320c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fc31 	bl	8003a6c <UART_CheckIdleState>
 800320a:	4603      	mov	r3, r0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	2b20      	cmp	r3, #32
 800322c:	d17b      	bne.n	8003326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_Transmit+0x26>
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e074      	b.n	8003328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2221      	movs	r2, #33	@ 0x21
 800324a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324e:	f7fd fe43 	bl	8000ed8 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x6c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003288:	e030      	b.n	80032ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fc93 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03d      	b.n	8003328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3302      	adds	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e007      	b.n	80032da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c8      	bne.n	800328a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2200      	movs	r2, #0
 8003300:	2140      	movs	r1, #64	@ 0x40
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fc5c 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e006      	b.n	8003328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b08c      	sub	sp, #48	@ 0x30
 8003336:	af00      	add	r7, sp, #0
 8003338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4313      	orrs	r3, r2
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4baa      	ldr	r3, [pc, #680]	@ (8003608 <UART_SetConfig+0x2d8>)
 8003360:	4013      	ands	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003368:	430b      	orrs	r3, r1
 800336a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a9f      	ldr	r2, [pc, #636]	@ (800360c <UART_SetConfig+0x2dc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003398:	4313      	orrs	r3, r2
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80033a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	f023 010f 	bic.w	r1, r3, #15
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a90      	ldr	r2, [pc, #576]	@ (8003610 <UART_SetConfig+0x2e0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d125      	bne.n	8003420 <UART_SetConfig+0xf0>
 80033d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003614 <UART_SetConfig+0x2e4>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d81a      	bhi.n	8003418 <UART_SetConfig+0xe8>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <UART_SetConfig+0xb8>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003409 	.word	0x08003409
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003411 	.word	0x08003411
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033fe:	e116      	b.n	800362e <UART_SetConfig+0x2fe>
 8003400:	2302      	movs	r3, #2
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003406:	e112      	b.n	800362e <UART_SetConfig+0x2fe>
 8003408:	2304      	movs	r3, #4
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800340e:	e10e      	b.n	800362e <UART_SetConfig+0x2fe>
 8003410:	2308      	movs	r3, #8
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003416:	e10a      	b.n	800362e <UART_SetConfig+0x2fe>
 8003418:	2310      	movs	r3, #16
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341e:	e106      	b.n	800362e <UART_SetConfig+0x2fe>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7c      	ldr	r2, [pc, #496]	@ (8003618 <UART_SetConfig+0x2e8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d138      	bne.n	800349c <UART_SetConfig+0x16c>
 800342a:	4b7a      	ldr	r3, [pc, #488]	@ (8003614 <UART_SetConfig+0x2e4>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d82d      	bhi.n	8003494 <UART_SetConfig+0x164>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <UART_SetConfig+0x110>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003475 	.word	0x08003475
 8003444:	08003495 	.word	0x08003495
 8003448:	08003495 	.word	0x08003495
 800344c:	08003495 	.word	0x08003495
 8003450:	08003485 	.word	0x08003485
 8003454:	08003495 	.word	0x08003495
 8003458:	08003495 	.word	0x08003495
 800345c:	08003495 	.word	0x08003495
 8003460:	0800347d 	.word	0x0800347d
 8003464:	08003495 	.word	0x08003495
 8003468:	08003495 	.word	0x08003495
 800346c:	08003495 	.word	0x08003495
 8003470:	0800348d 	.word	0x0800348d
 8003474:	2300      	movs	r3, #0
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347a:	e0d8      	b.n	800362e <UART_SetConfig+0x2fe>
 800347c:	2302      	movs	r3, #2
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003482:	e0d4      	b.n	800362e <UART_SetConfig+0x2fe>
 8003484:	2304      	movs	r3, #4
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348a:	e0d0      	b.n	800362e <UART_SetConfig+0x2fe>
 800348c:	2308      	movs	r3, #8
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003492:	e0cc      	b.n	800362e <UART_SetConfig+0x2fe>
 8003494:	2310      	movs	r3, #16
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800349a:	e0c8      	b.n	800362e <UART_SetConfig+0x2fe>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5e      	ldr	r2, [pc, #376]	@ (800361c <UART_SetConfig+0x2ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d125      	bne.n	80034f2 <UART_SetConfig+0x1c2>
 80034a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <UART_SetConfig+0x2e4>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034b0:	2b30      	cmp	r3, #48	@ 0x30
 80034b2:	d016      	beq.n	80034e2 <UART_SetConfig+0x1b2>
 80034b4:	2b30      	cmp	r3, #48	@ 0x30
 80034b6:	d818      	bhi.n	80034ea <UART_SetConfig+0x1ba>
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d00a      	beq.n	80034d2 <UART_SetConfig+0x1a2>
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d814      	bhi.n	80034ea <UART_SetConfig+0x1ba>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <UART_SetConfig+0x19a>
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d008      	beq.n	80034da <UART_SetConfig+0x1aa>
 80034c8:	e00f      	b.n	80034ea <UART_SetConfig+0x1ba>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d0:	e0ad      	b.n	800362e <UART_SetConfig+0x2fe>
 80034d2:	2302      	movs	r3, #2
 80034d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d8:	e0a9      	b.n	800362e <UART_SetConfig+0x2fe>
 80034da:	2304      	movs	r3, #4
 80034dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e0:	e0a5      	b.n	800362e <UART_SetConfig+0x2fe>
 80034e2:	2308      	movs	r3, #8
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e8:	e0a1      	b.n	800362e <UART_SetConfig+0x2fe>
 80034ea:	2310      	movs	r3, #16
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f0:	e09d      	b.n	800362e <UART_SetConfig+0x2fe>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003620 <UART_SetConfig+0x2f0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d125      	bne.n	8003548 <UART_SetConfig+0x218>
 80034fc:	4b45      	ldr	r3, [pc, #276]	@ (8003614 <UART_SetConfig+0x2e4>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003506:	2bc0      	cmp	r3, #192	@ 0xc0
 8003508:	d016      	beq.n	8003538 <UART_SetConfig+0x208>
 800350a:	2bc0      	cmp	r3, #192	@ 0xc0
 800350c:	d818      	bhi.n	8003540 <UART_SetConfig+0x210>
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d00a      	beq.n	8003528 <UART_SetConfig+0x1f8>
 8003512:	2b80      	cmp	r3, #128	@ 0x80
 8003514:	d814      	bhi.n	8003540 <UART_SetConfig+0x210>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <UART_SetConfig+0x1f0>
 800351a:	2b40      	cmp	r3, #64	@ 0x40
 800351c:	d008      	beq.n	8003530 <UART_SetConfig+0x200>
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x210>
 8003520:	2300      	movs	r3, #0
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e082      	b.n	800362e <UART_SetConfig+0x2fe>
 8003528:	2302      	movs	r3, #2
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e07e      	b.n	800362e <UART_SetConfig+0x2fe>
 8003530:	2304      	movs	r3, #4
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003536:	e07a      	b.n	800362e <UART_SetConfig+0x2fe>
 8003538:	2308      	movs	r3, #8
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353e:	e076      	b.n	800362e <UART_SetConfig+0x2fe>
 8003540:	2310      	movs	r3, #16
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003546:	e072      	b.n	800362e <UART_SetConfig+0x2fe>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a35      	ldr	r2, [pc, #212]	@ (8003624 <UART_SetConfig+0x2f4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d12a      	bne.n	80035a8 <UART_SetConfig+0x278>
 8003552:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <UART_SetConfig+0x2e4>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003560:	d01a      	beq.n	8003598 <UART_SetConfig+0x268>
 8003562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003566:	d81b      	bhi.n	80035a0 <UART_SetConfig+0x270>
 8003568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800356c:	d00c      	beq.n	8003588 <UART_SetConfig+0x258>
 800356e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003572:	d815      	bhi.n	80035a0 <UART_SetConfig+0x270>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <UART_SetConfig+0x250>
 8003578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357c:	d008      	beq.n	8003590 <UART_SetConfig+0x260>
 800357e:	e00f      	b.n	80035a0 <UART_SetConfig+0x270>
 8003580:	2300      	movs	r3, #0
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003586:	e052      	b.n	800362e <UART_SetConfig+0x2fe>
 8003588:	2302      	movs	r3, #2
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358e:	e04e      	b.n	800362e <UART_SetConfig+0x2fe>
 8003590:	2304      	movs	r3, #4
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003596:	e04a      	b.n	800362e <UART_SetConfig+0x2fe>
 8003598:	2308      	movs	r3, #8
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e046      	b.n	800362e <UART_SetConfig+0x2fe>
 80035a0:	2310      	movs	r3, #16
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e042      	b.n	800362e <UART_SetConfig+0x2fe>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a17      	ldr	r2, [pc, #92]	@ (800360c <UART_SetConfig+0x2dc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d13a      	bne.n	8003628 <UART_SetConfig+0x2f8>
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <UART_SetConfig+0x2e4>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035c0:	d01a      	beq.n	80035f8 <UART_SetConfig+0x2c8>
 80035c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035c6:	d81b      	bhi.n	8003600 <UART_SetConfig+0x2d0>
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035cc:	d00c      	beq.n	80035e8 <UART_SetConfig+0x2b8>
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d2:	d815      	bhi.n	8003600 <UART_SetConfig+0x2d0>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <UART_SetConfig+0x2b0>
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d008      	beq.n	80035f0 <UART_SetConfig+0x2c0>
 80035de:	e00f      	b.n	8003600 <UART_SetConfig+0x2d0>
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e6:	e022      	b.n	800362e <UART_SetConfig+0x2fe>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ee:	e01e      	b.n	800362e <UART_SetConfig+0x2fe>
 80035f0:	2304      	movs	r3, #4
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f6:	e01a      	b.n	800362e <UART_SetConfig+0x2fe>
 80035f8:	2308      	movs	r3, #8
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035fe:	e016      	b.n	800362e <UART_SetConfig+0x2fe>
 8003600:	2310      	movs	r3, #16
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003606:	e012      	b.n	800362e <UART_SetConfig+0x2fe>
 8003608:	cfff69f3 	.word	0xcfff69f3
 800360c:	40008000 	.word	0x40008000
 8003610:	40013800 	.word	0x40013800
 8003614:	40021000 	.word	0x40021000
 8003618:	40004400 	.word	0x40004400
 800361c:	40004800 	.word	0x40004800
 8003620:	40004c00 	.word	0x40004c00
 8003624:	40005000 	.word	0x40005000
 8003628:	2310      	movs	r3, #16
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4aae      	ldr	r2, [pc, #696]	@ (80038ec <UART_SetConfig+0x5bc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	f040 8097 	bne.w	8003768 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800363a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800363e:	2b08      	cmp	r3, #8
 8003640:	d823      	bhi.n	800368a <UART_SetConfig+0x35a>
 8003642:	a201      	add	r2, pc, #4	@ (adr r2, 8003648 <UART_SetConfig+0x318>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800366d 	.word	0x0800366d
 800364c:	0800368b 	.word	0x0800368b
 8003650:	08003675 	.word	0x08003675
 8003654:	0800368b 	.word	0x0800368b
 8003658:	0800367b 	.word	0x0800367b
 800365c:	0800368b 	.word	0x0800368b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800368b 	.word	0x0800368b
 8003668:	08003683 	.word	0x08003683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366c:	f7ff fac2 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8003670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003672:	e010      	b.n	8003696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003674:	4b9e      	ldr	r3, [pc, #632]	@ (80038f0 <UART_SetConfig+0x5c0>)
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003678:	e00d      	b.n	8003696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367a:	f7ff fa4d 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 800367e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003680:	e009      	b.n	8003696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003688:	e005      	b.n	8003696 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8130 	beq.w	80038fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	4a94      	ldr	r2, [pc, #592]	@ (80038f4 <UART_SetConfig+0x5c4>)
 80036a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d305      	bcc.n	80036ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d903      	bls.n	80036d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036d4:	e113      	b.n	80038fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	2200      	movs	r2, #0
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	60fa      	str	r2, [r7, #12]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	4a84      	ldr	r2, [pc, #528]	@ (80038f4 <UART_SetConfig+0x5c4>)
 80036e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2200      	movs	r2, #0
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036f8:	f7fc fde2 	bl	80002c0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	020b      	lsls	r3, r1, #8
 800370e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003712:	0202      	lsls	r2, r0, #8
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	6849      	ldr	r1, [r1, #4]
 8003718:	0849      	lsrs	r1, r1, #1
 800371a:	2000      	movs	r0, #0
 800371c:	460c      	mov	r4, r1
 800371e:	4605      	mov	r5, r0
 8003720:	eb12 0804 	adds.w	r8, r2, r4
 8003724:	eb43 0905 	adc.w	r9, r3, r5
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	469a      	mov	sl, r3
 8003730:	4693      	mov	fp, r2
 8003732:	4652      	mov	r2, sl
 8003734:	465b      	mov	r3, fp
 8003736:	4640      	mov	r0, r8
 8003738:	4649      	mov	r1, r9
 800373a:	f7fc fdc1 	bl	80002c0 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4613      	mov	r3, r2
 8003744:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800374c:	d308      	bcc.n	8003760 <UART_SetConfig+0x430>
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003754:	d204      	bcs.n	8003760 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e0ce      	b.n	80038fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003766:	e0ca      	b.n	80038fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003770:	d166      	bne.n	8003840 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003776:	2b08      	cmp	r3, #8
 8003778:	d827      	bhi.n	80037ca <UART_SetConfig+0x49a>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <UART_SetConfig+0x450>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7ff fa26 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037aa:	e014      	b.n	80037d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff fa38 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 80037b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b2:	e010      	b.n	80037d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b4e      	ldr	r3, [pc, #312]	@ (80038f0 <UART_SetConfig+0x5c0>)
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037b8:	e00d      	b.n	80037d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7ff f9ad 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 80037be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037c0:	e009      	b.n	80037d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037c8:	e005      	b.n	80037d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8090 	beq.w	80038fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	4a44      	ldr	r2, [pc, #272]	@ (80038f4 <UART_SetConfig+0x5c4>)
 80037e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f0:	005a      	lsls	r2, r3, #1
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	441a      	add	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d916      	bls.n	8003838 <UART_SetConfig+0x508>
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003810:	d212      	bcs.n	8003838 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f023 030f 	bic.w	r3, r3, #15
 800381a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	b29a      	uxth	r2, r3
 8003828:	8bfb      	ldrh	r3, [r7, #30]
 800382a:	4313      	orrs	r3, r2
 800382c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	8bfa      	ldrh	r2, [r7, #30]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e062      	b.n	80038fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800383e:	e05e      	b.n	80038fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003844:	2b08      	cmp	r3, #8
 8003846:	d828      	bhi.n	800389a <UART_SetConfig+0x56a>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <UART_SetConfig+0x520>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003875 	.word	0x08003875
 8003854:	0800387d 	.word	0x0800387d
 8003858:	08003885 	.word	0x08003885
 800385c:	0800389b 	.word	0x0800389b
 8003860:	0800388b 	.word	0x0800388b
 8003864:	0800389b 	.word	0x0800389b
 8003868:	0800389b 	.word	0x0800389b
 800386c:	0800389b 	.word	0x0800389b
 8003870:	08003893 	.word	0x08003893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7ff f9be 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8003878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800387a:	e014      	b.n	80038a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7ff f9d0 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8003880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003882:	e010      	b.n	80038a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003884:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <UART_SetConfig+0x5c0>)
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003888:	e00d      	b.n	80038a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388a:	f7ff f945 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 800388e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003890:	e009      	b.n	80038a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003898:	e005      	b.n	80038a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038a4:	bf00      	nop
    }

    if (pclk != 0U)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d028      	beq.n	80038fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	4a10      	ldr	r2, [pc, #64]	@ (80038f4 <UART_SetConfig+0x5c4>)
 80038b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	441a      	add	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d910      	bls.n	80038f8 <UART_SetConfig+0x5c8>
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d20c      	bcs.n	80038f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	e009      	b.n	80038fe <UART_SetConfig+0x5ce>
 80038ea:	bf00      	nop
 80038ec:	40008000 	.word	0x40008000
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	080048e4 	.word	0x080048e4
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2201      	movs	r2, #1
 8003902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2201      	movs	r2, #1
 800390a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800391a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800391e:	4618      	mov	r0, r3
 8003920:	3730      	adds	r7, #48	@ 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a26:	d10a      	bne.n	8003a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b098      	sub	sp, #96	@ 0x60
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a7c:	f7fd fa2c 	bl	8000ed8 <HAL_GetTick>
 8003a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d12f      	bne.n	8003af0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f88e 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d022      	beq.n	8003af0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e6      	bne.n	8003aaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e063      	b.n	8003bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d149      	bne.n	8003b92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f857 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03c      	beq.n	8003b92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	623b      	str	r3, [r7, #32]
   return(result);
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e6      	bne.n	8003b18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3308      	adds	r3, #8
 8003b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b6a:	61fa      	str	r2, [r7, #28]
 8003b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	69b9      	ldr	r1, [r7, #24]
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	617b      	str	r3, [r7, #20]
   return(result);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e012      	b.n	8003bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3758      	adds	r7, #88	@ 0x58
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e04f      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd8:	d04b      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fd f97d 	bl	8000ed8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e04e      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d037      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b80      	cmp	r3, #128	@ 0x80
 8003c06:	d034      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	d031      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d110      	bne.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f838 	bl	8003c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e029      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c4c:	d111      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f81e 	bl	8003c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e00f      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d0a0      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b095      	sub	sp, #84	@ 0x54
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e3      	bne.n	8003cd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d118      	bne.n	8003d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e6      	bne.n	8003d14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d5a:	bf00      	nop
 8003d5c:	3754      	adds	r7, #84	@ 0x54
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e027      	b.n	8003dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	@ 0x24
 8003d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e02d      	b.n	8003e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	@ 0x24
 8003dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f84f 	bl	8003ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e02d      	b.n	8003ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	@ 0x24
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f811 	bl	8003ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ef0:	e031      	b.n	8003f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	0e5b      	lsrs	r3, r3, #25
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	0f5b      	lsrs	r3, r3, #29
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f1a:	7bbb      	ldrb	r3, [r7, #14]
 8003f1c:	7b3a      	ldrb	r2, [r7, #12]
 8003f1e:	4911      	ldr	r1, [pc, #68]	@ (8003f64 <UARTEx_SetNbDataToProcess+0x94>)
 8003f20:	5c8a      	ldrb	r2, [r1, r2]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f26:	7b3a      	ldrb	r2, [r7, #12]
 8003f28:	490f      	ldr	r1, [pc, #60]	@ (8003f68 <UARTEx_SetNbDataToProcess+0x98>)
 8003f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	7b7a      	ldrb	r2, [r7, #13]
 8003f3c:	4909      	ldr	r1, [pc, #36]	@ (8003f64 <UARTEx_SetNbDataToProcess+0x94>)
 8003f3e:	5c8a      	ldrb	r2, [r1, r2]
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f44:	7b7a      	ldrb	r2, [r7, #13]
 8003f46:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <UARTEx_SetNbDataToProcess+0x98>)
 8003f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	080048fc 	.word	0x080048fc
 8003f68:	08004904 	.word	0x08004904

08003f6c <siprintf>:
 8003f6c:	b40e      	push	{r1, r2, r3}
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	b09d      	sub	sp, #116	@ 0x74
 8003f72:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003f74:	9002      	str	r0, [sp, #8]
 8003f76:	9006      	str	r0, [sp, #24]
 8003f78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f7c:	480a      	ldr	r0, [pc, #40]	@ (8003fa8 <siprintf+0x3c>)
 8003f7e:	9107      	str	r1, [sp, #28]
 8003f80:	9104      	str	r1, [sp, #16]
 8003f82:	490a      	ldr	r1, [pc, #40]	@ (8003fac <siprintf+0x40>)
 8003f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f88:	9105      	str	r1, [sp, #20]
 8003f8a:	2400      	movs	r4, #0
 8003f8c:	a902      	add	r1, sp, #8
 8003f8e:	6800      	ldr	r0, [r0, #0]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003f94:	f000 f994 	bl	80042c0 <_svfiprintf_r>
 8003f98:	9b02      	ldr	r3, [sp, #8]
 8003f9a:	701c      	strb	r4, [r3, #0]
 8003f9c:	b01d      	add	sp, #116	@ 0x74
 8003f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa2:	b003      	add	sp, #12
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000000c 	.word	0x2000000c
 8003fac:	ffff0208 	.word	0xffff0208

08003fb0 <memset>:
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	@ (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4d0d      	ldr	r5, [pc, #52]	@ (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	@ (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 fc64 	bl	80048ac <_init>
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2600      	movs	r6, #0
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08004948 	.word	0x08004948
 8004008:	08004948 	.word	0x08004948
 800400c:	08004948 	.word	0x08004948
 8004010:	0800494c 	.word	0x0800494c

08004014 <__retarget_lock_acquire_recursive>:
 8004014:	4770      	bx	lr

08004016 <__retarget_lock_release_recursive>:
 8004016:	4770      	bx	lr

08004018 <_free_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	2900      	cmp	r1, #0
 800401e:	d041      	beq.n	80040a4 <_free_r+0x8c>
 8004020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004024:	1f0c      	subs	r4, r1, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	18e4      	addlt	r4, r4, r3
 800402c:	f000 f8e0 	bl	80041f0 <__malloc_lock>
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <_free_r+0x90>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	b933      	cbnz	r3, 8004044 <_free_r+0x2c>
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	4628      	mov	r0, r5
 800403c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004040:	f000 b8dc 	b.w	80041fc <__malloc_unlock>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x42>
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	1821      	adds	r1, r4, r0
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1809      	addeq	r1, r1, r0
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	e7ed      	b.n	8004036 <_free_r+0x1e>
 800405a:	461a      	mov	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b10b      	cbz	r3, 8004064 <_free_r+0x4c>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d9fa      	bls.n	800405a <_free_r+0x42>
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	1850      	adds	r0, r2, r1
 8004068:	42a0      	cmp	r0, r4
 800406a:	d10b      	bne.n	8004084 <_free_r+0x6c>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	4401      	add	r1, r0
 8004070:	1850      	adds	r0, r2, r1
 8004072:	4283      	cmp	r3, r0
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	d1e0      	bne.n	800403a <_free_r+0x22>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	4408      	add	r0, r1
 8004080:	6010      	str	r0, [r2, #0]
 8004082:	e7da      	b.n	800403a <_free_r+0x22>
 8004084:	d902      	bls.n	800408c <_free_r+0x74>
 8004086:	230c      	movs	r3, #12
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	e7d6      	b.n	800403a <_free_r+0x22>
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	1821      	adds	r1, r4, r0
 8004090:	428b      	cmp	r3, r1
 8004092:	bf04      	itt	eq
 8004094:	6819      	ldreq	r1, [r3, #0]
 8004096:	685b      	ldreq	r3, [r3, #4]
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	bf04      	itt	eq
 800409c:	1809      	addeq	r1, r1, r0
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	6054      	str	r4, [r2, #4]
 80040a2:	e7ca      	b.n	800403a <_free_r+0x22>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	20000340 	.word	0x20000340

080040ac <sbrk_aligned>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4e0f      	ldr	r6, [pc, #60]	@ (80040ec <sbrk_aligned+0x40>)
 80040b0:	460c      	mov	r4, r1
 80040b2:	6831      	ldr	r1, [r6, #0]
 80040b4:	4605      	mov	r5, r0
 80040b6:	b911      	cbnz	r1, 80040be <sbrk_aligned+0x12>
 80040b8:	f000 fba4 	bl	8004804 <_sbrk_r>
 80040bc:	6030      	str	r0, [r6, #0]
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 fb9f 	bl	8004804 <_sbrk_r>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d103      	bne.n	80040d2 <sbrk_aligned+0x26>
 80040ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80040ce:	4620      	mov	r0, r4
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	1cc4      	adds	r4, r0, #3
 80040d4:	f024 0403 	bic.w	r4, r4, #3
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d0f8      	beq.n	80040ce <sbrk_aligned+0x22>
 80040dc:	1a21      	subs	r1, r4, r0
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 fb90 	bl	8004804 <_sbrk_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1f2      	bne.n	80040ce <sbrk_aligned+0x22>
 80040e8:	e7ef      	b.n	80040ca <sbrk_aligned+0x1e>
 80040ea:	bf00      	nop
 80040ec:	2000033c 	.word	0x2000033c

080040f0 <_malloc_r>:
 80040f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f4:	1ccd      	adds	r5, r1, #3
 80040f6:	f025 0503 	bic.w	r5, r5, #3
 80040fa:	3508      	adds	r5, #8
 80040fc:	2d0c      	cmp	r5, #12
 80040fe:	bf38      	it	cc
 8004100:	250c      	movcc	r5, #12
 8004102:	2d00      	cmp	r5, #0
 8004104:	4606      	mov	r6, r0
 8004106:	db01      	blt.n	800410c <_malloc_r+0x1c>
 8004108:	42a9      	cmp	r1, r5
 800410a:	d904      	bls.n	8004116 <_malloc_r+0x26>
 800410c:	230c      	movs	r3, #12
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	2000      	movs	r0, #0
 8004112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041ec <_malloc_r+0xfc>
 800411a:	f000 f869 	bl	80041f0 <__malloc_lock>
 800411e:	f8d8 3000 	ldr.w	r3, [r8]
 8004122:	461c      	mov	r4, r3
 8004124:	bb44      	cbnz	r4, 8004178 <_malloc_r+0x88>
 8004126:	4629      	mov	r1, r5
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff ffbf 	bl	80040ac <sbrk_aligned>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	4604      	mov	r4, r0
 8004132:	d158      	bne.n	80041e6 <_malloc_r+0xf6>
 8004134:	f8d8 4000 	ldr.w	r4, [r8]
 8004138:	4627      	mov	r7, r4
 800413a:	2f00      	cmp	r7, #0
 800413c:	d143      	bne.n	80041c6 <_malloc_r+0xd6>
 800413e:	2c00      	cmp	r4, #0
 8004140:	d04b      	beq.n	80041da <_malloc_r+0xea>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	4639      	mov	r1, r7
 8004146:	4630      	mov	r0, r6
 8004148:	eb04 0903 	add.w	r9, r4, r3
 800414c:	f000 fb5a 	bl	8004804 <_sbrk_r>
 8004150:	4581      	cmp	r9, r0
 8004152:	d142      	bne.n	80041da <_malloc_r+0xea>
 8004154:	6821      	ldr	r1, [r4, #0]
 8004156:	1a6d      	subs	r5, r5, r1
 8004158:	4629      	mov	r1, r5
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff ffa6 	bl	80040ac <sbrk_aligned>
 8004160:	3001      	adds	r0, #1
 8004162:	d03a      	beq.n	80041da <_malloc_r+0xea>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	442b      	add	r3, r5
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	f8d8 3000 	ldr.w	r3, [r8]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	bb62      	cbnz	r2, 80041cc <_malloc_r+0xdc>
 8004172:	f8c8 7000 	str.w	r7, [r8]
 8004176:	e00f      	b.n	8004198 <_malloc_r+0xa8>
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	1b52      	subs	r2, r2, r5
 800417c:	d420      	bmi.n	80041c0 <_malloc_r+0xd0>
 800417e:	2a0b      	cmp	r2, #11
 8004180:	d917      	bls.n	80041b2 <_malloc_r+0xc2>
 8004182:	1961      	adds	r1, r4, r5
 8004184:	42a3      	cmp	r3, r4
 8004186:	6025      	str	r5, [r4, #0]
 8004188:	bf18      	it	ne
 800418a:	6059      	strne	r1, [r3, #4]
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	bf08      	it	eq
 8004190:	f8c8 1000 	streq.w	r1, [r8]
 8004194:	5162      	str	r2, [r4, r5]
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	4630      	mov	r0, r6
 800419a:	f000 f82f 	bl	80041fc <__malloc_unlock>
 800419e:	f104 000b 	add.w	r0, r4, #11
 80041a2:	1d23      	adds	r3, r4, #4
 80041a4:	f020 0007 	bic.w	r0, r0, #7
 80041a8:	1ac2      	subs	r2, r0, r3
 80041aa:	bf1c      	itt	ne
 80041ac:	1a1b      	subne	r3, r3, r0
 80041ae:	50a3      	strne	r3, [r4, r2]
 80041b0:	e7af      	b.n	8004112 <_malloc_r+0x22>
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	bf0c      	ite	eq
 80041b8:	f8c8 2000 	streq.w	r2, [r8]
 80041bc:	605a      	strne	r2, [r3, #4]
 80041be:	e7eb      	b.n	8004198 <_malloc_r+0xa8>
 80041c0:	4623      	mov	r3, r4
 80041c2:	6864      	ldr	r4, [r4, #4]
 80041c4:	e7ae      	b.n	8004124 <_malloc_r+0x34>
 80041c6:	463c      	mov	r4, r7
 80041c8:	687f      	ldr	r7, [r7, #4]
 80041ca:	e7b6      	b.n	800413a <_malloc_r+0x4a>
 80041cc:	461a      	mov	r2, r3
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d1fb      	bne.n	80041cc <_malloc_r+0xdc>
 80041d4:	2300      	movs	r3, #0
 80041d6:	6053      	str	r3, [r2, #4]
 80041d8:	e7de      	b.n	8004198 <_malloc_r+0xa8>
 80041da:	230c      	movs	r3, #12
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 f80c 	bl	80041fc <__malloc_unlock>
 80041e4:	e794      	b.n	8004110 <_malloc_r+0x20>
 80041e6:	6005      	str	r5, [r0, #0]
 80041e8:	e7d6      	b.n	8004198 <_malloc_r+0xa8>
 80041ea:	bf00      	nop
 80041ec:	20000340 	.word	0x20000340

080041f0 <__malloc_lock>:
 80041f0:	4801      	ldr	r0, [pc, #4]	@ (80041f8 <__malloc_lock+0x8>)
 80041f2:	f7ff bf0f 	b.w	8004014 <__retarget_lock_acquire_recursive>
 80041f6:	bf00      	nop
 80041f8:	20000338 	.word	0x20000338

080041fc <__malloc_unlock>:
 80041fc:	4801      	ldr	r0, [pc, #4]	@ (8004204 <__malloc_unlock+0x8>)
 80041fe:	f7ff bf0a 	b.w	8004016 <__retarget_lock_release_recursive>
 8004202:	bf00      	nop
 8004204:	20000338 	.word	0x20000338

08004208 <__ssputs_r>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	688e      	ldr	r6, [r1, #8]
 800420e:	461f      	mov	r7, r3
 8004210:	42be      	cmp	r6, r7
 8004212:	680b      	ldr	r3, [r1, #0]
 8004214:	4682      	mov	sl, r0
 8004216:	460c      	mov	r4, r1
 8004218:	4690      	mov	r8, r2
 800421a:	d82d      	bhi.n	8004278 <__ssputs_r+0x70>
 800421c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004224:	d026      	beq.n	8004274 <__ssputs_r+0x6c>
 8004226:	6965      	ldr	r5, [r4, #20]
 8004228:	6909      	ldr	r1, [r1, #16]
 800422a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800422e:	eba3 0901 	sub.w	r9, r3, r1
 8004232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004236:	1c7b      	adds	r3, r7, #1
 8004238:	444b      	add	r3, r9
 800423a:	106d      	asrs	r5, r5, #1
 800423c:	429d      	cmp	r5, r3
 800423e:	bf38      	it	cc
 8004240:	461d      	movcc	r5, r3
 8004242:	0553      	lsls	r3, r2, #21
 8004244:	d527      	bpl.n	8004296 <__ssputs_r+0x8e>
 8004246:	4629      	mov	r1, r5
 8004248:	f7ff ff52 	bl	80040f0 <_malloc_r>
 800424c:	4606      	mov	r6, r0
 800424e:	b360      	cbz	r0, 80042aa <__ssputs_r+0xa2>
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	464a      	mov	r2, r9
 8004254:	f000 fae6 	bl	8004824 <memcpy>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800425e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	6126      	str	r6, [r4, #16]
 8004266:	6165      	str	r5, [r4, #20]
 8004268:	444e      	add	r6, r9
 800426a:	eba5 0509 	sub.w	r5, r5, r9
 800426e:	6026      	str	r6, [r4, #0]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	463e      	mov	r6, r7
 8004274:	42be      	cmp	r6, r7
 8004276:	d900      	bls.n	800427a <__ssputs_r+0x72>
 8004278:	463e      	mov	r6, r7
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	4632      	mov	r2, r6
 800427e:	4641      	mov	r1, r8
 8004280:	f000 faa6 	bl	80047d0 <memmove>
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	1b9b      	subs	r3, r3, r6
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	4433      	add	r3, r6
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	462a      	mov	r2, r5
 8004298:	f000 fad2 	bl	8004840 <_realloc_r>
 800429c:	4606      	mov	r6, r0
 800429e:	2800      	cmp	r0, #0
 80042a0:	d1e0      	bne.n	8004264 <__ssputs_r+0x5c>
 80042a2:	6921      	ldr	r1, [r4, #16]
 80042a4:	4650      	mov	r0, sl
 80042a6:	f7ff feb7 	bl	8004018 <_free_r>
 80042aa:	230c      	movs	r3, #12
 80042ac:	f8ca 3000 	str.w	r3, [sl]
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042bc:	e7e9      	b.n	8004292 <__ssputs_r+0x8a>
	...

080042c0 <_svfiprintf_r>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	4698      	mov	r8, r3
 80042c6:	898b      	ldrh	r3, [r1, #12]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	b09d      	sub	sp, #116	@ 0x74
 80042cc:	4607      	mov	r7, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	d510      	bpl.n	80042f6 <_svfiprintf_r+0x36>
 80042d4:	690b      	ldr	r3, [r1, #16]
 80042d6:	b973      	cbnz	r3, 80042f6 <_svfiprintf_r+0x36>
 80042d8:	2140      	movs	r1, #64	@ 0x40
 80042da:	f7ff ff09 	bl	80040f0 <_malloc_r>
 80042de:	6028      	str	r0, [r5, #0]
 80042e0:	6128      	str	r0, [r5, #16]
 80042e2:	b930      	cbnz	r0, 80042f2 <_svfiprintf_r+0x32>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042ec:	b01d      	add	sp, #116	@ 0x74
 80042ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f2:	2340      	movs	r3, #64	@ 0x40
 80042f4:	616b      	str	r3, [r5, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042fa:	2320      	movs	r3, #32
 80042fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004300:	f8cd 800c 	str.w	r8, [sp, #12]
 8004304:	2330      	movs	r3, #48	@ 0x30
 8004306:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044a4 <_svfiprintf_r+0x1e4>
 800430a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800430e:	f04f 0901 	mov.w	r9, #1
 8004312:	4623      	mov	r3, r4
 8004314:	469a      	mov	sl, r3
 8004316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431a:	b10a      	cbz	r2, 8004320 <_svfiprintf_r+0x60>
 800431c:	2a25      	cmp	r2, #37	@ 0x25
 800431e:	d1f9      	bne.n	8004314 <_svfiprintf_r+0x54>
 8004320:	ebba 0b04 	subs.w	fp, sl, r4
 8004324:	d00b      	beq.n	800433e <_svfiprintf_r+0x7e>
 8004326:	465b      	mov	r3, fp
 8004328:	4622      	mov	r2, r4
 800432a:	4629      	mov	r1, r5
 800432c:	4638      	mov	r0, r7
 800432e:	f7ff ff6b 	bl	8004208 <__ssputs_r>
 8004332:	3001      	adds	r0, #1
 8004334:	f000 80a7 	beq.w	8004486 <_svfiprintf_r+0x1c6>
 8004338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433a:	445a      	add	r2, fp
 800433c:	9209      	str	r2, [sp, #36]	@ 0x24
 800433e:	f89a 3000 	ldrb.w	r3, [sl]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 809f 	beq.w	8004486 <_svfiprintf_r+0x1c6>
 8004348:	2300      	movs	r3, #0
 800434a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800434e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004352:	f10a 0a01 	add.w	sl, sl, #1
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	9307      	str	r3, [sp, #28]
 800435a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800435e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004360:	4654      	mov	r4, sl
 8004362:	2205      	movs	r2, #5
 8004364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004368:	484e      	ldr	r0, [pc, #312]	@ (80044a4 <_svfiprintf_r+0x1e4>)
 800436a:	f7fb ff59 	bl	8000220 <memchr>
 800436e:	9a04      	ldr	r2, [sp, #16]
 8004370:	b9d8      	cbnz	r0, 80043aa <_svfiprintf_r+0xea>
 8004372:	06d0      	lsls	r0, r2, #27
 8004374:	bf44      	itt	mi
 8004376:	2320      	movmi	r3, #32
 8004378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800437c:	0711      	lsls	r1, r2, #28
 800437e:	bf44      	itt	mi
 8004380:	232b      	movmi	r3, #43	@ 0x2b
 8004382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004386:	f89a 3000 	ldrb.w	r3, [sl]
 800438a:	2b2a      	cmp	r3, #42	@ 0x2a
 800438c:	d015      	beq.n	80043ba <_svfiprintf_r+0xfa>
 800438e:	9a07      	ldr	r2, [sp, #28]
 8004390:	4654      	mov	r4, sl
 8004392:	2000      	movs	r0, #0
 8004394:	f04f 0c0a 	mov.w	ip, #10
 8004398:	4621      	mov	r1, r4
 800439a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800439e:	3b30      	subs	r3, #48	@ 0x30
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d94b      	bls.n	800443c <_svfiprintf_r+0x17c>
 80043a4:	b1b0      	cbz	r0, 80043d4 <_svfiprintf_r+0x114>
 80043a6:	9207      	str	r2, [sp, #28]
 80043a8:	e014      	b.n	80043d4 <_svfiprintf_r+0x114>
 80043aa:	eba0 0308 	sub.w	r3, r0, r8
 80043ae:	fa09 f303 	lsl.w	r3, r9, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	46a2      	mov	sl, r4
 80043b8:	e7d2      	b.n	8004360 <_svfiprintf_r+0xa0>
 80043ba:	9b03      	ldr	r3, [sp, #12]
 80043bc:	1d19      	adds	r1, r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	9103      	str	r1, [sp, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfbb      	ittet	lt
 80043c6:	425b      	neglt	r3, r3
 80043c8:	f042 0202 	orrlt.w	r2, r2, #2
 80043cc:	9307      	strge	r3, [sp, #28]
 80043ce:	9307      	strlt	r3, [sp, #28]
 80043d0:	bfb8      	it	lt
 80043d2:	9204      	strlt	r2, [sp, #16]
 80043d4:	7823      	ldrb	r3, [r4, #0]
 80043d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80043d8:	d10a      	bne.n	80043f0 <_svfiprintf_r+0x130>
 80043da:	7863      	ldrb	r3, [r4, #1]
 80043dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80043de:	d132      	bne.n	8004446 <_svfiprintf_r+0x186>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	9203      	str	r2, [sp, #12]
 80043e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043ec:	3402      	adds	r4, #2
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044b4 <_svfiprintf_r+0x1f4>
 80043f4:	7821      	ldrb	r1, [r4, #0]
 80043f6:	2203      	movs	r2, #3
 80043f8:	4650      	mov	r0, sl
 80043fa:	f7fb ff11 	bl	8000220 <memchr>
 80043fe:	b138      	cbz	r0, 8004410 <_svfiprintf_r+0x150>
 8004400:	9b04      	ldr	r3, [sp, #16]
 8004402:	eba0 000a 	sub.w	r0, r0, sl
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	4082      	lsls	r2, r0
 800440a:	4313      	orrs	r3, r2
 800440c:	3401      	adds	r4, #1
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004414:	4824      	ldr	r0, [pc, #144]	@ (80044a8 <_svfiprintf_r+0x1e8>)
 8004416:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800441a:	2206      	movs	r2, #6
 800441c:	f7fb ff00 	bl	8000220 <memchr>
 8004420:	2800      	cmp	r0, #0
 8004422:	d036      	beq.n	8004492 <_svfiprintf_r+0x1d2>
 8004424:	4b21      	ldr	r3, [pc, #132]	@ (80044ac <_svfiprintf_r+0x1ec>)
 8004426:	bb1b      	cbnz	r3, 8004470 <_svfiprintf_r+0x1b0>
 8004428:	9b03      	ldr	r3, [sp, #12]
 800442a:	3307      	adds	r3, #7
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	3308      	adds	r3, #8
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004436:	4433      	add	r3, r6
 8004438:	9309      	str	r3, [sp, #36]	@ 0x24
 800443a:	e76a      	b.n	8004312 <_svfiprintf_r+0x52>
 800443c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004440:	460c      	mov	r4, r1
 8004442:	2001      	movs	r0, #1
 8004444:	e7a8      	b.n	8004398 <_svfiprintf_r+0xd8>
 8004446:	2300      	movs	r3, #0
 8004448:	3401      	adds	r4, #1
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0c0a 	mov.w	ip, #10
 8004452:	4620      	mov	r0, r4
 8004454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004458:	3a30      	subs	r2, #48	@ 0x30
 800445a:	2a09      	cmp	r2, #9
 800445c:	d903      	bls.n	8004466 <_svfiprintf_r+0x1a6>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0c6      	beq.n	80043f0 <_svfiprintf_r+0x130>
 8004462:	9105      	str	r1, [sp, #20]
 8004464:	e7c4      	b.n	80043f0 <_svfiprintf_r+0x130>
 8004466:	fb0c 2101 	mla	r1, ip, r1, r2
 800446a:	4604      	mov	r4, r0
 800446c:	2301      	movs	r3, #1
 800446e:	e7f0      	b.n	8004452 <_svfiprintf_r+0x192>
 8004470:	ab03      	add	r3, sp, #12
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	462a      	mov	r2, r5
 8004476:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <_svfiprintf_r+0x1f0>)
 8004478:	a904      	add	r1, sp, #16
 800447a:	4638      	mov	r0, r7
 800447c:	f3af 8000 	nop.w
 8004480:	1c42      	adds	r2, r0, #1
 8004482:	4606      	mov	r6, r0
 8004484:	d1d6      	bne.n	8004434 <_svfiprintf_r+0x174>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	065b      	lsls	r3, r3, #25
 800448a:	f53f af2d 	bmi.w	80042e8 <_svfiprintf_r+0x28>
 800448e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004490:	e72c      	b.n	80042ec <_svfiprintf_r+0x2c>
 8004492:	ab03      	add	r3, sp, #12
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	462a      	mov	r2, r5
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <_svfiprintf_r+0x1f0>)
 800449a:	a904      	add	r1, sp, #16
 800449c:	4638      	mov	r0, r7
 800449e:	f000 f879 	bl	8004594 <_printf_i>
 80044a2:	e7ed      	b.n	8004480 <_svfiprintf_r+0x1c0>
 80044a4:	0800490c 	.word	0x0800490c
 80044a8:	08004916 	.word	0x08004916
 80044ac:	00000000 	.word	0x00000000
 80044b0:	08004209 	.word	0x08004209
 80044b4:	08004912 	.word	0x08004912

080044b8 <_printf_common>:
 80044b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	4698      	mov	r8, r3
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bfb8      	it	lt
 80044cc:	4613      	movlt	r3, r2
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044d4:	4607      	mov	r7, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	b10a      	cbz	r2, 80044de <_printf_common+0x26>
 80044da:	3301      	adds	r3, #1
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	0699      	lsls	r1, r3, #26
 80044e2:	bf42      	ittt	mi
 80044e4:	6833      	ldrmi	r3, [r6, #0]
 80044e6:	3302      	addmi	r3, #2
 80044e8:	6033      	strmi	r3, [r6, #0]
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	f015 0506 	ands.w	r5, r5, #6
 80044f0:	d106      	bne.n	8004500 <_printf_common+0x48>
 80044f2:	f104 0a19 	add.w	sl, r4, #25
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dc26      	bgt.n	800454e <_printf_common+0x96>
 8004500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	3b00      	subs	r3, #0
 8004508:	bf18      	it	ne
 800450a:	2301      	movne	r3, #1
 800450c:	0692      	lsls	r2, r2, #26
 800450e:	d42b      	bmi.n	8004568 <_printf_common+0xb0>
 8004510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d01e      	beq.n	800455c <_printf_common+0xa4>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6922      	ldr	r2, [r4, #16]
 8004522:	f003 0306 	and.w	r3, r3, #6
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf02      	ittt	eq
 800452a:	68e5      	ldreq	r5, [r4, #12]
 800452c:	6833      	ldreq	r3, [r6, #0]
 800452e:	1aed      	subeq	r5, r5, r3
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	bf0c      	ite	eq
 8004534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004538:	2500      	movne	r5, #0
 800453a:	4293      	cmp	r3, r2
 800453c:	bfc4      	itt	gt
 800453e:	1a9b      	subgt	r3, r3, r2
 8004540:	18ed      	addgt	r5, r5, r3
 8004542:	2600      	movs	r6, #0
 8004544:	341a      	adds	r4, #26
 8004546:	42b5      	cmp	r5, r6
 8004548:	d11a      	bne.n	8004580 <_printf_common+0xc8>
 800454a:	2000      	movs	r0, #0
 800454c:	e008      	b.n	8004560 <_printf_common+0xa8>
 800454e:	2301      	movs	r3, #1
 8004550:	4652      	mov	r2, sl
 8004552:	4641      	mov	r1, r8
 8004554:	4638      	mov	r0, r7
 8004556:	47c8      	blx	r9
 8004558:	3001      	adds	r0, #1
 800455a:	d103      	bne.n	8004564 <_printf_common+0xac>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	3501      	adds	r5, #1
 8004566:	e7c6      	b.n	80044f6 <_printf_common+0x3e>
 8004568:	18e1      	adds	r1, r4, r3
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	2030      	movs	r0, #48	@ 0x30
 800456e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004572:	4422      	add	r2, r4
 8004574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800457c:	3302      	adds	r3, #2
 800457e:	e7c7      	b.n	8004510 <_printf_common+0x58>
 8004580:	2301      	movs	r3, #1
 8004582:	4622      	mov	r2, r4
 8004584:	4641      	mov	r1, r8
 8004586:	4638      	mov	r0, r7
 8004588:	47c8      	blx	r9
 800458a:	3001      	adds	r0, #1
 800458c:	d0e6      	beq.n	800455c <_printf_common+0xa4>
 800458e:	3601      	adds	r6, #1
 8004590:	e7d9      	b.n	8004546 <_printf_common+0x8e>
	...

08004594 <_printf_i>:
 8004594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	7e0f      	ldrb	r7, [r1, #24]
 800459a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800459c:	2f78      	cmp	r7, #120	@ 0x78
 800459e:	4691      	mov	r9, r2
 80045a0:	4680      	mov	r8, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	469a      	mov	sl, r3
 80045a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045aa:	d807      	bhi.n	80045bc <_printf_i+0x28>
 80045ac:	2f62      	cmp	r7, #98	@ 0x62
 80045ae:	d80a      	bhi.n	80045c6 <_printf_i+0x32>
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	f000 80d1 	beq.w	8004758 <_printf_i+0x1c4>
 80045b6:	2f58      	cmp	r7, #88	@ 0x58
 80045b8:	f000 80b8 	beq.w	800472c <_printf_i+0x198>
 80045bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045c4:	e03a      	b.n	800463c <_printf_i+0xa8>
 80045c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045ca:	2b15      	cmp	r3, #21
 80045cc:	d8f6      	bhi.n	80045bc <_printf_i+0x28>
 80045ce:	a101      	add	r1, pc, #4	@ (adr r1, 80045d4 <_printf_i+0x40>)
 80045d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	08004641 	.word	0x08004641
 80045dc:	080045bd 	.word	0x080045bd
 80045e0:	080045bd 	.word	0x080045bd
 80045e4:	080045bd 	.word	0x080045bd
 80045e8:	080045bd 	.word	0x080045bd
 80045ec:	08004641 	.word	0x08004641
 80045f0:	080045bd 	.word	0x080045bd
 80045f4:	080045bd 	.word	0x080045bd
 80045f8:	080045bd 	.word	0x080045bd
 80045fc:	080045bd 	.word	0x080045bd
 8004600:	0800473f 	.word	0x0800473f
 8004604:	0800466b 	.word	0x0800466b
 8004608:	080046f9 	.word	0x080046f9
 800460c:	080045bd 	.word	0x080045bd
 8004610:	080045bd 	.word	0x080045bd
 8004614:	08004761 	.word	0x08004761
 8004618:	080045bd 	.word	0x080045bd
 800461c:	0800466b 	.word	0x0800466b
 8004620:	080045bd 	.word	0x080045bd
 8004624:	080045bd 	.word	0x080045bd
 8004628:	08004701 	.word	0x08004701
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6032      	str	r2, [r6, #0]
 8004634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800463c:	2301      	movs	r3, #1
 800463e:	e09c      	b.n	800477a <_printf_i+0x1e6>
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	6031      	str	r1, [r6, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	d501      	bpl.n	8004650 <_printf_i+0xbc>
 800464c:	681d      	ldr	r5, [r3, #0]
 800464e:	e003      	b.n	8004658 <_printf_i+0xc4>
 8004650:	0645      	lsls	r5, r0, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0xb8>
 8004654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004658:	2d00      	cmp	r5, #0
 800465a:	da03      	bge.n	8004664 <_printf_i+0xd0>
 800465c:	232d      	movs	r3, #45	@ 0x2d
 800465e:	426d      	negs	r5, r5
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004664:	4858      	ldr	r0, [pc, #352]	@ (80047c8 <_printf_i+0x234>)
 8004666:	230a      	movs	r3, #10
 8004668:	e011      	b.n	800468e <_printf_i+0xfa>
 800466a:	6821      	ldr	r1, [r4, #0]
 800466c:	6833      	ldr	r3, [r6, #0]
 800466e:	0608      	lsls	r0, r1, #24
 8004670:	f853 5b04 	ldr.w	r5, [r3], #4
 8004674:	d402      	bmi.n	800467c <_printf_i+0xe8>
 8004676:	0649      	lsls	r1, r1, #25
 8004678:	bf48      	it	mi
 800467a:	b2ad      	uxthmi	r5, r5
 800467c:	2f6f      	cmp	r7, #111	@ 0x6f
 800467e:	4852      	ldr	r0, [pc, #328]	@ (80047c8 <_printf_i+0x234>)
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	bf14      	ite	ne
 8004684:	230a      	movne	r3, #10
 8004686:	2308      	moveq	r3, #8
 8004688:	2100      	movs	r1, #0
 800468a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800468e:	6866      	ldr	r6, [r4, #4]
 8004690:	60a6      	str	r6, [r4, #8]
 8004692:	2e00      	cmp	r6, #0
 8004694:	db05      	blt.n	80046a2 <_printf_i+0x10e>
 8004696:	6821      	ldr	r1, [r4, #0]
 8004698:	432e      	orrs	r6, r5
 800469a:	f021 0104 	bic.w	r1, r1, #4
 800469e:	6021      	str	r1, [r4, #0]
 80046a0:	d04b      	beq.n	800473a <_printf_i+0x1a6>
 80046a2:	4616      	mov	r6, r2
 80046a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a8:	fb03 5711 	mls	r7, r3, r1, r5
 80046ac:	5dc7      	ldrb	r7, [r0, r7]
 80046ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b2:	462f      	mov	r7, r5
 80046b4:	42bb      	cmp	r3, r7
 80046b6:	460d      	mov	r5, r1
 80046b8:	d9f4      	bls.n	80046a4 <_printf_i+0x110>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d10b      	bne.n	80046d6 <_printf_i+0x142>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	d508      	bpl.n	80046d6 <_printf_i+0x142>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6861      	ldr	r1, [r4, #4]
 80046c8:	4299      	cmp	r1, r3
 80046ca:	bfde      	ittt	le
 80046cc:	2330      	movle	r3, #48	@ 0x30
 80046ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046d6:	1b92      	subs	r2, r2, r6
 80046d8:	6122      	str	r2, [r4, #16]
 80046da:	f8cd a000 	str.w	sl, [sp]
 80046de:	464b      	mov	r3, r9
 80046e0:	aa03      	add	r2, sp, #12
 80046e2:	4621      	mov	r1, r4
 80046e4:	4640      	mov	r0, r8
 80046e6:	f7ff fee7 	bl	80044b8 <_printf_common>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d14a      	bne.n	8004784 <_printf_i+0x1f0>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f043 0320 	orr.w	r3, r3, #32
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	4832      	ldr	r0, [pc, #200]	@ (80047cc <_printf_i+0x238>)
 8004702:	2778      	movs	r7, #120	@ 0x78
 8004704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	6831      	ldr	r1, [r6, #0]
 800470c:	061f      	lsls	r7, r3, #24
 800470e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004712:	d402      	bmi.n	800471a <_printf_i+0x186>
 8004714:	065f      	lsls	r7, r3, #25
 8004716:	bf48      	it	mi
 8004718:	b2ad      	uxthmi	r5, r5
 800471a:	6031      	str	r1, [r6, #0]
 800471c:	07d9      	lsls	r1, r3, #31
 800471e:	bf44      	itt	mi
 8004720:	f043 0320 	orrmi.w	r3, r3, #32
 8004724:	6023      	strmi	r3, [r4, #0]
 8004726:	b11d      	cbz	r5, 8004730 <_printf_i+0x19c>
 8004728:	2310      	movs	r3, #16
 800472a:	e7ad      	b.n	8004688 <_printf_i+0xf4>
 800472c:	4826      	ldr	r0, [pc, #152]	@ (80047c8 <_printf_i+0x234>)
 800472e:	e7e9      	b.n	8004704 <_printf_i+0x170>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f023 0320 	bic.w	r3, r3, #32
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	e7f6      	b.n	8004728 <_printf_i+0x194>
 800473a:	4616      	mov	r6, r2
 800473c:	e7bd      	b.n	80046ba <_printf_i+0x126>
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6961      	ldr	r1, [r4, #20]
 8004744:	1d18      	adds	r0, r3, #4
 8004746:	6030      	str	r0, [r6, #0]
 8004748:	062e      	lsls	r6, r5, #24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0x1be>
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	e002      	b.n	8004758 <_printf_i+0x1c4>
 8004752:	0668      	lsls	r0, r5, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0x1ba>
 8004756:	8019      	strh	r1, [r3, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	4616      	mov	r6, r2
 800475e:	e7bc      	b.n	80046da <_printf_i+0x146>
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	6032      	str	r2, [r6, #0]
 8004766:	681e      	ldr	r6, [r3, #0]
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	2100      	movs	r1, #0
 800476c:	4630      	mov	r0, r6
 800476e:	f7fb fd57 	bl	8000220 <memchr>
 8004772:	b108      	cbz	r0, 8004778 <_printf_i+0x1e4>
 8004774:	1b80      	subs	r0, r0, r6
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004782:	e7aa      	b.n	80046da <_printf_i+0x146>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	4632      	mov	r2, r6
 8004788:	4649      	mov	r1, r9
 800478a:	4640      	mov	r0, r8
 800478c:	47d0      	blx	sl
 800478e:	3001      	adds	r0, #1
 8004790:	d0ad      	beq.n	80046ee <_printf_i+0x15a>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d413      	bmi.n	80047c0 <_printf_i+0x22c>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e7a6      	b.n	80046f2 <_printf_i+0x15e>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4632      	mov	r2, r6
 80047a8:	4649      	mov	r1, r9
 80047aa:	4640      	mov	r0, r8
 80047ac:	47d0      	blx	sl
 80047ae:	3001      	adds	r0, #1
 80047b0:	d09d      	beq.n	80046ee <_printf_i+0x15a>
 80047b2:	3501      	adds	r5, #1
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	9903      	ldr	r1, [sp, #12]
 80047b8:	1a5b      	subs	r3, r3, r1
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	dcf2      	bgt.n	80047a4 <_printf_i+0x210>
 80047be:	e7eb      	b.n	8004798 <_printf_i+0x204>
 80047c0:	2500      	movs	r5, #0
 80047c2:	f104 0619 	add.w	r6, r4, #25
 80047c6:	e7f5      	b.n	80047b4 <_printf_i+0x220>
 80047c8:	0800491d 	.word	0x0800491d
 80047cc:	0800492e 	.word	0x0800492e

080047d0 <memmove>:
 80047d0:	4288      	cmp	r0, r1
 80047d2:	b510      	push	{r4, lr}
 80047d4:	eb01 0402 	add.w	r4, r1, r2
 80047d8:	d902      	bls.n	80047e0 <memmove+0x10>
 80047da:	4284      	cmp	r4, r0
 80047dc:	4623      	mov	r3, r4
 80047de:	d807      	bhi.n	80047f0 <memmove+0x20>
 80047e0:	1e43      	subs	r3, r0, #1
 80047e2:	42a1      	cmp	r1, r4
 80047e4:	d008      	beq.n	80047f8 <memmove+0x28>
 80047e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ee:	e7f8      	b.n	80047e2 <memmove+0x12>
 80047f0:	4402      	add	r2, r0
 80047f2:	4601      	mov	r1, r0
 80047f4:	428a      	cmp	r2, r1
 80047f6:	d100      	bne.n	80047fa <memmove+0x2a>
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004802:	e7f7      	b.n	80047f4 <memmove+0x24>

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d06      	ldr	r5, [pc, #24]	@ (8004820 <_sbrk_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc f9ea 	bl	8000be8 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000334 	.word	0x20000334

08004824 <memcpy>:
 8004824:	440a      	add	r2, r1
 8004826:	4291      	cmp	r1, r2
 8004828:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800482c:	d100      	bne.n	8004830 <memcpy+0xc>
 800482e:	4770      	bx	lr
 8004830:	b510      	push	{r4, lr}
 8004832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800483a:	4291      	cmp	r1, r2
 800483c:	d1f9      	bne.n	8004832 <memcpy+0xe>
 800483e:	bd10      	pop	{r4, pc}

08004840 <_realloc_r>:
 8004840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004844:	4607      	mov	r7, r0
 8004846:	4614      	mov	r4, r2
 8004848:	460d      	mov	r5, r1
 800484a:	b921      	cbnz	r1, 8004856 <_realloc_r+0x16>
 800484c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	4611      	mov	r1, r2
 8004852:	f7ff bc4d 	b.w	80040f0 <_malloc_r>
 8004856:	b92a      	cbnz	r2, 8004864 <_realloc_r+0x24>
 8004858:	f7ff fbde 	bl	8004018 <_free_r>
 800485c:	4625      	mov	r5, r4
 800485e:	4628      	mov	r0, r5
 8004860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004864:	f000 f81a 	bl	800489c <_malloc_usable_size_r>
 8004868:	4284      	cmp	r4, r0
 800486a:	4606      	mov	r6, r0
 800486c:	d802      	bhi.n	8004874 <_realloc_r+0x34>
 800486e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004872:	d8f4      	bhi.n	800485e <_realloc_r+0x1e>
 8004874:	4621      	mov	r1, r4
 8004876:	4638      	mov	r0, r7
 8004878:	f7ff fc3a 	bl	80040f0 <_malloc_r>
 800487c:	4680      	mov	r8, r0
 800487e:	b908      	cbnz	r0, 8004884 <_realloc_r+0x44>
 8004880:	4645      	mov	r5, r8
 8004882:	e7ec      	b.n	800485e <_realloc_r+0x1e>
 8004884:	42b4      	cmp	r4, r6
 8004886:	4622      	mov	r2, r4
 8004888:	4629      	mov	r1, r5
 800488a:	bf28      	it	cs
 800488c:	4632      	movcs	r2, r6
 800488e:	f7ff ffc9 	bl	8004824 <memcpy>
 8004892:	4629      	mov	r1, r5
 8004894:	4638      	mov	r0, r7
 8004896:	f7ff fbbf 	bl	8004018 <_free_r>
 800489a:	e7f1      	b.n	8004880 <_realloc_r+0x40>

0800489c <_malloc_usable_size_r>:
 800489c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a0:	1f18      	subs	r0, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfbc      	itt	lt
 80048a6:	580b      	ldrlt	r3, [r1, r0]
 80048a8:	18c0      	addlt	r0, r0, r3
 80048aa:	4770      	bx	lr

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
