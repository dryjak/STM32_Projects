
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ee0  08003ee0  00004ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee8  08003ee8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00004ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ef0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003efc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003efc  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e83  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250b  00000000  00000000  00015ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000183d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00019108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025acf  00000000  00000000  00019b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cbf  00000000  00000000  0003f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec822  00000000  00000000  000502cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013caf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  0013cb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001400dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e88 	.word	0x08003e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003e88 	.word	0x08003e88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MPU6050_Init>:
float gy_offset = 0.0f;
float gz_offset = 0.0f;


void MPU6050_Init(MPU6050_t *MPU6050, I2C_HandleTypeDef *Hi2c, uint16_t Address)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
	MPU6050->hi2c 		= 	Hi2c;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	601a      	str	r2, [r3, #0]
	MPU6050->address 	= 	Address;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	809a      	strh	r2, [r3, #4]
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <MPU6050_WakeUp>:

HAL_StatusTypeDef MPU6050_WakeUp(MPU6050_t *MPU6050)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t Register;
	if ((MPU6050_MemRead(MPU6050, MPU6050_PWR_MGMT_1, &Register, 1)) != HAL_OK)
 8000572:	f107 020f 	add.w	r2, r7, #15
 8000576:	2301      	movs	r3, #1
 8000578:	216b      	movs	r1, #107	@ 0x6b
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f825 	bl	80005ca <MPU6050_MemRead>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MPU6050_WakeUp+0x20>
	{
		return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00b      	b.n	80005a2 <MPU6050_WakeUp+0x38>
	}

	//Setting 6th bit to 0 to disable sleep mode
	Register &= ~(1 << 6);		//wyzeruj bit 6
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000590:	b2db      	uxtb	r3, r3
 8000592:	73fb      	strb	r3, [r7, #15]
	return MPU6050_MemWrite(MPU6050, MPU6050_PWR_MGMT_1, Register);
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	461a      	mov	r2, r3
 8000598:	216b      	movs	r1, #107	@ 0x6b
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 f836 	bl	800060c <MPU6050_MemWrite>
 80005a0:	4603      	mov	r3, r0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <MPU6050_WHO_AM_I>:

HAL_StatusTypeDef MPU6050_WHO_AM_I (MPU6050_t *MPU6050, uint8_t *Who_am_I)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	return MPU6050_MemRead(MPU6050, WHO_AM_I, Who_am_I, 1);
 80005b4:	2301      	movs	r3, #1
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	2175      	movs	r1, #117	@ 0x75
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f805 	bl	80005ca <MPU6050_MemRead>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <MPU6050_MemRead>:



HAL_StatusTypeDef MPU6050_MemRead(MPU6050_t *MPU6050, uint8_t Reg, uint8_t *Data, uint16_t Size)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b088      	sub	sp, #32
 80005ce:	af04      	add	r7, sp, #16
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	461a      	mov	r2, r3
 80005d6:	460b      	mov	r3, r1
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	4613      	mov	r3, r2
 80005dc:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(MPU6050->hi2c, (MPU6050->address << 1), Reg, I2C_MEMADD_SIZE_8BIT, Data, Size, HAL_MAX_DELAY);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	889b      	ldrh	r3, [r3, #4]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	f001 f877 	bl	80016f0 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MPU6050_MemWrite>:

HAL_StatusTypeDef MPU6050_MemWrite(MPU6050_t *MPU6050, uint8_t Reg, uint8_t Data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af04      	add	r7, sp, #16
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
 8000618:	4613      	mov	r3, r2
 800061a:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(MPU6050->hi2c, (MPU6050->address << 1), Reg, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	b299      	uxth	r1, r3
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	b29a      	uxth	r2, r3
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	2301      	movs	r3, #1
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	1cbb      	adds	r3, r7, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	f000 ff44 	bl	80014c8 <HAL_I2C_Mem_Write>
 8000640:	4603      	mov	r3, r0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <MPU6050_SetGyroRange>:

HAL_StatusTypeDef MPU6050_SetGyroRange(MPU6050_t *MPU6050)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	//Firstly you need to read the register value
	uint8_t Register;
	if ((MPU6050_MemRead(MPU6050, GYRO_CONFIG, &Register, 1)) != HAL_OK)
 8000652:	f107 020f 	add.w	r2, r7, #15
 8000656:	2301      	movs	r3, #1
 8000658:	211b      	movs	r1, #27
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ffb5 	bl	80005ca <MPU6050_MemRead>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MPU6050_SetGyroRange+0x20>
	{
		return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00b      	b.n	8000682 <MPU6050_SetGyroRange+0x38>
	}

	//setting FS_SEL[1:0] in order to setfull scale range
	Register &= (~((1 << 4) | (1 << 5)));		//setting 250 stopni na sekunde
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000670:	b2db      	uxtb	r3, r3
 8000672:	73fb      	strb	r3, [r7, #15]
	return MPU6050_MemWrite(MPU6050, GYRO_CONFIG, Register);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	461a      	mov	r2, r3
 8000678:	211b      	movs	r1, #27
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ffc6 	bl	800060c <MPU6050_MemWrite>
 8000680:	4603      	mov	r3, r0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MPU6050_ReadAcceleration>:
	Register &= (~((1 << 4)|(1 << 5)));		//setting acceleration to -/+ 2g
	return MPU6050_MemWrite(MPU6050, ACCEL_CONFIG, Register);
}

HAL_StatusTypeDef MPU6050_ReadAcceleration(MPU6050_t *MPU6050, Accel_t *Accelerations)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]


	uint8_t AccelData[6];

	//Read Acceleration value
	if ((MPU6050_MemRead(MPU6050, ACCEL_XOUT_H, AccelData, 6)) == HAL_ERROR)
 8000696:	f107 0208 	add.w	r2, r7, #8
 800069a:	2306      	movs	r3, #6
 800069c:	213b      	movs	r1, #59	@ 0x3b
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff93 	bl	80005ca <MPU6050_MemRead>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d101      	bne.n	80006ae <MPU6050_ReadAcceleration+0x22>
	{
		return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e042      	b.n	8000734 <MPU6050_ReadAcceleration+0xa8>
	*Gx = AccelX.Var16u;
	*Gy = AccelY.Var16u;
	*Gz = AccelZ.Var16u;
	*/

	Accelerations->AccelX = ((int16_t) (AccelData[0] << 8) | (AccelData[1])) / 16384.0f;
 80006ae:	7a3b      	ldrb	r3, [r7, #8]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	7a7b      	ldrb	r3, [r7, #9]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800073c <MPU6050_ReadAcceleration+0xb0>
 80006c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	ee17 3a90 	vmov	r3, s15
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	801a      	strh	r2, [r3, #0]
	Accelerations->AccelY = ((int16_t) (AccelData[2] << 8) | (AccelData[3])) / 16384.0f;
 80006da:	7abb      	ldrb	r3, [r7, #10]
 80006dc:	b21b      	sxth	r3, r3
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	ee07 3a90 	vmov	s15, r3
 80006ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800073c <MPU6050_ReadAcceleration+0xb0>
 80006f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fc:	ee17 3a90 	vmov	r3, s15
 8000700:	b21a      	sxth	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	805a      	strh	r2, [r3, #2]
	Accelerations->AccelZ = ((int16_t) (AccelData[4] << 8) | (AccelData[5])) / 16384.0f;
 8000706:	7b3b      	ldrb	r3, [r7, #12]
 8000708:	b21b      	sxth	r3, r3
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21b      	sxth	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4313      	orrs	r3, r2
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800073c <MPU6050_ReadAcceleration+0xb0>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000728:	ee17 3a90 	vmov	r3, s15
 800072c:	b21a      	sxth	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	809a      	strh	r2, [r3, #4]


	return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	46800000 	.word	0x46800000

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a2e      	ldr	r2, [pc, #184]	@ (8000814 <MX_GPIO_Init+0xd4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a28      	ldr	r2, [pc, #160]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a22      	ldr	r2, [pc, #136]	@ (8000814 <MX_GPIO_Init+0xd4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 fdad 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	@ (8000818 <MX_GPIO_Init+0xd8>)
 80007da:	f000 fc1d 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	2320      	movs	r3, #32
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f8:	f000 fc0e 	bl	8001018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2028      	movs	r0, #40	@ 0x28
 8000802:	f000 fbd4 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000806:	2028      	movs	r0, #40	@ 0x28
 8000808:	f000 fbeb 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800

0800081c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <MX_I2C1_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000858:	f000 fd9b 	bl	8001392 <HAL_I2C_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f8f6 	bl	8000a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <MX_I2C1_Init+0x74>)
 800086a:	f001 fb1d 	bl	8001ea8 <HAL_I2CEx_ConfigAnalogFilter>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f8ed 	bl	8000a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_I2C1_Init+0x74>)
 800087c:	f001 fb5f 	bl	8001f3e <HAL_I2CEx_ConfigDigitalFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 f8e4 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000028 	.word	0x20000028
 8000894:	40005400 	.word	0x40005400
 8000898:	40b285c2 	.word	0x40b285c2

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09e      	sub	sp, #120	@ 0x78
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2254      	movs	r2, #84	@ 0x54
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fab7 	bl	8003e30 <memset>
  if(i2cHandle->Instance==I2C1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <HAL_I2C_MspInit+0xa8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d136      	bne.n	800093a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008cc:	2340      	movs	r3, #64	@ 0x40
 80008ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f95f 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008e4:	f000 f8b5 	bl	8000a52 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000900:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000904:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000912:	2304      	movs	r3, #4
 8000914:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800091a:	4619      	mov	r1, r3
 800091c:	480b      	ldr	r0, [pc, #44]	@ (800094c <HAL_I2C_MspInit+0xb0>)
 800091e:	f000 fb7b 	bl	8001018 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 8000928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_I2C_MspInit+0xac>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800093a:	bf00      	nop
 800093c:	3778      	adds	r7, #120	@ 0x78
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40005400 	.word	0x40005400
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 f9bd 	bl	8000cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f830 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f7ff fef0 	bl	8000740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000960:	f7ff ff5c 	bl	800081c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000964:	f000 f8ea 	bl	8000b3c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //initialize MPU6050
  MPU6050_Init(&MPU6050, &hi2c1, 0x68);
 8000968:	2268      	movs	r2, #104	@ 0x68
 800096a:	490f      	ldr	r1, [pc, #60]	@ (80009a8 <main+0x58>)
 800096c:	480f      	ldr	r0, [pc, #60]	@ (80009ac <main+0x5c>)
 800096e:	f7ff fde9 	bl	8000544 <MPU6050_Init>

  //check adress correctness
  MPU6050_WHO_AM_I(&MPU6050, &DeviceAddress);
 8000972:	490f      	ldr	r1, [pc, #60]	@ (80009b0 <main+0x60>)
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <main+0x5c>)
 8000976:	f7ff fe18 	bl	80005aa <MPU6050_WHO_AM_I>

  HAL_UART_Transmit(&hlpuart1, &DeviceAddress, sizeof(uint8_t), HAL_MAX_DELAY);
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800097e:	2201      	movs	r2, #1
 8000980:	490b      	ldr	r1, [pc, #44]	@ (80009b0 <main+0x60>)
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <main+0x64>)
 8000984:	f002 fba8 	bl	80030d8 <HAL_UART_Transmit>

  MPU6050_WakeUp(&MPU6050);
 8000988:	4808      	ldr	r0, [pc, #32]	@ (80009ac <main+0x5c>)
 800098a:	f7ff fdee 	bl	800056a <MPU6050_WakeUp>
  MPU6050_SetGyroRange(&MPU6050);
 800098e:	4807      	ldr	r0, [pc, #28]	@ (80009ac <main+0x5c>)
 8000990:	f7ff fe5b 	bl	800064a <MPU6050_SetGyroRange>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_ReadAcceleration(&MPU6050, &Accelerations);
 8000994:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <main+0x68>)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <main+0x5c>)
 8000998:	f7ff fe78 	bl	800068c <MPU6050_ReadAcceleration>

	  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a0:	f000 fa08 	bl	8000db4 <HAL_Delay>
	  MPU6050_ReadAcceleration(&MPU6050, &Accelerations);
 80009a4:	bf00      	nop
 80009a6:	e7f5      	b.n	8000994 <main+0x44>
 80009a8:	20000028 	.word	0x20000028
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	20000084 	.word	0x20000084
 80009b4:	20000090 	.word	0x20000090
 80009b8:	20000088 	.word	0x20000088

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	@ 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2238      	movs	r2, #56	@ 0x38
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fa30 	bl	8003e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009de:	2000      	movs	r0, #0
 80009e0:	f001 fafa 	bl	8001fd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2340      	movs	r3, #64	@ 0x40
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009fe:	2355      	movs	r3, #85	@ 0x55
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fb94 	bl	8002140 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a1e:	f000 f818 	bl	8000a52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fe92 	bl	8002764 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a46:	f000 f804 	bl	8000a52 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	@ 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
}
 8000a58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	bf00      	nop
 8000a5c:	e7fd      	b.n	8000a5a <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f001 fb43 	bl	8002120 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f93b 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b0a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b0e:	f000 fc1d 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b40:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b42:	4a22      	ldr	r2, [pc, #136]	@ (8000bcc <MX_LPUART1_UART_Init+0x90>)
 8000b44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b7e:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b80:	f002 fa5a 	bl	8003038 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f7ff ff62 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000b92:	f003 f883 	bl	8003c9c <HAL_UARTEx_SetTxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b9c:	f7ff ff59 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000ba4:	f003 f8b8 	bl	8003d18 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000bae:	f7ff ff50 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_LPUART1_UART_Init+0x8c>)
 8000bb4:	f003 f839 	bl	8003c2a <HAL_UARTEx_DisableFifoMode>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f7ff ff48 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	40008000 	.word	0x40008000

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09e      	sub	sp, #120	@ 0x78
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2254      	movs	r2, #84	@ 0x54
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f91d 	bl	8003e30 <memset>
  if(uartHandle->Instance==LPUART1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c78 <HAL_UART_MspInit+0xa8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d136      	bne.n	8000c6e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c00:	2320      	movs	r3, #32
 8000c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 ffc5 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c18:	f7ff ff1b 	bl	8000a52 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c20:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UART_MspInit+0xac>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f000 f9d5 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3778      	adds	r7, #120	@ 0x78
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40008000 	.word	0x40008000
 8000c7c:	40021000 	.word	0x40021000

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f7ff ff48 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 f8c7 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fe4d 	bl	8000950 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc4:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ccc:	20000128 	.word	0x20000128

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>

08000cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f95b 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f80e 	bl	8000d04 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e001      	b.n	8000cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf4:	f7ff feb4 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_InitTick+0x68>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d022      	beq.n	8000d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_InitTick+0x6c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <HAL_InitTick+0x68>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f966 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b0f      	cmp	r3, #15
 8000d3c:	d809      	bhi.n	8000d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d46:	f000 f932 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_InitTick+0x70>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e004      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000124 	.word	0x20000124
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000124 	.word	0x20000124

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dcc:	d004      	beq.n	8000dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_Delay+0x40>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd8:	bf00      	nop
 8000dda:	f7ff ffdf 	bl	8000d9c <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8f7      	bhi.n	8000dda <HAL_Delay+0x26>
  {
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff40 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff33 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa4 	bl	8000f54 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001026:	e15a      	b.n	80012de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 814c 	beq.w	80012d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a6 	beq.w	80012d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b5b      	ldr	r3, [pc, #364]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	4a5a      	ldr	r2, [pc, #360]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	@ 0x60
 8001198:	4b58      	ldr	r3, [pc, #352]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a4:	4a56      	ldr	r2, [pc, #344]	@ (8001300 <HAL_GPIO_Init+0x2e8>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ce:	d01f      	beq.n	8001210 <HAL_GPIO_Init+0x1f8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_GPIO_Init+0x2ec>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d019      	beq.n	800120c <HAL_GPIO_Init+0x1f4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4b      	ldr	r2, [pc, #300]	@ (8001308 <HAL_GPIO_Init+0x2f0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d013      	beq.n	8001208 <HAL_GPIO_Init+0x1f0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4a      	ldr	r2, [pc, #296]	@ (800130c <HAL_GPIO_Init+0x2f4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00d      	beq.n	8001204 <HAL_GPIO_Init+0x1ec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a49      	ldr	r2, [pc, #292]	@ (8001310 <HAL_GPIO_Init+0x2f8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x1e8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a48      	ldr	r2, [pc, #288]	@ (8001314 <HAL_GPIO_Init+0x2fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d101      	bne.n	80011fc <HAL_GPIO_Init+0x1e4>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e00a      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 80011fc:	2306      	movs	r3, #6
 80011fe:	e008      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001200:	2304      	movs	r3, #4
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001204:	2303      	movs	r3, #3
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001210:	2300      	movs	r3, #0
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001222:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_GPIO_Init+0x2e8>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001230:	4b39      	ldr	r3, [pc, #228]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001254:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800125a:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x300>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d2:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f47f ae9d 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800
 800130c:	48000c00 	.word	0x48000c00
 8001310:	48001000 	.word	0x48001000
 8001314:	48001400 	.word	0x48001400
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f806 	bl	800137c <HAL_GPIO_EXTI_Callback>
  }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e08d      	b.n	80014c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fa6f 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2224      	movs	r2, #36	@ 0x24
 80013c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e006      	b.n	800141a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001418:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d108      	bne.n	8001434 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	e007      	b.n	8001444 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001442:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001456:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001466:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69d9      	ldr	r1, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	817b      	strh	r3, [r7, #10]
 80014da:	460b      	mov	r3, r1
 80014dc:	813b      	strh	r3, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	f040 80f9 	bne.w	80016e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_I2C_Mem_Write+0x34>
 80014f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001502:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0ed      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_I2C_Mem_Write+0x4e>
 8001512:	2302      	movs	r3, #2
 8001514:	e0e6      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800151e:	f7ff fc3d 	bl	8000d9c <HAL_GetTick>
 8001522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2319      	movs	r3, #25
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fac3 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0d1      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2221      	movs	r2, #33	@ 0x21
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a3a      	ldr	r2, [r7, #32]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001568:	88f8      	ldrh	r0, [r7, #6]
 800156a:	893a      	ldrh	r2, [r7, #8]
 800156c:	8979      	ldrh	r1, [r7, #10]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4603      	mov	r3, r0
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f9d3 	bl	8001924 <I2C_RequestMemoryWrite>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0a9      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	2bff      	cmp	r3, #255	@ 0xff
 8001598:	d90e      	bls.n	80015b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	22ff      	movs	r2, #255	@ 0xff
 800159e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	8979      	ldrh	r1, [r7, #10]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fc47 	bl	8001e44 <I2C_TransferConfig>
 80015b6:	e00f      	b.n	80015d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	8979      	ldrh	r1, [r7, #10]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 fc36 	bl	8001e44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 fac6 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e07b      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d034      	beq.n	8001690 <HAL_I2C_Mem_Write+0x1c8>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162a:	2b00      	cmp	r3, #0
 800162c:	d130      	bne.n	8001690 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 fa3f 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04d      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	2bff      	cmp	r3, #255	@ 0xff
 8001650:	d90e      	bls.n	8001670 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	22ff      	movs	r2, #255	@ 0xff
 8001656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165c:	b2da      	uxtb	r2, r3
 800165e:	8979      	ldrh	r1, [r7, #10]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 fbeb 	bl	8001e44 <I2C_TransferConfig>
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167e:	b2da      	uxtb	r2, r3
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	2300      	movs	r3, #0
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fbda 	bl	8001e44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d19e      	bne.n	80015d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 faac 	bl	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e01a      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2220      	movs	r2, #32
 80016b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_I2C_Mem_Write+0x224>)
 80016c2:	400b      	ands	r3, r1
 80016c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	fe00e800 	.word	0xfe00e800

080016f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	460b      	mov	r3, r1
 8001704:	813b      	strh	r3, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b20      	cmp	r3, #32
 8001714:	f040 80fd 	bne.w	8001912 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <HAL_I2C_Mem_Read+0x34>
 800171e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0f1      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_I2C_Mem_Read+0x4e>
 800173a:	2302      	movs	r3, #2
 800173c:	e0ea      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001746:	f7ff fb29 	bl	8000d9c <HAL_GetTick>
 800174a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2319      	movs	r3, #25
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f9af 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d5      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2222      	movs	r2, #34	@ 0x22
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	@ 0x40
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001790:	88f8      	ldrh	r0, [r7, #6]
 8001792:	893a      	ldrh	r2, [r7, #8]
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	4603      	mov	r3, r0
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f913 	bl	80019cc <I2C_RequestMemoryRead>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0ad      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2bff      	cmp	r3, #255	@ 0xff
 80017c0:	d90e      	bls.n	80017e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	22ff      	movs	r2, #255	@ 0xff
 80017c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	8979      	ldrh	r1, [r7, #10]
 80017d0:	4b52      	ldr	r3, [pc, #328]	@ (800191c <HAL_I2C_Mem_Read+0x22c>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fb33 	bl	8001e44 <I2C_TransferConfig>
 80017de:	e00f      	b.n	8001800 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	8979      	ldrh	r1, [r7, #10]
 80017f2:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <HAL_I2C_Mem_Read+0x22c>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fb22 	bl	8001e44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001806:	2200      	movs	r2, #0
 8001808:	2104      	movs	r1, #4
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f956 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07c      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d034      	beq.n	80018c0 <HAL_I2C_Mem_Read+0x1d0>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d130      	bne.n	80018c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f927 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e04d      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	2bff      	cmp	r3, #255	@ 0xff
 8001880:	d90e      	bls.n	80018a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	22ff      	movs	r2, #255	@ 0xff
 8001886:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188c:	b2da      	uxtb	r2, r3
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fad3 	bl	8001e44 <I2C_TransferConfig>
 800189e:	e00f      	b.n	80018c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fac2 	bl	8001e44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d19a      	bne.n	8001800 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f994 	bl	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e01a      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2220      	movs	r2, #32
 80018e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_I2C_Mem_Read+0x230>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001912:	2302      	movs	r3, #2
  }
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	80002400 	.word	0x80002400
 8001920:	fe00e800 	.word	0xfe00e800

08001924 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <I2C_RequestMemoryWrite+0xa4>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fa79 	bl	8001e44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f909 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e02c      	b.n	80019c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800196c:	893b      	ldrh	r3, [r7, #8]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
 8001976:	e015      	b.n	80019a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001978:	893b      	ldrh	r3, [r7, #8]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	69b9      	ldr	r1, [r7, #24]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f8ef 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e012      	b.n	80019c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800199a:	893b      	ldrh	r3, [r7, #8]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f884 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	80002000 	.word	0x80002000

080019cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	817b      	strh	r3, [r7, #10]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	8979      	ldrh	r1, [r7, #10]
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <I2C_RequestMemoryRead+0xa4>)
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fa26 	bl	8001e44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f8b6 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e02c      	b.n	8001a66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a12:	893b      	ldrh	r3, [r7, #8]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a1c:	e015      	b.n	8001a4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a1e:	893b      	ldrh	r3, [r7, #8]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f89c 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e012      	b.n	8001a66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2140      	movs	r1, #64	@ 0x40
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f831 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	80002000 	.word	0x80002000

08001a74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d103      	bne.n	8001a92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	619a      	str	r2, [r3, #24]
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001acc:	e03b      	b.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f8d6 	bl	8001c84 <I2C_IsErrorOccurred>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e041      	b.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ae8:	d02d      	beq.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff f957 	bl	8000d9c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d122      	bne.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d113      	bne.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d0b4      	beq.n	8001ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b7a:	e033      	b.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f87f 	bl	8001c84 <I2C_IsErrorOccurred>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e031      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b96:	d025      	beq.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff f900 	bl	8000d9c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11a      	bne.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d013      	beq.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e007      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d1c4      	bne.n	8001b7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c08:	e02f      	b.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f838 	bl	8001c84 <I2C_IsErrorOccurred>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e02d      	b.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1e:	f7ff f8bd 	bl	8000d9c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d11a      	bne.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d013      	beq.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e007      	b.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d1c8      	bne.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d068      	beq.n	8001d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cb8:	e049      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cc0:	d045      	beq.n	8001d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f86b 	bl	8000d9c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_IsErrorOccurred+0x54>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d13a      	bne.n	8001d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cfa:	d121      	bne.n	8001d40 <I2C_IsErrorOccurred+0xbc>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d02:	d01d      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d01a      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d1a:	f7ff f83f 	bl	8000d9c <HAL_GetTick>
 8001d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d20:	e00e      	b.n	8001d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d22:	f7ff f83b 	bl	8000d9c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b19      	cmp	r3, #25
 8001d2e:	d907      	bls.n	8001d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d3e:	e006      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d1e9      	bne.n	8001d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d003      	beq.n	8001d64 <I2C_IsErrorOccurred+0xe0>
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0aa      	beq.n	8001cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fe3b 	bl	8001a74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <I2C_IsErrorOccurred+0x1bc>)
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	4613      	mov	r3, r2
 8001e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e5c:	7a7b      	ldrb	r3, [r7, #9]
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	0d5b      	lsrs	r3, r3, #21
 8001e7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <I2C_TransferConfig+0x60>)
 8001e84:	430b      	orrs	r3, r1
 8001e86:	43db      	mvns	r3, r3
 8001e88:	ea02 0103 	and.w	r1, r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	03ff63ff 	.word	0x03ff63ff

08001ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d138      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e032      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	@ 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d139      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e033      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	@ 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b43      	ldr	r3, [pc, #268]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200c:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002014:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	@ 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d158      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e057      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002068:	e04d      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002070:	d141      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002072:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207e:	d131      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2232      	movs	r2, #50	@ 0x32
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b6:	e002      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d102      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020de:	d112      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e011      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f4:	e007      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002104:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40007000 	.word	0x40007000
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800212a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212e:	6093      	str	r3, [r2, #8]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e2fe      	b.n	8002750 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b97      	ldr	r3, [pc, #604]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b94      	ldr	r3, [pc, #592]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0x3e>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d002      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b8d      	ldr	r3, [pc, #564]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e2d9      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a84      	ldr	r2, [pc, #528]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7b      	ldr	r2, [pc, #492]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b78      	ldr	r3, [pc, #480]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a77      	ldr	r2, [pc, #476]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a74      	ldr	r2, [pc, #464]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fdd0 	bl	8000d9c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fdcc 	bl	8000d9c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e29e      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fdbc 	bl	8000d9c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fdb8 	bl	8000d9c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e28a      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d075      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4b59      	ldr	r3, [pc, #356]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4b56      	ldr	r3, [pc, #344]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x136>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x13c>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d11f      	bne.n	80022bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x154>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e25d      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b49      	ldr	r3, [pc, #292]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4946      	ldr	r1, [pc, #280]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a8:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fd29 	bl	8000d04 <HAL_InitTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e249      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d023      	beq.n	800230c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a3c      	ldr	r2, [pc, #240]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fd64 	bl	8000d9c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe fd60 	bl	8000d9c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e232      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ea:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b31      	ldr	r3, [pc, #196]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	492d      	ldr	r1, [pc, #180]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e01a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230c:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fd40 	bl	8000d9c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe fd3c 	bl	8000d9c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e20e      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1e0>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d041      	beq.n	80023d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fd19 	bl	8000d9c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe fd15 	bl	8000d9c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1e7      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ef      	beq.n	800236e <HAL_RCC_OscConfig+0x22e>
 800238e:	e020      	b.n	80023d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fcfc 	bl	8000d9c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a6:	e00d      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fcf8 	bl	8000d9c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d906      	bls.n	80023c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1ca      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c4:	4b8c      	ldr	r3, [pc, #560]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ea      	bne.n	80023a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a6 	beq.w	800252c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023e4:	4b84      	ldr	r3, [pc, #528]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2b4>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x2b6>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	@ 0x58
 8002406:	4b7c      	ldr	r3, [pc, #496]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002416:	4b79      	ldr	r3, [pc, #484]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fcb5 	bl	8000d9c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fcb1 	bl	8000d9c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e183      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	4b6c      	ldr	r3, [pc, #432]	@ (80025fc <HAL_RCC_OscConfig+0x4bc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_RCC_OscConfig+0x32e>
 800245c:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800246c:	e024      	b.n	80024b8 <HAL_RCC_OscConfig+0x378>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d110      	bne.n	8002498 <HAL_RCC_OscConfig+0x358>
 8002476:	4b60      	ldr	r3, [pc, #384]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	4a5e      	ldr	r2, [pc, #376]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002486:	4b5c      	ldr	r3, [pc, #368]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4a5a      	ldr	r2, [pc, #360]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x378>
 8002498:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a56      	ldr	r2, [pc, #344]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fc6c 	bl	8000d9c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fc68 	bl	8000d9c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e138      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024de:	4b46      	ldr	r3, [pc, #280]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCC_OscConfig+0x388>
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe fc55 	bl	8000d9c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fc51 	bl	8000d9c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e121      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800250c:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ed      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01c      	beq.n	800257a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002540:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002546:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fc24 	bl	8000d9c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002558:	f7fe fc20 	bl	8000d9c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0f2      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256a:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x418>
 8002578:	e01b      	b.n	80025b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800257a:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002580:	4a1d      	ldr	r2, [pc, #116]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fc07 	bl	8000d9c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002592:	f7fe fc03 	bl	8000d9c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d5      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80c9 	beq.w	800274e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	f000 8083 	beq.w	80026d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d15e      	bne.n	8002690 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fbdd 	bl	8000d9c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e00c      	b.n	8002600 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fbd9 	bl	8000d9c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d905      	bls.n	8002600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ab      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ec      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	4b52      	ldr	r3, [pc, #328]	@ (800275c <HAL_RCC_OscConfig+0x61c>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6a11      	ldr	r1, [r2, #32]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261c:	3a01      	subs	r2, #1
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002626:	0212      	lsls	r2, r2, #8
 8002628:	4311      	orrs	r1, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800262e:	0852      	lsrs	r2, r2, #1
 8002630:	3a01      	subs	r2, #1
 8002632:	0552      	lsls	r2, r2, #21
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800263a:	0852      	lsrs	r2, r2, #1
 800263c:	3a01      	subs	r2, #1
 800263e:	0652      	lsls	r2, r2, #25
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002646:	06d2      	lsls	r2, r2, #27
 8002648:	430a      	orrs	r2, r1
 800264a:	4943      	ldr	r1, [pc, #268]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fb98 	bl	8000d9c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fb94 	bl	8000d9c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e066      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b35      	ldr	r3, [pc, #212]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x530>
 800268e:	e05e      	b.n	800274e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a30      	ldr	r2, [pc, #192]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fb7e 	bl	8000d9c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fb7a 	bl	8000d9c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04c      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4924      	ldr	r1, [pc, #144]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCC_OscConfig+0x620>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
 80026ce:	e03e      	b.n	800274e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e039      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <HAL_RCC_OscConfig+0x618>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d12c      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d123      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d11b      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d113      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d109      	bne.n	800274a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	019f800c 	.word	0x019f800c
 8002760:	feeefffc 	.word	0xfeeefffc

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e11e      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b91      	ldr	r3, [pc, #580]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	498c      	ldr	r1, [pc, #560]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b8a      	ldr	r3, [pc, #552]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e106      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d073      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d129      	bne.n	8002814 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c0:	4b81      	ldr	r3, [pc, #516]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0f4      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027d0:	f000 f99e 	bl	8002b10 <RCC_GetSysClockFreqFromPLLSource>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_ClockConfig+0x268>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d93f      	bls.n	800285e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027de:	4b7a      	ldr	r3, [pc, #488]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d033      	beq.n	800285e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12f      	bne.n	800285e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002806:	4a70      	ldr	r2, [pc, #448]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800280c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e024      	b.n	800285e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0c6      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0be      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800283c:	f000 f8ce 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4a61      	ldr	r2, [pc, #388]	@ (80029cc <HAL_RCC_ClockConfig+0x268>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d909      	bls.n	800285e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800284a:	4b5f      	ldr	r3, [pc, #380]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002852:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002858:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b5a      	ldr	r3, [pc, #360]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4957      	ldr	r1, [pc, #348]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fa94 	bl	8000d9c <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fa90 	bl	8000d9c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e095      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b43      	ldr	r3, [pc, #268]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a42      	ldr	r2, [pc, #264]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028d0:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028d8:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b39      	ldr	r3, [pc, #228]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4936      	ldr	r1, [pc, #216]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
 80028f2:	e008      	b.n	8002906 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b80      	cmp	r3, #128	@ 0x80
 80028f8:	d105      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002904:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002906:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d21d      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 020f 	bic.w	r2, r3, #15
 800291c:	4929      	ldr	r1, [pc, #164]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002924:	f7fe fa3a 	bl	8000d9c <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe fa36 	bl	8000d9c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e03b      	b.n	80029ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ed      	bne.n	800292c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4917      	ldr	r1, [pc, #92]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297a:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490f      	ldr	r1, [pc, #60]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298e:	f000 f825 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <HAL_RCC_ClockConfig+0x26c>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x270>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9a6 	bl	8000d04 <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	04c4b400 	.word	0x04c4b400
 80029d0:	08003ea0 	.word	0x08003ea0
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e047      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a00:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e03e      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d136      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a30:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	68d2      	ldr	r2, [r2, #12]
 8002a3c:	0a12      	lsrs	r2, r2, #8
 8002a3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
      break;
 8002a48:	e00c      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a4a:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	0a12      	lsrs	r2, r2, #8
 8002a58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
      break;
 8002a62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0e5b      	lsrs	r3, r3, #25
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e001      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a84:	693b      	ldr	r3, [r7, #16]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	016e3600 	.word	0x016e3600

08002aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08003eb0 	.word	0x08003eb0

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae8:	f7ff ffda 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0adb      	lsrs	r3, r3, #11
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08003eb0 	.word	0x08003eb0

08002b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10c      	bne.n	8002b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3e:	68d2      	ldr	r2, [r2, #12]
 8002b40:	0a12      	lsrs	r2, r2, #8
 8002b42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
    break;
 8002b4c:	e00c      	b.n	8002b68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	0a12      	lsrs	r2, r2, #8
 8002b5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    break;
 8002b66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0e5b      	lsrs	r3, r3, #25
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b82:	687b      	ldr	r3, [r7, #4]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000
 8002b94:	016e3600 	.word	0x016e3600
 8002b98:	00f42400 	.word	0x00f42400

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8098 	beq.w	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	4a3f      	ldr	r2, [pc, #252]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a39      	ldr	r2, [pc, #228]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf2:	f7fe f8d3 	bl	8000d9c <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe f8cf 	bl	8000d9c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c0c:	e005      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c0e:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ef      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d159      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01e      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d019      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c68:	4a18      	ldr	r2, [pc, #96]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f88f 	bl	8000d9c <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c80:	e00b      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe f88b 	bl	8000d9c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d902      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	74fb      	strb	r3, [r7, #19]
            break;
 8002c98:	e006      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ec      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	4903      	ldr	r1, [pc, #12]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	74bb      	strb	r3, [r7, #18]
 8002cca:	e005      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd8:	7c7b      	ldrb	r3, [r7, #17]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4ba7      	ldr	r3, [pc, #668]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	4aa6      	ldr	r2, [pc, #664]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 0203 	bic.w	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	499d      	ldr	r1, [pc, #628]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d18:	4b98      	ldr	r3, [pc, #608]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f023 020c 	bic.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4995      	ldr	r1, [pc, #596]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d3a:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	498c      	ldr	r1, [pc, #560]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d5c:	4b87      	ldr	r3, [pc, #540]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4984      	ldr	r1, [pc, #528]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	497b      	ldr	r1, [pc, #492]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da0:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4973      	ldr	r1, [pc, #460]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	496a      	ldr	r1, [pc, #424]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002de4:	4b65      	ldr	r3, [pc, #404]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4962      	ldr	r1, [pc, #392]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e06:	4b5d      	ldr	r3, [pc, #372]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	4959      	ldr	r1, [pc, #356]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e28:	4b54      	ldr	r3, [pc, #336]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	4951      	ldr	r1, [pc, #324]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4948      	ldr	r1, [pc, #288]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4940      	ldr	r1, [pc, #256]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a3a      	ldr	r2, [pc, #232]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea4:	4b35      	ldr	r3, [pc, #212]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	4932      	ldr	r1, [pc, #200]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ece:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	4924      	ldr	r1, [pc, #144]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002efa:	d105      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	4916      	ldr	r1, [pc, #88]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a10      	ldr	r2, [pc, #64]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d019      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a02      	ldr	r2, [pc, #8]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f76:	60d3      	str	r3, [r2, #12]
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8c:	4b29      	ldr	r3, [pc, #164]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	4926      	ldr	r1, [pc, #152]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fac:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4918      	ldr	r1, [pc, #96]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300a:	490a      	ldr	r1, [pc, #40]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800301a:	d105      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003028:	7cbb      	ldrb	r3, [r7, #18]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e042      	b.n	80030d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd fdb7 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	@ 0x24
 8003066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fbb2 	bl	80037ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8b3 	bl	80031f4 <UART_SetConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01b      	b.n	80030d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fc31 	bl	8003930 <UART_CheckIdleState>
 80030ce:	4603      	mov	r3, r0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d17b      	bne.n	80031ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_UART_Transmit+0x26>
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e074      	b.n	80031ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003112:	f7fd fe43 	bl	8000d9c <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003130:	d108      	bne.n	8003144 <HAL_UART_Transmit+0x6c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e003      	b.n	800314c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800314c:	e030      	b.n	80031b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	2180      	movs	r1, #128	@ 0x80
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fc93 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e03d      	b.n	80031ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3302      	adds	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e007      	b.n	800319e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1c8      	bne.n	800314e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	2140      	movs	r1, #64	@ 0x40
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fc5c 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e006      	b.n	80031ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b08c      	sub	sp, #48	@ 0x30
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4baa      	ldr	r3, [pc, #680]	@ (80034cc <UART_SetConfig+0x2d8>)
 8003224:	4013      	ands	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800322c:	430b      	orrs	r3, r1
 800322e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a9f      	ldr	r2, [pc, #636]	@ (80034d0 <UART_SetConfig+0x2dc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800325c:	4313      	orrs	r3, r2
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800326a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003274:	430b      	orrs	r3, r1
 8003276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	f023 010f 	bic.w	r1, r3, #15
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a90      	ldr	r2, [pc, #576]	@ (80034d4 <UART_SetConfig+0x2e0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d125      	bne.n	80032e4 <UART_SetConfig+0xf0>
 8003298:	4b8f      	ldr	r3, [pc, #572]	@ (80034d8 <UART_SetConfig+0x2e4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d81a      	bhi.n	80032dc <UART_SetConfig+0xe8>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <UART_SetConfig+0xb8>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c2:	e116      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ca:	e112      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d2:	e10e      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032da:	e10a      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e2:	e106      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7c      	ldr	r2, [pc, #496]	@ (80034dc <UART_SetConfig+0x2e8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d138      	bne.n	8003360 <UART_SetConfig+0x16c>
 80032ee:	4b7a      	ldr	r3, [pc, #488]	@ (80034d8 <UART_SetConfig+0x2e4>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d82d      	bhi.n	8003358 <UART_SetConfig+0x164>
 80032fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <UART_SetConfig+0x110>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003339 	.word	0x08003339
 8003308:	08003359 	.word	0x08003359
 800330c:	08003359 	.word	0x08003359
 8003310:	08003359 	.word	0x08003359
 8003314:	08003349 	.word	0x08003349
 8003318:	08003359 	.word	0x08003359
 800331c:	08003359 	.word	0x08003359
 8003320:	08003359 	.word	0x08003359
 8003324:	08003341 	.word	0x08003341
 8003328:	08003359 	.word	0x08003359
 800332c:	08003359 	.word	0x08003359
 8003330:	08003359 	.word	0x08003359
 8003334:	08003351 	.word	0x08003351
 8003338:	2300      	movs	r3, #0
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e0d8      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e0d4      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e0d0      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003356:	e0cc      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800335e:	e0c8      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5e      	ldr	r2, [pc, #376]	@ (80034e0 <UART_SetConfig+0x2ec>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d125      	bne.n	80033b6 <UART_SetConfig+0x1c2>
 800336a:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <UART_SetConfig+0x2e4>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003374:	2b30      	cmp	r3, #48	@ 0x30
 8003376:	d016      	beq.n	80033a6 <UART_SetConfig+0x1b2>
 8003378:	2b30      	cmp	r3, #48	@ 0x30
 800337a:	d818      	bhi.n	80033ae <UART_SetConfig+0x1ba>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d00a      	beq.n	8003396 <UART_SetConfig+0x1a2>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d814      	bhi.n	80033ae <UART_SetConfig+0x1ba>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <UART_SetConfig+0x19a>
 8003388:	2b10      	cmp	r3, #16
 800338a:	d008      	beq.n	800339e <UART_SetConfig+0x1aa>
 800338c:	e00f      	b.n	80033ae <UART_SetConfig+0x1ba>
 800338e:	2300      	movs	r3, #0
 8003390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003394:	e0ad      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003396:	2302      	movs	r3, #2
 8003398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800339c:	e0a9      	b.n	80034f2 <UART_SetConfig+0x2fe>
 800339e:	2304      	movs	r3, #4
 80033a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033a4:	e0a5      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033a6:	2308      	movs	r3, #8
 80033a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ac:	e0a1      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033ae:	2310      	movs	r3, #16
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b4:	e09d      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4a      	ldr	r2, [pc, #296]	@ (80034e4 <UART_SetConfig+0x2f0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d125      	bne.n	800340c <UART_SetConfig+0x218>
 80033c0:	4b45      	ldr	r3, [pc, #276]	@ (80034d8 <UART_SetConfig+0x2e4>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80033cc:	d016      	beq.n	80033fc <UART_SetConfig+0x208>
 80033ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80033d0:	d818      	bhi.n	8003404 <UART_SetConfig+0x210>
 80033d2:	2b80      	cmp	r3, #128	@ 0x80
 80033d4:	d00a      	beq.n	80033ec <UART_SetConfig+0x1f8>
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d814      	bhi.n	8003404 <UART_SetConfig+0x210>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <UART_SetConfig+0x1f0>
 80033de:	2b40      	cmp	r3, #64	@ 0x40
 80033e0:	d008      	beq.n	80033f4 <UART_SetConfig+0x200>
 80033e2:	e00f      	b.n	8003404 <UART_SetConfig+0x210>
 80033e4:	2300      	movs	r3, #0
 80033e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ea:	e082      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033ec:	2302      	movs	r3, #2
 80033ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033f2:	e07e      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033f4:	2304      	movs	r3, #4
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033fa:	e07a      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80033fc:	2308      	movs	r3, #8
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003402:	e076      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003404:	2310      	movs	r3, #16
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800340a:	e072      	b.n	80034f2 <UART_SetConfig+0x2fe>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a35      	ldr	r2, [pc, #212]	@ (80034e8 <UART_SetConfig+0x2f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d12a      	bne.n	800346c <UART_SetConfig+0x278>
 8003416:	4b30      	ldr	r3, [pc, #192]	@ (80034d8 <UART_SetConfig+0x2e4>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003424:	d01a      	beq.n	800345c <UART_SetConfig+0x268>
 8003426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342a:	d81b      	bhi.n	8003464 <UART_SetConfig+0x270>
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d00c      	beq.n	800344c <UART_SetConfig+0x258>
 8003432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003436:	d815      	bhi.n	8003464 <UART_SetConfig+0x270>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <UART_SetConfig+0x250>
 800343c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003440:	d008      	beq.n	8003454 <UART_SetConfig+0x260>
 8003442:	e00f      	b.n	8003464 <UART_SetConfig+0x270>
 8003444:	2300      	movs	r3, #0
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344a:	e052      	b.n	80034f2 <UART_SetConfig+0x2fe>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003452:	e04e      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345a:	e04a      	b.n	80034f2 <UART_SetConfig+0x2fe>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003462:	e046      	b.n	80034f2 <UART_SetConfig+0x2fe>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800346a:	e042      	b.n	80034f2 <UART_SetConfig+0x2fe>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <UART_SetConfig+0x2dc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d13a      	bne.n	80034ec <UART_SetConfig+0x2f8>
 8003476:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <UART_SetConfig+0x2e4>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003484:	d01a      	beq.n	80034bc <UART_SetConfig+0x2c8>
 8003486:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800348a:	d81b      	bhi.n	80034c4 <UART_SetConfig+0x2d0>
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003490:	d00c      	beq.n	80034ac <UART_SetConfig+0x2b8>
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003496:	d815      	bhi.n	80034c4 <UART_SetConfig+0x2d0>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x2b0>
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x2c0>
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x2d0>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034aa:	e022      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034b2:	e01e      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ba:	e01a      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c2:	e016      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ca:	e012      	b.n	80034f2 <UART_SetConfig+0x2fe>
 80034cc:	cfff69f3 	.word	0xcfff69f3
 80034d0:	40008000 	.word	0x40008000
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40004800 	.word	0x40004800
 80034e4:	40004c00 	.word	0x40004c00
 80034e8:	40005000 	.word	0x40005000
 80034ec:	2310      	movs	r3, #16
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4aae      	ldr	r2, [pc, #696]	@ (80037b0 <UART_SetConfig+0x5bc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f040 8097 	bne.w	800362c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003502:	2b08      	cmp	r3, #8
 8003504:	d823      	bhi.n	800354e <UART_SetConfig+0x35a>
 8003506:	a201      	add	r2, pc, #4	@ (adr r2, 800350c <UART_SetConfig+0x318>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003531 	.word	0x08003531
 8003510:	0800354f 	.word	0x0800354f
 8003514:	08003539 	.word	0x08003539
 8003518:	0800354f 	.word	0x0800354f
 800351c:	0800353f 	.word	0x0800353f
 8003520:	0800354f 	.word	0x0800354f
 8003524:	0800354f 	.word	0x0800354f
 8003528:	0800354f 	.word	0x0800354f
 800352c:	08003547 	.word	0x08003547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7ff fac2 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003536:	e010      	b.n	800355a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4b9e      	ldr	r3, [pc, #632]	@ (80037b4 <UART_SetConfig+0x5c0>)
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800353c:	e00d      	b.n	800355a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353e:	f7ff fa4d 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8003542:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003544:	e009      	b.n	800355a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800354c:	e005      	b.n	800355a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8130 	beq.w	80037c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	4a94      	ldr	r2, [pc, #592]	@ (80037b8 <UART_SetConfig+0x5c4>)
 8003568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800356c:	461a      	mov	r2, r3
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	fbb3 f3f2 	udiv	r3, r3, r2
 8003574:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	429a      	cmp	r2, r3
 8003584:	d305      	bcc.n	8003592 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	429a      	cmp	r2, r3
 8003590:	d903      	bls.n	800359a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003598:	e113      	b.n	80037c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	2200      	movs	r2, #0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	60fa      	str	r2, [r7, #12]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	4a84      	ldr	r2, [pc, #528]	@ (80037b8 <UART_SetConfig+0x5c4>)
 80035a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2200      	movs	r2, #0
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035bc:	f7fc fe2c 	bl	8000218 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	020b      	lsls	r3, r1, #8
 80035d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035d6:	0202      	lsls	r2, r0, #8
 80035d8:	6979      	ldr	r1, [r7, #20]
 80035da:	6849      	ldr	r1, [r1, #4]
 80035dc:	0849      	lsrs	r1, r1, #1
 80035de:	2000      	movs	r0, #0
 80035e0:	460c      	mov	r4, r1
 80035e2:	4605      	mov	r5, r0
 80035e4:	eb12 0804 	adds.w	r8, r2, r4
 80035e8:	eb43 0905 	adc.w	r9, r3, r5
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	469a      	mov	sl, r3
 80035f4:	4693      	mov	fp, r2
 80035f6:	4652      	mov	r2, sl
 80035f8:	465b      	mov	r3, fp
 80035fa:	4640      	mov	r0, r8
 80035fc:	4649      	mov	r1, r9
 80035fe:	f7fc fe0b 	bl	8000218 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4613      	mov	r3, r2
 8003608:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003610:	d308      	bcc.n	8003624 <UART_SetConfig+0x430>
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003618:	d204      	bcs.n	8003624 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	e0ce      	b.n	80037c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800362a:	e0ca      	b.n	80037c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003634:	d166      	bne.n	8003704 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800363a:	2b08      	cmp	r3, #8
 800363c:	d827      	bhi.n	800368e <UART_SetConfig+0x49a>
 800363e:	a201      	add	r2, pc, #4	@ (adr r2, 8003644 <UART_SetConfig+0x450>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003669 	.word	0x08003669
 8003648:	08003671 	.word	0x08003671
 800364c:	08003679 	.word	0x08003679
 8003650:	0800368f 	.word	0x0800368f
 8003654:	0800367f 	.word	0x0800367f
 8003658:	0800368f 	.word	0x0800368f
 800365c:	0800368f 	.word	0x0800368f
 8003660:	0800368f 	.word	0x0800368f
 8003664:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff fa26 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800366e:	e014      	b.n	800369a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff fa38 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003674:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003676:	e010      	b.n	800369a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b4e      	ldr	r3, [pc, #312]	@ (80037b4 <UART_SetConfig+0x5c0>)
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800367c:	e00d      	b.n	800369a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7ff f9ad 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8003682:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003684:	e009      	b.n	800369a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800368c:	e005      	b.n	800369a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8090 	beq.w	80037c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	4a44      	ldr	r2, [pc, #272]	@ (80037b8 <UART_SetConfig+0x5c4>)
 80036a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	441a      	add	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	d916      	bls.n	80036fc <UART_SetConfig+0x508>
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d212      	bcs.n	80036fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f023 030f 	bic.w	r3, r3, #15
 80036de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	8bfb      	ldrh	r3, [r7, #30]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	8bfa      	ldrh	r2, [r7, #30]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	e062      	b.n	80037c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003702:	e05e      	b.n	80037c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003708:	2b08      	cmp	r3, #8
 800370a:	d828      	bhi.n	800375e <UART_SetConfig+0x56a>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <UART_SetConfig+0x520>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003739 	.word	0x08003739
 8003718:	08003741 	.word	0x08003741
 800371c:	08003749 	.word	0x08003749
 8003720:	0800375f 	.word	0x0800375f
 8003724:	0800374f 	.word	0x0800374f
 8003728:	0800375f 	.word	0x0800375f
 800372c:	0800375f 	.word	0x0800375f
 8003730:	0800375f 	.word	0x0800375f
 8003734:	08003757 	.word	0x08003757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003738:	f7ff f9be 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 800373c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800373e:	e014      	b.n	800376a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7ff f9d0 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003746:	e010      	b.n	800376a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <UART_SetConfig+0x5c0>)
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800374c:	e00d      	b.n	800376a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374e:	f7ff f945 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8003752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003754:	e009      	b.n	800376a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800375c:	e005      	b.n	800376a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003768:	bf00      	nop
    }

    if (pclk != 0U)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <UART_SetConfig+0x5c4>)
 8003776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800377a:	461a      	mov	r2, r3
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	441a      	add	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2b0f      	cmp	r3, #15
 8003798:	d910      	bls.n	80037bc <UART_SetConfig+0x5c8>
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d20c      	bcs.n	80037bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e009      	b.n	80037c2 <UART_SetConfig+0x5ce>
 80037ae:	bf00      	nop
 80037b0:	40008000 	.word	0x40008000
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	08003eb8 	.word	0x08003eb8
      }
      else
      {
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3730      	adds	r7, #48	@ 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01a      	beq.n	8003902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ea:	d10a      	bne.n	8003902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b098      	sub	sp, #96	@ 0x60
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003940:	f7fd fa2c 	bl	8000d9c <HAL_GetTick>
 8003944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b08      	cmp	r3, #8
 8003952:	d12f      	bne.n	80039b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f88e 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d022      	beq.n	80039b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003982:	653b      	str	r3, [r7, #80]	@ 0x50
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
 800398e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e063      	b.n	8003a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d149      	bne.n	8003a56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ca:	2200      	movs	r2, #0
 80039cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f857 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03c      	beq.n	8003a56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e6      	bne.n	80039dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3308      	adds	r3, #8
 8003a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a2e:	61fa      	str	r2, [r7, #28]
 8003a30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	69b9      	ldr	r1, [r7, #24]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e012      	b.n	8003a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3758      	adds	r7, #88	@ 0x58
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	e04f      	b.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9c:	d04b      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fd f97d 	bl	8000d9c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e04e      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d037      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b80      	cmp	r3, #128	@ 0x80
 8003aca:	d034      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d031      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d110      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f838 	bl	8003b5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2208      	movs	r2, #8
 8003af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e029      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b10:	d111      	bne.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f81e 	bl	8003b5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e00f      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d0a0      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b095      	sub	sp, #84	@ 0x54
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e3      	bne.n	8003b98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d118      	bne.n	8003c0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0310 	bic.w	r3, r3, #16
 8003bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	613b      	str	r3, [r7, #16]
   return(result);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c1e:	bf00      	nop
 8003c20:	3754      	adds	r7, #84	@ 0x54
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e027      	b.n	8003c90 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003c6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e02d      	b.n	8003d10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	@ 0x24
 8003cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f84f 	bl	8003d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e02d      	b.n	8003d8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f811 	bl	8003d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d108      	bne.n	8003db6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003db4:	e031      	b.n	8003e1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003db6:	2308      	movs	r3, #8
 8003db8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dba:	2308      	movs	r3, #8
 8003dbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	0f5b      	lsrs	r3, r3, #29
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	7b3a      	ldrb	r2, [r7, #12]
 8003de2:	4911      	ldr	r1, [pc, #68]	@ (8003e28 <UARTEx_SetNbDataToProcess+0x94>)
 8003de4:	5c8a      	ldrb	r2, [r1, r2]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003dea:	7b3a      	ldrb	r2, [r7, #12]
 8003dec:	490f      	ldr	r1, [pc, #60]	@ (8003e2c <UARTEx_SetNbDataToProcess+0x98>)
 8003dee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	7b7a      	ldrb	r2, [r7, #13]
 8003e00:	4909      	ldr	r1, [pc, #36]	@ (8003e28 <UARTEx_SetNbDataToProcess+0x94>)
 8003e02:	5c8a      	ldrb	r2, [r1, r2]
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e08:	7b7a      	ldrb	r2, [r7, #13]
 8003e0a:	4908      	ldr	r1, [pc, #32]	@ (8003e2c <UARTEx_SetNbDataToProcess+0x98>)
 8003e0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	08003ed0 	.word	0x08003ed0
 8003e2c:	08003ed8 	.word	0x08003ed8

08003e30 <memset>:
 8003e30:	4402      	add	r2, r0
 8003e32:	4603      	mov	r3, r0
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d100      	bne.n	8003e3a <memset+0xa>
 8003e38:	4770      	bx	lr
 8003e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3e:	e7f9      	b.n	8003e34 <memset+0x4>

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4d0d      	ldr	r5, [pc, #52]	@ (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	@ (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4d0b      	ldr	r5, [pc, #44]	@ (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	@ (8003e84 <__libc_init_array+0x44>)
 8003e54:	f000 f818 	bl	8003e88 <_init>
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08003ee8 	.word	0x08003ee8
 8003e7c:	08003ee8 	.word	0x08003ee8
 8003e80:	08003ee8 	.word	0x08003ee8
 8003e84:	08003eec 	.word	0x08003eec

08003e88 <_init>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr

08003e94 <_fini>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr
