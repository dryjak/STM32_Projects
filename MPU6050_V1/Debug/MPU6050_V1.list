
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f3c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003114  08003114  00004114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003154  08003154  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800315c  0800315c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0000415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003160  08003160  00004160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003164  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003170  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003170  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ce  00000000  00000000  00014cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00016fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d1  00000000  00000000  00017c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024a8  00000000  00000000  00018629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001029e  00000000  00000000  0001aad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec428  00000000  00000000  0002ad6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  001171dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011a564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080030fc 	.word	0x080030fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080030fc 	.word	0x080030fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <MX_GPIO_Init+0xd4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a2e      	ldr	r2, [pc, #184]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_GPIO_Init+0xd4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000596:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <MX_GPIO_Init+0xd4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_GPIO_Init+0xd4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000618 <MX_GPIO_Init+0xd4>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_GPIO_Init+0xd4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2120      	movs	r1, #32
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f000 fd63 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	480f      	ldr	r0, [pc, #60]	@ (800061c <MX_GPIO_Init+0xd8>)
 80005de:	f000 fbd3 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e2:	2320      	movs	r3, #32
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fc:	f000 fbc4 	bl	8000d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2028      	movs	r0, #40	@ 0x28
 8000606:	f000 fb8a 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f000 fba1 	bl	8000d52 <HAL_NVIC_EnableIRQ>

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800

08000620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000626:	4a1c      	ldr	r2, [pc, #112]	@ (8000698 <MX_I2C1_Init+0x78>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_I2C1_Init+0x74>)
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <MX_I2C1_Init+0x7c>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000638:	2201      	movs	r2, #1
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065a:	480e      	ldr	r0, [pc, #56]	@ (8000694 <MX_I2C1_Init+0x74>)
 800065c:	f000 fd51 	bl	8001102 <HAL_I2C_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000666:	f000 f8ce 	bl	8000806 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066a:	2100      	movs	r1, #0
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <MX_I2C1_Init+0x74>)
 800066e:	f000 fde3 	bl	8001238 <HAL_I2CEx_ConfigAnalogFilter>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000678:	f000 f8c5 	bl	8000806 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_I2C1_Init+0x74>)
 8000680:	f000 fe25 	bl	80012ce <HAL_I2CEx_ConfigDigitalFilter>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800068a:	f000 f8bc 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40005400 	.word	0x40005400
 800069c:	40b285c2 	.word	0x40b285c2

080006a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09e      	sub	sp, #120	@ 0x78
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2254      	movs	r2, #84	@ 0x54
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fcef 	bl	80030a4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000748 <HAL_I2C_MspInit+0xa8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d136      	bne.n	800073e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d0:	2340      	movs	r3, #64	@ 0x40
 80006d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fc25 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006e8:	f000 f88d 	bl	8000806 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <HAL_I2C_MspInit+0xac>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	4a16      	ldr	r2, [pc, #88]	@ (800074c <HAL_I2C_MspInit+0xac>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_I2C_MspInit+0xac>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000704:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000708:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070a:	2312      	movs	r3, #18
 800070c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000716:	2304      	movs	r3, #4
 8000718:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800071e:	4619      	mov	r1, r3
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_I2C_MspInit+0xb0>)
 8000722:	f000 fb31 	bl	8000d88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_I2C_MspInit+0xac>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0xac>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6593      	str	r3, [r2, #88]	@ 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_I2C_MspInit+0xac>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3778      	adds	r7, #120	@ 0x78
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	48000400 	.word	0x48000400

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 f995 	bl	8000a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f808 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff fef0 	bl	8000544 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000764:	f7ff ff5c 	bl	8000620 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000768:	f000 f8c2 	bl	80008f0 <MX_LPUART1_UART_Init>
  //MPU6050_SetGyroRange(&MPU6050);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x18>

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fc90 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fde8 	bl	8001368 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007b2:	2355      	movs	r3, #85	@ 0x55
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe82 	bl	80014d0 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007d2:	f000 f818 	bl	8000806 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f980 	bl	8001af4 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007fa:	f000 f804 	bl	8000806 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080a:	b672      	cpsid	i
}
 800080c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	@ 0x60
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	@ 0x58
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800084a:	f000 fe31 	bl	80014b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f93b 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008c2:	f000 fbfb 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <MX_LPUART1_UART_Init+0x90>)
 80008f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000934:	f001 fd48 	bl	80023c8 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f7ff ff62 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000946:	f002 fae3 	bl	8002f10 <HAL_UARTEx_SetTxFifoThreshold>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000950:	f7ff ff59 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000958:	f002 fb18 	bl	8002f8c <HAL_UARTEx_SetRxFifoThreshold>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000962:	f7ff ff50 	bl	8000806 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_LPUART1_UART_Init+0x8c>)
 8000968:	f002 fa99 	bl	8002e9e <HAL_UARTEx_DisableFifoMode>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000972:	f7ff ff48 	bl	8000806 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000007c 	.word	0x2000007c
 8000980:	40008000 	.word	0x40008000

08000984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	@ 0x78
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2254      	movs	r2, #84	@ 0x54
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fb7d 	bl	80030a4 <memset>
  if(uartHandle->Instance==LPUART1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <HAL_UART_MspInit+0xa8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d136      	bne.n	8000a22 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009b4:	2320      	movs	r3, #32
 80009b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fab3 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009cc:	f7ff ff1b 	bl	8000806 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <HAL_UART_MspInit+0xac>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a00:	230c      	movs	r3, #12
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a10:	230c      	movs	r3, #12
 8000a12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 f9b3 	bl	8000d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3778      	adds	r7, #120	@ 0x78
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40008000 	.word	0x40008000
 8000a30:	40021000 	.word	0x40021000

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff ff48 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	@ (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f002 fb27 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fe75 	bl	8000754 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	20000114 	.word	0x20000114

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>

08000a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f939 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f80e 	bl	8000ab8 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa8:	f7ff feb4 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	79fb      	ldrb	r3, [r7, #7]

}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_InitTick+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d022      	beq.n	8000b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_InitTick+0x6c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_InitTick+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f944 	bl	8000d6e <HAL_SYSTICK_Config>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d809      	bhi.n	8000b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afa:	f000 f910 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_InitTick+0x70>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e004      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000110 	.word	0x20000110

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff29 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff40 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff90 	bl	8000c5c <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5f 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff33 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa4 	bl	8000cc4 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d96:	e15a      	b.n	800104e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 814c 	beq.w	8001048 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d005      	beq.n	8000dc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d130      	bne.n	8000e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	f003 0201 	and.w	r2, r3, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d017      	beq.n	8000e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d123      	bne.n	8000eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0203 	and.w	r2, r3, #3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80a6 	beq.w	8001048 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b5b      	ldr	r3, [pc, #364]	@ (800106c <HAL_GPIO_Init+0x2e4>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f00:	4a5a      	ldr	r2, [pc, #360]	@ (800106c <HAL_GPIO_Init+0x2e4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f08:	4b58      	ldr	r3, [pc, #352]	@ (800106c <HAL_GPIO_Init+0x2e4>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f14:	4a56      	ldr	r2, [pc, #344]	@ (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f3e:	d01f      	beq.n	8000f80 <HAL_GPIO_Init+0x1f8>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <HAL_GPIO_Init+0x2ec>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d019      	beq.n	8000f7c <HAL_GPIO_Init+0x1f4>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4b      	ldr	r2, [pc, #300]	@ (8001078 <HAL_GPIO_Init+0x2f0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d013      	beq.n	8000f78 <HAL_GPIO_Init+0x1f0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4a      	ldr	r2, [pc, #296]	@ (800107c <HAL_GPIO_Init+0x2f4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1ec>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <HAL_GPIO_Init+0x2f8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1e8>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a48      	ldr	r2, [pc, #288]	@ (8001084 <HAL_GPIO_Init+0x2fc>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1e4>
 8000f68:	2305      	movs	r3, #5
 8000f6a:	e00a      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	e008      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f74:	2303      	movs	r3, #3
 8000f76:	e004      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e002      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f80:	2300      	movs	r3, #0
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	f002 0203 	and.w	r2, r2, #3
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f92:	4937      	ldr	r1, [pc, #220]	@ (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa0:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc4:	4a30      	ldr	r2, [pc, #192]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fee:	4a26      	ldr	r2, [pc, #152]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <HAL_GPIO_Init+0x300>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001042:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	f47f ae9d 	bne.w	8000d98 <HAL_GPIO_Init+0x10>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	48001400 	.word	0x48001400
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f806 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e08d      	b.n	8001230 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d106      	bne.n	800112e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fab9 	bl	80006a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2224      	movs	r2, #36	@ 0x24
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001152:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001162:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d107      	bne.n	800117c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	e006      	b.n	800118a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001188:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d108      	bne.n	80011a4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	e007      	b.n	80011b4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69d9      	ldr	r1, [r3, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2220      	movs	r2, #32
 800121c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b20      	cmp	r3, #32
 800124c:	d138      	bne.n	80012c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001258:	2302      	movs	r3, #2
 800125a:	e032      	b.n	80012c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800128a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e000      	b.n	80012c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012c0:	2302      	movs	r3, #2
  }
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d139      	bne.n	8001358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e033      	b.n	800135a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2224      	movs	r2, #36	@ 0x24
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2220      	movs	r2, #32
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e000      	b.n	800135a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001358:	2302      	movs	r3, #2
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d141      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001382:	d131      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001384:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800138a:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800139c:	4a41      	ldr	r2, [pc, #260]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a4:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2232      	movs	r2, #50	@ 0x32
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a3f      	ldr	r2, [pc, #252]	@ (80014ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	e002      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3b01      	subs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ce:	d102      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f2      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d6:	4b33      	ldr	r3, [pc, #204]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d158      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e057      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e8:	4b2e      	ldr	r3, [pc, #184]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ee:	4a2d      	ldr	r2, [pc, #180]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013f8:	e04d      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001400:	d141      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140e:	d131      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001428:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2232      	movs	r2, #50	@ 0x32
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	e002      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3b01      	subs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800145a:	d102      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f2      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146e:	d112      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e011      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001484:	e007      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001494:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40007000 	.word	0x40007000
 80014a8:	20000000 	.word	0x20000000
 80014ac:	431bde83 	.word	0x431bde83

080014b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014be:	6093      	str	r3, [r2, #8]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e2fe      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d075      	beq.n	80015da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ee:	4b97      	ldr	r3, [pc, #604]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f8:	4b94      	ldr	r3, [pc, #592]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x3e>
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d002      	beq.n	8001514 <HAL_RCC_OscConfig+0x44>
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b08      	cmp	r3, #8
 8001512:	d10b      	bne.n	800152c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05b      	beq.n	80015d8 <HAL_RCC_OscConfig+0x108>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d157      	bne.n	80015d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e2d9      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x74>
 8001536:	4b85      	ldr	r3, [pc, #532]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a84      	ldr	r2, [pc, #528]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b7f      	ldr	r3, [pc, #508]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7e      	ldr	r2, [pc, #504]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7b      	ldr	r2, [pc, #492]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001568:	4b78      	ldr	r3, [pc, #480]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a77      	ldr	r2, [pc, #476]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b75      	ldr	r3, [pc, #468]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a74      	ldr	r2, [pc, #464]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fae2 	bl	8000b50 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fade 	bl	8000b50 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e29e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b6a      	ldr	r3, [pc, #424]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xc0>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff face 	bl	8000b50 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff faca 	bl	8000b50 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e28a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	4b60      	ldr	r3, [pc, #384]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0xe8>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d075      	beq.n	80016d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e6:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f0:	4b56      	ldr	r3, [pc, #344]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d102      	bne.n	8001606 <HAL_RCC_OscConfig+0x136>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d002      	beq.n	800160c <HAL_RCC_OscConfig+0x13c>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d11f      	bne.n	800164c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	4b4f      	ldr	r3, [pc, #316]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x154>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e25d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b49      	ldr	r3, [pc, #292]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	4946      	ldr	r1, [pc, #280]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001638:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <HAL_RCC_OscConfig+0x280>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fa3b 	bl	8000ab8 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d043      	beq.n	80016d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e249      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3c      	ldr	r2, [pc, #240]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fa76 	bl	8000b50 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fa72 	bl	8000b50 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e232      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	492d      	ldr	r1, [pc, #180]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e01a      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2a      	ldr	r2, [pc, #168]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80016a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa52 	bl	8000b50 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa4e 	bl	8000b50 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e20e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1e0>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d041      	beq.n	8001762 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01c      	beq.n	8001720 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ec:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fa2b 	bl	8000b50 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff fa27 	bl	8000b50 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1e7      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0ef      	beq.n	80016fe <HAL_RCC_OscConfig+0x22e>
 800171e:	e020      	b.n	8001762 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_OscConfig+0x27c>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa0e 	bl	8000b50 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001736:	e00d      	b.n	8001754 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fa0a 	bl	8000b50 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d906      	bls.n	8001754 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1ca      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	4b8c      	ldr	r3, [pc, #560]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ea      	bne.n	8001738 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a6 	beq.w	80018bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001774:	4b84      	ldr	r3, [pc, #528]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x2b4>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x2b6>
 8001784:	2300      	movs	r3, #0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a7e      	ldr	r2, [pc, #504]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b7c      	ldr	r3, [pc, #496]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a6:	4b79      	ldr	r3, [pc, #484]	@ (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b2:	4b76      	ldr	r3, [pc, #472]	@ (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff f9c7 	bl	8000b50 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff f9c3 	bl	8000b50 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e183      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	4b6c      	ldr	r3, [pc, #432]	@ (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_RCC_OscConfig+0x32e>
 80017ec:	4b66      	ldr	r3, [pc, #408]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f2:	4a65      	ldr	r2, [pc, #404]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fc:	e024      	b.n	8001848 <HAL_RCC_OscConfig+0x378>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d110      	bne.n	8001828 <HAL_RCC_OscConfig+0x358>
 8001806:	4b60      	ldr	r3, [pc, #384]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180c:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001816:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181c:	4a5a      	ldr	r2, [pc, #360]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001826:	e00f      	b.n	8001848 <HAL_RCC_OscConfig+0x378>
 8001828:	4b57      	ldr	r3, [pc, #348]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a56      	ldr	r2, [pc, #344]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff f97e 	bl	8000b50 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff f97a 	bl	8000b50 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e138      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b46      	ldr	r3, [pc, #280]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ed      	beq.n	8001858 <HAL_RCC_OscConfig+0x388>
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff f967 	bl	8000b50 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff f963 	bl	8000b50 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e121      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800189c:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ed      	bne.n	8001886 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	4a34      	ldr	r2, [pc, #208]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03c      	beq.n	8001942 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01c      	beq.n	800190a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff f936 	bl	8000b50 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e8:	f7ff f932 	bl	8000b50 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0f2      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fa:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 80018fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ef      	beq.n	80018e8 <HAL_RCC_OscConfig+0x418>
 8001908:	e01b      	b.n	8001942 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f919 	bl	8000b50 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001922:	f7ff f915 	bl	8000b50 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0d5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ef      	bne.n	8001922 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80c9 	beq.w	8001ade <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b0c      	cmp	r3, #12
 8001956:	f000 8083 	beq.w	8001a60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d15e      	bne.n	8001a20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <HAL_RCC_OscConfig+0x4b8>)
 8001968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f8ef 	bl	8000b50 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e00c      	b.n	8001990 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f8eb 	bl	8000b50 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d905      	bls.n	8001990 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0ab      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b55      	ldr	r3, [pc, #340]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ec      	bne.n	8001976 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4b52      	ldr	r3, [pc, #328]	@ (8001aec <HAL_RCC_OscConfig+0x61c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6a11      	ldr	r1, [r2, #32]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019b6:	0212      	lsls	r2, r2, #8
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019be:	0852      	lsrs	r2, r2, #1
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0552      	lsls	r2, r2, #21
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ca:	0852      	lsrs	r2, r2, #1
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0652      	lsls	r2, r2, #25
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019d6:	06d2      	lsls	r2, r2, #27
 80019d8:	430a      	orrs	r2, r1
 80019da:	4943      	ldr	r1, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a40      	ldr	r2, [pc, #256]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f8aa 	bl	8000b50 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f8a6 	bl	8000b50 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e066      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x530>
 8001a1e:	e05e      	b.n	8001ade <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a30      	ldr	r2, [pc, #192]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f890 	bl	8000b50 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f88c 	bl	8000b50 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a46:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a52:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4924      	ldr	r1, [pc, #144]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a58:	4b25      	ldr	r3, [pc, #148]	@ (8001af0 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60cb      	str	r3, [r1, #12]
 8001a5e:	e03e      	b.n	8001ade <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e039      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_RCC_OscConfig+0x618>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d12c      	bne.n	8001ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d123      	bne.n	8001ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d11b      	bne.n	8001ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d113      	bne.n	8001ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	019f800c 	.word	0x019f800c
 8001af0:	feeefffc 	.word	0xfeeefffc

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e11e      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b91      	ldr	r3, [pc, #580]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d910      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b8e      	ldr	r3, [pc, #568]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 020f 	bic.w	r2, r3, #15
 8001b22:	498c      	ldr	r1, [pc, #560]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b8a      	ldr	r3, [pc, #552]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e106      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d073      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d129      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b50:	4b81      	ldr	r3, [pc, #516]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0f4      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b60:	f000 f99e 	bl	8001ea0 <RCC_GetSysClockFreqFromPLLSource>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4a7c      	ldr	r2, [pc, #496]	@ (8001d5c <HAL_RCC_ClockConfig+0x268>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d93f      	bls.n	8001bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d033      	beq.n	8001bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d12f      	bne.n	8001bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b8e:	4b72      	ldr	r3, [pc, #456]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b96:	4a70      	ldr	r2, [pc, #448]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e024      	b.n	8001bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bac:	4b6a      	ldr	r3, [pc, #424]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0c6      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0be      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bcc:	f000 f8ce 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4a61      	ldr	r2, [pc, #388]	@ (8001d5c <HAL_RCC_ClockConfig+0x268>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d909      	bls.n	8001bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bda:	4b5f      	ldr	r3, [pc, #380]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b5a      	ldr	r3, [pc, #360]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4957      	ldr	r1, [pc, #348]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7fe ffa6 	bl	8000b50 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7fe ffa2 	bl	8000b50 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e095      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c60:	4b3d      	ldr	r3, [pc, #244]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c68:	4a3b      	ldr	r2, [pc, #236]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b39      	ldr	r3, [pc, #228]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4936      	ldr	r1, [pc, #216]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b80      	cmp	r3, #128	@ 0x80
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c8a:	4b33      	ldr	r3, [pc, #204]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a32      	ldr	r2, [pc, #200]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c96:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d21d      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 020f 	bic.w	r2, r3, #15
 8001cac:	4929      	ldr	r1, [pc, #164]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ff4c 	bl	8000b50 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7fe ff48 	bl	8000b50 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e03b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ed      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4917      	ldr	r1, [pc, #92]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490f      	ldr	r1, [pc, #60]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1e:	f000 f825 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <HAL_RCC_ClockConfig+0x264>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <HAL_RCC_ClockConfig+0x26c>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_RCC_ClockConfig+0x270>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_RCC_ClockConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe feb8 	bl	8000ab8 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	04c4b400 	.word	0x04c4b400
 8001d60:	08003114 	.word	0x08003114
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d72:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e047      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e03e      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d96:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d136      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3301      	adds	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dca:	68d2      	ldr	r2, [r2, #12]
 8001dcc:	0a12      	lsrs	r2, r2, #8
 8001dce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
      break;
 8001dd8:	e00c      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dda:	4a13      	ldr	r2, [pc, #76]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	0a12      	lsrs	r2, r2, #8
 8001de8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0e5b      	lsrs	r3, r3, #25
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e001      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e14:	693b      	ldr	r3, [r7, #16]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	016e3600 	.word	0x016e3600

08001e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08003124 	.word	0x08003124

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e78:	f7ff ffda 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4904      	ldr	r1, [pc, #16]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08003124 	.word	0x08003124

08001ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d10c      	bne.n	8001ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec4:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ece:	68d2      	ldr	r2, [r2, #12]
 8001ed0:	0a12      	lsrs	r2, r2, #8
 8001ed2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	617b      	str	r3, [r7, #20]
    break;
 8001edc:	e00c      	b.n	8001ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	0a12      	lsrs	r2, r2, #8
 8001eec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    break;
 8001ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0e5b      	lsrs	r3, r3, #25
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	016e3600 	.word	0x016e3600
 8001f28:	00f42400 	.word	0x00f42400

08001f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f34:	2300      	movs	r3, #0
 8001f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8098 	beq.w	800207a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10d      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a39      	ldr	r2, [pc, #228]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f82:	f7fe fde5 	bl	8000b50 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7fe fde1 	bl	8000b50 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d902      	bls.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8001f9c:	e005      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9e:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d159      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01e      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d019      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fee:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff8:	4a18      	ldr	r2, [pc, #96]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fda1 	bl	8000b50 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	e00b      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd9d 	bl	8000b50 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d902      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	74fb      	strb	r3, [r7, #19]
            break;
 8002028:	e006      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ec      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204c:	4903      	ldr	r1, [pc, #12]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002054:	e008      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	74bb      	strb	r3, [r7, #18]
 800205a:	e005      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002068:	7c7b      	ldrb	r3, [r7, #17]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4ba7      	ldr	r3, [pc, #668]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	4aa6      	ldr	r2, [pc, #664]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002078:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002086:	4ba1      	ldr	r3, [pc, #644]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208c:	f023 0203 	bic.w	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	499d      	ldr	r1, [pc, #628]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a8:	4b98      	ldr	r3, [pc, #608]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	f023 020c 	bic.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4995      	ldr	r1, [pc, #596]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ca:	4b90      	ldr	r3, [pc, #576]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	498c      	ldr	r1, [pc, #560]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020ec:	4b87      	ldr	r3, [pc, #540]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	4984      	ldr	r1, [pc, #528]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800210e:	4b7f      	ldr	r3, [pc, #508]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	497b      	ldr	r1, [pc, #492]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002130:	4b76      	ldr	r3, [pc, #472]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4973      	ldr	r1, [pc, #460]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002152:	4b6e      	ldr	r3, [pc, #440]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002158:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	496a      	ldr	r1, [pc, #424]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002174:	4b65      	ldr	r3, [pc, #404]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4962      	ldr	r1, [pc, #392]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002196:	4b5d      	ldr	r3, [pc, #372]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	4959      	ldr	r1, [pc, #356]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021b8:	4b54      	ldr	r3, [pc, #336]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c6:	4951      	ldr	r1, [pc, #324]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021da:	4b4c      	ldr	r3, [pc, #304]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	4948      	ldr	r1, [pc, #288]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fc:	4b43      	ldr	r3, [pc, #268]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4940      	ldr	r1, [pc, #256]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800221a:	d105      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221c:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002226:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002234:	4b35      	ldr	r3, [pc, #212]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002242:	4932      	ldr	r1, [pc, #200]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002252:	d105      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800226c:	4b27      	ldr	r3, [pc, #156]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	4924      	ldr	r1, [pc, #144]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228a:	d105      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228c:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002296:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b2:	4916      	ldr	r1, [pc, #88]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c2:	d105      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a10      	ldr	r2, [pc, #64]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d019      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fa:	d109      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a02      	ldr	r2, [pc, #8]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
 8002308:	e002      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4926      	ldr	r1, [pc, #152]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800233c:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a20      	ldr	r2, [pc, #128]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002346:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002362:	4918      	ldr	r1, [pc, #96]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002372:	d105      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	490a      	ldr	r1, [pc, #40]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e042      	b.n	8002460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe fac9 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2224      	movs	r2, #36	@ 0x24
 80023f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fb24 	bl	8002a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f825 	bl	8002468 <UART_SetConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01b      	b.n	8002460 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fba3 	bl	8002ba4 <UART_CheckIdleState>
 800245e:	4603      	mov	r3, r0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800246c:	b08c      	sub	sp, #48	@ 0x30
 800246e:	af00      	add	r7, sp, #0
 8002470:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4313      	orrs	r3, r2
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4baa      	ldr	r3, [pc, #680]	@ (8002740 <UART_SetConfig+0x2d8>)
 8002498:	4013      	ands	r3, r2
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a9f      	ldr	r2, [pc, #636]	@ (8002744 <UART_SetConfig+0x2dc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024d0:	4313      	orrs	r3, r2
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80024de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	f023 010f 	bic.w	r1, r3, #15
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a90      	ldr	r2, [pc, #576]	@ (8002748 <UART_SetConfig+0x2e0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d125      	bne.n	8002558 <UART_SetConfig+0xf0>
 800250c:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <UART_SetConfig+0x2e4>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d81a      	bhi.n	8002550 <UART_SetConfig+0xe8>
 800251a:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <UART_SetConfig+0xb8>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002531 	.word	0x08002531
 8002524:	08002541 	.word	0x08002541
 8002528:	08002539 	.word	0x08002539
 800252c:	08002549 	.word	0x08002549
 8002530:	2301      	movs	r3, #1
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002536:	e116      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002538:	2302      	movs	r3, #2
 800253a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800253e:	e112      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002540:	2304      	movs	r3, #4
 8002542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002546:	e10e      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002548:	2308      	movs	r3, #8
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800254e:	e10a      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002550:	2310      	movs	r3, #16
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002556:	e106      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7c      	ldr	r2, [pc, #496]	@ (8002750 <UART_SetConfig+0x2e8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d138      	bne.n	80025d4 <UART_SetConfig+0x16c>
 8002562:	4b7a      	ldr	r3, [pc, #488]	@ (800274c <UART_SetConfig+0x2e4>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d82d      	bhi.n	80025cc <UART_SetConfig+0x164>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <UART_SetConfig+0x110>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025cd 	.word	0x080025cd
 8002584:	080025cd 	.word	0x080025cd
 8002588:	080025bd 	.word	0x080025bd
 800258c:	080025cd 	.word	0x080025cd
 8002590:	080025cd 	.word	0x080025cd
 8002594:	080025cd 	.word	0x080025cd
 8002598:	080025b5 	.word	0x080025b5
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025cd 	.word	0x080025cd
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	080025c5 	.word	0x080025c5
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025b2:	e0d8      	b.n	8002766 <UART_SetConfig+0x2fe>
 80025b4:	2302      	movs	r3, #2
 80025b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ba:	e0d4      	b.n	8002766 <UART_SetConfig+0x2fe>
 80025bc:	2304      	movs	r3, #4
 80025be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025c2:	e0d0      	b.n	8002766 <UART_SetConfig+0x2fe>
 80025c4:	2308      	movs	r3, #8
 80025c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ca:	e0cc      	b.n	8002766 <UART_SetConfig+0x2fe>
 80025cc:	2310      	movs	r3, #16
 80025ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025d2:	e0c8      	b.n	8002766 <UART_SetConfig+0x2fe>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002754 <UART_SetConfig+0x2ec>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d125      	bne.n	800262a <UART_SetConfig+0x1c2>
 80025de:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <UART_SetConfig+0x2e4>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80025e8:	2b30      	cmp	r3, #48	@ 0x30
 80025ea:	d016      	beq.n	800261a <UART_SetConfig+0x1b2>
 80025ec:	2b30      	cmp	r3, #48	@ 0x30
 80025ee:	d818      	bhi.n	8002622 <UART_SetConfig+0x1ba>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d00a      	beq.n	800260a <UART_SetConfig+0x1a2>
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d814      	bhi.n	8002622 <UART_SetConfig+0x1ba>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <UART_SetConfig+0x19a>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d008      	beq.n	8002612 <UART_SetConfig+0x1aa>
 8002600:	e00f      	b.n	8002622 <UART_SetConfig+0x1ba>
 8002602:	2300      	movs	r3, #0
 8002604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002608:	e0ad      	b.n	8002766 <UART_SetConfig+0x2fe>
 800260a:	2302      	movs	r3, #2
 800260c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002610:	e0a9      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002612:	2304      	movs	r3, #4
 8002614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002618:	e0a5      	b.n	8002766 <UART_SetConfig+0x2fe>
 800261a:	2308      	movs	r3, #8
 800261c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002620:	e0a1      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002622:	2310      	movs	r3, #16
 8002624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002628:	e09d      	b.n	8002766 <UART_SetConfig+0x2fe>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a4a      	ldr	r2, [pc, #296]	@ (8002758 <UART_SetConfig+0x2f0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d125      	bne.n	8002680 <UART_SetConfig+0x218>
 8002634:	4b45      	ldr	r3, [pc, #276]	@ (800274c <UART_SetConfig+0x2e4>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800263e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002640:	d016      	beq.n	8002670 <UART_SetConfig+0x208>
 8002642:	2bc0      	cmp	r3, #192	@ 0xc0
 8002644:	d818      	bhi.n	8002678 <UART_SetConfig+0x210>
 8002646:	2b80      	cmp	r3, #128	@ 0x80
 8002648:	d00a      	beq.n	8002660 <UART_SetConfig+0x1f8>
 800264a:	2b80      	cmp	r3, #128	@ 0x80
 800264c:	d814      	bhi.n	8002678 <UART_SetConfig+0x210>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <UART_SetConfig+0x1f0>
 8002652:	2b40      	cmp	r3, #64	@ 0x40
 8002654:	d008      	beq.n	8002668 <UART_SetConfig+0x200>
 8002656:	e00f      	b.n	8002678 <UART_SetConfig+0x210>
 8002658:	2300      	movs	r3, #0
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800265e:	e082      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002660:	2302      	movs	r3, #2
 8002662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002666:	e07e      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002668:	2304      	movs	r3, #4
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800266e:	e07a      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002670:	2308      	movs	r3, #8
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002676:	e076      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002678:	2310      	movs	r3, #16
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800267e:	e072      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a35      	ldr	r2, [pc, #212]	@ (800275c <UART_SetConfig+0x2f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12a      	bne.n	80026e0 <UART_SetConfig+0x278>
 800268a:	4b30      	ldr	r3, [pc, #192]	@ (800274c <UART_SetConfig+0x2e4>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002698:	d01a      	beq.n	80026d0 <UART_SetConfig+0x268>
 800269a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800269e:	d81b      	bhi.n	80026d8 <UART_SetConfig+0x270>
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a4:	d00c      	beq.n	80026c0 <UART_SetConfig+0x258>
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026aa:	d815      	bhi.n	80026d8 <UART_SetConfig+0x270>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <UART_SetConfig+0x250>
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b4:	d008      	beq.n	80026c8 <UART_SetConfig+0x260>
 80026b6:	e00f      	b.n	80026d8 <UART_SetConfig+0x270>
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026be:	e052      	b.n	8002766 <UART_SetConfig+0x2fe>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026c6:	e04e      	b.n	8002766 <UART_SetConfig+0x2fe>
 80026c8:	2304      	movs	r3, #4
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ce:	e04a      	b.n	8002766 <UART_SetConfig+0x2fe>
 80026d0:	2308      	movs	r3, #8
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026d6:	e046      	b.n	8002766 <UART_SetConfig+0x2fe>
 80026d8:	2310      	movs	r3, #16
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026de:	e042      	b.n	8002766 <UART_SetConfig+0x2fe>
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <UART_SetConfig+0x2dc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13a      	bne.n	8002760 <UART_SetConfig+0x2f8>
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <UART_SetConfig+0x2e4>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026f8:	d01a      	beq.n	8002730 <UART_SetConfig+0x2c8>
 80026fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026fe:	d81b      	bhi.n	8002738 <UART_SetConfig+0x2d0>
 8002700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002704:	d00c      	beq.n	8002720 <UART_SetConfig+0x2b8>
 8002706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800270a:	d815      	bhi.n	8002738 <UART_SetConfig+0x2d0>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <UART_SetConfig+0x2b0>
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002714:	d008      	beq.n	8002728 <UART_SetConfig+0x2c0>
 8002716:	e00f      	b.n	8002738 <UART_SetConfig+0x2d0>
 8002718:	2300      	movs	r3, #0
 800271a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800271e:	e022      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002720:	2302      	movs	r3, #2
 8002722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002726:	e01e      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002728:	2304      	movs	r3, #4
 800272a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800272e:	e01a      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002730:	2308      	movs	r3, #8
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002736:	e016      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002738:	2310      	movs	r3, #16
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800273e:	e012      	b.n	8002766 <UART_SetConfig+0x2fe>
 8002740:	cfff69f3 	.word	0xcfff69f3
 8002744:	40008000 	.word	0x40008000
 8002748:	40013800 	.word	0x40013800
 800274c:	40021000 	.word	0x40021000
 8002750:	40004400 	.word	0x40004400
 8002754:	40004800 	.word	0x40004800
 8002758:	40004c00 	.word	0x40004c00
 800275c:	40005000 	.word	0x40005000
 8002760:	2310      	movs	r3, #16
 8002762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4aae      	ldr	r2, [pc, #696]	@ (8002a24 <UART_SetConfig+0x5bc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	f040 8097 	bne.w	80028a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002776:	2b08      	cmp	r3, #8
 8002778:	d823      	bhi.n	80027c2 <UART_SetConfig+0x35a>
 800277a:	a201      	add	r2, pc, #4	@ (adr r2, 8002780 <UART_SetConfig+0x318>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027a5 	.word	0x080027a5
 8002784:	080027c3 	.word	0x080027c3
 8002788:	080027ad 	.word	0x080027ad
 800278c:	080027c3 	.word	0x080027c3
 8002790:	080027b3 	.word	0x080027b3
 8002794:	080027c3 	.word	0x080027c3
 8002798:	080027c3 	.word	0x080027c3
 800279c:	080027c3 	.word	0x080027c3
 80027a0:	080027bb 	.word	0x080027bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff fb50 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027aa:	e010      	b.n	80027ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027ac:	4b9e      	ldr	r3, [pc, #632]	@ (8002a28 <UART_SetConfig+0x5c0>)
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027b0:	e00d      	b.n	80027ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027b2:	f7ff fadb 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 80027b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027b8:	e009      	b.n	80027ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027c0:	e005      	b.n	80027ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80027cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8130 	beq.w	8002a36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	4a94      	ldr	r2, [pc, #592]	@ (8002a2c <UART_SetConfig+0x5c4>)
 80027dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d305      	bcc.n	8002806 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	429a      	cmp	r2, r3
 8002804:	d903      	bls.n	800280e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800280c:	e113      	b.n	8002a36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2200      	movs	r2, #0
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	60fa      	str	r2, [r7, #12]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	4a84      	ldr	r2, [pc, #528]	@ (8002a2c <UART_SetConfig+0x5c4>)
 800281c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002820:	b29b      	uxth	r3, r3
 8002822:	2200      	movs	r2, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800282c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002830:	f7fd fcf2 	bl	8000218 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	020b      	lsls	r3, r1, #8
 8002846:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800284a:	0202      	lsls	r2, r0, #8
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	6849      	ldr	r1, [r1, #4]
 8002850:	0849      	lsrs	r1, r1, #1
 8002852:	2000      	movs	r0, #0
 8002854:	460c      	mov	r4, r1
 8002856:	4605      	mov	r5, r0
 8002858:	eb12 0804 	adds.w	r8, r2, r4
 800285c:	eb43 0905 	adc.w	r9, r3, r5
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	469a      	mov	sl, r3
 8002868:	4693      	mov	fp, r2
 800286a:	4652      	mov	r2, sl
 800286c:	465b      	mov	r3, fp
 800286e:	4640      	mov	r0, r8
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd fcd1 	bl	8000218 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4613      	mov	r3, r2
 800287c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002884:	d308      	bcc.n	8002898 <UART_SetConfig+0x430>
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800288c:	d204      	bcs.n	8002898 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a3a      	ldr	r2, [r7, #32]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	e0ce      	b.n	8002a36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800289e:	e0ca      	b.n	8002a36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028a8:	d166      	bne.n	8002978 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80028aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d827      	bhi.n	8002902 <UART_SetConfig+0x49a>
 80028b2:	a201      	add	r2, pc, #4	@ (adr r2, 80028b8 <UART_SetConfig+0x450>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028e5 	.word	0x080028e5
 80028c0:	080028ed 	.word	0x080028ed
 80028c4:	08002903 	.word	0x08002903
 80028c8:	080028f3 	.word	0x080028f3
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002903 	.word	0x08002903
 80028d4:	08002903 	.word	0x08002903
 80028d8:	080028fb 	.word	0x080028fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028dc:	f7ff fab4 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80028e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028e2:	e014      	b.n	800290e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fac6 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80028e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028ea:	e010      	b.n	800290e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <UART_SetConfig+0x5c0>)
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028f0:	e00d      	b.n	800290e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f2:	f7ff fa3b 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 80028f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028f8:	e009      	b.n	800290e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002900:	e005      	b.n	800290e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800290c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8090 	beq.w	8002a36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	4a44      	ldr	r2, [pc, #272]	@ (8002a2c <UART_SetConfig+0x5c4>)
 800291c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002920:	461a      	mov	r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	fbb3 f3f2 	udiv	r3, r3, r2
 8002928:	005a      	lsls	r2, r3, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	441a      	add	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	d916      	bls.n	8002970 <UART_SetConfig+0x508>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002948:	d212      	bcs.n	8002970 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	b29a      	uxth	r2, r3
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	4313      	orrs	r3, r2
 8002964:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	8bfa      	ldrh	r2, [r7, #30]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	e062      	b.n	8002a36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002976:	e05e      	b.n	8002a36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002978:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800297c:	2b08      	cmp	r3, #8
 800297e:	d828      	bhi.n	80029d2 <UART_SetConfig+0x56a>
 8002980:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <UART_SetConfig+0x520>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	080029ad 	.word	0x080029ad
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029bd 	.word	0x080029bd
 8002994:	080029d3 	.word	0x080029d3
 8002998:	080029c3 	.word	0x080029c3
 800299c:	080029d3 	.word	0x080029d3
 80029a0:	080029d3 	.word	0x080029d3
 80029a4:	080029d3 	.word	0x080029d3
 80029a8:	080029cb 	.word	0x080029cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff fa4c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80029b2:	e014      	b.n	80029de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff fa5e 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80029ba:	e010      	b.n	80029de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <UART_SetConfig+0x5c0>)
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80029c0:	e00d      	b.n	80029de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c2:	f7ff f9d3 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 80029c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80029c8:	e009      	b.n	80029de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80029d0:	e005      	b.n	80029de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80029dc:	bf00      	nop
    }

    if (pclk != 0U)
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d028      	beq.n	8002a36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <UART_SetConfig+0x5c4>)
 80029ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ee:	461a      	mov	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	441a      	add	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d910      	bls.n	8002a30 <UART_SetConfig+0x5c8>
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a14:	d20c      	bcs.n	8002a30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	e009      	b.n	8002a36 <UART_SetConfig+0x5ce>
 8002a22:	bf00      	nop
 8002a24:	40008000 	.word	0x40008000
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	0800312c 	.word	0x0800312c
      }
      else
      {
        ret = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002a52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3730      	adds	r7, #48	@ 0x30
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01a      	beq.n	8002b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b5e:	d10a      	bne.n	8002b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b098      	sub	sp, #96	@ 0x60
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bb4:	f7fd ffcc 	bl	8000b50 <HAL_GetTick>
 8002bb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d12f      	bne.n	8002c28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f88e 	bl	8002cf8 <UART_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d022      	beq.n	8002c28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e6      	bne.n	8002be2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e063      	b.n	8002cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d149      	bne.n	8002cca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f857 	bl	8002cf8 <UART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03c      	beq.n	8002cca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e6      	bne.n	8002c50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3308      	adds	r3, #8
 8002c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ca2:	61fa      	str	r2, [r7, #28]
 8002ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e5      	bne.n	8002c82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e012      	b.n	8002cf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3758      	adds	r7, #88	@ 0x58
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d08:	e04f      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d10:	d04b      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fd ff1d 	bl	8000b50 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e04e      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d037      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d034      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d031      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d110      	bne.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f838 	bl	8002dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2208      	movs	r2, #8
 8002d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e029      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d84:	d111      	bne.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f81e 	bl	8002dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e00f      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d0a0      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b095      	sub	sp, #84	@ 0x54
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e6      	bne.n	8002dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3308      	adds	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e3      	bne.n	8002e0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d118      	bne.n	8002e7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f023 0310 	bic.w	r3, r3, #16
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	613b      	str	r3, [r7, #16]
   return(result);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e6      	bne.n	8002e4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e92:	bf00      	nop
 8002e94:	3754      	adds	r7, #84	@ 0x54
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e027      	b.n	8002f04 <HAL_UARTEx_DisableFifoMode+0x66>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	@ 0x24
 8002ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002ee2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e02d      	b.n	8002f84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f84f 	bl	8003008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e02d      	b.n	8003000 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	@ 0x24
 8002fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f811 	bl	8003008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003014:	2b00      	cmp	r3, #0
 8003016:	d108      	bne.n	800302a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003028:	e031      	b.n	800308e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800302a:	2308      	movs	r3, #8
 800302c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800302e:	2308      	movs	r3, #8
 8003030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	0e5b      	lsrs	r3, r3, #25
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	0f5b      	lsrs	r3, r3, #29
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	7b3a      	ldrb	r2, [r7, #12]
 8003056:	4911      	ldr	r1, [pc, #68]	@ (800309c <UARTEx_SetNbDataToProcess+0x94>)
 8003058:	5c8a      	ldrb	r2, [r1, r2]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800305e:	7b3a      	ldrb	r2, [r7, #12]
 8003060:	490f      	ldr	r1, [pc, #60]	@ (80030a0 <UARTEx_SetNbDataToProcess+0x98>)
 8003062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003064:	fb93 f3f2 	sdiv	r3, r3, r2
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	7b7a      	ldrb	r2, [r7, #13]
 8003074:	4909      	ldr	r1, [pc, #36]	@ (800309c <UARTEx_SetNbDataToProcess+0x94>)
 8003076:	5c8a      	ldrb	r2, [r1, r2]
 8003078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800307c:	7b7a      	ldrb	r2, [r7, #13]
 800307e:	4908      	ldr	r1, [pc, #32]	@ (80030a0 <UARTEx_SetNbDataToProcess+0x98>)
 8003080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003082:	fb93 f3f2 	sdiv	r3, r3, r2
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	08003144 	.word	0x08003144
 80030a0:	0800314c 	.word	0x0800314c

080030a4 <memset>:
 80030a4:	4402      	add	r2, r0
 80030a6:	4603      	mov	r3, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d0d      	ldr	r5, [pc, #52]	@ (80030ec <__libc_init_array+0x38>)
 80030b8:	4c0d      	ldr	r4, [pc, #52]	@ (80030f0 <__libc_init_array+0x3c>)
 80030ba:	1b64      	subs	r4, r4, r5
 80030bc:	10a4      	asrs	r4, r4, #2
 80030be:	2600      	movs	r6, #0
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	4d0b      	ldr	r5, [pc, #44]	@ (80030f4 <__libc_init_array+0x40>)
 80030c6:	4c0c      	ldr	r4, [pc, #48]	@ (80030f8 <__libc_init_array+0x44>)
 80030c8:	f000 f818 	bl	80030fc <_init>
 80030cc:	1b64      	subs	r4, r4, r5
 80030ce:	10a4      	asrs	r4, r4, #2
 80030d0:	2600      	movs	r6, #0
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	0800315c 	.word	0x0800315c
 80030f0:	0800315c 	.word	0x0800315c
 80030f4:	0800315c 	.word	0x0800315c
 80030f8:	08003160 	.word	0x08003160

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
