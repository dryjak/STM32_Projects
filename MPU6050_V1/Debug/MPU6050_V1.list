
MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008988  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008b68  08008b68  00009b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f64  08008f64  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f64  08008f64  00009f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f6c  08008f6c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f70  08008f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008f74  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001d8  0800914c  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800914c  0000a53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018104  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bb  00000000  00000000  0002230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000253c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001003  00000000  00000000  00026850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288a4  00000000  00000000  00027853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185b0  00000000  00000000  000500f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001014db  00000000  00000000  000686a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  00169bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001704c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008b50 	.word	0x08008b50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08008b50 	.word	0x08008b50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <MPU6050_Init>:
static MPU6050_STATE_t MPU6050_CalibrateGyro(MPU6050_t *MPU6050, GyroOffset_t *GyroOffset);

// --- Funkcje publiczne (API) ---

MPU6050_STATE_t MPU6050_Init(MPU6050_t *MPU6050, I2C_HandleTypeDef *Hi2c, uint16_t Address)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
    uint8_t CheckID;

    MPU6050->hi2c     = Hi2c;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	601a      	str	r2, [r3, #0]
    MPU6050->address  = Address;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	88fa      	ldrh	r2, [r7, #6]
 8000fdc:	809a      	strh	r2, [r3, #4]

    CheckID = Read8(MPU6050, 0x75);
 8000fde:	2175      	movs	r1, #117	@ 0x75
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f96d 	bl	80012c0 <Read8>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    if (CheckID != 0x68) {
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b68      	cmp	r3, #104	@ 0x68
 8000fee:	d001      	beq.n	8000ff4 <MPU6050_Init+0x30>
        return MPU6050_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e024      	b.n	800103e <MPU6050_Init+0x7a>
    }

    if (MPU6050_WakeUp(MPU6050) != MPU6050_OK) {
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f826 	bl	8001046 <MPU6050_WakeUp>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MPU6050_Init+0x40>
        return MPU6050_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e01c      	b.n	800103e <MPU6050_Init+0x7a>
    }
    if (MPU6050_SetAccelerationRange(MPU6050) != MPU6050_OK) {
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 f9d6 	bl	80013b6 <MPU6050_SetAccelerationRange>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MPU6050_Init+0x50>
        return MPU6050_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e014      	b.n	800103e <MPU6050_Init+0x7a>
    }
    if (MPU6050_SetGyroRange(MPU6050) != MPU6050_OK) {
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 f9b5 	bl	8001384 <MPU6050_SetGyroRange>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MPU6050_Init+0x60>
        return MPU6050_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e00c      	b.n	800103e <MPU6050_Init+0x7a>
    }

    MPU6050_CalibrateAccel(MPU6050, &MPU6050->AccelOffset);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fa50 	bl	80014d0 <MPU6050_CalibrateAccel>
    MPU6050_CalibrateGyro(MPU6050, &MPU6050->GyroOffset);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3314      	adds	r3, #20
 8001034:	4619      	mov	r1, r3
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 fad8 	bl	80015ec <MPU6050_CalibrateGyro>


    return MPU6050_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <MPU6050_WakeUp>:
{
    return Read8(MPU6050, 0x75);
}

MPU6050_STATE_t MPU6050_WakeUp(MPU6050_t *MPU6050)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
    uint8_t Value = Read8(MPU6050, PWR_MGMT_1);
 800104e:	216b      	movs	r1, #107	@ 0x6b
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f935 	bl	80012c0 <Read8>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]

    Value &= ~(1 << 6);  // disable sleep
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001060:	73fb      	strb	r3, [r7, #15]
    Value &= ~(1 << 5);  // disable cycle
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f023 0320 	bic.w	r3, r3, #32
 8001068:	73fb      	strb	r3, [r7, #15]
    Value |= (1 << 3);   // disable temp sensor
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	73fb      	strb	r3, [r7, #15]

    return Write8(MPU6050, PWR_MGMT_1, Value);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	461a      	mov	r2, r3
 8001076:	216b      	movs	r1, #107	@ 0x6b
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f93f 	bl	80012fc <Write8>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <MPU6050_DegFromAccel>:

// --- Obliczanie kątów ---

MPU6050_STATE_t MPU6050_DegFromAccel(MPU6050_t *MPU6050, float *Roll, float *Pitch)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	ed2d 8b02 	vpush	{d8}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
    Accel_t Accel;
    MPU6050_ReadAcceleration(MPU6050, &Accel, MPU6050->AccelOffset);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edd3 6a02 	vldr	s13, [r3, #8]
 800109e:	ed93 7a03 	vldr	s14, [r3, #12]
 80010a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	eeb0 0a66 	vmov.f32	s0, s13
 80010ae:	eef0 0a47 	vmov.f32	s1, s14
 80010b2:	eeb0 1a67 	vmov.f32	s2, s15
 80010b6:	4619      	mov	r1, r3
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f9b7 	bl	800142c <MPU6050_ReadAcceleration>

    *Roll  = atan2f(Accel.AccelY, Accel.AccelZ) * 180.0f / M_PI;
 80010be:	edd7 7a06 	vldr	s15, [r7, #24]
 80010c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010c6:	eef0 0a47 	vmov.f32	s1, s14
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f007 fb9f 	bl	8008810 <atan2f>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001188 <MPU6050_DegFromAccel+0x100>
 80010da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa59 	bl	8000598 <__aeabi_f2d>
 80010e6:	a326      	add	r3, pc, #152	@ (adr r3, 8001180 <MPU6050_DegFromAccel+0xf8>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fbd6 	bl	800089c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd7e 	bl	8000bf8 <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	601a      	str	r2, [r3, #0]
    *Pitch = atan2f(-Accel.AccelX, sqrtf(Accel.AccelY*Accel.AccelY + Accel.AccelZ*Accel.AccelZ)) * 180.0f / M_PI;
 8001102:	edd7 7a05 	vldr	s15, [r7, #20]
 8001106:	eeb1 8a67 	vneg.f32	s16, s15
 800110a:	ed97 7a06 	vldr	s14, [r7, #24]
 800110e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001116:	edd7 6a07 	vldr	s13, [r7, #28]
 800111a:	edd7 7a07 	vldr	s15, [r7, #28]
 800111e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	f007 fb73 	bl	8008814 <sqrtf>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
 8001132:	eef0 0a67 	vmov.f32	s1, s15
 8001136:	eeb0 0a48 	vmov.f32	s0, s16
 800113a:	f007 fb69 	bl	8008810 <atan2f>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001188 <MPU6050_DegFromAccel+0x100>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	ee17 0a90 	vmov	r0, s15
 800114e:	f7ff fa23 	bl	8000598 <__aeabi_f2d>
 8001152:	a30b      	add	r3, pc, #44	@ (adr r3, 8001180 <MPU6050_DegFromAccel+0xf8>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd48 	bl	8000bf8 <__aeabi_d2f>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]

    return MPU6050_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	ecbd 8b02 	vpop	{d8}
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	54442d18 	.word	0x54442d18
 8001184:	400921fb 	.word	0x400921fb
 8001188:	43340000 	.word	0x43340000

0800118c <MPU6050_DegFromGyro>:

MPU6050_STATE_t MPU6050_DegFromGyro(MPU6050_t *MPU6050, float *RollG, float *PitchG, float *YawG, float dt)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6178      	str	r0, [r7, #20]
 8001194:	6139      	str	r1, [r7, #16]
 8001196:	60fa      	str	r2, [r7, #12]
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	ed87 0a01 	vstr	s0, [r7, #4]
    Gyro_t Gyro;
    MPU6050_ReadGyro(MPU6050, &Gyro, MPU6050->GyroOffset);
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	edd3 6a05 	vldr	s13, [r3, #20]
 80011a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80011a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	eeb0 0a66 	vmov.f32	s0, s13
 80011b4:	eef0 0a47 	vmov.f32	s1, s14
 80011b8:	eeb0 1a67 	vmov.f32	s2, s15
 80011bc:	4619      	mov	r1, r3
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f000 f9c0 	bl	8001544 <MPU6050_ReadGyro>

    *RollG  += Gyro.GyroX * dt;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	ed93 7a00 	vldr	s14, [r3]
 80011ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
    *PitchG += Gyro.GyroY * dt;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	edd7 6a08 	vldr	s13, [r7, #32]
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edc3 7a00 	vstr	s15, [r3]
    *YawG   += Gyro.GyroZ * dt;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	edc3 7a00 	vstr	s15, [r3]

    return MPU6050_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <MPU6050_Angle>:

MPU6050_STATE_t MPU6050_Angle(MPU6050_t *MPU6050, float *Roll, float *Pitch, float *Yaw, float dt)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6178      	str	r0, [r7, #20]
 800122c:	6139      	str	r1, [r7, #16]
 800122e:	60fa      	str	r2, [r7, #12]
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	ed87 0a01 	vstr	s0, [r7, #4]
    float RollAccel, PitchAccel;

    // Accel
    MPU6050_DegFromAccel(MPU6050, &RollAccel, &PitchAccel);
 8001236:	f107 021c 	add.w	r2, r7, #28
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4619      	mov	r1, r3
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff ff21 	bl	8001088 <MPU6050_DegFromAccel>

    // Gyro
    MPU6050_DegFromGyro(MPU6050, Roll, Pitch, Yaw, dt);
 8001246:	ed97 0a01 	vldr	s0, [r7, #4]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ff9b 	bl	800118c <MPU6050_DegFromGyro>

    // Komplementarny filtr
    const float alpha = 0.98f;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MPU6050_Angle+0x98>)
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    *Roll  = alpha * (*Roll)  + (1.0f - alpha) * RollAccel;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	ed93 7a00 	vldr	s14, [r3]
 8001260:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800126c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001270:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001274:	edd7 7a08 	vldr	s15, [r7, #32]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	edc3 7a00 	vstr	s15, [r3]
    *Pitch = alpha * (*Pitch) + (1.0f - alpha) * PitchAccel;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001298:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800129c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edc3 7a00 	vstr	s15, [r3]

    return MPU6050_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	3f7ae148 	.word	0x3f7ae148

080012c0 <Read8>:

// --- Implementacja funkcji pomocniczych ---

static uint8_t Read8(MPU6050_t *MPU6050, uint8_t Register)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
    uint8_t Value;
    HAL_I2C_Mem_Read(MPU6050->hi2c, (MPU6050->address) << 1, Register, 1, &Value, 1, MPU6050_TIMEOUT);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	889b      	ldrh	r3, [r3, #4]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b299      	uxth	r1, r3
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030f 	add.w	r3, r7, #15
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	f001 fb1b 	bl	8002928 <HAL_I2C_Mem_Read>
    return Value;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Write8>:

static MPU6050_STATE_t Write8(MPU6050_t *MPU6050, uint8_t Register, uint8_t Value)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af04      	add	r7, sp, #16
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
 8001308:	4613      	mov	r3, r2
 800130a:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(MPU6050->hi2c, (MPU6050->address) << 1, Register, 1, &Value, 1, MPU6050_TIMEOUT);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b299      	uxth	r1, r3
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	b29a      	uxth	r2, r3
 800131c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	f001 f9e8 	bl	8002700 <HAL_I2C_Mem_Write>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <Read16>:

static int16_t Read16(MPU6050_t *MPU6050, uint8_t Register)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b088      	sub	sp, #32
 800133e:	af04      	add	r7, sp, #16
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
    uint8_t Value[2];
    HAL_I2C_Mem_Read(MPU6050->hi2c, (MPU6050->address) << 1, Register, 1, Value, 2, MPU6050_TIMEOUT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	b299      	uxth	r1, r3
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	b29a      	uxth	r2, r3
 8001356:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2302      	movs	r3, #2
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	f001 fade 	bl	8002928 <HAL_I2C_Mem_Read>
    return (int16_t)((Value[0] << 8) | Value[1]);
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	b21b      	sxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MPU6050_SetGyroRange>:

static MPU6050_STATE_t MPU6050_SetGyroRange(MPU6050_t *MPU6050)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    uint8_t RegisterValue = Read8(MPU6050, GYRO_CONFIG);
 800138c:	211b      	movs	r1, #27
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff96 	bl	80012c0 <Read8>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
    RegisterValue &= ~( (1 << 4) | (1 << 5) ); // ±250°/s
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800139e:	73fb      	strb	r3, [r7, #15]
    return Write8(MPU6050, GYRO_CONFIG, RegisterValue);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	461a      	mov	r2, r3
 80013a4:	211b      	movs	r1, #27
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa8 	bl	80012fc <Write8>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <MPU6050_SetAccelerationRange>:

static MPU6050_STATE_t MPU6050_SetAccelerationRange(MPU6050_t *MPU6050)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
    uint8_t RegisterValue = Read8(MPU6050, ACCEL_CONFIG);
 80013be:	211c      	movs	r1, #28
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff7d 	bl	80012c0 <Read8>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
    RegisterValue &= ~( (1 << 4) | (1 << 5) ); // ±2g
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013d0:	73fb      	strb	r3, [r7, #15]
    return Write8(MPU6050, ACCEL_CONFIG, RegisterValue);
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	461a      	mov	r2, r3
 80013d6:	211c      	movs	r1, #28
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff8f 	bl	80012fc <Write8>
 80013de:	4603      	mov	r3, r0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <MPU6050_ReadAccelerationRaw>:

// --- surowe i skalowane odczyty Accel/Gyro (prywatne) ---

static MPU6050_STATE_t MPU6050_ReadAccelerationRaw(MPU6050_t *MPU6050, AccelRaw_t *AccelRaw)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    AccelRaw->AccelX = Read16(MPU6050, ACCEL_XOUT_H);
 80013f2:	213b      	movs	r1, #59	@ 0x3b
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffa0 	bl	800133a <Read16>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	801a      	strh	r2, [r3, #0]
    AccelRaw->AccelY = Read16(MPU6050, ACCEL_YOUT_H);
 8001402:	213d      	movs	r1, #61	@ 0x3d
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff98 	bl	800133a <Read16>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	805a      	strh	r2, [r3, #2]
    AccelRaw->AccelZ = Read16(MPU6050, ACCEL_ZOUT_H);
 8001412:	213f      	movs	r1, #63	@ 0x3f
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff90 	bl	800133a <Read16>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	809a      	strh	r2, [r3, #4]
    return MPU6050_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MPU6050_ReadAcceleration>:

static MPU6050_STATE_t MPU6050_ReadAcceleration(MPU6050_t *MPU6050, Accel_t *Accelerations, AccelOffset_t AccelOffset)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6178      	str	r0, [r7, #20]
 8001434:	6139      	str	r1, [r7, #16]
 8001436:	eef0 6a40 	vmov.f32	s13, s0
 800143a:	eeb0 7a60 	vmov.f32	s14, s1
 800143e:	eef0 7a41 	vmov.f32	s15, s2
 8001442:	edc7 6a01 	vstr	s13, [r7, #4]
 8001446:	ed87 7a02 	vstr	s14, [r7, #8]
 800144a:	edc7 7a03 	vstr	s15, [r7, #12]
    AccelRaw_t Raw;
    MPU6050_ReadAccelerationRaw(MPU6050, &Raw);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	6978      	ldr	r0, [r7, #20]
 8001456:	f7ff ffc7 	bl	80013e8 <MPU6050_ReadAccelerationRaw>

    const float ScaleFactor = 16384.0f; // ±2g
 800145a:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24

    Accelerations->AccelX = ((float)Raw.AccelX - AccelOffset.OffsetX) / ScaleFactor;
 8001460:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001470:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001474:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	edc3 7a00 	vstr	s15, [r3]
    Accelerations->AccelY = ((float)Raw.AccelY - AccelOffset.OffsetY) / ScaleFactor;
 8001482:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001492:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001496:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800149a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	edc3 7a01 	vstr	s15, [r3, #4]
    Accelerations->AccelZ = ((float)Raw.AccelZ - AccelOffset.OffsetZ) / ScaleFactor;
 80014a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014b8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	edc3 7a02 	vstr	s15, [r3, #8]

    return MPU6050_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MPU6050_CalibrateAccel>:

static MPU6050_STATE_t MPU6050_CalibrateAccel(MPU6050_t *MPU6050, AccelOffset_t *AccelOffset)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    // TODO: implementacja kalibracji
    AccelOffset->OffsetX = 0;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
    AccelOffset->OffsetY = 0;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
    AccelOffset->OffsetZ = 0;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    return MPU6050_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <MPU6050_ReadGyroRaw>:

static MPU6050_STATE_t MPU6050_ReadGyroRaw(MPU6050_t *MPU6050, GyroRaw_t *GyroRaw)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    GyroRaw->GyroX = Read16(MPU6050, GYRO_XOUT_H);
 800150a:	2143      	movs	r1, #67	@ 0x43
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff14 	bl	800133a <Read16>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	801a      	strh	r2, [r3, #0]
    GyroRaw->GyroY = Read16(MPU6050, GYRO_YOUT_H);
 800151a:	2145      	movs	r1, #69	@ 0x45
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff0c 	bl	800133a <Read16>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	805a      	strh	r2, [r3, #2]
    GyroRaw->GyroZ = Read16(MPU6050, GYRO_ZOUT_H);
 800152a:	2147      	movs	r1, #71	@ 0x47
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff04 	bl	800133a <Read16>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	809a      	strh	r2, [r3, #4]
    return MPU6050_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <MPU6050_ReadGyro>:

static MPU6050_STATE_t MPU6050_ReadGyro(MPU6050_t *MPU6050, Gyro_t *GyroCalculated, GyroOffset_t GyroOffset)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6178      	str	r0, [r7, #20]
 800154c:	6139      	str	r1, [r7, #16]
 800154e:	eef0 6a40 	vmov.f32	s13, s0
 8001552:	eeb0 7a60 	vmov.f32	s14, s1
 8001556:	eef0 7a41 	vmov.f32	s15, s2
 800155a:	edc7 6a01 	vstr	s13, [r7, #4]
 800155e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001562:	edc7 7a03 	vstr	s15, [r7, #12]
    GyroRaw_t Raw;
    MPU6050_ReadGyroRaw(MPU6050, &Raw);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	6978      	ldr	r0, [r7, #20]
 800156e:	f7ff ffc7 	bl	8001500 <MPU6050_ReadGyroRaw>

    const float ScaleFactor = 131.0f; // ±250°/s
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MPU6050_ReadGyro+0xa4>)
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24

    GyroCalculated->GyroX = ((float)Raw.GyroX - GyroOffset.OffsetX) / ScaleFactor;
 8001576:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	edd7 7a01 	vldr	s15, [r7, #4]
 8001586:	ee77 6a67 	vsub.f32	s13, s14, s15
 800158a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	edc3 7a00 	vstr	s15, [r3]
    GyroCalculated->GyroY = ((float)Raw.GyroY - GyroOffset.OffsetY) / ScaleFactor;
 8001598:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	edc3 7a01 	vstr	s15, [r3, #4]
    GyroCalculated->GyroZ = ((float)Raw.GyroZ - GyroOffset.OffsetZ) / ScaleFactor;
 80015ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	edc3 7a02 	vstr	s15, [r3, #8]

    return MPU6050_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	43030000 	.word	0x43030000

080015ec <MPU6050_CalibrateGyro>:

static MPU6050_STATE_t MPU6050_CalibrateGyro(MPU6050_t *MPU6050, GyroOffset_t *GyroOffset)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    // TODO: implementacja kalibracji
    GyroOffset->OffsetX = 0;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    GyroOffset->OffsetY = 0;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
    GyroOffset->OffsetZ = 0;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    return MPU6050_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a2e      	ldr	r2, [pc, #184]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164a:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_GPIO_Init+0xd4>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2120      	movs	r1, #32
 8001696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169a:	f000 ff5b 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800169e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	480f      	ldr	r0, [pc, #60]	@ (80016f4 <MX_GPIO_Init+0xd8>)
 80016b6:	f000 fdcb 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ba:	2320      	movs	r3, #32
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d4:	f000 fdbc 	bl	8002250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2028      	movs	r0, #40	@ 0x28
 80016de:	f000 fd82 	bl	80021e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e2:	2028      	movs	r0, #40	@ 0x28
 80016e4:	f000 fd99 	bl	800221a <HAL_NVIC_EnableIRQ>

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000800 	.word	0x48000800

080016f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_I2C1_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <MX_I2C1_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_I2C1_Init+0x74>)
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <MX_I2C1_Init+0x7c>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_I2C1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <MX_I2C1_Init+0x74>)
 8001710:	2201      	movs	r2, #1
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_I2C1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800171a:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_I2C1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_I2C1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <MX_I2C1_Init+0x74>)
 8001734:	f000 ff49 	bl	80025ca <HAL_I2C_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800173e:	f000 f951 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <MX_I2C1_Init+0x74>)
 8001746:	f001 fccb 	bl	80030e0 <HAL_I2CEx_ConfigAnalogFilter>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001750:	f000 f948 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_I2C1_Init+0x74>)
 8001758:	f001 fd0d 	bl	8003176 <HAL_I2CEx_ConfigDigitalFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f93f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001f4 	.word	0x200001f4
 8001770:	40005400 	.word	0x40005400
 8001774:	40b285c2 	.word	0x40b285c2

08001778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b09e      	sub	sp, #120	@ 0x78
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2254      	movs	r2, #84	@ 0x54
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f004 ff6c 	bl	8006676 <memset>
  if(i2cHandle->Instance==I2C1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <HAL_I2C_MspInit+0xa8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d136      	bne.n	8001816 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017a8:	2340      	movs	r3, #64	@ 0x40
 80017aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fb0d 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017c0:	f000 f910 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e2:	2312      	movs	r3, #18
 80017e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ee:	2304      	movs	r3, #4
 80017f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <HAL_I2C_MspInit+0xb0>)
 80017fa:	f000 fd29 	bl	8002250 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 8001804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001808:	6593      	str	r3, [r2, #88]	@ 0x58
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_I2C_MspInit+0xac>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3778      	adds	r7, #120	@ 0x78
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40005400 	.word	0x40005400
 8001824:	40021000 	.word	0x40021000
 8001828:	48000400 	.word	0x48000400

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f000 fb6b 	bl	8001f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f000 f868 	bl	8001908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001838:	f7ff fef0 	bl	800161c <MX_GPIO_Init>
  MX_I2C1_Init();
 800183c:	f7ff ff5c 	bl	80016f8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001840:	f000 fa98 	bl	8001d74 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001844:	f000 fa1c 	bl	8001c80 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001848:	f000 f8a9 	bl	800199e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  Status = MPU6050_Init(&MPU6050, &hi2c1, 0x68);
 800184c:	2268      	movs	r2, #104	@ 0x68
 800184e:	491f      	ldr	r1, [pc, #124]	@ (80018cc <main+0xa0>)
 8001850:	481f      	ldr	r0, [pc, #124]	@ (80018d0 <main+0xa4>)
 8001852:	f7ff fbb7 	bl	8000fc4 <MPU6050_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <main+0xa8>)
 800185c:	701a      	strb	r2, [r3, #0]
  sprintf(Message, "Status = %d\n", Status);
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <main+0xa8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	491c      	ldr	r1, [pc, #112]	@ (80018d8 <main+0xac>)
 8001866:	481d      	ldr	r0, [pc, #116]	@ (80018dc <main+0xb0>)
 8001868:	f004 fea0 	bl	80065ac <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);
 800186c:	481b      	ldr	r0, [pc, #108]	@ (80018dc <main+0xb0>)
 800186e:	f7fe fd27 	bl	80002c0 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187a:	4918      	ldr	r1, [pc, #96]	@ (80018dc <main+0xb0>)
 800187c:	4818      	ldr	r0, [pc, #96]	@ (80018e0 <main+0xb4>)
 800187e:	f003 fad1 	bl	8004e24 <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim1);
 8001882:	4818      	ldr	r0, [pc, #96]	@ (80018e4 <main+0xb8>)
 8001884:	f002 fd4c 	bl	8004320 <HAL_TIM_Base_Start_IT>

	  //MPU6050_ReadAcceleration(&MPU6050, &Accelerations, AccelOffset);
	  //sprintf(Message, "Accel X: %f\n", Accelerations.AccelX);
	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);

	  if(InterruptFlag)
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <main+0xbc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0fa      	beq.n	8001888 <main+0x5c>
		{
		  InterruptFlag = 0;
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <main+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
		  MPU6050_Angle(&MPU6050, &Roll, &Pitch, &Yaw, dt);
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <main+0xc0>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <main+0xc4>)
 80018a4:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <main+0xc8>)
 80018a6:	4914      	ldr	r1, [pc, #80]	@ (80018f8 <main+0xcc>)
 80018a8:	4809      	ldr	r0, [pc, #36]	@ (80018d0 <main+0xa4>)
 80018aa:	f7ff fcbb 	bl	8001224 <MPU6050_Angle>
		  //HAL_Delay(10);
		  //MPU6050_DegFromAccel(&MPU6050, &RollAccel, &PitchAccel);
		  //sprintf(Message, "RollA: %.3f, PitchA: %.3f\n", RollAccel, PitchAccel);
		  //HAL_UART_Transmit(&hlpuart1,(uint8_t*) Message, strlen(Message), HAL_MAX_DELAY);

		  HAL_Delay(10);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f000 fb9c 	bl	8001fec <HAL_Delay>
		  MPU6050_DegFromGyro(&MPU6050, &RollGyro, &PitchGyro, &YawGyro, dt);
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <main+0xc0>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	eeb0 0a67 	vmov.f32	s0, s15
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <main+0xd0>)
 80018c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <main+0xd4>)
 80018c2:	4910      	ldr	r1, [pc, #64]	@ (8001904 <main+0xd8>)
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <main+0xa4>)
 80018c6:	f7ff fc61 	bl	800118c <MPU6050_DegFromGyro>
	  if(InterruptFlag)
 80018ca:	e7dd      	b.n	8001888 <main+0x5c>
 80018cc:	200001f4 	.word	0x200001f4
 80018d0:	20000248 	.word	0x20000248
 80018d4:	20000268 	.word	0x20000268
 80018d8:	08008b68 	.word	0x08008b68
 80018dc:	20000278 	.word	0x20000278
 80018e0:	20000358 	.word	0x20000358
 80018e4:	2000030c 	.word	0x2000030c
 80018e8:	20000304 	.word	0x20000304
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000274 	.word	0x20000274
 80018f4:	20000270 	.word	0x20000270
 80018f8:	2000026c 	.word	0x2000026c
 80018fc:	20000300 	.word	0x20000300
 8001900:	200002fc 	.word	0x200002fc
 8001904:	200002f8 	.word	0x200002f8

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	@ 0x50
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	2238      	movs	r2, #56	@ 0x38
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fead 	bl	8006676 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800192a:	2000      	movs	r0, #0
 800192c:	f001 fc70 	bl	8003210 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193a:	2340      	movs	r3, #64	@ 0x40
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001942:	2302      	movs	r3, #2
 8001944:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001946:	2304      	movs	r3, #4
 8001948:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800194a:	2355      	movs	r3, #85	@ 0x55
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194e:	2302      	movs	r3, #2
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001952:	2302      	movs	r3, #2
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001956:	2302      	movs	r3, #2
 8001958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fd0a 	bl	8003378 <HAL_RCC_OscConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800196a:	f000 f83b 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2303      	movs	r3, #3
 8001974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2104      	movs	r1, #4
 8001986:	4618      	mov	r0, r3
 8001988:	f002 f808 	bl	800399c <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001992:	f000 f827 	bl	80019e4 <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	@ 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2019      	movs	r0, #25
 80019a8:	f000 fc1d 	bl	80021e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019ac:	2019      	movs	r0, #25
 80019ae:	f000 fc34 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d102      	bne.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		 InterruptFlag = 1;
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
	}
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	20000304 	.word	0x20000304

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <Error_Handler+0x8>

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_MspInit+0x44>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a26:	f001 fc97 	bl	8003358 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 fa8f 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001a9e:	f002 fcb7 	bl	8004410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000030c 	.word	0x2000030c

08001aac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ab2:	f002 fcad 	bl	8004410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000030c 	.word	0x2000030c

08001ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ac4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ac8:	f000 fd5c 	bl	8002584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aea:	f004 fe17 	bl	800671c <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b12:	bf00      	nop
 8001b14:	e7fd      	b.n	8001b12 <_exit+0x12>

08001b16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e00a      	b.n	8001b3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b28:	f3af 8000 	nop.w
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbf0      	blt.n	8001b28 <_read+0x12>
  }

  return len;
 8001b46:	687b      	ldr	r3, [r7, #4]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e009      	b.n	8001b76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf1      	blt.n	8001b62 <_write+0x12>
  }
  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_close>:

int _close(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_isatty>:

int _isatty(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f004 fd7c 	bl	800671c <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20020000 	.word	0x20020000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000308 	.word	0x20000308
 8001c58:	20000540 	.word	0x20000540

08001c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001ca0:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <MX_TIM1_Init+0xa4>)
 8001ca2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001ca6:	22a9      	movs	r2, #169	@ 0xa9
 8001ca8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001cb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cca:	4815      	ldr	r0, [pc, #84]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001ccc:	f002 fad0 	bl	8004270 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001cd6:	f7ff fe85 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480e      	ldr	r0, [pc, #56]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001ce8:	f002 fce2 	bl	80046b0 <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001cf2:	f7ff fe77 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <MX_TIM1_Init+0xa0>)
 8001d08:	f002 ff60 	bl	8004bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d12:	f7ff fe67 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000030c 	.word	0x2000030c
 8001d24:	40012c00 	.word	0x40012c00

08001d28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d113      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <HAL_TIM_Base_MspInit+0x48>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <HAL_TIM_Base_MspInit+0x48>)
 8001d40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_TIM_Base_MspInit+0x48>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2018      	movs	r0, #24
 8001d58:	f000 fa45 	bl	80021e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d5c:	2018      	movs	r0, #24
 8001d5e:	f000 fa5c 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000

08001d74 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d78:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d7a:	4a22      	ldr	r2, [pc, #136]	@ (8001e04 <MX_LPUART1_UART_Init+0x90>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da4:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001db6:	4812      	ldr	r0, [pc, #72]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001db8:	f002 ffe4 	bl	8004d84 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dc2:	f7ff fe0f 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001dca:	f003 fe0d 	bl	80059e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001dd4:	f7ff fe06 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001ddc:	f003 fe42 	bl	8005a64 <HAL_UARTEx_SetRxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001de6:	f7ff fdfd 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_LPUART1_UART_Init+0x8c>)
 8001dec:	f003 fdc3 	bl	8005976 <HAL_UARTEx_DisableFifoMode>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001df6:	f7ff fdf5 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000358 	.word	0x20000358
 8001e04:	40008000 	.word	0x40008000

08001e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b09e      	sub	sp, #120	@ 0x78
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2254      	movs	r2, #84	@ 0x54
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fc24 	bl	8006676 <memset>
  if(uartHandle->Instance==LPUART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_UART_MspInit+0xa8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d136      	bne.n	8001ea6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 ffc5 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e50:	f7ff fdc8 	bl	80019e4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_UART_MspInit+0xac>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e84:	230c      	movs	r3, #12
 8001e86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e94:	230c      	movs	r3, #12
 8001e96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea2:	f000 f9d5 	bl	8002250 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3778      	adds	r7, #120	@ 0x78
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40008000 	.word	0x40008000
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb8:	480d      	ldr	r0, [pc, #52]	@ (8001ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff fece 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <LoopForever+0xe>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f04 <LoopForever+0x16>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f004 fc1f 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eea:	f7ff fc9f 	bl	800182c <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   r0, =_estack
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001efc:	08008f74 	.word	0x08008f74
  ldr r2, =_sbss
 8001f00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f04:	2000053c 	.word	0x2000053c

08001f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_2_IRQHandler>

08001f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f95b 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fd60 	bl	80019f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]

}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_InitTick+0x6c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <HAL_InitTick+0x68>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f966 	bl	8002236 <HAL_SYSTICK_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d809      	bhi.n	8001f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f76:	2200      	movs	r2, #0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f7e:	f000 f932 	bl	80021e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_InitTick+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e004      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	20000008 	.word	0x20000008

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a03      	ldr	r2, [pc, #12]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200003ec 	.word	0x200003ec
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200003ec 	.word	0x200003ec

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002004:	d004      	beq.n	8002010 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_Delay+0x40>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002010:	bf00      	nop
 8002012:	f7ff ffdf 	bl	8001fd4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d8f7      	bhi.n	8002012 <HAL_Delay+0x26>
  {
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000000c 	.word	0x2000000c

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	@ (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	@ (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	@ (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	@ 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021b0:	f7ff ff8e 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff29 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff40 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff90 	bl	8002124 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5f 	bl	80020d0 <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff33 	bl	8002094 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa4 	bl	800218c <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800225e:	e15a      	b.n	8002516 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 814c 	beq.w	8002510 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d005      	beq.n	8002290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800228c:	2b02      	cmp	r3, #2
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0201 	and.w	r2, r3, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d017      	beq.n	800232e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	6939      	ldr	r1, [r7, #16]
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a6 	beq.w	8002510 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_GPIO_Init+0x2e4>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_GPIO_Init+0x2e4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d0:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <HAL_GPIO_Init+0x2e4>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023dc:	4a56      	ldr	r2, [pc, #344]	@ (8002538 <HAL_GPIO_Init+0x2e8>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002406:	d01f      	beq.n	8002448 <HAL_GPIO_Init+0x1f8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4c      	ldr	r2, [pc, #304]	@ (800253c <HAL_GPIO_Init+0x2ec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d019      	beq.n	8002444 <HAL_GPIO_Init+0x1f4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a4b      	ldr	r2, [pc, #300]	@ (8002540 <HAL_GPIO_Init+0x2f0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_GPIO_Init+0x1f0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4a      	ldr	r2, [pc, #296]	@ (8002544 <HAL_GPIO_Init+0x2f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00d      	beq.n	800243c <HAL_GPIO_Init+0x1ec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a49      	ldr	r2, [pc, #292]	@ (8002548 <HAL_GPIO_Init+0x2f8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <HAL_GPIO_Init+0x1e8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a48      	ldr	r2, [pc, #288]	@ (800254c <HAL_GPIO_Init+0x2fc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_GPIO_Init+0x1e4>
 8002430:	2305      	movs	r3, #5
 8002432:	e00a      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 8002434:	2306      	movs	r3, #6
 8002436:	e008      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 8002438:	2304      	movs	r3, #4
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 800243c:	2303      	movs	r3, #3
 800243e:	e004      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_GPIO_Init+0x1fa>
 8002448:	2300      	movs	r3, #0
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245a:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_GPIO_Init+0x2e8>)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002468:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <HAL_GPIO_Init+0x300>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248c:	4a30      	ldr	r2, [pc, #192]	@ (8002550 <HAL_GPIO_Init+0x300>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002492:	4b2f      	ldr	r3, [pc, #188]	@ (8002550 <HAL_GPIO_Init+0x300>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b6:	4a26      	ldr	r2, [pc, #152]	@ (8002550 <HAL_GPIO_Init+0x300>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_GPIO_Init+0x300>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_GPIO_Init+0x300>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_GPIO_Init+0x300>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250a:	4a11      	ldr	r2, [pc, #68]	@ (8002550 <HAL_GPIO_Init+0x300>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f ae9d 	bne.w	8002260 <HAL_GPIO_Init+0x10>
  }
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	48000c00 	.word	0x48000c00
 8002548:	48001000 	.word	0x48001000
 800254c:	48001400 	.word	0x48001400
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800259a:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f806 	bl	80025b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e08d      	b.n	80026f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff f8c1 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2224      	movs	r2, #36	@ 0x24
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800261a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800262a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002650:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d108      	bne.n	800266c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e007      	b.n	800267c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800268a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69d9      	ldr	r1, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4603      	mov	r3, r0
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	460b      	mov	r3, r1
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 80f9 	bne.w	800291a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_I2C_Mem_Write+0x34>
 800272e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0ed      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_I2C_Mem_Write+0x4e>
 800274a:	2302      	movs	r3, #2
 800274c:	e0e6      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002756:	f7ff fc3d 	bl	8001fd4 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fac3 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d1      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	@ 0x21
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002798:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a0:	88f8      	ldrh	r0, [r7, #6]
 80027a2:	893a      	ldrh	r2, [r7, #8]
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4603      	mov	r3, r0
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f9d3 	bl	8002b5c <I2C_RequestMemoryWrite>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0a9      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2bff      	cmp	r3, #255	@ 0xff
 80027d0:	d90e      	bls.n	80027f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	22ff      	movs	r2, #255	@ 0xff
 80027d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	8979      	ldrh	r1, [r7, #10]
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fc47 	bl	800307c <I2C_TransferConfig>
 80027ee:	e00f      	b.n	8002810 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fc36 	bl	800307c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fac6 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07b      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d034      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d130      	bne.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fa3f 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e04d      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2bff      	cmp	r3, #255	@ 0xff
 8002888:	d90e      	bls.n	80028a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	@ 0xff
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fbeb 	bl	800307c <I2C_TransferConfig>
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fbda 	bl	800307c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d19e      	bne.n	8002810 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 faac 	bl	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01a      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2220      	movs	r2, #32
 80028ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_I2C_Mem_Write+0x224>)
 80028fa:	400b      	ands	r3, r1
 80028fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	f040 80fd 	bne.w	8002b4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_I2C_Mem_Read+0x34>
 8002956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0f1      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Read+0x4e>
 8002972:	2302      	movs	r3, #2
 8002974:	e0ea      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297e:	f7ff fb29 	bl	8001fd4 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2319      	movs	r3, #25
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f9af 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d5      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2222      	movs	r2, #34	@ 0x22
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c8:	88f8      	ldrh	r0, [r7, #6]
 80029ca:	893a      	ldrh	r2, [r7, #8]
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4603      	mov	r3, r0
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f913 	bl	8002c04 <I2C_RequestMemoryRead>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0ad      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d90e      	bls.n	8002a18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	4b52      	ldr	r3, [pc, #328]	@ (8002b54 <HAL_I2C_Mem_Read+0x22c>)
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fb33 	bl	800307c <I2C_TransferConfig>
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_I2C_Mem_Read+0x22c>)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fb22 	bl	800307c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2104      	movs	r1, #4
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f956 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07c      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d034      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d130      	bne.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f927 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e04d      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2bff      	cmp	r3, #255	@ 0xff
 8002ab8:	d90e      	bls.n	8002ad8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22ff      	movs	r2, #255	@ 0xff
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fad3 	bl	800307c <I2C_TransferConfig>
 8002ad6:	e00f      	b.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fac2 	bl	800307c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d19a      	bne.n	8002a38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f994 	bl	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01a      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_I2C_Mem_Read+0x230>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	80002400 	.word	0x80002400
 8002b58:	fe00e800 	.word	0xfe00e800

08002b5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	8979      	ldrh	r1, [r7, #10]
 8002b7c:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <I2C_RequestMemoryWrite+0xa4>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa79 	bl	800307c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f909 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02c      	b.n	8002bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba4:	893b      	ldrh	r3, [r7, #8]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bae:	e015      	b.n	8002bdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f8ef 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e012      	b.n	8002bf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f884 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	80002000 	.word	0x80002000

08002c04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	460b      	mov	r3, r1
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	4b20      	ldr	r3, [pc, #128]	@ (8002ca8 <I2C_RequestMemoryRead+0xa4>)
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fa26 	bl	800307c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f8b6 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e02c      	b.n	8002c9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4a:	893b      	ldrh	r3, [r7, #8]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c54:	e015      	b.n	8002c82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f89c 	bl	8002da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e012      	b.n	8002c9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2140      	movs	r1, #64	@ 0x40
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f831 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	80002000 	.word	0x80002000

08002cac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d103      	bne.n	8002cca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d007      	beq.n	8002ce8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	619a      	str	r2, [r3, #24]
  }
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	e03b      	b.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	6839      	ldr	r1, [r7, #0]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f8d6 	bl	8002ebc <I2C_IsErrorOccurred>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d20:	d02d      	beq.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7ff f957 	bl	8001fd4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d122      	bne.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d113      	bne.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0b4      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002db2:	e033      	b.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f87f 	bl	8002ebc <I2C_IsErrorOccurred>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e031      	b.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dce:	d025      	beq.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7ff f900 	bl	8001fd4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11a      	bne.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d013      	beq.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e007      	b.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d1c4      	bne.n	8002db4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e40:	e02f      	b.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f838 	bl	8002ebc <I2C_IsErrorOccurred>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02d      	b.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7ff f8bd 	bl	8001fd4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11a      	bne.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d013      	beq.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e007      	b.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d1c8      	bne.n	8002e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d068      	beq.n	8002fba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ef0:	e049      	b.n	8002f86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ef8:	d045      	beq.n	8002f86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7ff f86b 	bl	8001fd4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_IsErrorOccurred+0x54>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13a      	bne.n	8002f86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f32:	d121      	bne.n	8002f78 <I2C_IsErrorOccurred+0xbc>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f3a:	d01d      	beq.n	8002f78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d01a      	beq.n	8002f78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f52:	f7ff f83f 	bl	8001fd4 <HAL_GetTick>
 8002f56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f58:	e00e      	b.n	8002f78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f5a:	f7ff f83b 	bl	8001fd4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b19      	cmp	r3, #25
 8002f66:	d907      	bls.n	8002f78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f76:	e006      	b.n	8002f86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d1e9      	bne.n	8002f5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d003      	beq.n	8002f9c <I2C_IsErrorOccurred+0xe0>
 8002f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0aa      	beq.n	8002ef2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f043 0308 	orr.w	r3, r3, #8
 8002ff4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ffe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01c      	beq.n	800306a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fe3b 	bl	8002cac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <I2C_IsErrorOccurred+0x1bc>)
 8003042:	400b      	ands	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800306a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800306e:	4618      	mov	r0, r3
 8003070:	3728      	adds	r7, #40	@ 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	fe00e800 	.word	0xfe00e800

0800307c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	4613      	mov	r3, r2
 800308c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003094:	7a7b      	ldrb	r3, [r7, #9]
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	0d5b      	lsrs	r3, r3, #21
 80030b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030ba:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <I2C_TransferConfig+0x60>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	43db      	mvns	r3, r3
 80030c0:	ea02 0103 	and.w	r1, r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	03ff63ff 	.word	0x03ff63ff

080030e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d138      	bne.n	8003168 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003100:	2302      	movs	r3, #2
 8003102:	e032      	b.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003132:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	d139      	bne.n	8003200 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003196:	2302      	movs	r3, #2
 8003198:	e033      	b.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2224      	movs	r2, #36	@ 0x24
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d141      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800321e:	4b4b      	ldr	r3, [pc, #300]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322a:	d131      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	4b47      	ldr	r3, [pc, #284]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003232:	4a46      	ldr	r2, [pc, #280]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800323c:	4b43      	ldr	r3, [pc, #268]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003244:	4a41      	ldr	r2, [pc, #260]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800324a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800324c:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2232      	movs	r2, #50	@ 0x32
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	4a3f      	ldr	r2, [pc, #252]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	0c9b      	lsrs	r3, r3, #18
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003262:	e002      	b.n	800326a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3b01      	subs	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	4b38      	ldr	r3, [pc, #224]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003276:	d102      	bne.n	800327e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327e:	4b33      	ldr	r3, [pc, #204]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d158      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e057      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003290:	4b2e      	ldr	r3, [pc, #184]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003296:	4a2d      	ldr	r2, [pc, #180]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800329c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032a0:	e04d      	b.n	800333e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a8:	d141      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032aa:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b6:	d131      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032be:	4a23      	ldr	r2, [pc, #140]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c8:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2232      	movs	r2, #50	@ 0x32
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9b      	lsrs	r3, r3, #18
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ee:	e002      	b.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003302:	d102      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f2      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d112      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e011      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003322:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800332c:	e007      	b.n	800333e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003336:	4a05      	ldr	r2, [pc, #20]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800333c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40007000 	.word	0x40007000
 8003350:	20000004 	.word	0x20000004
 8003354:	431bde83 	.word	0x431bde83

08003358 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003366:	6093      	str	r3, [r2, #8]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40007000 	.word	0x40007000

08003378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e2fe      	b.n	8003988 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	4b97      	ldr	r3, [pc, #604]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a0:	4b94      	ldr	r3, [pc, #592]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3e>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b8d      	ldr	r3, [pc, #564]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e2d9      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b85      	ldr	r3, [pc, #532]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a84      	ldr	r2, [pc, #528]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b7f      	ldr	r3, [pc, #508]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b7c      	ldr	r3, [pc, #496]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7b      	ldr	r2, [pc, #492]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b78      	ldr	r3, [pc, #480]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a77      	ldr	r2, [pc, #476]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b75      	ldr	r3, [pc, #468]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a74      	ldr	r2, [pc, #464]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe fdd0 	bl	8001fd4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fdcc 	bl	8001fd4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e29e      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344a:	4b6a      	ldr	r3, [pc, #424]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fdbc 	bl	8001fd4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fdb8 	bl	8001fd4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e28a      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003472:	4b60      	ldr	r3, [pc, #384]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d075      	beq.n	800357a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4b59      	ldr	r3, [pc, #356]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003498:	4b56      	ldr	r3, [pc, #344]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0x136>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_OscConfig+0x13c>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d11f      	bne.n	80034f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	4b4f      	ldr	r3, [pc, #316]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x154>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e25d      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b49      	ldr	r3, [pc, #292]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	4946      	ldr	r1, [pc, #280]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e0:	4b45      	ldr	r3, [pc, #276]	@ (80035f8 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fd29 	bl	8001f3c <HAL_InitTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d043      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e249      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d023      	beq.n	8003544 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3c      	ldr	r2, [pc, #240]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fd64 	bl	8001fd4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe fd60 	bl	8001fd4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e232      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003522:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	492d      	ldr	r1, [pc, #180]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e01a      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003544:	4b2b      	ldr	r3, [pc, #172]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2a      	ldr	r2, [pc, #168]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800354a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fd40 	bl	8001fd4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe fd3c 	bl	8001fd4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e20e      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800356a:	4b22      	ldr	r3, [pc, #136]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1e0>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d041      	beq.n	800360a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fe fd19 	bl	8001fd4 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fd15 	bl	8001fd4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1e7      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b8:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80035ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ef      	beq.n	80035a6 <HAL_RCC_OscConfig+0x22e>
 80035c6:	e020      	b.n	800360a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ce:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_RCC_OscConfig+0x27c>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fcfc 	bl	8001fd4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035de:	e00d      	b.n	80035fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe fcf8 	bl	8001fd4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d906      	bls.n	80035fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1ca      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ea      	bne.n	80035e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a6 	beq.w	8003764 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800361c:	4b84      	ldr	r3, [pc, #528]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x2b4>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x2b6>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b7f      	ldr	r3, [pc, #508]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	4a7e      	ldr	r2, [pc, #504]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363c:	6593      	str	r3, [r2, #88]	@ 0x58
 800363e:	4b7c      	ldr	r3, [pc, #496]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364e:	4b79      	ldr	r3, [pc, #484]	@ (8003834 <HAL_RCC_OscConfig+0x4bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365a:	4b76      	ldr	r3, [pc, #472]	@ (8003834 <HAL_RCC_OscConfig+0x4bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a75      	ldr	r2, [pc, #468]	@ (8003834 <HAL_RCC_OscConfig+0x4bc>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7fe fcb5 	bl	8001fd4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fe fcb1 	bl	8001fd4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e183      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003680:	4b6c      	ldr	r3, [pc, #432]	@ (8003834 <HAL_RCC_OscConfig+0x4bc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d108      	bne.n	80036a6 <HAL_RCC_OscConfig+0x32e>
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036a4:	e024      	b.n	80036f0 <HAL_RCC_OscConfig+0x378>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d110      	bne.n	80036d0 <HAL_RCC_OscConfig+0x358>
 80036ae:	4b60      	ldr	r3, [pc, #384]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036be:	4b5c      	ldr	r3, [pc, #368]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x378>
 80036d0:	4b57      	ldr	r3, [pc, #348]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	4a56      	ldr	r2, [pc, #344]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	4a52      	ldr	r2, [pc, #328]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe fc6c 	bl	8001fd4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fc68 	bl	8001fd4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e138      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003716:	4b46      	ldr	r3, [pc, #280]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ed      	beq.n	8003700 <HAL_RCC_OscConfig+0x388>
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe fc55 	bl	8001fd4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fc51 	bl	8001fd4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e121      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003744:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ed      	bne.n	800372e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003752:	7ffb      	ldrb	r3, [r7, #31]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b35      	ldr	r3, [pc, #212]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4a34      	ldr	r2, [pc, #208]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03c      	beq.n	80037ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003778:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800377e:	4a2c      	ldr	r2, [pc, #176]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fe fc24 	bl	8001fd4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003790:	f7fe fc20 	bl	8001fd4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0f2      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037a2:	4b23      	ldr	r3, [pc, #140]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <HAL_RCC_OscConfig+0x418>
 80037b0:	e01b      	b.n	80037ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe fc07 	bl	8001fd4 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ca:	f7fe fc03 	bl	8001fd4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0d5      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037dc:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ef      	bne.n	80037ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80c9 	beq.w	8003986 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	f000 8083 	beq.w	8003908 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d15e      	bne.n	80038c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fe fbdd 	bl	8001fd4 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	e00c      	b.n	8003838 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe fbd9 	bl	8001fd4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d905      	bls.n	8003838 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0ab      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	4b55      	ldr	r3, [pc, #340]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ec      	bne.n	800381e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003844:	4b52      	ldr	r3, [pc, #328]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	4b52      	ldr	r3, [pc, #328]	@ (8003994 <HAL_RCC_OscConfig+0x61c>)
 800384a:	4013      	ands	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6a11      	ldr	r1, [r2, #32]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003854:	3a01      	subs	r2, #1
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800385e:	0212      	lsls	r2, r2, #8
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0552      	lsls	r2, r2, #21
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003872:	0852      	lsrs	r2, r2, #1
 8003874:	3a01      	subs	r2, #1
 8003876:	0652      	lsls	r2, r2, #25
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800387e:	06d2      	lsls	r2, r2, #27
 8003880:	430a      	orrs	r2, r1
 8003882:	4943      	ldr	r1, [pc, #268]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 8003884:	4313      	orrs	r3, r2
 8003886:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a40      	ldr	r2, [pc, #256]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003894:	4b3e      	ldr	r3, [pc, #248]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a3d      	ldr	r2, [pc, #244]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fb98 	bl	8001fd4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fb94 	bl	8001fd4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e066      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b35      	ldr	r3, [pc, #212]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x530>
 80038c6:	e05e      	b.n	8003986 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a30      	ldr	r2, [pc, #192]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fb7e 	bl	8001fd4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fb7a 	bl	8001fd4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e04c      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ee:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038fa:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4924      	ldr	r1, [pc, #144]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 8003900:	4b25      	ldr	r3, [pc, #148]	@ (8003998 <HAL_RCC_OscConfig+0x620>)
 8003902:	4013      	ands	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
 8003906:	e03e      	b.n	8003986 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e039      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003914:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <HAL_RCC_OscConfig+0x618>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	429a      	cmp	r2, r3
 8003926:	d12c      	bne.n	8003982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	3b01      	subs	r3, #1
 8003934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d123      	bne.n	8003982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d11b      	bne.n	8003982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d113      	bne.n	8003982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d109      	bne.n	8003982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	019f800c 	.word	0x019f800c
 8003998:	feeefffc 	.word	0xfeeefffc

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e11e      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b91      	ldr	r3, [pc, #580]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b8e      	ldr	r3, [pc, #568]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	498c      	ldr	r1, [pc, #560]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b8a      	ldr	r3, [pc, #552]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e106      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d073      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d129      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f8:	4b81      	ldr	r3, [pc, #516]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0f4      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a08:	f000 f99e 	bl	8003d48 <RCC_GetSysClockFreqFromPLLSource>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4a7c      	ldr	r2, [pc, #496]	@ (8003c04 <HAL_RCC_ClockConfig+0x268>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d93f      	bls.n	8003a96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a16:	4b7a      	ldr	r3, [pc, #488]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d033      	beq.n	8003a96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d12f      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a36:	4b72      	ldr	r3, [pc, #456]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a3e:	4a70      	ldr	r2, [pc, #448]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e024      	b.n	8003a96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a54:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0c6      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a64:	4b66      	ldr	r3, [pc, #408]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0be      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a74:	f000 f8ce 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a61      	ldr	r2, [pc, #388]	@ (8003c04 <HAL_RCC_ClockConfig+0x268>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d909      	bls.n	8003a96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a82:	4b5f      	ldr	r3, [pc, #380]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b5a      	ldr	r3, [pc, #360]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4957      	ldr	r1, [pc, #348]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fa94 	bl	8001fd4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fa90 	bl	8001fd4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e095      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af0:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a42      	ldr	r2, [pc, #264]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003afa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b08:	4b3d      	ldr	r3, [pc, #244]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b10:	4a3b      	ldr	r2, [pc, #236]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b39      	ldr	r3, [pc, #228]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4936      	ldr	r1, [pc, #216]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d105      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b32:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d21d      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 020f 	bic.w	r2, r3, #15
 8003b54:	4929      	ldr	r1, [pc, #164]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b5c:	f7fe fa3a 	bl	8001fd4 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fe fa36 	bl	8001fd4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e03b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1ed      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4917      	ldr	r1, [pc, #92]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bc6:	f000 f825 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490c      	ldr	r1, [pc, #48]	@ (8003c08 <HAL_RCC_ClockConfig+0x26c>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <HAL_RCC_ClockConfig+0x270>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003be6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <HAL_RCC_ClockConfig+0x274>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe f9a6 	bl	8001f3c <HAL_InitTick>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40021000 	.word	0x40021000
 8003c04:	04c4b400 	.word	0x04c4b400
 8003c08:	08008b78 	.word	0x08008b78
 8003c0c:	20000004 	.word	0x20000004
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c26:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e047      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e03e      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d136      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c68:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68d2      	ldr	r2, [r2, #12]
 8003c74:	0a12      	lsrs	r2, r2, #8
 8003c76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
      break;
 8003c80:	e00c      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c82:	4a13      	ldr	r2, [pc, #76]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	4a10      	ldr	r2, [pc, #64]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	0a12      	lsrs	r2, r2, #8
 8003c90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0e5b      	lsrs	r3, r3, #25
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e001      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cbc:	693b      	ldr	r3, [r7, #16]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	016e3600 	.word	0x016e3600

08003cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08008b88 	.word	0x08008b88

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d20:	f7ff ffda 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08008b88 	.word	0x08008b88

08003d48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d10c      	bne.n	8003d86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d6c:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d76:	68d2      	ldr	r2, [r2, #12]
 8003d78:	0a12      	lsrs	r2, r2, #8
 8003d7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	617b      	str	r3, [r7, #20]
    break;
 8003d84:	e00c      	b.n	8003da0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d86:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	0a12      	lsrs	r2, r2, #8
 8003d94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
    break;
 8003d9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0e5b      	lsrs	r3, r3, #25
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	3301      	adds	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dba:	687b      	ldr	r3, [r7, #4]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	016e3600 	.word	0x016e3600
 8003dd0:	00f42400 	.word	0x00f42400

08003dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ddc:	2300      	movs	r3, #0
 8003dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8098 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b43      	ldr	r3, [pc, #268]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b40      	ldr	r3, [pc, #256]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	4a3f      	ldr	r2, [pc, #252]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a39      	ldr	r2, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e2a:	f7fe f8d3 	bl	8001fd4 <HAL_GetTick>
 8003e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e30:	e009      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7fe f8cf 	bl	8001fd4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d902      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	74fb      	strb	r3, [r7, #19]
        break;
 8003e44:	e005      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e46:	4b30      	ldr	r3, [pc, #192]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ef      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d159      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e58:	4b2a      	ldr	r3, [pc, #168]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01e      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d019      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e74:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	4a1f      	ldr	r2, [pc, #124]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e90:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f88f 	bl	8001fd4 <HAL_GetTick>
 8003eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fe f88b 	bl	8001fd4 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d902      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	74fb      	strb	r3, [r7, #19]
            break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ec      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee6:	4b07      	ldr	r3, [pc, #28]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef4:	4903      	ldr	r1, [pc, #12]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003efc:	e008      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	74bb      	strb	r3, [r7, #18]
 8003f02:	e005      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4ba7      	ldr	r3, [pc, #668]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	4aa6      	ldr	r2, [pc, #664]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	4ba1      	ldr	r3, [pc, #644]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f023 0203 	bic.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	499d      	ldr	r1, [pc, #628]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f50:	4b98      	ldr	r3, [pc, #608]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 020c 	bic.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4995      	ldr	r1, [pc, #596]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f72:	4b90      	ldr	r3, [pc, #576]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	498c      	ldr	r1, [pc, #560]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f94:	4b87      	ldr	r3, [pc, #540]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4984      	ldr	r1, [pc, #528]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	497b      	ldr	r1, [pc, #492]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd8:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	4973      	ldr	r1, [pc, #460]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	496a      	ldr	r1, [pc, #424]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800401c:	4b65      	ldr	r3, [pc, #404]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4962      	ldr	r1, [pc, #392]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403e:	4b5d      	ldr	r3, [pc, #372]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	4959      	ldr	r1, [pc, #356]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004060:	4b54      	ldr	r3, [pc, #336]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	4951      	ldr	r1, [pc, #324]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004082:	4b4c      	ldr	r3, [pc, #304]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	4948      	ldr	r1, [pc, #288]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b43      	ldr	r3, [pc, #268]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	4940      	ldr	r1, [pc, #256]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c2:	d105      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040dc:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	4932      	ldr	r1, [pc, #200]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040fc:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004106:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004114:	4b27      	ldr	r3, [pc, #156]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	4924      	ldr	r1, [pc, #144]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004134:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800413e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	4916      	ldr	r1, [pc, #88]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	4908      	ldr	r1, [pc, #32]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a2:	d109      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a02      	ldr	r2, [pc, #8]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041c4:	4b29      	ldr	r3, [pc, #164]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	4926      	ldr	r1, [pc, #152]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e2:	d105      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a20      	ldr	r2, [pc, #128]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041fc:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420a:	4918      	ldr	r1, [pc, #96]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421a:	d105      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800421c:	4b13      	ldr	r3, [pc, #76]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a12      	ldr	r2, [pc, #72]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004226:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004242:	490a      	ldr	r1, [pc, #40]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004252:	d105      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004260:	7cbb      	ldrb	r3, [r7, #18]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e049      	b.n	8004316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fd46 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fb3c 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d001      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e054      	b.n	80043e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d022      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004362:	d01d      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d018      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d013      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <HAL_TIM_Base_Start_IT+0xdc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <HAL_TIM_Base_Start_IT+0xe0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <HAL_TIM_Base_Start_IT+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x80>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <HAL_TIM_Base_Start_IT+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d115      	bne.n	80043cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_TIM_Base_Start_IT+0xec>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d015      	beq.n	80043de <HAL_TIM_Base_Start_IT+0xbe>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b8:	d011      	beq.n	80043de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ca:	e008      	b.n	80043de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e000      	b.n	80043e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40014000 	.word	0x40014000
 8004408:	40015000 	.word	0x40015000
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0202 	mvn.w	r2, #2
 8004444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa48 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa3a 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa4b 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0204 	mvn.w	r2, #4
 8004490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa22 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa14 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fa25 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0208 	mvn.w	r2, #8
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9fc 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9ee 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f9ff 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9d6 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9c8 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9d9 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fa1e 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fbb1 	bl	8004d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fba9 	bl	8004d20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f993 	bl	8004918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0220 	mvn.w	r2, #32
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb71 	bl	8004cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb7d 	bl	8004d34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb75 	bl	8004d48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb6d 	bl	8004d5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb65 	bl	8004d70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_ConfigClockSource+0x1c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0f6      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x20a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80046ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6f      	ldr	r2, [pc, #444]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x214>)
 8004706:	4293      	cmp	r3, r2
 8004708:	f000 80c1 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800470c:	4a6d      	ldr	r2, [pc, #436]	@ (80048c4 <HAL_TIM_ConfigClockSource+0x214>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f200 80c6 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004714:	4a6c      	ldr	r2, [pc, #432]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x218>)
 8004716:	4293      	cmp	r3, r2
 8004718:	f000 80b9 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800471c:	4a6a      	ldr	r2, [pc, #424]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x218>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f200 80be 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004724:	4a69      	ldr	r2, [pc, #420]	@ (80048cc <HAL_TIM_ConfigClockSource+0x21c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	f000 80b1 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800472c:	4a67      	ldr	r2, [pc, #412]	@ (80048cc <HAL_TIM_ConfigClockSource+0x21c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f200 80b6 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004734:	4a66      	ldr	r2, [pc, #408]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x220>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f000 80a9 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800473c:	4a64      	ldr	r2, [pc, #400]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x220>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f200 80ae 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004744:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_TIM_ConfigClockSource+0x224>)
 8004746:	4293      	cmp	r3, r2
 8004748:	f000 80a1 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800474c:	4a61      	ldr	r2, [pc, #388]	@ (80048d4 <HAL_TIM_ConfigClockSource+0x224>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f200 80a6 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004754:	4a60      	ldr	r2, [pc, #384]	@ (80048d8 <HAL_TIM_ConfigClockSource+0x228>)
 8004756:	4293      	cmp	r3, r2
 8004758:	f000 8099 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800475c:	4a5e      	ldr	r2, [pc, #376]	@ (80048d8 <HAL_TIM_ConfigClockSource+0x228>)
 800475e:	4293      	cmp	r3, r2
 8004760:	f200 809e 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004764:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004768:	f000 8091 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800476c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004770:	f200 8096 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004778:	f000 8089 	beq.w	800488e <HAL_TIM_ConfigClockSource+0x1de>
 800477c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004780:	f200 808e 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004788:	d03e      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0x158>
 800478a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478e:	f200 8087 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004796:	f000 8086 	beq.w	80048a6 <HAL_TIM_ConfigClockSource+0x1f6>
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479e:	d87f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a0:	2b70      	cmp	r3, #112	@ 0x70
 80047a2:	d01a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x12a>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d87b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a8:	2b60      	cmp	r3, #96	@ 0x60
 80047aa:	d050      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x19e>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d877      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b0:	2b50      	cmp	r3, #80	@ 0x50
 80047b2:	d03c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x17e>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d873      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b8:	2b40      	cmp	r3, #64	@ 0x40
 80047ba:	d058      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x1be>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d86f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c0:	2b30      	cmp	r3, #48	@ 0x30
 80047c2:	d064      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1de>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d86b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d060      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1de>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d867      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1de>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d05a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x1de>
 80047d8:	e062      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	f000 f9cf 	bl	8004b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	609a      	str	r2, [r3, #8]
      break;
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	f000 f9b8 	bl	8004b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e03c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f92a 	bl	8004a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2150      	movs	r1, #80	@ 0x50
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f983 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800484c:	e02c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f949 	bl	8004af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2160      	movs	r1, #96	@ 0x60
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f973 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800486c:	e01c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f90a 	bl	8004a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2140      	movs	r1, #64	@ 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f963 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800488c:	e00c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 f95a 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800489e:	e003      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80048a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	00100070 	.word	0x00100070
 80048c8:	00100060 	.word	0x00100060
 80048cc:	00100050 	.word	0x00100050
 80048d0:	00100040 	.word	0x00100040
 80048d4:	00100030 	.word	0x00100030
 80048d8:	00100020 	.word	0x00100020

080048dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a70 <TIM_Base_SetConfig+0x144>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d017      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	d013      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a49      	ldr	r2, [pc, #292]	@ (8004a74 <TIM_Base_SetConfig+0x148>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a48      	ldr	r2, [pc, #288]	@ (8004a78 <TIM_Base_SetConfig+0x14c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a47      	ldr	r2, [pc, #284]	@ (8004a7c <TIM_Base_SetConfig+0x150>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a46      	ldr	r2, [pc, #280]	@ (8004a80 <TIM_Base_SetConfig+0x154>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0x48>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a45      	ldr	r2, [pc, #276]	@ (8004a84 <TIM_Base_SetConfig+0x158>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <TIM_Base_SetConfig+0x144>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d023      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d01f      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a36      	ldr	r2, [pc, #216]	@ (8004a74 <TIM_Base_SetConfig+0x148>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01b      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a35      	ldr	r2, [pc, #212]	@ (8004a78 <TIM_Base_SetConfig+0x14c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d017      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a34      	ldr	r2, [pc, #208]	@ (8004a7c <TIM_Base_SetConfig+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <TIM_Base_SetConfig+0x154>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00f      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a33      	ldr	r2, [pc, #204]	@ (8004a88 <TIM_Base_SetConfig+0x15c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a32      	ldr	r2, [pc, #200]	@ (8004a8c <TIM_Base_SetConfig+0x160>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a31      	ldr	r2, [pc, #196]	@ (8004a90 <TIM_Base_SetConfig+0x164>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0xaa>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a84 <TIM_Base_SetConfig+0x158>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d108      	bne.n	80049e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <TIM_Base_SetConfig+0x144>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <TIM_Base_SetConfig+0x110>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <TIM_Base_SetConfig+0x154>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <TIM_Base_SetConfig+0x110>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a88 <TIM_Base_SetConfig+0x15c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0x110>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a19      	ldr	r2, [pc, #100]	@ (8004a8c <TIM_Base_SetConfig+0x160>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x110>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <TIM_Base_SetConfig+0x164>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x110>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <TIM_Base_SetConfig+0x158>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
  }
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40013400 	.word	0x40013400
 8004a84:	40015000 	.word	0x40015000
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 0307 	orr.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	609a      	str	r2, [r3, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e074      	b.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a34      	ldr	r2, [pc, #208]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a33      	ldr	r2, [pc, #204]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d01d      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d018      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1d      	ldr	r2, [pc, #116]	@ (8004cec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10c      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40015000 	.word	0x40015000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40014000 	.word	0x40014000

08004cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e042      	b.n	8004e1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd f82d 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2224      	movs	r2, #36	@ 0x24
 8004db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fbb2 	bl	8005538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8b3 	bl	8004f40 <UART_SetConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e01b      	b.n	8004e1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fc31 	bl	800567c <UART_CheckIdleState>
 8004e1a:	4603      	mov	r3, r0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d17b      	bne.n	8004f36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_UART_Transmit+0x26>
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e074      	b.n	8004f38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2221      	movs	r2, #33	@ 0x21
 8004e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e5e:	f7fd f8b9 	bl	8001fd4 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7c:	d108      	bne.n	8004e90 <HAL_UART_Transmit+0x6c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d104      	bne.n	8004e90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e003      	b.n	8004e98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e98:	e030      	b.n	8004efc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2180      	movs	r1, #128	@ 0x80
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fc93 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e03d      	b.n	8004f38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e007      	b.n	8004eea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1c8      	bne.n	8004e9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2140      	movs	r1, #64	@ 0x40
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fc5c 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e006      	b.n	8004f38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f44:	b08c      	sub	sp, #48	@ 0x30
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4baa      	ldr	r3, [pc, #680]	@ (8005218 <UART_SetConfig+0x2d8>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a9f      	ldr	r2, [pc, #636]	@ (800521c <UART_SetConfig+0x2dc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	f023 010f 	bic.w	r1, r3, #15
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a90      	ldr	r2, [pc, #576]	@ (8005220 <UART_SetConfig+0x2e0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d125      	bne.n	8005030 <UART_SetConfig+0xf0>
 8004fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8005224 <UART_SetConfig+0x2e4>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d81a      	bhi.n	8005028 <UART_SetConfig+0xe8>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <UART_SetConfig+0xb8>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005009 	.word	0x08005009
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005011 	.word	0x08005011
 8005004:	08005021 	.word	0x08005021
 8005008:	2301      	movs	r3, #1
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500e:	e116      	b.n	800523e <UART_SetConfig+0x2fe>
 8005010:	2302      	movs	r3, #2
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005016:	e112      	b.n	800523e <UART_SetConfig+0x2fe>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501e:	e10e      	b.n	800523e <UART_SetConfig+0x2fe>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e10a      	b.n	800523e <UART_SetConfig+0x2fe>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e106      	b.n	800523e <UART_SetConfig+0x2fe>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a7c      	ldr	r2, [pc, #496]	@ (8005228 <UART_SetConfig+0x2e8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d138      	bne.n	80050ac <UART_SetConfig+0x16c>
 800503a:	4b7a      	ldr	r3, [pc, #488]	@ (8005224 <UART_SetConfig+0x2e4>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005040:	f003 030c 	and.w	r3, r3, #12
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d82d      	bhi.n	80050a4 <UART_SetConfig+0x164>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <UART_SetConfig+0x110>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005085 	.word	0x08005085
 8005054:	080050a5 	.word	0x080050a5
 8005058:	080050a5 	.word	0x080050a5
 800505c:	080050a5 	.word	0x080050a5
 8005060:	08005095 	.word	0x08005095
 8005064:	080050a5 	.word	0x080050a5
 8005068:	080050a5 	.word	0x080050a5
 800506c:	080050a5 	.word	0x080050a5
 8005070:	0800508d 	.word	0x0800508d
 8005074:	080050a5 	.word	0x080050a5
 8005078:	080050a5 	.word	0x080050a5
 800507c:	080050a5 	.word	0x080050a5
 8005080:	0800509d 	.word	0x0800509d
 8005084:	2300      	movs	r3, #0
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e0d8      	b.n	800523e <UART_SetConfig+0x2fe>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e0d4      	b.n	800523e <UART_SetConfig+0x2fe>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e0d0      	b.n	800523e <UART_SetConfig+0x2fe>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e0cc      	b.n	800523e <UART_SetConfig+0x2fe>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e0c8      	b.n	800523e <UART_SetConfig+0x2fe>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a5e      	ldr	r2, [pc, #376]	@ (800522c <UART_SetConfig+0x2ec>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d125      	bne.n	8005102 <UART_SetConfig+0x1c2>
 80050b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005224 <UART_SetConfig+0x2e4>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050c0:	2b30      	cmp	r3, #48	@ 0x30
 80050c2:	d016      	beq.n	80050f2 <UART_SetConfig+0x1b2>
 80050c4:	2b30      	cmp	r3, #48	@ 0x30
 80050c6:	d818      	bhi.n	80050fa <UART_SetConfig+0x1ba>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d00a      	beq.n	80050e2 <UART_SetConfig+0x1a2>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d814      	bhi.n	80050fa <UART_SetConfig+0x1ba>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <UART_SetConfig+0x19a>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d008      	beq.n	80050ea <UART_SetConfig+0x1aa>
 80050d8:	e00f      	b.n	80050fa <UART_SetConfig+0x1ba>
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e0:	e0ad      	b.n	800523e <UART_SetConfig+0x2fe>
 80050e2:	2302      	movs	r3, #2
 80050e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e8:	e0a9      	b.n	800523e <UART_SetConfig+0x2fe>
 80050ea:	2304      	movs	r3, #4
 80050ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f0:	e0a5      	b.n	800523e <UART_SetConfig+0x2fe>
 80050f2:	2308      	movs	r3, #8
 80050f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f8:	e0a1      	b.n	800523e <UART_SetConfig+0x2fe>
 80050fa:	2310      	movs	r3, #16
 80050fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005100:	e09d      	b.n	800523e <UART_SetConfig+0x2fe>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4a      	ldr	r2, [pc, #296]	@ (8005230 <UART_SetConfig+0x2f0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d125      	bne.n	8005158 <UART_SetConfig+0x218>
 800510c:	4b45      	ldr	r3, [pc, #276]	@ (8005224 <UART_SetConfig+0x2e4>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005116:	2bc0      	cmp	r3, #192	@ 0xc0
 8005118:	d016      	beq.n	8005148 <UART_SetConfig+0x208>
 800511a:	2bc0      	cmp	r3, #192	@ 0xc0
 800511c:	d818      	bhi.n	8005150 <UART_SetConfig+0x210>
 800511e:	2b80      	cmp	r3, #128	@ 0x80
 8005120:	d00a      	beq.n	8005138 <UART_SetConfig+0x1f8>
 8005122:	2b80      	cmp	r3, #128	@ 0x80
 8005124:	d814      	bhi.n	8005150 <UART_SetConfig+0x210>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <UART_SetConfig+0x1f0>
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d008      	beq.n	8005140 <UART_SetConfig+0x200>
 800512e:	e00f      	b.n	8005150 <UART_SetConfig+0x210>
 8005130:	2300      	movs	r3, #0
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005136:	e082      	b.n	800523e <UART_SetConfig+0x2fe>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513e:	e07e      	b.n	800523e <UART_SetConfig+0x2fe>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005146:	e07a      	b.n	800523e <UART_SetConfig+0x2fe>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514e:	e076      	b.n	800523e <UART_SetConfig+0x2fe>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e072      	b.n	800523e <UART_SetConfig+0x2fe>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a35      	ldr	r2, [pc, #212]	@ (8005234 <UART_SetConfig+0x2f4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d12a      	bne.n	80051b8 <UART_SetConfig+0x278>
 8005162:	4b30      	ldr	r3, [pc, #192]	@ (8005224 <UART_SetConfig+0x2e4>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800516c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005170:	d01a      	beq.n	80051a8 <UART_SetConfig+0x268>
 8005172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005176:	d81b      	bhi.n	80051b0 <UART_SetConfig+0x270>
 8005178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517c:	d00c      	beq.n	8005198 <UART_SetConfig+0x258>
 800517e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005182:	d815      	bhi.n	80051b0 <UART_SetConfig+0x270>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <UART_SetConfig+0x250>
 8005188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518c:	d008      	beq.n	80051a0 <UART_SetConfig+0x260>
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x270>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e052      	b.n	800523e <UART_SetConfig+0x2fe>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519e:	e04e      	b.n	800523e <UART_SetConfig+0x2fe>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a6:	e04a      	b.n	800523e <UART_SetConfig+0x2fe>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ae:	e046      	b.n	800523e <UART_SetConfig+0x2fe>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b6:	e042      	b.n	800523e <UART_SetConfig+0x2fe>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a17      	ldr	r2, [pc, #92]	@ (800521c <UART_SetConfig+0x2dc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d13a      	bne.n	8005238 <UART_SetConfig+0x2f8>
 80051c2:	4b18      	ldr	r3, [pc, #96]	@ (8005224 <UART_SetConfig+0x2e4>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d0:	d01a      	beq.n	8005208 <UART_SetConfig+0x2c8>
 80051d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d6:	d81b      	bhi.n	8005210 <UART_SetConfig+0x2d0>
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051dc:	d00c      	beq.n	80051f8 <UART_SetConfig+0x2b8>
 80051de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e2:	d815      	bhi.n	8005210 <UART_SetConfig+0x2d0>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <UART_SetConfig+0x2b0>
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ec:	d008      	beq.n	8005200 <UART_SetConfig+0x2c0>
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x2d0>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e022      	b.n	800523e <UART_SetConfig+0x2fe>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fe:	e01e      	b.n	800523e <UART_SetConfig+0x2fe>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005206:	e01a      	b.n	800523e <UART_SetConfig+0x2fe>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520e:	e016      	b.n	800523e <UART_SetConfig+0x2fe>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005216:	e012      	b.n	800523e <UART_SetConfig+0x2fe>
 8005218:	cfff69f3 	.word	0xcfff69f3
 800521c:	40008000 	.word	0x40008000
 8005220:	40013800 	.word	0x40013800
 8005224:	40021000 	.word	0x40021000
 8005228:	40004400 	.word	0x40004400
 800522c:	40004800 	.word	0x40004800
 8005230:	40004c00 	.word	0x40004c00
 8005234:	40005000 	.word	0x40005000
 8005238:	2310      	movs	r3, #16
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4aae      	ldr	r2, [pc, #696]	@ (80054fc <UART_SetConfig+0x5bc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	f040 8097 	bne.w	8005378 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800524a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800524e:	2b08      	cmp	r3, #8
 8005250:	d823      	bhi.n	800529a <UART_SetConfig+0x35a>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <UART_SetConfig+0x318>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800527d 	.word	0x0800527d
 800525c:	0800529b 	.word	0x0800529b
 8005260:	08005285 	.word	0x08005285
 8005264:	0800529b 	.word	0x0800529b
 8005268:	0800528b 	.word	0x0800528b
 800526c:	0800529b 	.word	0x0800529b
 8005270:	0800529b 	.word	0x0800529b
 8005274:	0800529b 	.word	0x0800529b
 8005278:	08005293 	.word	0x08005293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe fd38 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005282:	e010      	b.n	80052a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b9e      	ldr	r3, [pc, #632]	@ (8005500 <UART_SetConfig+0x5c0>)
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005288:	e00d      	b.n	80052a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7fe fcc3 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 800528e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005290:	e009      	b.n	80052a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005298:	e005      	b.n	80052a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8130 	beq.w	800550e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	4a94      	ldr	r2, [pc, #592]	@ (8005504 <UART_SetConfig+0x5c4>)
 80052b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	4413      	add	r3, r2
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d305      	bcc.n	80052de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d903      	bls.n	80052e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052e4:	e113      	b.n	800550e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	2200      	movs	r2, #0
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	60fa      	str	r2, [r7, #12]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	4a84      	ldr	r2, [pc, #528]	@ (8005504 <UART_SetConfig+0x5c4>)
 80052f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2200      	movs	r2, #0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005308:	f7fb fcc6 	bl	8000c98 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	020b      	lsls	r3, r1, #8
 800531e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005322:	0202      	lsls	r2, r0, #8
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	6849      	ldr	r1, [r1, #4]
 8005328:	0849      	lsrs	r1, r1, #1
 800532a:	2000      	movs	r0, #0
 800532c:	460c      	mov	r4, r1
 800532e:	4605      	mov	r5, r0
 8005330:	eb12 0804 	adds.w	r8, r2, r4
 8005334:	eb43 0905 	adc.w	r9, r3, r5
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	469a      	mov	sl, r3
 8005340:	4693      	mov	fp, r2
 8005342:	4652      	mov	r2, sl
 8005344:	465b      	mov	r3, fp
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb fca5 	bl	8000c98 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4613      	mov	r3, r2
 8005354:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800535c:	d308      	bcc.n	8005370 <UART_SetConfig+0x430>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005364:	d204      	bcs.n	8005370 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e0ce      	b.n	800550e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005376:	e0ca      	b.n	800550e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005380:	d166      	bne.n	8005450 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005386:	2b08      	cmp	r3, #8
 8005388:	d827      	bhi.n	80053da <UART_SetConfig+0x49a>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x450>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe fc9c 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80053b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ba:	e014      	b.n	80053e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe fcae 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b4e      	ldr	r3, [pc, #312]	@ (8005500 <UART_SetConfig+0x5c0>)
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fc23 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80053ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8090 	beq.w	800550e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	4a44      	ldr	r2, [pc, #272]	@ (8005504 <UART_SetConfig+0x5c4>)
 80053f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005400:	005a      	lsls	r2, r3, #1
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	441a      	add	r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d916      	bls.n	8005448 <UART_SetConfig+0x508>
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005420:	d212      	bcs.n	8005448 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f023 030f 	bic.w	r3, r3, #15
 800542a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	b29b      	uxth	r3, r3
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	b29a      	uxth	r2, r3
 8005438:	8bfb      	ldrh	r3, [r7, #30]
 800543a:	4313      	orrs	r3, r2
 800543c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	8bfa      	ldrh	r2, [r7, #30]
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	e062      	b.n	800550e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800544e:	e05e      	b.n	800550e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005450:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005454:	2b08      	cmp	r3, #8
 8005456:	d828      	bhi.n	80054aa <UART_SetConfig+0x56a>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <UART_SetConfig+0x520>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	080054ab 	.word	0x080054ab
 8005470:	0800549b 	.word	0x0800549b
 8005474:	080054ab 	.word	0x080054ab
 8005478:	080054ab 	.word	0x080054ab
 800547c:	080054ab 	.word	0x080054ab
 8005480:	080054a3 	.word	0x080054a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7fe fc34 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800548a:	e014      	b.n	80054b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800548c:	f7fe fc46 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005490:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005492:	e010      	b.n	80054b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005494:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <UART_SetConfig+0x5c0>)
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005498:	e00d      	b.n	80054b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549a:	f7fe fbbb 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 800549e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054a0:	e009      	b.n	80054b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054a8:	e005      	b.n	80054b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054b4:	bf00      	nop
    }

    if (pclk != 0U)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d028      	beq.n	800550e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <UART_SetConfig+0x5c4>)
 80054c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	441a      	add	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	d910      	bls.n	8005508 <UART_SetConfig+0x5c8>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ec:	d20c      	bcs.n	8005508 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0x5ce>
 80054fa:	bf00      	nop
 80054fc:	40008000 	.word	0x40008000
 8005500:	00f42400 	.word	0x00f42400
 8005504:	08008b90 	.word	0x08008b90
      }
      else
      {
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2201      	movs	r2, #1
 8005512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2201      	movs	r2, #1
 800551a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800552a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800552e:	4618      	mov	r0, r3
 8005530:	3730      	adds	r7, #48	@ 0x30
 8005532:	46bd      	mov	sp, r7
 8005534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005636:	d10a      	bne.n	800564e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
  }
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b098      	sub	sp, #96	@ 0x60
 8005680:	af02      	add	r7, sp, #8
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800568c:	f7fc fca2 	bl	8001fd4 <HAL_GetTick>
 8005690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d12f      	bne.n	8005700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f88e 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d022      	beq.n	8005700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e063      	b.n	80057c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b04      	cmp	r3, #4
 800570c:	d149      	bne.n	80057a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005716:	2200      	movs	r2, #0
 8005718:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f857 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d03c      	beq.n	80057a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	623b      	str	r3, [r7, #32]
   return(result);
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005746:	633b      	str	r3, [r7, #48]	@ 0x30
 8005748:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800574c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e6      	bne.n	8005728 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60fb      	str	r3, [r7, #12]
   return(result);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800577a:	61fa      	str	r2, [r7, #28]
 800577c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	617b      	str	r3, [r7, #20]
   return(result);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e5      	bne.n	800575a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e012      	b.n	80057c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3758      	adds	r7, #88	@ 0x58
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e04f      	b.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e8:	d04b      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fc fbf3 	bl	8001fd4 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e04e      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d037      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b80      	cmp	r3, #128	@ 0x80
 8005816:	d034      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d031      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d110      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2208      	movs	r2, #8
 8005832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f838 	bl	80058aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2208      	movs	r2, #8
 800583e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e029      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d111      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f81e 	bl	80058aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e00f      	b.n	80058a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4013      	ands	r3, r2
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	429a      	cmp	r2, r3
 800589e:	d0a0      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b095      	sub	sp, #84	@ 0x54
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3308      	adds	r3, #8
 8005906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800590e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e3      	bne.n	80058e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d118      	bne.n	8005956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60bb      	str	r3, [r7, #8]
   return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	647b      	str	r3, [r7, #68]	@ 0x44
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	613b      	str	r3, [r7, #16]
   return(result);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800596a:	bf00      	nop
 800596c:	3754      	adds	r7, #84	@ 0x54
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UARTEx_DisableFifoMode+0x16>
 8005988:	2302      	movs	r3, #2
 800598a:	e027      	b.n	80059dc <HAL_UARTEx_DisableFifoMode+0x66>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	@ 0x24
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e02d      	b.n	8005a5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	@ 0x24
 8005a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f84f 	bl	8005ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e02d      	b.n	8005ad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	@ 0x24
 8005a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f811 	bl	8005ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d108      	bne.n	8005b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b00:	e031      	b.n	8005b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b02:	2308      	movs	r3, #8
 8005b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b06:	2308      	movs	r3, #8
 8005b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	0e5b      	lsrs	r3, r3, #25
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	0f5b      	lsrs	r3, r3, #29
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	7b3a      	ldrb	r2, [r7, #12]
 8005b2e:	4911      	ldr	r1, [pc, #68]	@ (8005b74 <UARTEx_SetNbDataToProcess+0x94>)
 8005b30:	5c8a      	ldrb	r2, [r1, r2]
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b36:	7b3a      	ldrb	r2, [r7, #12]
 8005b38:	490f      	ldr	r1, [pc, #60]	@ (8005b78 <UARTEx_SetNbDataToProcess+0x98>)
 8005b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	7b7a      	ldrb	r2, [r7, #13]
 8005b4c:	4909      	ldr	r1, [pc, #36]	@ (8005b74 <UARTEx_SetNbDataToProcess+0x94>)
 8005b4e:	5c8a      	ldrb	r2, [r1, r2]
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b54:	7b7a      	ldrb	r2, [r7, #13]
 8005b56:	4908      	ldr	r1, [pc, #32]	@ (8005b78 <UARTEx_SetNbDataToProcess+0x98>)
 8005b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	08008ba8 	.word	0x08008ba8
 8005b78:	08008bb0 	.word	0x08008bb0

08005b7c <__cvt>:
 8005b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	ec57 6b10 	vmov	r6, r7, d0
 8005b84:	2f00      	cmp	r7, #0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4619      	mov	r1, r3
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	bfbb      	ittet	lt
 8005b8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b92:	461f      	movlt	r7, r3
 8005b94:	2300      	movge	r3, #0
 8005b96:	232d      	movlt	r3, #45	@ 0x2d
 8005b98:	700b      	strb	r3, [r1, #0]
 8005b9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ba0:	4691      	mov	r9, r2
 8005ba2:	f023 0820 	bic.w	r8, r3, #32
 8005ba6:	bfbc      	itt	lt
 8005ba8:	4632      	movlt	r2, r6
 8005baa:	4616      	movlt	r6, r2
 8005bac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bb0:	d005      	beq.n	8005bbe <__cvt+0x42>
 8005bb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bb6:	d100      	bne.n	8005bba <__cvt+0x3e>
 8005bb8:	3401      	adds	r4, #1
 8005bba:	2102      	movs	r1, #2
 8005bbc:	e000      	b.n	8005bc0 <__cvt+0x44>
 8005bbe:	2103      	movs	r1, #3
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	ab02      	add	r3, sp, #8
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	ec47 6b10 	vmov	d0, r6, r7
 8005bcc:	4653      	mov	r3, sl
 8005bce:	4622      	mov	r2, r4
 8005bd0:	f000 fe5a 	bl	8006888 <_dtoa_r>
 8005bd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bd8:	4605      	mov	r5, r0
 8005bda:	d119      	bne.n	8005c10 <__cvt+0x94>
 8005bdc:	f019 0f01 	tst.w	r9, #1
 8005be0:	d00e      	beq.n	8005c00 <__cvt+0x84>
 8005be2:	eb00 0904 	add.w	r9, r0, r4
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	4630      	mov	r0, r6
 8005bec:	4639      	mov	r1, r7
 8005bee:	f7fa ff93 	bl	8000b18 <__aeabi_dcmpeq>
 8005bf2:	b108      	cbz	r0, 8005bf8 <__cvt+0x7c>
 8005bf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf8:	2230      	movs	r2, #48	@ 0x30
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	454b      	cmp	r3, r9
 8005bfe:	d31e      	bcc.n	8005c3e <__cvt+0xc2>
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c04:	1b5b      	subs	r3, r3, r5
 8005c06:	4628      	mov	r0, r5
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	b004      	add	sp, #16
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c14:	eb00 0904 	add.w	r9, r0, r4
 8005c18:	d1e5      	bne.n	8005be6 <__cvt+0x6a>
 8005c1a:	7803      	ldrb	r3, [r0, #0]
 8005c1c:	2b30      	cmp	r3, #48	@ 0x30
 8005c1e:	d10a      	bne.n	8005c36 <__cvt+0xba>
 8005c20:	2200      	movs	r2, #0
 8005c22:	2300      	movs	r3, #0
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa ff76 	bl	8000b18 <__aeabi_dcmpeq>
 8005c2c:	b918      	cbnz	r0, 8005c36 <__cvt+0xba>
 8005c2e:	f1c4 0401 	rsb	r4, r4, #1
 8005c32:	f8ca 4000 	str.w	r4, [sl]
 8005c36:	f8da 3000 	ldr.w	r3, [sl]
 8005c3a:	4499      	add	r9, r3
 8005c3c:	e7d3      	b.n	8005be6 <__cvt+0x6a>
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e7d9      	b.n	8005bfa <__cvt+0x7e>

08005c46 <__exponent>:
 8005c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	bfba      	itte	lt
 8005c4c:	4249      	neglt	r1, r1
 8005c4e:	232d      	movlt	r3, #45	@ 0x2d
 8005c50:	232b      	movge	r3, #43	@ 0x2b
 8005c52:	2909      	cmp	r1, #9
 8005c54:	7002      	strb	r2, [r0, #0]
 8005c56:	7043      	strb	r3, [r0, #1]
 8005c58:	dd29      	ble.n	8005cae <__exponent+0x68>
 8005c5a:	f10d 0307 	add.w	r3, sp, #7
 8005c5e:	461d      	mov	r5, r3
 8005c60:	270a      	movs	r7, #10
 8005c62:	461a      	mov	r2, r3
 8005c64:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c68:	fb07 1416 	mls	r4, r7, r6, r1
 8005c6c:	3430      	adds	r4, #48	@ 0x30
 8005c6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c72:	460c      	mov	r4, r1
 8005c74:	2c63      	cmp	r4, #99	@ 0x63
 8005c76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	dcf1      	bgt.n	8005c62 <__exponent+0x1c>
 8005c7e:	3130      	adds	r1, #48	@ 0x30
 8005c80:	1e94      	subs	r4, r2, #2
 8005c82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c86:	1c41      	adds	r1, r0, #1
 8005c88:	4623      	mov	r3, r4
 8005c8a:	42ab      	cmp	r3, r5
 8005c8c:	d30a      	bcc.n	8005ca4 <__exponent+0x5e>
 8005c8e:	f10d 0309 	add.w	r3, sp, #9
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	42ac      	cmp	r4, r5
 8005c96:	bf88      	it	hi
 8005c98:	2300      	movhi	r3, #0
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	4403      	add	r3, r0
 8005c9e:	1a18      	subs	r0, r3, r0
 8005ca0:	b003      	add	sp, #12
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ca8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cac:	e7ed      	b.n	8005c8a <__exponent+0x44>
 8005cae:	2330      	movs	r3, #48	@ 0x30
 8005cb0:	3130      	adds	r1, #48	@ 0x30
 8005cb2:	7083      	strb	r3, [r0, #2]
 8005cb4:	70c1      	strb	r1, [r0, #3]
 8005cb6:	1d03      	adds	r3, r0, #4
 8005cb8:	e7f1      	b.n	8005c9e <__exponent+0x58>
	...

08005cbc <_printf_float>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	b08d      	sub	sp, #52	@ 0x34
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cc8:	4616      	mov	r6, r2
 8005cca:	461f      	mov	r7, r3
 8005ccc:	4605      	mov	r5, r0
 8005cce:	f000 fcdb 	bl	8006688 <_localeconv_r>
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa faf2 	bl	80002c0 <strlen>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce4:	9005      	str	r0, [sp, #20]
 8005ce6:	3307      	adds	r3, #7
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	f103 0208 	add.w	r2, r3, #8
 8005cf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf8:	f8c8 2000 	str.w	r2, [r8]
 8005cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d04:	9307      	str	r3, [sp, #28]
 8005d06:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d12:	4b9c      	ldr	r3, [pc, #624]	@ (8005f84 <_printf_float+0x2c8>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d18:	f7fa ff30 	bl	8000b7c <__aeabi_dcmpun>
 8005d1c:	bb70      	cbnz	r0, 8005d7c <_printf_float+0xc0>
 8005d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d22:	4b98      	ldr	r3, [pc, #608]	@ (8005f84 <_printf_float+0x2c8>)
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d28:	f7fa ff0a 	bl	8000b40 <__aeabi_dcmple>
 8005d2c:	bb30      	cbnz	r0, 8005d7c <_printf_float+0xc0>
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2300      	movs	r3, #0
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa fef9 	bl	8000b2c <__aeabi_dcmplt>
 8005d3a:	b110      	cbz	r0, 8005d42 <_printf_float+0x86>
 8005d3c:	232d      	movs	r3, #45	@ 0x2d
 8005d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d42:	4a91      	ldr	r2, [pc, #580]	@ (8005f88 <_printf_float+0x2cc>)
 8005d44:	4b91      	ldr	r3, [pc, #580]	@ (8005f8c <_printf_float+0x2d0>)
 8005d46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d4a:	bf8c      	ite	hi
 8005d4c:	4690      	movhi	r8, r2
 8005d4e:	4698      	movls	r8, r3
 8005d50:	2303      	movs	r3, #3
 8005d52:	6123      	str	r3, [r4, #16]
 8005d54:	f02b 0304 	bic.w	r3, fp, #4
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	f04f 0900 	mov.w	r9, #0
 8005d5e:	9700      	str	r7, [sp, #0]
 8005d60:	4633      	mov	r3, r6
 8005d62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f9d2 	bl	8006110 <_printf_common>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f040 808d 	bne.w	8005e8c <_printf_float+0x1d0>
 8005d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d76:	b00d      	add	sp, #52	@ 0x34
 8005d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa fefa 	bl	8000b7c <__aeabi_dcmpun>
 8005d88:	b140      	cbz	r0, 8005d9c <_printf_float+0xe0>
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bfbc      	itt	lt
 8005d90:	232d      	movlt	r3, #45	@ 0x2d
 8005d92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d96:	4a7e      	ldr	r2, [pc, #504]	@ (8005f90 <_printf_float+0x2d4>)
 8005d98:	4b7e      	ldr	r3, [pc, #504]	@ (8005f94 <_printf_float+0x2d8>)
 8005d9a:	e7d4      	b.n	8005d46 <_printf_float+0x8a>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005da2:	9206      	str	r2, [sp, #24]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	d13b      	bne.n	8005e20 <_printf_float+0x164>
 8005da8:	2306      	movs	r3, #6
 8005daa:	6063      	str	r3, [r4, #4]
 8005dac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005db0:	2300      	movs	r3, #0
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	ab0a      	add	r3, sp, #40	@ 0x28
 8005db8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005dbc:	ab09      	add	r3, sp, #36	@ 0x24
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6861      	ldr	r1, [r4, #4]
 8005dc2:	ec49 8b10 	vmov	d0, r8, r9
 8005dc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f7ff fed6 	bl	8005b7c <__cvt>
 8005dd0:	9b06      	ldr	r3, [sp, #24]
 8005dd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd4:	2b47      	cmp	r3, #71	@ 0x47
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	d129      	bne.n	8005e2e <_printf_float+0x172>
 8005dda:	1cc8      	adds	r0, r1, #3
 8005ddc:	db02      	blt.n	8005de4 <_printf_float+0x128>
 8005dde:	6863      	ldr	r3, [r4, #4]
 8005de0:	4299      	cmp	r1, r3
 8005de2:	dd41      	ble.n	8005e68 <_printf_float+0x1ac>
 8005de4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005de8:	fa5f fa8a 	uxtb.w	sl, sl
 8005dec:	3901      	subs	r1, #1
 8005dee:	4652      	mov	r2, sl
 8005df0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005df4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005df6:	f7ff ff26 	bl	8005c46 <__exponent>
 8005dfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dfc:	1813      	adds	r3, r2, r0
 8005dfe:	2a01      	cmp	r2, #1
 8005e00:	4681      	mov	r9, r0
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	dc02      	bgt.n	8005e0c <_printf_float+0x150>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	07d2      	lsls	r2, r2, #31
 8005e0a:	d501      	bpl.n	8005e10 <_printf_float+0x154>
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0a2      	beq.n	8005d5e <_printf_float+0xa2>
 8005e18:	232d      	movs	r3, #45	@ 0x2d
 8005e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e1e:	e79e      	b.n	8005d5e <_printf_float+0xa2>
 8005e20:	9a06      	ldr	r2, [sp, #24]
 8005e22:	2a47      	cmp	r2, #71	@ 0x47
 8005e24:	d1c2      	bne.n	8005dac <_printf_float+0xf0>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1c0      	bne.n	8005dac <_printf_float+0xf0>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7bd      	b.n	8005daa <_printf_float+0xee>
 8005e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e32:	d9db      	bls.n	8005dec <_printf_float+0x130>
 8005e34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e38:	d118      	bne.n	8005e6c <_printf_float+0x1b0>
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	dd0b      	ble.n	8005e58 <_printf_float+0x19c>
 8005e40:	6121      	str	r1, [r4, #16]
 8005e42:	b913      	cbnz	r3, 8005e4a <_printf_float+0x18e>
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	07d0      	lsls	r0, r2, #31
 8005e48:	d502      	bpl.n	8005e50 <_printf_float+0x194>
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	440b      	add	r3, r1
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e52:	f04f 0900 	mov.w	r9, #0
 8005e56:	e7db      	b.n	8005e10 <_printf_float+0x154>
 8005e58:	b913      	cbnz	r3, 8005e60 <_printf_float+0x1a4>
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	07d2      	lsls	r2, r2, #31
 8005e5e:	d501      	bpl.n	8005e64 <_printf_float+0x1a8>
 8005e60:	3302      	adds	r3, #2
 8005e62:	e7f4      	b.n	8005e4e <_printf_float+0x192>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e7f2      	b.n	8005e4e <_printf_float+0x192>
 8005e68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	db05      	blt.n	8005e7e <_printf_float+0x1c2>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	6121      	str	r1, [r4, #16]
 8005e76:	07d8      	lsls	r0, r3, #31
 8005e78:	d5ea      	bpl.n	8005e50 <_printf_float+0x194>
 8005e7a:	1c4b      	adds	r3, r1, #1
 8005e7c:	e7e7      	b.n	8005e4e <_printf_float+0x192>
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	bfd4      	ite	le
 8005e82:	f1c1 0202 	rsble	r2, r1, #2
 8005e86:	2201      	movgt	r2, #1
 8005e88:	4413      	add	r3, r2
 8005e8a:	e7e0      	b.n	8005e4e <_printf_float+0x192>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	055a      	lsls	r2, r3, #21
 8005e90:	d407      	bmi.n	8005ea2 <_printf_float+0x1e6>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	4642      	mov	r2, r8
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d12b      	bne.n	8005ef8 <_printf_float+0x23c>
 8005ea0:	e767      	b.n	8005d72 <_printf_float+0xb6>
 8005ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ea6:	f240 80dd 	bls.w	8006064 <_printf_float+0x3a8>
 8005eaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f7fa fe31 	bl	8000b18 <__aeabi_dcmpeq>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d033      	beq.n	8005f22 <_printf_float+0x266>
 8005eba:	4a37      	ldr	r2, [pc, #220]	@ (8005f98 <_printf_float+0x2dc>)
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f af54 	beq.w	8005d72 <_printf_float+0xb6>
 8005eca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ece:	4543      	cmp	r3, r8
 8005ed0:	db02      	blt.n	8005ed8 <_printf_float+0x21c>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	07d8      	lsls	r0, r3, #31
 8005ed6:	d50f      	bpl.n	8005ef8 <_printf_float+0x23c>
 8005ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005edc:	4631      	mov	r1, r6
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f af45 	beq.w	8005d72 <_printf_float+0xb6>
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005ef0:	f104 0a1a 	add.w	sl, r4, #26
 8005ef4:	45c8      	cmp	r8, r9
 8005ef6:	dc09      	bgt.n	8005f0c <_printf_float+0x250>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	079b      	lsls	r3, r3, #30
 8005efc:	f100 8103 	bmi.w	8006106 <_printf_float+0x44a>
 8005f00:	68e0      	ldr	r0, [r4, #12]
 8005f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f04:	4298      	cmp	r0, r3
 8005f06:	bfb8      	it	lt
 8005f08:	4618      	movlt	r0, r3
 8005f0a:	e734      	b.n	8005d76 <_printf_float+0xba>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4652      	mov	r2, sl
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	f43f af2b 	beq.w	8005d72 <_printf_float+0xb6>
 8005f1c:	f109 0901 	add.w	r9, r9, #1
 8005f20:	e7e8      	b.n	8005ef4 <_printf_float+0x238>
 8005f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dc39      	bgt.n	8005f9c <_printf_float+0x2e0>
 8005f28:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <_printf_float+0x2dc>)
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f af1d 	beq.w	8005d72 <_printf_float+0xb6>
 8005f38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f3c:	ea59 0303 	orrs.w	r3, r9, r3
 8005f40:	d102      	bne.n	8005f48 <_printf_float+0x28c>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	07d9      	lsls	r1, r3, #31
 8005f46:	d5d7      	bpl.n	8005ef8 <_printf_float+0x23c>
 8005f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f af0d 	beq.w	8005d72 <_printf_float+0xb6>
 8005f58:	f04f 0a00 	mov.w	sl, #0
 8005f5c:	f104 0b1a 	add.w	fp, r4, #26
 8005f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f62:	425b      	negs	r3, r3
 8005f64:	4553      	cmp	r3, sl
 8005f66:	dc01      	bgt.n	8005f6c <_printf_float+0x2b0>
 8005f68:	464b      	mov	r3, r9
 8005f6a:	e793      	b.n	8005e94 <_printf_float+0x1d8>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	465a      	mov	r2, fp
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f aefb 	beq.w	8005d72 <_printf_float+0xb6>
 8005f7c:	f10a 0a01 	add.w	sl, sl, #1
 8005f80:	e7ee      	b.n	8005f60 <_printf_float+0x2a4>
 8005f82:	bf00      	nop
 8005f84:	7fefffff 	.word	0x7fefffff
 8005f88:	08008bbc 	.word	0x08008bbc
 8005f8c:	08008bb8 	.word	0x08008bb8
 8005f90:	08008bc4 	.word	0x08008bc4
 8005f94:	08008bc0 	.word	0x08008bc0
 8005f98:	08008bc8 	.word	0x08008bc8
 8005f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fa2:	4553      	cmp	r3, sl
 8005fa4:	bfa8      	it	ge
 8005fa6:	4653      	movge	r3, sl
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	4699      	mov	r9, r3
 8005fac:	dc36      	bgt.n	800601c <_printf_float+0x360>
 8005fae:	f04f 0b00 	mov.w	fp, #0
 8005fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb6:	f104 021a 	add.w	r2, r4, #26
 8005fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	eba3 0309 	sub.w	r3, r3, r9
 8005fc2:	455b      	cmp	r3, fp
 8005fc4:	dc31      	bgt.n	800602a <_printf_float+0x36e>
 8005fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc8:	459a      	cmp	sl, r3
 8005fca:	dc3a      	bgt.n	8006042 <_printf_float+0x386>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	07da      	lsls	r2, r3, #31
 8005fd0:	d437      	bmi.n	8006042 <_printf_float+0x386>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	ebaa 0903 	sub.w	r9, sl, r3
 8005fd8:	9b06      	ldr	r3, [sp, #24]
 8005fda:	ebaa 0303 	sub.w	r3, sl, r3
 8005fde:	4599      	cmp	r9, r3
 8005fe0:	bfa8      	it	ge
 8005fe2:	4699      	movge	r9, r3
 8005fe4:	f1b9 0f00 	cmp.w	r9, #0
 8005fe8:	dc33      	bgt.n	8006052 <_printf_float+0x396>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff2:	f104 0b1a 	add.w	fp, r4, #26
 8005ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ffc:	eba3 0309 	sub.w	r3, r3, r9
 8006000:	4543      	cmp	r3, r8
 8006002:	f77f af79 	ble.w	8005ef8 <_printf_float+0x23c>
 8006006:	2301      	movs	r3, #1
 8006008:	465a      	mov	r2, fp
 800600a:	4631      	mov	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	47b8      	blx	r7
 8006010:	3001      	adds	r0, #1
 8006012:	f43f aeae 	beq.w	8005d72 <_printf_float+0xb6>
 8006016:	f108 0801 	add.w	r8, r8, #1
 800601a:	e7ec      	b.n	8005ff6 <_printf_float+0x33a>
 800601c:	4642      	mov	r2, r8
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	d1c2      	bne.n	8005fae <_printf_float+0x2f2>
 8006028:	e6a3      	b.n	8005d72 <_printf_float+0xb6>
 800602a:	2301      	movs	r3, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	9206      	str	r2, [sp, #24]
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f ae9c 	beq.w	8005d72 <_printf_float+0xb6>
 800603a:	9a06      	ldr	r2, [sp, #24]
 800603c:	f10b 0b01 	add.w	fp, fp, #1
 8006040:	e7bb      	b.n	8005fba <_printf_float+0x2fe>
 8006042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d1c0      	bne.n	8005fd2 <_printf_float+0x316>
 8006050:	e68f      	b.n	8005d72 <_printf_float+0xb6>
 8006052:	9a06      	ldr	r2, [sp, #24]
 8006054:	464b      	mov	r3, r9
 8006056:	4442      	add	r2, r8
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	d1c3      	bne.n	8005fea <_printf_float+0x32e>
 8006062:	e686      	b.n	8005d72 <_printf_float+0xb6>
 8006064:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006068:	f1ba 0f01 	cmp.w	sl, #1
 800606c:	dc01      	bgt.n	8006072 <_printf_float+0x3b6>
 800606e:	07db      	lsls	r3, r3, #31
 8006070:	d536      	bpl.n	80060e0 <_printf_float+0x424>
 8006072:	2301      	movs	r3, #1
 8006074:	4642      	mov	r2, r8
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f ae78 	beq.w	8005d72 <_printf_float+0xb6>
 8006082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	47b8      	blx	r7
 800608c:	3001      	adds	r0, #1
 800608e:	f43f ae70 	beq.w	8005d72 <_printf_float+0xb6>
 8006092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800609e:	f7fa fd3b 	bl	8000b18 <__aeabi_dcmpeq>
 80060a2:	b9c0      	cbnz	r0, 80060d6 <_printf_float+0x41a>
 80060a4:	4653      	mov	r3, sl
 80060a6:	f108 0201 	add.w	r2, r8, #1
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	d10c      	bne.n	80060ce <_printf_float+0x412>
 80060b4:	e65d      	b.n	8005d72 <_printf_float+0xb6>
 80060b6:	2301      	movs	r3, #1
 80060b8:	465a      	mov	r2, fp
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f ae56 	beq.w	8005d72 <_printf_float+0xb6>
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	45d0      	cmp	r8, sl
 80060cc:	dbf3      	blt.n	80060b6 <_printf_float+0x3fa>
 80060ce:	464b      	mov	r3, r9
 80060d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060d4:	e6df      	b.n	8005e96 <_printf_float+0x1da>
 80060d6:	f04f 0800 	mov.w	r8, #0
 80060da:	f104 0b1a 	add.w	fp, r4, #26
 80060de:	e7f4      	b.n	80060ca <_printf_float+0x40e>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4642      	mov	r2, r8
 80060e4:	e7e1      	b.n	80060aa <_printf_float+0x3ee>
 80060e6:	2301      	movs	r3, #1
 80060e8:	464a      	mov	r2, r9
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f ae3e 	beq.w	8005d72 <_printf_float+0xb6>
 80060f6:	f108 0801 	add.w	r8, r8, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fe:	1a5b      	subs	r3, r3, r1
 8006100:	4543      	cmp	r3, r8
 8006102:	dcf0      	bgt.n	80060e6 <_printf_float+0x42a>
 8006104:	e6fc      	b.n	8005f00 <_printf_float+0x244>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	f104 0919 	add.w	r9, r4, #25
 800610e:	e7f4      	b.n	80060fa <_printf_float+0x43e>

08006110 <_printf_common>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	4616      	mov	r6, r2
 8006116:	4698      	mov	r8, r3
 8006118:	688a      	ldr	r2, [r1, #8]
 800611a:	690b      	ldr	r3, [r1, #16]
 800611c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006120:	4293      	cmp	r3, r2
 8006122:	bfb8      	it	lt
 8006124:	4613      	movlt	r3, r2
 8006126:	6033      	str	r3, [r6, #0]
 8006128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800612c:	4607      	mov	r7, r0
 800612e:	460c      	mov	r4, r1
 8006130:	b10a      	cbz	r2, 8006136 <_printf_common+0x26>
 8006132:	3301      	adds	r3, #1
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	0699      	lsls	r1, r3, #26
 800613a:	bf42      	ittt	mi
 800613c:	6833      	ldrmi	r3, [r6, #0]
 800613e:	3302      	addmi	r3, #2
 8006140:	6033      	strmi	r3, [r6, #0]
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	f015 0506 	ands.w	r5, r5, #6
 8006148:	d106      	bne.n	8006158 <_printf_common+0x48>
 800614a:	f104 0a19 	add.w	sl, r4, #25
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	6832      	ldr	r2, [r6, #0]
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	42ab      	cmp	r3, r5
 8006156:	dc26      	bgt.n	80061a6 <_printf_common+0x96>
 8006158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	3b00      	subs	r3, #0
 8006160:	bf18      	it	ne
 8006162:	2301      	movne	r3, #1
 8006164:	0692      	lsls	r2, r2, #26
 8006166:	d42b      	bmi.n	80061c0 <_printf_common+0xb0>
 8006168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800616c:	4641      	mov	r1, r8
 800616e:	4638      	mov	r0, r7
 8006170:	47c8      	blx	r9
 8006172:	3001      	adds	r0, #1
 8006174:	d01e      	beq.n	80061b4 <_printf_common+0xa4>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	6922      	ldr	r2, [r4, #16]
 800617a:	f003 0306 	and.w	r3, r3, #6
 800617e:	2b04      	cmp	r3, #4
 8006180:	bf02      	ittt	eq
 8006182:	68e5      	ldreq	r5, [r4, #12]
 8006184:	6833      	ldreq	r3, [r6, #0]
 8006186:	1aed      	subeq	r5, r5, r3
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	bf0c      	ite	eq
 800618c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006190:	2500      	movne	r5, #0
 8006192:	4293      	cmp	r3, r2
 8006194:	bfc4      	itt	gt
 8006196:	1a9b      	subgt	r3, r3, r2
 8006198:	18ed      	addgt	r5, r5, r3
 800619a:	2600      	movs	r6, #0
 800619c:	341a      	adds	r4, #26
 800619e:	42b5      	cmp	r5, r6
 80061a0:	d11a      	bne.n	80061d8 <_printf_common+0xc8>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e008      	b.n	80061b8 <_printf_common+0xa8>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4652      	mov	r2, sl
 80061aa:	4641      	mov	r1, r8
 80061ac:	4638      	mov	r0, r7
 80061ae:	47c8      	blx	r9
 80061b0:	3001      	adds	r0, #1
 80061b2:	d103      	bne.n	80061bc <_printf_common+0xac>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	3501      	adds	r5, #1
 80061be:	e7c6      	b.n	800614e <_printf_common+0x3e>
 80061c0:	18e1      	adds	r1, r4, r3
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	2030      	movs	r0, #48	@ 0x30
 80061c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ca:	4422      	add	r2, r4
 80061cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d4:	3302      	adds	r3, #2
 80061d6:	e7c7      	b.n	8006168 <_printf_common+0x58>
 80061d8:	2301      	movs	r3, #1
 80061da:	4622      	mov	r2, r4
 80061dc:	4641      	mov	r1, r8
 80061de:	4638      	mov	r0, r7
 80061e0:	47c8      	blx	r9
 80061e2:	3001      	adds	r0, #1
 80061e4:	d0e6      	beq.n	80061b4 <_printf_common+0xa4>
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7d9      	b.n	800619e <_printf_common+0x8e>
	...

080061ec <_printf_i>:
 80061ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	7e0f      	ldrb	r7, [r1, #24]
 80061f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f4:	2f78      	cmp	r7, #120	@ 0x78
 80061f6:	4691      	mov	r9, r2
 80061f8:	4680      	mov	r8, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	469a      	mov	sl, r3
 80061fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006202:	d807      	bhi.n	8006214 <_printf_i+0x28>
 8006204:	2f62      	cmp	r7, #98	@ 0x62
 8006206:	d80a      	bhi.n	800621e <_printf_i+0x32>
 8006208:	2f00      	cmp	r7, #0
 800620a:	f000 80d1 	beq.w	80063b0 <_printf_i+0x1c4>
 800620e:	2f58      	cmp	r7, #88	@ 0x58
 8006210:	f000 80b8 	beq.w	8006384 <_printf_i+0x198>
 8006214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800621c:	e03a      	b.n	8006294 <_printf_i+0xa8>
 800621e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006222:	2b15      	cmp	r3, #21
 8006224:	d8f6      	bhi.n	8006214 <_printf_i+0x28>
 8006226:	a101      	add	r1, pc, #4	@ (adr r1, 800622c <_printf_i+0x40>)
 8006228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800622c:	08006285 	.word	0x08006285
 8006230:	08006299 	.word	0x08006299
 8006234:	08006215 	.word	0x08006215
 8006238:	08006215 	.word	0x08006215
 800623c:	08006215 	.word	0x08006215
 8006240:	08006215 	.word	0x08006215
 8006244:	08006299 	.word	0x08006299
 8006248:	08006215 	.word	0x08006215
 800624c:	08006215 	.word	0x08006215
 8006250:	08006215 	.word	0x08006215
 8006254:	08006215 	.word	0x08006215
 8006258:	08006397 	.word	0x08006397
 800625c:	080062c3 	.word	0x080062c3
 8006260:	08006351 	.word	0x08006351
 8006264:	08006215 	.word	0x08006215
 8006268:	08006215 	.word	0x08006215
 800626c:	080063b9 	.word	0x080063b9
 8006270:	08006215 	.word	0x08006215
 8006274:	080062c3 	.word	0x080062c3
 8006278:	08006215 	.word	0x08006215
 800627c:	08006215 	.word	0x08006215
 8006280:	08006359 	.word	0x08006359
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	1d1a      	adds	r2, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6032      	str	r2, [r6, #0]
 800628c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006294:	2301      	movs	r3, #1
 8006296:	e09c      	b.n	80063d2 <_printf_i+0x1e6>
 8006298:	6833      	ldr	r3, [r6, #0]
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	6031      	str	r1, [r6, #0]
 80062a0:	0606      	lsls	r6, r0, #24
 80062a2:	d501      	bpl.n	80062a8 <_printf_i+0xbc>
 80062a4:	681d      	ldr	r5, [r3, #0]
 80062a6:	e003      	b.n	80062b0 <_printf_i+0xc4>
 80062a8:	0645      	lsls	r5, r0, #25
 80062aa:	d5fb      	bpl.n	80062a4 <_printf_i+0xb8>
 80062ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	da03      	bge.n	80062bc <_printf_i+0xd0>
 80062b4:	232d      	movs	r3, #45	@ 0x2d
 80062b6:	426d      	negs	r5, r5
 80062b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062bc:	4858      	ldr	r0, [pc, #352]	@ (8006420 <_printf_i+0x234>)
 80062be:	230a      	movs	r3, #10
 80062c0:	e011      	b.n	80062e6 <_printf_i+0xfa>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	0608      	lsls	r0, r1, #24
 80062c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062cc:	d402      	bmi.n	80062d4 <_printf_i+0xe8>
 80062ce:	0649      	lsls	r1, r1, #25
 80062d0:	bf48      	it	mi
 80062d2:	b2ad      	uxthmi	r5, r5
 80062d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062d6:	4852      	ldr	r0, [pc, #328]	@ (8006420 <_printf_i+0x234>)
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	bf14      	ite	ne
 80062dc:	230a      	movne	r3, #10
 80062de:	2308      	moveq	r3, #8
 80062e0:	2100      	movs	r1, #0
 80062e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062e6:	6866      	ldr	r6, [r4, #4]
 80062e8:	60a6      	str	r6, [r4, #8]
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	db05      	blt.n	80062fa <_printf_i+0x10e>
 80062ee:	6821      	ldr	r1, [r4, #0]
 80062f0:	432e      	orrs	r6, r5
 80062f2:	f021 0104 	bic.w	r1, r1, #4
 80062f6:	6021      	str	r1, [r4, #0]
 80062f8:	d04b      	beq.n	8006392 <_printf_i+0x1a6>
 80062fa:	4616      	mov	r6, r2
 80062fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006300:	fb03 5711 	mls	r7, r3, r1, r5
 8006304:	5dc7      	ldrb	r7, [r0, r7]
 8006306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800630a:	462f      	mov	r7, r5
 800630c:	42bb      	cmp	r3, r7
 800630e:	460d      	mov	r5, r1
 8006310:	d9f4      	bls.n	80062fc <_printf_i+0x110>
 8006312:	2b08      	cmp	r3, #8
 8006314:	d10b      	bne.n	800632e <_printf_i+0x142>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	07df      	lsls	r7, r3, #31
 800631a:	d508      	bpl.n	800632e <_printf_i+0x142>
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	6861      	ldr	r1, [r4, #4]
 8006320:	4299      	cmp	r1, r3
 8006322:	bfde      	ittt	le
 8006324:	2330      	movle	r3, #48	@ 0x30
 8006326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800632a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800632e:	1b92      	subs	r2, r2, r6
 8006330:	6122      	str	r2, [r4, #16]
 8006332:	f8cd a000 	str.w	sl, [sp]
 8006336:	464b      	mov	r3, r9
 8006338:	aa03      	add	r2, sp, #12
 800633a:	4621      	mov	r1, r4
 800633c:	4640      	mov	r0, r8
 800633e:	f7ff fee7 	bl	8006110 <_printf_common>
 8006342:	3001      	adds	r0, #1
 8006344:	d14a      	bne.n	80063dc <_printf_i+0x1f0>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800634a:	b004      	add	sp, #16
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f043 0320 	orr.w	r3, r3, #32
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	4832      	ldr	r0, [pc, #200]	@ (8006424 <_printf_i+0x238>)
 800635a:	2778      	movs	r7, #120	@ 0x78
 800635c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	6831      	ldr	r1, [r6, #0]
 8006364:	061f      	lsls	r7, r3, #24
 8006366:	f851 5b04 	ldr.w	r5, [r1], #4
 800636a:	d402      	bmi.n	8006372 <_printf_i+0x186>
 800636c:	065f      	lsls	r7, r3, #25
 800636e:	bf48      	it	mi
 8006370:	b2ad      	uxthmi	r5, r5
 8006372:	6031      	str	r1, [r6, #0]
 8006374:	07d9      	lsls	r1, r3, #31
 8006376:	bf44      	itt	mi
 8006378:	f043 0320 	orrmi.w	r3, r3, #32
 800637c:	6023      	strmi	r3, [r4, #0]
 800637e:	b11d      	cbz	r5, 8006388 <_printf_i+0x19c>
 8006380:	2310      	movs	r3, #16
 8006382:	e7ad      	b.n	80062e0 <_printf_i+0xf4>
 8006384:	4826      	ldr	r0, [pc, #152]	@ (8006420 <_printf_i+0x234>)
 8006386:	e7e9      	b.n	800635c <_printf_i+0x170>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f023 0320 	bic.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	e7f6      	b.n	8006380 <_printf_i+0x194>
 8006392:	4616      	mov	r6, r2
 8006394:	e7bd      	b.n	8006312 <_printf_i+0x126>
 8006396:	6833      	ldr	r3, [r6, #0]
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	6961      	ldr	r1, [r4, #20]
 800639c:	1d18      	adds	r0, r3, #4
 800639e:	6030      	str	r0, [r6, #0]
 80063a0:	062e      	lsls	r6, r5, #24
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	d501      	bpl.n	80063aa <_printf_i+0x1be>
 80063a6:	6019      	str	r1, [r3, #0]
 80063a8:	e002      	b.n	80063b0 <_printf_i+0x1c4>
 80063aa:	0668      	lsls	r0, r5, #25
 80063ac:	d5fb      	bpl.n	80063a6 <_printf_i+0x1ba>
 80063ae:	8019      	strh	r1, [r3, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	4616      	mov	r6, r2
 80063b6:	e7bc      	b.n	8006332 <_printf_i+0x146>
 80063b8:	6833      	ldr	r3, [r6, #0]
 80063ba:	1d1a      	adds	r2, r3, #4
 80063bc:	6032      	str	r2, [r6, #0]
 80063be:	681e      	ldr	r6, [r3, #0]
 80063c0:	6862      	ldr	r2, [r4, #4]
 80063c2:	2100      	movs	r1, #0
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7f9 ff2b 	bl	8000220 <memchr>
 80063ca:	b108      	cbz	r0, 80063d0 <_printf_i+0x1e4>
 80063cc:	1b80      	subs	r0, r0, r6
 80063ce:	6060      	str	r0, [r4, #4]
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	2300      	movs	r3, #0
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063da:	e7aa      	b.n	8006332 <_printf_i+0x146>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	4632      	mov	r2, r6
 80063e0:	4649      	mov	r1, r9
 80063e2:	4640      	mov	r0, r8
 80063e4:	47d0      	blx	sl
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0ad      	beq.n	8006346 <_printf_i+0x15a>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	079b      	lsls	r3, r3, #30
 80063ee:	d413      	bmi.n	8006418 <_printf_i+0x22c>
 80063f0:	68e0      	ldr	r0, [r4, #12]
 80063f2:	9b03      	ldr	r3, [sp, #12]
 80063f4:	4298      	cmp	r0, r3
 80063f6:	bfb8      	it	lt
 80063f8:	4618      	movlt	r0, r3
 80063fa:	e7a6      	b.n	800634a <_printf_i+0x15e>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4632      	mov	r2, r6
 8006400:	4649      	mov	r1, r9
 8006402:	4640      	mov	r0, r8
 8006404:	47d0      	blx	sl
 8006406:	3001      	adds	r0, #1
 8006408:	d09d      	beq.n	8006346 <_printf_i+0x15a>
 800640a:	3501      	adds	r5, #1
 800640c:	68e3      	ldr	r3, [r4, #12]
 800640e:	9903      	ldr	r1, [sp, #12]
 8006410:	1a5b      	subs	r3, r3, r1
 8006412:	42ab      	cmp	r3, r5
 8006414:	dcf2      	bgt.n	80063fc <_printf_i+0x210>
 8006416:	e7eb      	b.n	80063f0 <_printf_i+0x204>
 8006418:	2500      	movs	r5, #0
 800641a:	f104 0619 	add.w	r6, r4, #25
 800641e:	e7f5      	b.n	800640c <_printf_i+0x220>
 8006420:	08008bca 	.word	0x08008bca
 8006424:	08008bdb 	.word	0x08008bdb

08006428 <std>:
 8006428:	2300      	movs	r3, #0
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	e9c0 3300 	strd	r3, r3, [r0]
 8006432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006436:	6083      	str	r3, [r0, #8]
 8006438:	8181      	strh	r1, [r0, #12]
 800643a:	6643      	str	r3, [r0, #100]	@ 0x64
 800643c:	81c2      	strh	r2, [r0, #14]
 800643e:	6183      	str	r3, [r0, #24]
 8006440:	4619      	mov	r1, r3
 8006442:	2208      	movs	r2, #8
 8006444:	305c      	adds	r0, #92	@ 0x5c
 8006446:	f000 f916 	bl	8006676 <memset>
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x58>)
 800644c:	6263      	str	r3, [r4, #36]	@ 0x24
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x5c>)
 8006450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x60>)
 8006454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x64>)
 8006458:	6323      	str	r3, [r4, #48]	@ 0x30
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <std+0x68>)
 800645c:	6224      	str	r4, [r4, #32]
 800645e:	429c      	cmp	r4, r3
 8006460:	d006      	beq.n	8006470 <std+0x48>
 8006462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006466:	4294      	cmp	r4, r2
 8006468:	d002      	beq.n	8006470 <std+0x48>
 800646a:	33d0      	adds	r3, #208	@ 0xd0
 800646c:	429c      	cmp	r4, r3
 800646e:	d105      	bne.n	800647c <std+0x54>
 8006470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006478:	f000 b97a 	b.w	8006770 <__retarget_lock_init_recursive>
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	080065f1 	.word	0x080065f1
 8006484:	08006613 	.word	0x08006613
 8006488:	0800664b 	.word	0x0800664b
 800648c:	0800666f 	.word	0x0800666f
 8006490:	200003f0 	.word	0x200003f0

08006494 <stdio_exit_handler>:
 8006494:	4a02      	ldr	r2, [pc, #8]	@ (80064a0 <stdio_exit_handler+0xc>)
 8006496:	4903      	ldr	r1, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x10>)
 8006498:	4803      	ldr	r0, [pc, #12]	@ (80064a8 <stdio_exit_handler+0x14>)
 800649a:	f000 b869 	b.w	8006570 <_fwalk_sglue>
 800649e:	bf00      	nop
 80064a0:	20000010 	.word	0x20000010
 80064a4:	080080d5 	.word	0x080080d5
 80064a8:	20000020 	.word	0x20000020

080064ac <cleanup_stdio>:
 80064ac:	6841      	ldr	r1, [r0, #4]
 80064ae:	4b0c      	ldr	r3, [pc, #48]	@ (80064e0 <cleanup_stdio+0x34>)
 80064b0:	4299      	cmp	r1, r3
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	d001      	beq.n	80064bc <cleanup_stdio+0x10>
 80064b8:	f001 fe0c 	bl	80080d4 <_fflush_r>
 80064bc:	68a1      	ldr	r1, [r4, #8]
 80064be:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <cleanup_stdio+0x38>)
 80064c0:	4299      	cmp	r1, r3
 80064c2:	d002      	beq.n	80064ca <cleanup_stdio+0x1e>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 fe05 	bl	80080d4 <_fflush_r>
 80064ca:	68e1      	ldr	r1, [r4, #12]
 80064cc:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <cleanup_stdio+0x3c>)
 80064ce:	4299      	cmp	r1, r3
 80064d0:	d004      	beq.n	80064dc <cleanup_stdio+0x30>
 80064d2:	4620      	mov	r0, r4
 80064d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d8:	f001 bdfc 	b.w	80080d4 <_fflush_r>
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	bf00      	nop
 80064e0:	200003f0 	.word	0x200003f0
 80064e4:	20000458 	.word	0x20000458
 80064e8:	200004c0 	.word	0x200004c0

080064ec <global_stdio_init.part.0>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x30>)
 80064f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006520 <global_stdio_init.part.0+0x34>)
 80064f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006524 <global_stdio_init.part.0+0x38>)
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	4620      	mov	r0, r4
 80064f8:	2200      	movs	r2, #0
 80064fa:	2104      	movs	r1, #4
 80064fc:	f7ff ff94 	bl	8006428 <std>
 8006500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006504:	2201      	movs	r2, #1
 8006506:	2109      	movs	r1, #9
 8006508:	f7ff ff8e 	bl	8006428 <std>
 800650c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006510:	2202      	movs	r2, #2
 8006512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006516:	2112      	movs	r1, #18
 8006518:	f7ff bf86 	b.w	8006428 <std>
 800651c:	20000528 	.word	0x20000528
 8006520:	200003f0 	.word	0x200003f0
 8006524:	08006495 	.word	0x08006495

08006528 <__sfp_lock_acquire>:
 8006528:	4801      	ldr	r0, [pc, #4]	@ (8006530 <__sfp_lock_acquire+0x8>)
 800652a:	f000 b922 	b.w	8006772 <__retarget_lock_acquire_recursive>
 800652e:	bf00      	nop
 8006530:	20000531 	.word	0x20000531

08006534 <__sfp_lock_release>:
 8006534:	4801      	ldr	r0, [pc, #4]	@ (800653c <__sfp_lock_release+0x8>)
 8006536:	f000 b91d 	b.w	8006774 <__retarget_lock_release_recursive>
 800653a:	bf00      	nop
 800653c:	20000531 	.word	0x20000531

08006540 <__sinit>:
 8006540:	b510      	push	{r4, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	f7ff fff0 	bl	8006528 <__sfp_lock_acquire>
 8006548:	6a23      	ldr	r3, [r4, #32]
 800654a:	b11b      	cbz	r3, 8006554 <__sinit+0x14>
 800654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006550:	f7ff bff0 	b.w	8006534 <__sfp_lock_release>
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x28>)
 8006556:	6223      	str	r3, [r4, #32]
 8006558:	4b04      	ldr	r3, [pc, #16]	@ (800656c <__sinit+0x2c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f5      	bne.n	800654c <__sinit+0xc>
 8006560:	f7ff ffc4 	bl	80064ec <global_stdio_init.part.0>
 8006564:	e7f2      	b.n	800654c <__sinit+0xc>
 8006566:	bf00      	nop
 8006568:	080064ad 	.word	0x080064ad
 800656c:	20000528 	.word	0x20000528

08006570 <_fwalk_sglue>:
 8006570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006574:	4607      	mov	r7, r0
 8006576:	4688      	mov	r8, r1
 8006578:	4614      	mov	r4, r2
 800657a:	2600      	movs	r6, #0
 800657c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006580:	f1b9 0901 	subs.w	r9, r9, #1
 8006584:	d505      	bpl.n	8006592 <_fwalk_sglue+0x22>
 8006586:	6824      	ldr	r4, [r4, #0]
 8006588:	2c00      	cmp	r4, #0
 800658a:	d1f7      	bne.n	800657c <_fwalk_sglue+0xc>
 800658c:	4630      	mov	r0, r6
 800658e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d907      	bls.n	80065a8 <_fwalk_sglue+0x38>
 8006598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800659c:	3301      	adds	r3, #1
 800659e:	d003      	beq.n	80065a8 <_fwalk_sglue+0x38>
 80065a0:	4629      	mov	r1, r5
 80065a2:	4638      	mov	r0, r7
 80065a4:	47c0      	blx	r8
 80065a6:	4306      	orrs	r6, r0
 80065a8:	3568      	adds	r5, #104	@ 0x68
 80065aa:	e7e9      	b.n	8006580 <_fwalk_sglue+0x10>

080065ac <siprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	b510      	push	{r4, lr}
 80065b0:	b09d      	sub	sp, #116	@ 0x74
 80065b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9006      	str	r0, [sp, #24]
 80065b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065bc:	480a      	ldr	r0, [pc, #40]	@ (80065e8 <siprintf+0x3c>)
 80065be:	9107      	str	r1, [sp, #28]
 80065c0:	9104      	str	r1, [sp, #16]
 80065c2:	490a      	ldr	r1, [pc, #40]	@ (80065ec <siprintf+0x40>)
 80065c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	2400      	movs	r4, #0
 80065cc:	a902      	add	r1, sp, #8
 80065ce:	6800      	ldr	r0, [r0, #0]
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80065d4:	f001 fbfe 	bl	8007dd4 <_svfiprintf_r>
 80065d8:	9b02      	ldr	r3, [sp, #8]
 80065da:	701c      	strb	r4, [r3, #0]
 80065dc:	b01d      	add	sp, #116	@ 0x74
 80065de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e2:	b003      	add	sp, #12
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2000001c 	.word	0x2000001c
 80065ec:	ffff0208 	.word	0xffff0208

080065f0 <__sread>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	460c      	mov	r4, r1
 80065f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f8:	f000 f86c 	bl	80066d4 <_read_r>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	bfab      	itete	ge
 8006600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006602:	89a3      	ldrhlt	r3, [r4, #12]
 8006604:	181b      	addge	r3, r3, r0
 8006606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800660a:	bfac      	ite	ge
 800660c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800660e:	81a3      	strhlt	r3, [r4, #12]
 8006610:	bd10      	pop	{r4, pc}

08006612 <__swrite>:
 8006612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	461f      	mov	r7, r3
 8006618:	898b      	ldrh	r3, [r1, #12]
 800661a:	05db      	lsls	r3, r3, #23
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	4616      	mov	r6, r2
 8006622:	d505      	bpl.n	8006630 <__swrite+0x1e>
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	2302      	movs	r3, #2
 800662a:	2200      	movs	r2, #0
 800662c:	f000 f840 	bl	80066b0 <_lseek_r>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006636:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	4632      	mov	r2, r6
 800663e:	463b      	mov	r3, r7
 8006640:	4628      	mov	r0, r5
 8006642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	f000 b857 	b.w	80066f8 <_write_r>

0800664a <__sseek>:
 800664a:	b510      	push	{r4, lr}
 800664c:	460c      	mov	r4, r1
 800664e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006652:	f000 f82d 	bl	80066b0 <_lseek_r>
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	bf15      	itete	ne
 800665c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800665e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006662:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006666:	81a3      	strheq	r3, [r4, #12]
 8006668:	bf18      	it	ne
 800666a:	81a3      	strhne	r3, [r4, #12]
 800666c:	bd10      	pop	{r4, pc}

0800666e <__sclose>:
 800666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006672:	f000 b80d 	b.w	8006690 <_close_r>

08006676 <memset>:
 8006676:	4402      	add	r2, r0
 8006678:	4603      	mov	r3, r0
 800667a:	4293      	cmp	r3, r2
 800667c:	d100      	bne.n	8006680 <memset+0xa>
 800667e:	4770      	bx	lr
 8006680:	f803 1b01 	strb.w	r1, [r3], #1
 8006684:	e7f9      	b.n	800667a <memset+0x4>
	...

08006688 <_localeconv_r>:
 8006688:	4800      	ldr	r0, [pc, #0]	@ (800668c <_localeconv_r+0x4>)
 800668a:	4770      	bx	lr
 800668c:	2000015c 	.word	0x2000015c

08006690 <_close_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d06      	ldr	r5, [pc, #24]	@ (80066ac <_close_r+0x1c>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fb fa74 	bl	8001b88 <_close>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_close_r+0x1a>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_close_r+0x1a>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	2000052c 	.word	0x2000052c

080066b0 <_lseek_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d07      	ldr	r5, [pc, #28]	@ (80066d0 <_lseek_r+0x20>)
 80066b4:	4604      	mov	r4, r0
 80066b6:	4608      	mov	r0, r1
 80066b8:	4611      	mov	r1, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	602a      	str	r2, [r5, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f7fb fa89 	bl	8001bd6 <_lseek>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_lseek_r+0x1e>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_lseek_r+0x1e>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	2000052c 	.word	0x2000052c

080066d4 <_read_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	@ (80066f4 <_read_r+0x20>)
 80066d8:	4604      	mov	r4, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fb fa17 	bl	8001b16 <_read>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_read_r+0x1e>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_read_r+0x1e>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	2000052c 	.word	0x2000052c

080066f8 <_write_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	@ (8006718 <_write_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fb fa22 	bl	8001b50 <_write>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_write_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_write_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	2000052c 	.word	0x2000052c

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	@ (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000001c 	.word	0x2000001c

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	@ (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	@ (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	@ (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	@ (800676c <__libc_init_array+0x44>)
 800673c:	f002 fa08 	bl	8008b50 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08008f6c 	.word	0x08008f6c
 8006764:	08008f6c 	.word	0x08008f6c
 8006768:	08008f6c 	.word	0x08008f6c
 800676c:	08008f70 	.word	0x08008f70

08006770 <__retarget_lock_init_recursive>:
 8006770:	4770      	bx	lr

08006772 <__retarget_lock_acquire_recursive>:
 8006772:	4770      	bx	lr

08006774 <__retarget_lock_release_recursive>:
 8006774:	4770      	bx	lr

08006776 <quorem>:
 8006776:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	6903      	ldr	r3, [r0, #16]
 800677c:	690c      	ldr	r4, [r1, #16]
 800677e:	42a3      	cmp	r3, r4
 8006780:	4607      	mov	r7, r0
 8006782:	db7e      	blt.n	8006882 <quorem+0x10c>
 8006784:	3c01      	subs	r4, #1
 8006786:	f101 0814 	add.w	r8, r1, #20
 800678a:	00a3      	lsls	r3, r4, #2
 800678c:	f100 0514 	add.w	r5, r0, #20
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800679c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a0:	3301      	adds	r3, #1
 80067a2:	429a      	cmp	r2, r3
 80067a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80067ac:	d32e      	bcc.n	800680c <quorem+0x96>
 80067ae:	f04f 0a00 	mov.w	sl, #0
 80067b2:	46c4      	mov	ip, r8
 80067b4:	46ae      	mov	lr, r5
 80067b6:	46d3      	mov	fp, sl
 80067b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067bc:	b298      	uxth	r0, r3
 80067be:	fb06 a000 	mla	r0, r6, r0, sl
 80067c2:	0c02      	lsrs	r2, r0, #16
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	fb06 2303 	mla	r3, r6, r3, r2
 80067ca:	f8de 2000 	ldr.w	r2, [lr]
 80067ce:	b280      	uxth	r0, r0
 80067d0:	b292      	uxth	r2, r2
 80067d2:	1a12      	subs	r2, r2, r0
 80067d4:	445a      	add	r2, fp
 80067d6:	f8de 0000 	ldr.w	r0, [lr]
 80067da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80067e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80067e8:	b292      	uxth	r2, r2
 80067ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067ee:	45e1      	cmp	r9, ip
 80067f0:	f84e 2b04 	str.w	r2, [lr], #4
 80067f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067f8:	d2de      	bcs.n	80067b8 <quorem+0x42>
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	58eb      	ldr	r3, [r5, r3]
 80067fe:	b92b      	cbnz	r3, 800680c <quorem+0x96>
 8006800:	9b01      	ldr	r3, [sp, #4]
 8006802:	3b04      	subs	r3, #4
 8006804:	429d      	cmp	r5, r3
 8006806:	461a      	mov	r2, r3
 8006808:	d32f      	bcc.n	800686a <quorem+0xf4>
 800680a:	613c      	str	r4, [r7, #16]
 800680c:	4638      	mov	r0, r7
 800680e:	f001 f97d 	bl	8007b0c <__mcmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	db25      	blt.n	8006862 <quorem+0xec>
 8006816:	4629      	mov	r1, r5
 8006818:	2000      	movs	r0, #0
 800681a:	f858 2b04 	ldr.w	r2, [r8], #4
 800681e:	f8d1 c000 	ldr.w	ip, [r1]
 8006822:	fa1f fe82 	uxth.w	lr, r2
 8006826:	fa1f f38c 	uxth.w	r3, ip
 800682a:	eba3 030e 	sub.w	r3, r3, lr
 800682e:	4403      	add	r3, r0
 8006830:	0c12      	lsrs	r2, r2, #16
 8006832:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006836:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006840:	45c1      	cmp	r9, r8
 8006842:	f841 3b04 	str.w	r3, [r1], #4
 8006846:	ea4f 4022 	mov.w	r0, r2, asr #16
 800684a:	d2e6      	bcs.n	800681a <quorem+0xa4>
 800684c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006854:	b922      	cbnz	r2, 8006860 <quorem+0xea>
 8006856:	3b04      	subs	r3, #4
 8006858:	429d      	cmp	r5, r3
 800685a:	461a      	mov	r2, r3
 800685c:	d30b      	bcc.n	8006876 <quorem+0x100>
 800685e:	613c      	str	r4, [r7, #16]
 8006860:	3601      	adds	r6, #1
 8006862:	4630      	mov	r0, r6
 8006864:	b003      	add	sp, #12
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	3b04      	subs	r3, #4
 800686e:	2a00      	cmp	r2, #0
 8006870:	d1cb      	bne.n	800680a <quorem+0x94>
 8006872:	3c01      	subs	r4, #1
 8006874:	e7c6      	b.n	8006804 <quorem+0x8e>
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	3b04      	subs	r3, #4
 800687a:	2a00      	cmp	r2, #0
 800687c:	d1ef      	bne.n	800685e <quorem+0xe8>
 800687e:	3c01      	subs	r4, #1
 8006880:	e7ea      	b.n	8006858 <quorem+0xe2>
 8006882:	2000      	movs	r0, #0
 8006884:	e7ee      	b.n	8006864 <quorem+0xee>
	...

08006888 <_dtoa_r>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	69c7      	ldr	r7, [r0, #28]
 800688e:	b097      	sub	sp, #92	@ 0x5c
 8006890:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006894:	ec55 4b10 	vmov	r4, r5, d0
 8006898:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800689a:	9107      	str	r1, [sp, #28]
 800689c:	4681      	mov	r9, r0
 800689e:	920c      	str	r2, [sp, #48]	@ 0x30
 80068a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80068a2:	b97f      	cbnz	r7, 80068c4 <_dtoa_r+0x3c>
 80068a4:	2010      	movs	r0, #16
 80068a6:	f000 fe09 	bl	80074bc <malloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80068b0:	b920      	cbnz	r0, 80068bc <_dtoa_r+0x34>
 80068b2:	4ba9      	ldr	r3, [pc, #676]	@ (8006b58 <_dtoa_r+0x2d0>)
 80068b4:	21ef      	movs	r1, #239	@ 0xef
 80068b6:	48a9      	ldr	r0, [pc, #676]	@ (8006b5c <_dtoa_r+0x2d4>)
 80068b8:	f001 fc6c 	bl	8008194 <__assert_func>
 80068bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068c0:	6007      	str	r7, [r0, #0]
 80068c2:	60c7      	str	r7, [r0, #12]
 80068c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	b159      	cbz	r1, 80068e4 <_dtoa_r+0x5c>
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	604a      	str	r2, [r1, #4]
 80068d0:	2301      	movs	r3, #1
 80068d2:	4093      	lsls	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
 80068d6:	4648      	mov	r0, r9
 80068d8:	f000 fee6 	bl	80076a8 <_Bfree>
 80068dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	1e2b      	subs	r3, r5, #0
 80068e6:	bfb9      	ittee	lt
 80068e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80068ec:	9305      	strlt	r3, [sp, #20]
 80068ee:	2300      	movge	r3, #0
 80068f0:	6033      	strge	r3, [r6, #0]
 80068f2:	9f05      	ldr	r7, [sp, #20]
 80068f4:	4b9a      	ldr	r3, [pc, #616]	@ (8006b60 <_dtoa_r+0x2d8>)
 80068f6:	bfbc      	itt	lt
 80068f8:	2201      	movlt	r2, #1
 80068fa:	6032      	strlt	r2, [r6, #0]
 80068fc:	43bb      	bics	r3, r7
 80068fe:	d112      	bne.n	8006926 <_dtoa_r+0x9e>
 8006900:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006902:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800690c:	4323      	orrs	r3, r4
 800690e:	f000 855a 	beq.w	80073c6 <_dtoa_r+0xb3e>
 8006912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006914:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006b74 <_dtoa_r+0x2ec>
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 855c 	beq.w	80073d6 <_dtoa_r+0xb4e>
 800691e:	f10a 0303 	add.w	r3, sl, #3
 8006922:	f000 bd56 	b.w	80073d2 <_dtoa_r+0xb4a>
 8006926:	ed9d 7b04 	vldr	d7, [sp, #16]
 800692a:	2200      	movs	r2, #0
 800692c:	ec51 0b17 	vmov	r0, r1, d7
 8006930:	2300      	movs	r3, #0
 8006932:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006936:	f7fa f8ef 	bl	8000b18 <__aeabi_dcmpeq>
 800693a:	4680      	mov	r8, r0
 800693c:	b158      	cbz	r0, 8006956 <_dtoa_r+0xce>
 800693e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006940:	2301      	movs	r3, #1
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006946:	b113      	cbz	r3, 800694e <_dtoa_r+0xc6>
 8006948:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800694a:	4b86      	ldr	r3, [pc, #536]	@ (8006b64 <_dtoa_r+0x2dc>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006b78 <_dtoa_r+0x2f0>
 8006952:	f000 bd40 	b.w	80073d6 <_dtoa_r+0xb4e>
 8006956:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800695a:	aa14      	add	r2, sp, #80	@ 0x50
 800695c:	a915      	add	r1, sp, #84	@ 0x54
 800695e:	4648      	mov	r0, r9
 8006960:	f001 f984 	bl	8007c6c <__d2b>
 8006964:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006968:	9002      	str	r0, [sp, #8]
 800696a:	2e00      	cmp	r6, #0
 800696c:	d078      	beq.n	8006a60 <_dtoa_r+0x1d8>
 800696e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006970:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800697c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006980:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006984:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006988:	4619      	mov	r1, r3
 800698a:	2200      	movs	r2, #0
 800698c:	4b76      	ldr	r3, [pc, #472]	@ (8006b68 <_dtoa_r+0x2e0>)
 800698e:	f7f9 fca3 	bl	80002d8 <__aeabi_dsub>
 8006992:	a36b      	add	r3, pc, #428	@ (adr r3, 8006b40 <_dtoa_r+0x2b8>)
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f7f9 fe56 	bl	8000648 <__aeabi_dmul>
 800699c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006b48 <_dtoa_r+0x2c0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fc9b 	bl	80002dc <__adddf3>
 80069a6:	4604      	mov	r4, r0
 80069a8:	4630      	mov	r0, r6
 80069aa:	460d      	mov	r5, r1
 80069ac:	f7f9 fde2 	bl	8000574 <__aeabi_i2d>
 80069b0:	a367      	add	r3, pc, #412	@ (adr r3, 8006b50 <_dtoa_r+0x2c8>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f7f9 fe47 	bl	8000648 <__aeabi_dmul>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7f9 fc8b 	bl	80002dc <__adddf3>
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	f7fa f8ed 	bl	8000ba8 <__aeabi_d2iz>
 80069ce:	2200      	movs	r2, #0
 80069d0:	4607      	mov	r7, r0
 80069d2:	2300      	movs	r3, #0
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7fa f8a8 	bl	8000b2c <__aeabi_dcmplt>
 80069dc:	b140      	cbz	r0, 80069f0 <_dtoa_r+0x168>
 80069de:	4638      	mov	r0, r7
 80069e0:	f7f9 fdc8 	bl	8000574 <__aeabi_i2d>
 80069e4:	4622      	mov	r2, r4
 80069e6:	462b      	mov	r3, r5
 80069e8:	f7fa f896 	bl	8000b18 <__aeabi_dcmpeq>
 80069ec:	b900      	cbnz	r0, 80069f0 <_dtoa_r+0x168>
 80069ee:	3f01      	subs	r7, #1
 80069f0:	2f16      	cmp	r7, #22
 80069f2:	d852      	bhi.n	8006a9a <_dtoa_r+0x212>
 80069f4:	4b5d      	ldr	r3, [pc, #372]	@ (8006b6c <_dtoa_r+0x2e4>)
 80069f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a02:	f7fa f893 	bl	8000b2c <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d049      	beq.n	8006a9e <_dtoa_r+0x216>
 8006a0a:	3f01      	subs	r7, #1
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a12:	1b9b      	subs	r3, r3, r6
 8006a14:	1e5a      	subs	r2, r3, #1
 8006a16:	bf45      	ittet	mi
 8006a18:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a1c:	9300      	strmi	r3, [sp, #0]
 8006a1e:	2300      	movpl	r3, #0
 8006a20:	2300      	movmi	r3, #0
 8006a22:	9206      	str	r2, [sp, #24]
 8006a24:	bf54      	ite	pl
 8006a26:	9300      	strpl	r3, [sp, #0]
 8006a28:	9306      	strmi	r3, [sp, #24]
 8006a2a:	2f00      	cmp	r7, #0
 8006a2c:	db39      	blt.n	8006aa2 <_dtoa_r+0x21a>
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	970d      	str	r7, [sp, #52]	@ 0x34
 8006a32:	443b      	add	r3, r7
 8006a34:	9306      	str	r3, [sp, #24]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9308      	str	r3, [sp, #32]
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	2b09      	cmp	r3, #9
 8006a3e:	d863      	bhi.n	8006b08 <_dtoa_r+0x280>
 8006a40:	2b05      	cmp	r3, #5
 8006a42:	bfc4      	itt	gt
 8006a44:	3b04      	subgt	r3, #4
 8006a46:	9307      	strgt	r3, [sp, #28]
 8006a48:	9b07      	ldr	r3, [sp, #28]
 8006a4a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a4e:	bfcc      	ite	gt
 8006a50:	2400      	movgt	r4, #0
 8006a52:	2401      	movle	r4, #1
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d863      	bhi.n	8006b20 <_dtoa_r+0x298>
 8006a58:	e8df f003 	tbb	[pc, r3]
 8006a5c:	2b375452 	.word	0x2b375452
 8006a60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a64:	441e      	add	r6, r3
 8006a66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	bfc1      	itttt	gt
 8006a6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a72:	409f      	lslgt	r7, r3
 8006a74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a7c:	bfd6      	itet	le
 8006a7e:	f1c3 0320 	rsble	r3, r3, #32
 8006a82:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a86:	fa04 f003 	lslle.w	r0, r4, r3
 8006a8a:	f7f9 fd63 	bl	8000554 <__aeabi_ui2d>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a94:	3e01      	subs	r6, #1
 8006a96:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a98:	e776      	b.n	8006988 <_dtoa_r+0x100>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e7b7      	b.n	8006a0e <_dtoa_r+0x186>
 8006a9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006aa0:	e7b6      	b.n	8006a10 <_dtoa_r+0x188>
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	1bdb      	subs	r3, r3, r7
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	427b      	negs	r3, r7
 8006aaa:	9308      	str	r3, [sp, #32]
 8006aac:	2300      	movs	r3, #0
 8006aae:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ab0:	e7c3      	b.n	8006a3a <_dtoa_r+0x1b2>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ab8:	eb07 0b03 	add.w	fp, r7, r3
 8006abc:	f10b 0301 	add.w	r3, fp, #1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	9303      	str	r3, [sp, #12]
 8006ac4:	bfb8      	it	lt
 8006ac6:	2301      	movlt	r3, #1
 8006ac8:	e006      	b.n	8006ad8 <_dtoa_r+0x250>
 8006aca:	2301      	movs	r3, #1
 8006acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dd28      	ble.n	8006b26 <_dtoa_r+0x29e>
 8006ad4:	469b      	mov	fp, r3
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006adc:	2100      	movs	r1, #0
 8006ade:	2204      	movs	r2, #4
 8006ae0:	f102 0514 	add.w	r5, r2, #20
 8006ae4:	429d      	cmp	r5, r3
 8006ae6:	d926      	bls.n	8006b36 <_dtoa_r+0x2ae>
 8006ae8:	6041      	str	r1, [r0, #4]
 8006aea:	4648      	mov	r0, r9
 8006aec:	f000 fd9c 	bl	8007628 <_Balloc>
 8006af0:	4682      	mov	sl, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d142      	bne.n	8006b7c <_dtoa_r+0x2f4>
 8006af6:	4b1e      	ldr	r3, [pc, #120]	@ (8006b70 <_dtoa_r+0x2e8>)
 8006af8:	4602      	mov	r2, r0
 8006afa:	f240 11af 	movw	r1, #431	@ 0x1af
 8006afe:	e6da      	b.n	80068b6 <_dtoa_r+0x2e>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e7e3      	b.n	8006acc <_dtoa_r+0x244>
 8006b04:	2300      	movs	r3, #0
 8006b06:	e7d5      	b.n	8006ab4 <_dtoa_r+0x22c>
 8006b08:	2401      	movs	r4, #1
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9307      	str	r3, [sp, #28]
 8006b0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006b10:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b1a:	2312      	movs	r3, #18
 8006b1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b1e:	e7db      	b.n	8006ad8 <_dtoa_r+0x250>
 8006b20:	2301      	movs	r3, #1
 8006b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b24:	e7f4      	b.n	8006b10 <_dtoa_r+0x288>
 8006b26:	f04f 0b01 	mov.w	fp, #1
 8006b2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b2e:	465b      	mov	r3, fp
 8006b30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006b34:	e7d0      	b.n	8006ad8 <_dtoa_r+0x250>
 8006b36:	3101      	adds	r1, #1
 8006b38:	0052      	lsls	r2, r2, #1
 8006b3a:	e7d1      	b.n	8006ae0 <_dtoa_r+0x258>
 8006b3c:	f3af 8000 	nop.w
 8006b40:	636f4361 	.word	0x636f4361
 8006b44:	3fd287a7 	.word	0x3fd287a7
 8006b48:	8b60c8b3 	.word	0x8b60c8b3
 8006b4c:	3fc68a28 	.word	0x3fc68a28
 8006b50:	509f79fb 	.word	0x509f79fb
 8006b54:	3fd34413 	.word	0x3fd34413
 8006b58:	08008bf9 	.word	0x08008bf9
 8006b5c:	08008c10 	.word	0x08008c10
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	08008bc9 	.word	0x08008bc9
 8006b68:	3ff80000 	.word	0x3ff80000
 8006b6c:	08008d60 	.word	0x08008d60
 8006b70:	08008c68 	.word	0x08008c68
 8006b74:	08008bf5 	.word	0x08008bf5
 8006b78:	08008bc8 	.word	0x08008bc8
 8006b7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b80:	6018      	str	r0, [r3, #0]
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	2b0e      	cmp	r3, #14
 8006b86:	f200 80a1 	bhi.w	8006ccc <_dtoa_r+0x444>
 8006b8a:	2c00      	cmp	r4, #0
 8006b8c:	f000 809e 	beq.w	8006ccc <_dtoa_r+0x444>
 8006b90:	2f00      	cmp	r7, #0
 8006b92:	dd33      	ble.n	8006bfc <_dtoa_r+0x374>
 8006b94:	4b9c      	ldr	r3, [pc, #624]	@ (8006e08 <_dtoa_r+0x580>)
 8006b96:	f007 020f 	and.w	r2, r7, #15
 8006b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b9e:	ed93 7b00 	vldr	d7, [r3]
 8006ba2:	05f8      	lsls	r0, r7, #23
 8006ba4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006ba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bac:	d516      	bpl.n	8006bdc <_dtoa_r+0x354>
 8006bae:	4b97      	ldr	r3, [pc, #604]	@ (8006e0c <_dtoa_r+0x584>)
 8006bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb8:	f7f9 fe70 	bl	800089c <__aeabi_ddiv>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	f004 040f 	and.w	r4, r4, #15
 8006bc4:	2603      	movs	r6, #3
 8006bc6:	4d91      	ldr	r5, [pc, #580]	@ (8006e0c <_dtoa_r+0x584>)
 8006bc8:	b954      	cbnz	r4, 8006be0 <_dtoa_r+0x358>
 8006bca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd2:	f7f9 fe63 	bl	800089c <__aeabi_ddiv>
 8006bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bda:	e028      	b.n	8006c2e <_dtoa_r+0x3a6>
 8006bdc:	2602      	movs	r6, #2
 8006bde:	e7f2      	b.n	8006bc6 <_dtoa_r+0x33e>
 8006be0:	07e1      	lsls	r1, r4, #31
 8006be2:	d508      	bpl.n	8006bf6 <_dtoa_r+0x36e>
 8006be4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bec:	f7f9 fd2c 	bl	8000648 <__aeabi_dmul>
 8006bf0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	1064      	asrs	r4, r4, #1
 8006bf8:	3508      	adds	r5, #8
 8006bfa:	e7e5      	b.n	8006bc8 <_dtoa_r+0x340>
 8006bfc:	f000 80af 	beq.w	8006d5e <_dtoa_r+0x4d6>
 8006c00:	427c      	negs	r4, r7
 8006c02:	4b81      	ldr	r3, [pc, #516]	@ (8006e08 <_dtoa_r+0x580>)
 8006c04:	4d81      	ldr	r5, [pc, #516]	@ (8006e0c <_dtoa_r+0x584>)
 8006c06:	f004 020f 	and.w	r2, r4, #15
 8006c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c16:	f7f9 fd17 	bl	8000648 <__aeabi_dmul>
 8006c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c1e:	1124      	asrs	r4, r4, #4
 8006c20:	2300      	movs	r3, #0
 8006c22:	2602      	movs	r6, #2
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f040 808f 	bne.w	8006d48 <_dtoa_r+0x4c0>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d3      	bne.n	8006bd6 <_dtoa_r+0x34e>
 8006c2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8094 	beq.w	8006d62 <_dtoa_r+0x4da>
 8006c3a:	4b75      	ldr	r3, [pc, #468]	@ (8006e10 <_dtoa_r+0x588>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 ff73 	bl	8000b2c <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f000 808b 	beq.w	8006d62 <_dtoa_r+0x4da>
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8087 	beq.w	8006d62 <_dtoa_r+0x4da>
 8006c54:	f1bb 0f00 	cmp.w	fp, #0
 8006c58:	dd34      	ble.n	8006cc4 <_dtoa_r+0x43c>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e14 <_dtoa_r+0x58c>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fcf1 	bl	8000648 <__aeabi_dmul>
 8006c66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006c6e:	3601      	adds	r6, #1
 8006c70:	465c      	mov	r4, fp
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7f9 fc7e 	bl	8000574 <__aeabi_i2d>
 8006c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7c:	f7f9 fce4 	bl	8000648 <__aeabi_dmul>
 8006c80:	4b65      	ldr	r3, [pc, #404]	@ (8006e18 <_dtoa_r+0x590>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	f7f9 fb2a 	bl	80002dc <__adddf3>
 8006c88:	4605      	mov	r5, r0
 8006c8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	d16a      	bne.n	8006d68 <_dtoa_r+0x4e0>
 8006c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c96:	4b61      	ldr	r3, [pc, #388]	@ (8006e1c <_dtoa_r+0x594>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f7f9 fb1d 	bl	80002d8 <__aeabi_dsub>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	4633      	mov	r3, r6
 8006caa:	f7f9 ff5d 	bl	8000b68 <__aeabi_dcmpgt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f040 8298 	bne.w	80071e4 <_dtoa_r+0x95c>
 8006cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cbe:	f7f9 ff35 	bl	8000b2c <__aeabi_dcmplt>
 8006cc2:	bb38      	cbnz	r0, 8006d14 <_dtoa_r+0x48c>
 8006cc4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006cc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ccc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f2c0 8157 	blt.w	8006f82 <_dtoa_r+0x6fa>
 8006cd4:	2f0e      	cmp	r7, #14
 8006cd6:	f300 8154 	bgt.w	8006f82 <_dtoa_r+0x6fa>
 8006cda:	4b4b      	ldr	r3, [pc, #300]	@ (8006e08 <_dtoa_r+0x580>)
 8006cdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ce0:	ed93 7b00 	vldr	d7, [r3]
 8006ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	ed8d 7b00 	vstr	d7, [sp]
 8006cec:	f280 80e5 	bge.w	8006eba <_dtoa_r+0x632>
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f300 80e1 	bgt.w	8006eba <_dtoa_r+0x632>
 8006cf8:	d10c      	bne.n	8006d14 <_dtoa_r+0x48c>
 8006cfa:	4b48      	ldr	r3, [pc, #288]	@ (8006e1c <_dtoa_r+0x594>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	ec51 0b17 	vmov	r0, r1, d7
 8006d02:	f7f9 fca1 	bl	8000648 <__aeabi_dmul>
 8006d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0a:	f7f9 ff23 	bl	8000b54 <__aeabi_dcmpge>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f000 8266 	beq.w	80071e0 <_dtoa_r+0x958>
 8006d14:	2400      	movs	r4, #0
 8006d16:	4625      	mov	r5, r4
 8006d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d1a:	4656      	mov	r6, sl
 8006d1c:	ea6f 0803 	mvn.w	r8, r3
 8006d20:	2700      	movs	r7, #0
 8006d22:	4621      	mov	r1, r4
 8006d24:	4648      	mov	r0, r9
 8006d26:	f000 fcbf 	bl	80076a8 <_Bfree>
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	f000 80bd 	beq.w	8006eaa <_dtoa_r+0x622>
 8006d30:	b12f      	cbz	r7, 8006d3e <_dtoa_r+0x4b6>
 8006d32:	42af      	cmp	r7, r5
 8006d34:	d003      	beq.n	8006d3e <_dtoa_r+0x4b6>
 8006d36:	4639      	mov	r1, r7
 8006d38:	4648      	mov	r0, r9
 8006d3a:	f000 fcb5 	bl	80076a8 <_Bfree>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4648      	mov	r0, r9
 8006d42:	f000 fcb1 	bl	80076a8 <_Bfree>
 8006d46:	e0b0      	b.n	8006eaa <_dtoa_r+0x622>
 8006d48:	07e2      	lsls	r2, r4, #31
 8006d4a:	d505      	bpl.n	8006d58 <_dtoa_r+0x4d0>
 8006d4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d50:	f7f9 fc7a 	bl	8000648 <__aeabi_dmul>
 8006d54:	3601      	adds	r6, #1
 8006d56:	2301      	movs	r3, #1
 8006d58:	1064      	asrs	r4, r4, #1
 8006d5a:	3508      	adds	r5, #8
 8006d5c:	e762      	b.n	8006c24 <_dtoa_r+0x39c>
 8006d5e:	2602      	movs	r6, #2
 8006d60:	e765      	b.n	8006c2e <_dtoa_r+0x3a6>
 8006d62:	9c03      	ldr	r4, [sp, #12]
 8006d64:	46b8      	mov	r8, r7
 8006d66:	e784      	b.n	8006c72 <_dtoa_r+0x3ea>
 8006d68:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <_dtoa_r+0x580>)
 8006d6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d74:	4454      	add	r4, sl
 8006d76:	2900      	cmp	r1, #0
 8006d78:	d054      	beq.n	8006e24 <_dtoa_r+0x59c>
 8006d7a:	4929      	ldr	r1, [pc, #164]	@ (8006e20 <_dtoa_r+0x598>)
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f7f9 fd8d 	bl	800089c <__aeabi_ddiv>
 8006d82:	4633      	mov	r3, r6
 8006d84:	462a      	mov	r2, r5
 8006d86:	f7f9 faa7 	bl	80002d8 <__aeabi_dsub>
 8006d8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d8e:	4656      	mov	r6, sl
 8006d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d94:	f7f9 ff08 	bl	8000ba8 <__aeabi_d2iz>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	f7f9 fbeb 	bl	8000574 <__aeabi_i2d>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da6:	f7f9 fa97 	bl	80002d8 <__aeabi_dsub>
 8006daa:	3530      	adds	r5, #48	@ 0x30
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006db4:	f806 5b01 	strb.w	r5, [r6], #1
 8006db8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006dbc:	f7f9 feb6 	bl	8000b2c <__aeabi_dcmplt>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d172      	bne.n	8006eaa <_dtoa_r+0x622>
 8006dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc8:	4911      	ldr	r1, [pc, #68]	@ (8006e10 <_dtoa_r+0x588>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7f9 fa84 	bl	80002d8 <__aeabi_dsub>
 8006dd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006dd4:	f7f9 feaa 	bl	8000b2c <__aeabi_dcmplt>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f040 80b4 	bne.w	8006f46 <_dtoa_r+0x6be>
 8006dde:	42a6      	cmp	r6, r4
 8006de0:	f43f af70 	beq.w	8006cc4 <_dtoa_r+0x43c>
 8006de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <_dtoa_r+0x58c>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fc2c 	bl	8000648 <__aeabi_dmul>
 8006df0:	4b08      	ldr	r3, [pc, #32]	@ (8006e14 <_dtoa_r+0x58c>)
 8006df2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006df6:	2200      	movs	r2, #0
 8006df8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dfc:	f7f9 fc24 	bl	8000648 <__aeabi_dmul>
 8006e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e04:	e7c4      	b.n	8006d90 <_dtoa_r+0x508>
 8006e06:	bf00      	nop
 8006e08:	08008d60 	.word	0x08008d60
 8006e0c:	08008d38 	.word	0x08008d38
 8006e10:	3ff00000 	.word	0x3ff00000
 8006e14:	40240000 	.word	0x40240000
 8006e18:	401c0000 	.word	0x401c0000
 8006e1c:	40140000 	.word	0x40140000
 8006e20:	3fe00000 	.word	0x3fe00000
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7f9 fc0e 	bl	8000648 <__aeabi_dmul>
 8006e2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e30:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e32:	4656      	mov	r6, sl
 8006e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e38:	f7f9 feb6 	bl	8000ba8 <__aeabi_d2iz>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	f7f9 fb99 	bl	8000574 <__aeabi_i2d>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e4a:	f7f9 fa45 	bl	80002d8 <__aeabi_dsub>
 8006e4e:	3530      	adds	r5, #48	@ 0x30
 8006e50:	f806 5b01 	strb.w	r5, [r6], #1
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	d124      	bne.n	8006eae <_dtoa_r+0x626>
 8006e64:	4baf      	ldr	r3, [pc, #700]	@ (8007124 <_dtoa_r+0x89c>)
 8006e66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e6a:	f7f9 fa37 	bl	80002dc <__adddf3>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e76:	f7f9 fe77 	bl	8000b68 <__aeabi_dcmpgt>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d163      	bne.n	8006f46 <_dtoa_r+0x6be>
 8006e7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e82:	49a8      	ldr	r1, [pc, #672]	@ (8007124 <_dtoa_r+0x89c>)
 8006e84:	2000      	movs	r0, #0
 8006e86:	f7f9 fa27 	bl	80002d8 <__aeabi_dsub>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e92:	f7f9 fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f af14 	beq.w	8006cc4 <_dtoa_r+0x43c>
 8006e9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e9e:	1e73      	subs	r3, r6, #1
 8006ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ea2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ea6:	2b30      	cmp	r3, #48	@ 0x30
 8006ea8:	d0f8      	beq.n	8006e9c <_dtoa_r+0x614>
 8006eaa:	4647      	mov	r7, r8
 8006eac:	e03b      	b.n	8006f26 <_dtoa_r+0x69e>
 8006eae:	4b9e      	ldr	r3, [pc, #632]	@ (8007128 <_dtoa_r+0x8a0>)
 8006eb0:	f7f9 fbca 	bl	8000648 <__aeabi_dmul>
 8006eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eb8:	e7bc      	b.n	8006e34 <_dtoa_r+0x5ac>
 8006eba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ebe:	4656      	mov	r6, sl
 8006ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 fce8 	bl	800089c <__aeabi_ddiv>
 8006ecc:	f7f9 fe6c 	bl	8000ba8 <__aeabi_d2iz>
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	f7f9 fb4f 	bl	8000574 <__aeabi_i2d>
 8006ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eda:	f7f9 fbb5 	bl	8000648 <__aeabi_dmul>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006eea:	f7f9 f9f5 	bl	80002d8 <__aeabi_dsub>
 8006eee:	f806 4b01 	strb.w	r4, [r6], #1
 8006ef2:	9d03      	ldr	r5, [sp, #12]
 8006ef4:	eba6 040a 	sub.w	r4, r6, sl
 8006ef8:	42a5      	cmp	r5, r4
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	d133      	bne.n	8006f68 <_dtoa_r+0x6e0>
 8006f00:	f7f9 f9ec 	bl	80002dc <__adddf3>
 8006f04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	f7f9 fe2c 	bl	8000b68 <__aeabi_dcmpgt>
 8006f10:	b9c0      	cbnz	r0, 8006f44 <_dtoa_r+0x6bc>
 8006f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fdfd 	bl	8000b18 <__aeabi_dcmpeq>
 8006f1e:	b110      	cbz	r0, 8006f26 <_dtoa_r+0x69e>
 8006f20:	f018 0f01 	tst.w	r8, #1
 8006f24:	d10e      	bne.n	8006f44 <_dtoa_r+0x6bc>
 8006f26:	9902      	ldr	r1, [sp, #8]
 8006f28:	4648      	mov	r0, r9
 8006f2a:	f000 fbbd 	bl	80076a8 <_Bfree>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	7033      	strb	r3, [r6, #0]
 8006f32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f34:	3701      	adds	r7, #1
 8006f36:	601f      	str	r7, [r3, #0]
 8006f38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 824b 	beq.w	80073d6 <_dtoa_r+0xb4e>
 8006f40:	601e      	str	r6, [r3, #0]
 8006f42:	e248      	b.n	80073d6 <_dtoa_r+0xb4e>
 8006f44:	46b8      	mov	r8, r7
 8006f46:	4633      	mov	r3, r6
 8006f48:	461e      	mov	r6, r3
 8006f4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f4e:	2a39      	cmp	r2, #57	@ 0x39
 8006f50:	d106      	bne.n	8006f60 <_dtoa_r+0x6d8>
 8006f52:	459a      	cmp	sl, r3
 8006f54:	d1f8      	bne.n	8006f48 <_dtoa_r+0x6c0>
 8006f56:	2230      	movs	r2, #48	@ 0x30
 8006f58:	f108 0801 	add.w	r8, r8, #1
 8006f5c:	f88a 2000 	strb.w	r2, [sl]
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	3201      	adds	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e7a0      	b.n	8006eaa <_dtoa_r+0x622>
 8006f68:	4b6f      	ldr	r3, [pc, #444]	@ (8007128 <_dtoa_r+0x8a0>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f7f9 fb6c 	bl	8000648 <__aeabi_dmul>
 8006f70:	2200      	movs	r2, #0
 8006f72:	2300      	movs	r3, #0
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	f7f9 fdce 	bl	8000b18 <__aeabi_dcmpeq>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d09f      	beq.n	8006ec0 <_dtoa_r+0x638>
 8006f80:	e7d1      	b.n	8006f26 <_dtoa_r+0x69e>
 8006f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	f000 80ea 	beq.w	800715e <_dtoa_r+0x8d6>
 8006f8a:	9a07      	ldr	r2, [sp, #28]
 8006f8c:	2a01      	cmp	r2, #1
 8006f8e:	f300 80cd 	bgt.w	800712c <_dtoa_r+0x8a4>
 8006f92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	f000 80c1 	beq.w	800711c <_dtoa_r+0x894>
 8006f9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f9e:	9c08      	ldr	r4, [sp, #32]
 8006fa0:	9e00      	ldr	r6, [sp, #0]
 8006fa2:	9a00      	ldr	r2, [sp, #0]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9200      	str	r2, [sp, #0]
 8006fa8:	9a06      	ldr	r2, [sp, #24]
 8006faa:	2101      	movs	r1, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	4648      	mov	r0, r9
 8006fb0:	9206      	str	r2, [sp, #24]
 8006fb2:	f000 fc2d 	bl	8007810 <__i2b>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	b166      	cbz	r6, 8006fd4 <_dtoa_r+0x74c>
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd09      	ble.n	8006fd4 <_dtoa_r+0x74c>
 8006fc0:	42b3      	cmp	r3, r6
 8006fc2:	9a00      	ldr	r2, [sp, #0]
 8006fc4:	bfa8      	it	ge
 8006fc6:	4633      	movge	r3, r6
 8006fc8:	1ad2      	subs	r2, r2, r3
 8006fca:	9200      	str	r2, [sp, #0]
 8006fcc:	9a06      	ldr	r2, [sp, #24]
 8006fce:	1af6      	subs	r6, r6, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	9306      	str	r3, [sp, #24]
 8006fd4:	9b08      	ldr	r3, [sp, #32]
 8006fd6:	b30b      	cbz	r3, 800701c <_dtoa_r+0x794>
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80c6 	beq.w	800716c <_dtoa_r+0x8e4>
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	f000 80c0 	beq.w	8007166 <_dtoa_r+0x8de>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4622      	mov	r2, r4
 8006fea:	4648      	mov	r0, r9
 8006fec:	f000 fcc8 	bl	8007980 <__pow5mult>
 8006ff0:	9a02      	ldr	r2, [sp, #8]
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f000 fc20 	bl	800783c <__multiply>
 8006ffc:	9902      	ldr	r1, [sp, #8]
 8006ffe:	4680      	mov	r8, r0
 8007000:	4648      	mov	r0, r9
 8007002:	f000 fb51 	bl	80076a8 <_Bfree>
 8007006:	9b08      	ldr	r3, [sp, #32]
 8007008:	1b1b      	subs	r3, r3, r4
 800700a:	9308      	str	r3, [sp, #32]
 800700c:	f000 80b1 	beq.w	8007172 <_dtoa_r+0x8ea>
 8007010:	9a08      	ldr	r2, [sp, #32]
 8007012:	4641      	mov	r1, r8
 8007014:	4648      	mov	r0, r9
 8007016:	f000 fcb3 	bl	8007980 <__pow5mult>
 800701a:	9002      	str	r0, [sp, #8]
 800701c:	2101      	movs	r1, #1
 800701e:	4648      	mov	r0, r9
 8007020:	f000 fbf6 	bl	8007810 <__i2b>
 8007024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007026:	4604      	mov	r4, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 81d8 	beq.w	80073de <_dtoa_r+0xb56>
 800702e:	461a      	mov	r2, r3
 8007030:	4601      	mov	r1, r0
 8007032:	4648      	mov	r0, r9
 8007034:	f000 fca4 	bl	8007980 <__pow5mult>
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	2b01      	cmp	r3, #1
 800703c:	4604      	mov	r4, r0
 800703e:	f300 809f 	bgt.w	8007180 <_dtoa_r+0x8f8>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 8097 	bne.w	8007178 <_dtoa_r+0x8f0>
 800704a:	9b05      	ldr	r3, [sp, #20]
 800704c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 8093 	bne.w	800717c <_dtoa_r+0x8f4>
 8007056:	9b05      	ldr	r3, [sp, #20]
 8007058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800705c:	0d1b      	lsrs	r3, r3, #20
 800705e:	051b      	lsls	r3, r3, #20
 8007060:	b133      	cbz	r3, 8007070 <_dtoa_r+0x7e8>
 8007062:	9b00      	ldr	r3, [sp, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	3301      	adds	r3, #1
 800706c:	9306      	str	r3, [sp, #24]
 800706e:	2301      	movs	r3, #1
 8007070:	9308      	str	r3, [sp, #32]
 8007072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 81b8 	beq.w	80073ea <_dtoa_r+0xb62>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007080:	6918      	ldr	r0, [r3, #16]
 8007082:	f000 fb79 	bl	8007778 <__hi0bits>
 8007086:	f1c0 0020 	rsb	r0, r0, #32
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	4418      	add	r0, r3
 800708e:	f010 001f 	ands.w	r0, r0, #31
 8007092:	f000 8082 	beq.w	800719a <_dtoa_r+0x912>
 8007096:	f1c0 0320 	rsb	r3, r0, #32
 800709a:	2b04      	cmp	r3, #4
 800709c:	dd73      	ble.n	8007186 <_dtoa_r+0x8fe>
 800709e:	9b00      	ldr	r3, [sp, #0]
 80070a0:	f1c0 001c 	rsb	r0, r0, #28
 80070a4:	4403      	add	r3, r0
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	4403      	add	r3, r0
 80070ac:	4406      	add	r6, r0
 80070ae:	9306      	str	r3, [sp, #24]
 80070b0:	9b00      	ldr	r3, [sp, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	dd05      	ble.n	80070c2 <_dtoa_r+0x83a>
 80070b6:	9902      	ldr	r1, [sp, #8]
 80070b8:	461a      	mov	r2, r3
 80070ba:	4648      	mov	r0, r9
 80070bc:	f000 fcba 	bl	8007a34 <__lshift>
 80070c0:	9002      	str	r0, [sp, #8]
 80070c2:	9b06      	ldr	r3, [sp, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dd05      	ble.n	80070d4 <_dtoa_r+0x84c>
 80070c8:	4621      	mov	r1, r4
 80070ca:	461a      	mov	r2, r3
 80070cc:	4648      	mov	r0, r9
 80070ce:	f000 fcb1 	bl	8007a34 <__lshift>
 80070d2:	4604      	mov	r4, r0
 80070d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d061      	beq.n	800719e <_dtoa_r+0x916>
 80070da:	9802      	ldr	r0, [sp, #8]
 80070dc:	4621      	mov	r1, r4
 80070de:	f000 fd15 	bl	8007b0c <__mcmp>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	da5b      	bge.n	800719e <_dtoa_r+0x916>
 80070e6:	2300      	movs	r3, #0
 80070e8:	9902      	ldr	r1, [sp, #8]
 80070ea:	220a      	movs	r2, #10
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fafd 	bl	80076ec <__multadd>
 80070f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f4:	9002      	str	r0, [sp, #8]
 80070f6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8177 	beq.w	80073ee <_dtoa_r+0xb66>
 8007100:	4629      	mov	r1, r5
 8007102:	2300      	movs	r3, #0
 8007104:	220a      	movs	r2, #10
 8007106:	4648      	mov	r0, r9
 8007108:	f000 faf0 	bl	80076ec <__multadd>
 800710c:	f1bb 0f00 	cmp.w	fp, #0
 8007110:	4605      	mov	r5, r0
 8007112:	dc6f      	bgt.n	80071f4 <_dtoa_r+0x96c>
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	2b02      	cmp	r3, #2
 8007118:	dc49      	bgt.n	80071ae <_dtoa_r+0x926>
 800711a:	e06b      	b.n	80071f4 <_dtoa_r+0x96c>
 800711c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800711e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007122:	e73c      	b.n	8006f9e <_dtoa_r+0x716>
 8007124:	3fe00000 	.word	0x3fe00000
 8007128:	40240000 	.word	0x40240000
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	1e5c      	subs	r4, r3, #1
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	42a3      	cmp	r3, r4
 8007134:	db09      	blt.n	800714a <_dtoa_r+0x8c2>
 8007136:	1b1c      	subs	r4, r3, r4
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f6bf af30 	bge.w	8006fa0 <_dtoa_r+0x718>
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	9a03      	ldr	r2, [sp, #12]
 8007144:	1a9e      	subs	r6, r3, r2
 8007146:	2300      	movs	r3, #0
 8007148:	e72b      	b.n	8006fa2 <_dtoa_r+0x71a>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800714e:	9408      	str	r4, [sp, #32]
 8007150:	1ae3      	subs	r3, r4, r3
 8007152:	441a      	add	r2, r3
 8007154:	9e00      	ldr	r6, [sp, #0]
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	920d      	str	r2, [sp, #52]	@ 0x34
 800715a:	2400      	movs	r4, #0
 800715c:	e721      	b.n	8006fa2 <_dtoa_r+0x71a>
 800715e:	9c08      	ldr	r4, [sp, #32]
 8007160:	9e00      	ldr	r6, [sp, #0]
 8007162:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007164:	e728      	b.n	8006fb8 <_dtoa_r+0x730>
 8007166:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800716a:	e751      	b.n	8007010 <_dtoa_r+0x788>
 800716c:	9a08      	ldr	r2, [sp, #32]
 800716e:	9902      	ldr	r1, [sp, #8]
 8007170:	e750      	b.n	8007014 <_dtoa_r+0x78c>
 8007172:	f8cd 8008 	str.w	r8, [sp, #8]
 8007176:	e751      	b.n	800701c <_dtoa_r+0x794>
 8007178:	2300      	movs	r3, #0
 800717a:	e779      	b.n	8007070 <_dtoa_r+0x7e8>
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	e777      	b.n	8007070 <_dtoa_r+0x7e8>
 8007180:	2300      	movs	r3, #0
 8007182:	9308      	str	r3, [sp, #32]
 8007184:	e779      	b.n	800707a <_dtoa_r+0x7f2>
 8007186:	d093      	beq.n	80070b0 <_dtoa_r+0x828>
 8007188:	9a00      	ldr	r2, [sp, #0]
 800718a:	331c      	adds	r3, #28
 800718c:	441a      	add	r2, r3
 800718e:	9200      	str	r2, [sp, #0]
 8007190:	9a06      	ldr	r2, [sp, #24]
 8007192:	441a      	add	r2, r3
 8007194:	441e      	add	r6, r3
 8007196:	9206      	str	r2, [sp, #24]
 8007198:	e78a      	b.n	80070b0 <_dtoa_r+0x828>
 800719a:	4603      	mov	r3, r0
 800719c:	e7f4      	b.n	8007188 <_dtoa_r+0x900>
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	46b8      	mov	r8, r7
 80071a4:	dc20      	bgt.n	80071e8 <_dtoa_r+0x960>
 80071a6:	469b      	mov	fp, r3
 80071a8:	9b07      	ldr	r3, [sp, #28]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	dd1e      	ble.n	80071ec <_dtoa_r+0x964>
 80071ae:	f1bb 0f00 	cmp.w	fp, #0
 80071b2:	f47f adb1 	bne.w	8006d18 <_dtoa_r+0x490>
 80071b6:	4621      	mov	r1, r4
 80071b8:	465b      	mov	r3, fp
 80071ba:	2205      	movs	r2, #5
 80071bc:	4648      	mov	r0, r9
 80071be:	f000 fa95 	bl	80076ec <__multadd>
 80071c2:	4601      	mov	r1, r0
 80071c4:	4604      	mov	r4, r0
 80071c6:	9802      	ldr	r0, [sp, #8]
 80071c8:	f000 fca0 	bl	8007b0c <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	f77f ada3 	ble.w	8006d18 <_dtoa_r+0x490>
 80071d2:	4656      	mov	r6, sl
 80071d4:	2331      	movs	r3, #49	@ 0x31
 80071d6:	f806 3b01 	strb.w	r3, [r6], #1
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	e59f      	b.n	8006d20 <_dtoa_r+0x498>
 80071e0:	9c03      	ldr	r4, [sp, #12]
 80071e2:	46b8      	mov	r8, r7
 80071e4:	4625      	mov	r5, r4
 80071e6:	e7f4      	b.n	80071d2 <_dtoa_r+0x94a>
 80071e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80071ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8101 	beq.w	80073f6 <_dtoa_r+0xb6e>
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	dd05      	ble.n	8007204 <_dtoa_r+0x97c>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4632      	mov	r2, r6
 80071fc:	4648      	mov	r0, r9
 80071fe:	f000 fc19 	bl	8007a34 <__lshift>
 8007202:	4605      	mov	r5, r0
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d05c      	beq.n	80072c4 <_dtoa_r+0xa3c>
 800720a:	6869      	ldr	r1, [r5, #4]
 800720c:	4648      	mov	r0, r9
 800720e:	f000 fa0b 	bl	8007628 <_Balloc>
 8007212:	4606      	mov	r6, r0
 8007214:	b928      	cbnz	r0, 8007222 <_dtoa_r+0x99a>
 8007216:	4b82      	ldr	r3, [pc, #520]	@ (8007420 <_dtoa_r+0xb98>)
 8007218:	4602      	mov	r2, r0
 800721a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800721e:	f7ff bb4a 	b.w	80068b6 <_dtoa_r+0x2e>
 8007222:	692a      	ldr	r2, [r5, #16]
 8007224:	3202      	adds	r2, #2
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	f105 010c 	add.w	r1, r5, #12
 800722c:	300c      	adds	r0, #12
 800722e:	f000 ffa3 	bl	8008178 <memcpy>
 8007232:	2201      	movs	r2, #1
 8007234:	4631      	mov	r1, r6
 8007236:	4648      	mov	r0, r9
 8007238:	f000 fbfc 	bl	8007a34 <__lshift>
 800723c:	f10a 0301 	add.w	r3, sl, #1
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	eb0a 030b 	add.w	r3, sl, fp
 8007246:	9308      	str	r3, [sp, #32]
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	462f      	mov	r7, r5
 8007250:	9306      	str	r3, [sp, #24]
 8007252:	4605      	mov	r5, r0
 8007254:	9b00      	ldr	r3, [sp, #0]
 8007256:	9802      	ldr	r0, [sp, #8]
 8007258:	4621      	mov	r1, r4
 800725a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800725e:	f7ff fa8a 	bl	8006776 <quorem>
 8007262:	4603      	mov	r3, r0
 8007264:	3330      	adds	r3, #48	@ 0x30
 8007266:	9003      	str	r0, [sp, #12]
 8007268:	4639      	mov	r1, r7
 800726a:	9802      	ldr	r0, [sp, #8]
 800726c:	9309      	str	r3, [sp, #36]	@ 0x24
 800726e:	f000 fc4d 	bl	8007b0c <__mcmp>
 8007272:	462a      	mov	r2, r5
 8007274:	9004      	str	r0, [sp, #16]
 8007276:	4621      	mov	r1, r4
 8007278:	4648      	mov	r0, r9
 800727a:	f000 fc63 	bl	8007b44 <__mdiff>
 800727e:	68c2      	ldr	r2, [r0, #12]
 8007280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007282:	4606      	mov	r6, r0
 8007284:	bb02      	cbnz	r2, 80072c8 <_dtoa_r+0xa40>
 8007286:	4601      	mov	r1, r0
 8007288:	9802      	ldr	r0, [sp, #8]
 800728a:	f000 fc3f 	bl	8007b0c <__mcmp>
 800728e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007290:	4602      	mov	r2, r0
 8007292:	4631      	mov	r1, r6
 8007294:	4648      	mov	r0, r9
 8007296:	920c      	str	r2, [sp, #48]	@ 0x30
 8007298:	9309      	str	r3, [sp, #36]	@ 0x24
 800729a:	f000 fa05 	bl	80076a8 <_Bfree>
 800729e:	9b07      	ldr	r3, [sp, #28]
 80072a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072a2:	9e00      	ldr	r6, [sp, #0]
 80072a4:	ea42 0103 	orr.w	r1, r2, r3
 80072a8:	9b06      	ldr	r3, [sp, #24]
 80072aa:	4319      	orrs	r1, r3
 80072ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ae:	d10d      	bne.n	80072cc <_dtoa_r+0xa44>
 80072b0:	2b39      	cmp	r3, #57	@ 0x39
 80072b2:	d027      	beq.n	8007304 <_dtoa_r+0xa7c>
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	dd01      	ble.n	80072be <_dtoa_r+0xa36>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	3331      	adds	r3, #49	@ 0x31
 80072be:	f88b 3000 	strb.w	r3, [fp]
 80072c2:	e52e      	b.n	8006d22 <_dtoa_r+0x49a>
 80072c4:	4628      	mov	r0, r5
 80072c6:	e7b9      	b.n	800723c <_dtoa_r+0x9b4>
 80072c8:	2201      	movs	r2, #1
 80072ca:	e7e2      	b.n	8007292 <_dtoa_r+0xa0a>
 80072cc:	9904      	ldr	r1, [sp, #16]
 80072ce:	2900      	cmp	r1, #0
 80072d0:	db04      	blt.n	80072dc <_dtoa_r+0xa54>
 80072d2:	9807      	ldr	r0, [sp, #28]
 80072d4:	4301      	orrs	r1, r0
 80072d6:	9806      	ldr	r0, [sp, #24]
 80072d8:	4301      	orrs	r1, r0
 80072da:	d120      	bne.n	800731e <_dtoa_r+0xa96>
 80072dc:	2a00      	cmp	r2, #0
 80072de:	ddee      	ble.n	80072be <_dtoa_r+0xa36>
 80072e0:	9902      	ldr	r1, [sp, #8]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2201      	movs	r2, #1
 80072e6:	4648      	mov	r0, r9
 80072e8:	f000 fba4 	bl	8007a34 <__lshift>
 80072ec:	4621      	mov	r1, r4
 80072ee:	9002      	str	r0, [sp, #8]
 80072f0:	f000 fc0c 	bl	8007b0c <__mcmp>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	dc02      	bgt.n	8007300 <_dtoa_r+0xa78>
 80072fa:	d1e0      	bne.n	80072be <_dtoa_r+0xa36>
 80072fc:	07da      	lsls	r2, r3, #31
 80072fe:	d5de      	bpl.n	80072be <_dtoa_r+0xa36>
 8007300:	2b39      	cmp	r3, #57	@ 0x39
 8007302:	d1da      	bne.n	80072ba <_dtoa_r+0xa32>
 8007304:	2339      	movs	r3, #57	@ 0x39
 8007306:	f88b 3000 	strb.w	r3, [fp]
 800730a:	4633      	mov	r3, r6
 800730c:	461e      	mov	r6, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007314:	2a39      	cmp	r2, #57	@ 0x39
 8007316:	d04e      	beq.n	80073b6 <_dtoa_r+0xb2e>
 8007318:	3201      	adds	r2, #1
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	e501      	b.n	8006d22 <_dtoa_r+0x49a>
 800731e:	2a00      	cmp	r2, #0
 8007320:	dd03      	ble.n	800732a <_dtoa_r+0xaa2>
 8007322:	2b39      	cmp	r3, #57	@ 0x39
 8007324:	d0ee      	beq.n	8007304 <_dtoa_r+0xa7c>
 8007326:	3301      	adds	r3, #1
 8007328:	e7c9      	b.n	80072be <_dtoa_r+0xa36>
 800732a:	9a00      	ldr	r2, [sp, #0]
 800732c:	9908      	ldr	r1, [sp, #32]
 800732e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007332:	428a      	cmp	r2, r1
 8007334:	d028      	beq.n	8007388 <_dtoa_r+0xb00>
 8007336:	9902      	ldr	r1, [sp, #8]
 8007338:	2300      	movs	r3, #0
 800733a:	220a      	movs	r2, #10
 800733c:	4648      	mov	r0, r9
 800733e:	f000 f9d5 	bl	80076ec <__multadd>
 8007342:	42af      	cmp	r7, r5
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	f04f 020a 	mov.w	r2, #10
 800734e:	4639      	mov	r1, r7
 8007350:	4648      	mov	r0, r9
 8007352:	d107      	bne.n	8007364 <_dtoa_r+0xadc>
 8007354:	f000 f9ca 	bl	80076ec <__multadd>
 8007358:	4607      	mov	r7, r0
 800735a:	4605      	mov	r5, r0
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	e777      	b.n	8007254 <_dtoa_r+0x9cc>
 8007364:	f000 f9c2 	bl	80076ec <__multadd>
 8007368:	4629      	mov	r1, r5
 800736a:	4607      	mov	r7, r0
 800736c:	2300      	movs	r3, #0
 800736e:	220a      	movs	r2, #10
 8007370:	4648      	mov	r0, r9
 8007372:	f000 f9bb 	bl	80076ec <__multadd>
 8007376:	4605      	mov	r5, r0
 8007378:	e7f0      	b.n	800735c <_dtoa_r+0xad4>
 800737a:	f1bb 0f00 	cmp.w	fp, #0
 800737e:	bfcc      	ite	gt
 8007380:	465e      	movgt	r6, fp
 8007382:	2601      	movle	r6, #1
 8007384:	4456      	add	r6, sl
 8007386:	2700      	movs	r7, #0
 8007388:	9902      	ldr	r1, [sp, #8]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	4648      	mov	r0, r9
 8007390:	f000 fb50 	bl	8007a34 <__lshift>
 8007394:	4621      	mov	r1, r4
 8007396:	9002      	str	r0, [sp, #8]
 8007398:	f000 fbb8 	bl	8007b0c <__mcmp>
 800739c:	2800      	cmp	r0, #0
 800739e:	dcb4      	bgt.n	800730a <_dtoa_r+0xa82>
 80073a0:	d102      	bne.n	80073a8 <_dtoa_r+0xb20>
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	07db      	lsls	r3, r3, #31
 80073a6:	d4b0      	bmi.n	800730a <_dtoa_r+0xa82>
 80073a8:	4633      	mov	r3, r6
 80073aa:	461e      	mov	r6, r3
 80073ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073b0:	2a30      	cmp	r2, #48	@ 0x30
 80073b2:	d0fa      	beq.n	80073aa <_dtoa_r+0xb22>
 80073b4:	e4b5      	b.n	8006d22 <_dtoa_r+0x49a>
 80073b6:	459a      	cmp	sl, r3
 80073b8:	d1a8      	bne.n	800730c <_dtoa_r+0xa84>
 80073ba:	2331      	movs	r3, #49	@ 0x31
 80073bc:	f108 0801 	add.w	r8, r8, #1
 80073c0:	f88a 3000 	strb.w	r3, [sl]
 80073c4:	e4ad      	b.n	8006d22 <_dtoa_r+0x49a>
 80073c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007424 <_dtoa_r+0xb9c>
 80073cc:	b11b      	cbz	r3, 80073d6 <_dtoa_r+0xb4e>
 80073ce:	f10a 0308 	add.w	r3, sl, #8
 80073d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	4650      	mov	r0, sl
 80073d8:	b017      	add	sp, #92	@ 0x5c
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f77f ae2e 	ble.w	8007042 <_dtoa_r+0x7ba>
 80073e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	2001      	movs	r0, #1
 80073ec:	e64d      	b.n	800708a <_dtoa_r+0x802>
 80073ee:	f1bb 0f00 	cmp.w	fp, #0
 80073f2:	f77f aed9 	ble.w	80071a8 <_dtoa_r+0x920>
 80073f6:	4656      	mov	r6, sl
 80073f8:	9802      	ldr	r0, [sp, #8]
 80073fa:	4621      	mov	r1, r4
 80073fc:	f7ff f9bb 	bl	8006776 <quorem>
 8007400:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007404:	f806 3b01 	strb.w	r3, [r6], #1
 8007408:	eba6 020a 	sub.w	r2, r6, sl
 800740c:	4593      	cmp	fp, r2
 800740e:	ddb4      	ble.n	800737a <_dtoa_r+0xaf2>
 8007410:	9902      	ldr	r1, [sp, #8]
 8007412:	2300      	movs	r3, #0
 8007414:	220a      	movs	r2, #10
 8007416:	4648      	mov	r0, r9
 8007418:	f000 f968 	bl	80076ec <__multadd>
 800741c:	9002      	str	r0, [sp, #8]
 800741e:	e7eb      	b.n	80073f8 <_dtoa_r+0xb70>
 8007420:	08008c68 	.word	0x08008c68
 8007424:	08008bec 	.word	0x08008bec

08007428 <_free_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4605      	mov	r5, r0
 800742c:	2900      	cmp	r1, #0
 800742e:	d041      	beq.n	80074b4 <_free_r+0x8c>
 8007430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007434:	1f0c      	subs	r4, r1, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	18e4      	addlt	r4, r4, r3
 800743c:	f000 f8e8 	bl	8007610 <__malloc_lock>
 8007440:	4a1d      	ldr	r2, [pc, #116]	@ (80074b8 <_free_r+0x90>)
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	b933      	cbnz	r3, 8007454 <_free_r+0x2c>
 8007446:	6063      	str	r3, [r4, #4]
 8007448:	6014      	str	r4, [r2, #0]
 800744a:	4628      	mov	r0, r5
 800744c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007450:	f000 b8e4 	b.w	800761c <__malloc_unlock>
 8007454:	42a3      	cmp	r3, r4
 8007456:	d908      	bls.n	800746a <_free_r+0x42>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	1821      	adds	r1, r4, r0
 800745c:	428b      	cmp	r3, r1
 800745e:	bf01      	itttt	eq
 8007460:	6819      	ldreq	r1, [r3, #0]
 8007462:	685b      	ldreq	r3, [r3, #4]
 8007464:	1809      	addeq	r1, r1, r0
 8007466:	6021      	streq	r1, [r4, #0]
 8007468:	e7ed      	b.n	8007446 <_free_r+0x1e>
 800746a:	461a      	mov	r2, r3
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	b10b      	cbz	r3, 8007474 <_free_r+0x4c>
 8007470:	42a3      	cmp	r3, r4
 8007472:	d9fa      	bls.n	800746a <_free_r+0x42>
 8007474:	6811      	ldr	r1, [r2, #0]
 8007476:	1850      	adds	r0, r2, r1
 8007478:	42a0      	cmp	r0, r4
 800747a:	d10b      	bne.n	8007494 <_free_r+0x6c>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	4401      	add	r1, r0
 8007480:	1850      	adds	r0, r2, r1
 8007482:	4283      	cmp	r3, r0
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	d1e0      	bne.n	800744a <_free_r+0x22>
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	6053      	str	r3, [r2, #4]
 800748e:	4408      	add	r0, r1
 8007490:	6010      	str	r0, [r2, #0]
 8007492:	e7da      	b.n	800744a <_free_r+0x22>
 8007494:	d902      	bls.n	800749c <_free_r+0x74>
 8007496:	230c      	movs	r3, #12
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	e7d6      	b.n	800744a <_free_r+0x22>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	1821      	adds	r1, r4, r0
 80074a0:	428b      	cmp	r3, r1
 80074a2:	bf04      	itt	eq
 80074a4:	6819      	ldreq	r1, [r3, #0]
 80074a6:	685b      	ldreq	r3, [r3, #4]
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	bf04      	itt	eq
 80074ac:	1809      	addeq	r1, r1, r0
 80074ae:	6021      	streq	r1, [r4, #0]
 80074b0:	6054      	str	r4, [r2, #4]
 80074b2:	e7ca      	b.n	800744a <_free_r+0x22>
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	bf00      	nop
 80074b8:	20000538 	.word	0x20000538

080074bc <malloc>:
 80074bc:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <malloc+0xc>)
 80074be:	4601      	mov	r1, r0
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f000 b825 	b.w	8007510 <_malloc_r>
 80074c6:	bf00      	nop
 80074c8:	2000001c 	.word	0x2000001c

080074cc <sbrk_aligned>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	4e0f      	ldr	r6, [pc, #60]	@ (800750c <sbrk_aligned+0x40>)
 80074d0:	460c      	mov	r4, r1
 80074d2:	6831      	ldr	r1, [r6, #0]
 80074d4:	4605      	mov	r5, r0
 80074d6:	b911      	cbnz	r1, 80074de <sbrk_aligned+0x12>
 80074d8:	f000 fe3e 	bl	8008158 <_sbrk_r>
 80074dc:	6030      	str	r0, [r6, #0]
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fe39 	bl	8008158 <_sbrk_r>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	d103      	bne.n	80074f2 <sbrk_aligned+0x26>
 80074ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074ee:	4620      	mov	r0, r4
 80074f0:	bd70      	pop	{r4, r5, r6, pc}
 80074f2:	1cc4      	adds	r4, r0, #3
 80074f4:	f024 0403 	bic.w	r4, r4, #3
 80074f8:	42a0      	cmp	r0, r4
 80074fa:	d0f8      	beq.n	80074ee <sbrk_aligned+0x22>
 80074fc:	1a21      	subs	r1, r4, r0
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fe2a 	bl	8008158 <_sbrk_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d1f2      	bne.n	80074ee <sbrk_aligned+0x22>
 8007508:	e7ef      	b.n	80074ea <sbrk_aligned+0x1e>
 800750a:	bf00      	nop
 800750c:	20000534 	.word	0x20000534

08007510 <_malloc_r>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	1ccd      	adds	r5, r1, #3
 8007516:	f025 0503 	bic.w	r5, r5, #3
 800751a:	3508      	adds	r5, #8
 800751c:	2d0c      	cmp	r5, #12
 800751e:	bf38      	it	cc
 8007520:	250c      	movcc	r5, #12
 8007522:	2d00      	cmp	r5, #0
 8007524:	4606      	mov	r6, r0
 8007526:	db01      	blt.n	800752c <_malloc_r+0x1c>
 8007528:	42a9      	cmp	r1, r5
 800752a:	d904      	bls.n	8007536 <_malloc_r+0x26>
 800752c:	230c      	movs	r3, #12
 800752e:	6033      	str	r3, [r6, #0]
 8007530:	2000      	movs	r0, #0
 8007532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800760c <_malloc_r+0xfc>
 800753a:	f000 f869 	bl	8007610 <__malloc_lock>
 800753e:	f8d8 3000 	ldr.w	r3, [r8]
 8007542:	461c      	mov	r4, r3
 8007544:	bb44      	cbnz	r4, 8007598 <_malloc_r+0x88>
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff ffbf 	bl	80074cc <sbrk_aligned>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	4604      	mov	r4, r0
 8007552:	d158      	bne.n	8007606 <_malloc_r+0xf6>
 8007554:	f8d8 4000 	ldr.w	r4, [r8]
 8007558:	4627      	mov	r7, r4
 800755a:	2f00      	cmp	r7, #0
 800755c:	d143      	bne.n	80075e6 <_malloc_r+0xd6>
 800755e:	2c00      	cmp	r4, #0
 8007560:	d04b      	beq.n	80075fa <_malloc_r+0xea>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4639      	mov	r1, r7
 8007566:	4630      	mov	r0, r6
 8007568:	eb04 0903 	add.w	r9, r4, r3
 800756c:	f000 fdf4 	bl	8008158 <_sbrk_r>
 8007570:	4581      	cmp	r9, r0
 8007572:	d142      	bne.n	80075fa <_malloc_r+0xea>
 8007574:	6821      	ldr	r1, [r4, #0]
 8007576:	1a6d      	subs	r5, r5, r1
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ffa6 	bl	80074cc <sbrk_aligned>
 8007580:	3001      	adds	r0, #1
 8007582:	d03a      	beq.n	80075fa <_malloc_r+0xea>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	442b      	add	r3, r5
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	f8d8 3000 	ldr.w	r3, [r8]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	bb62      	cbnz	r2, 80075ec <_malloc_r+0xdc>
 8007592:	f8c8 7000 	str.w	r7, [r8]
 8007596:	e00f      	b.n	80075b8 <_malloc_r+0xa8>
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	1b52      	subs	r2, r2, r5
 800759c:	d420      	bmi.n	80075e0 <_malloc_r+0xd0>
 800759e:	2a0b      	cmp	r2, #11
 80075a0:	d917      	bls.n	80075d2 <_malloc_r+0xc2>
 80075a2:	1961      	adds	r1, r4, r5
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	6025      	str	r5, [r4, #0]
 80075a8:	bf18      	it	ne
 80075aa:	6059      	strne	r1, [r3, #4]
 80075ac:	6863      	ldr	r3, [r4, #4]
 80075ae:	bf08      	it	eq
 80075b0:	f8c8 1000 	streq.w	r1, [r8]
 80075b4:	5162      	str	r2, [r4, r5]
 80075b6:	604b      	str	r3, [r1, #4]
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f82f 	bl	800761c <__malloc_unlock>
 80075be:	f104 000b 	add.w	r0, r4, #11
 80075c2:	1d23      	adds	r3, r4, #4
 80075c4:	f020 0007 	bic.w	r0, r0, #7
 80075c8:	1ac2      	subs	r2, r0, r3
 80075ca:	bf1c      	itt	ne
 80075cc:	1a1b      	subne	r3, r3, r0
 80075ce:	50a3      	strne	r3, [r4, r2]
 80075d0:	e7af      	b.n	8007532 <_malloc_r+0x22>
 80075d2:	6862      	ldr	r2, [r4, #4]
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	bf0c      	ite	eq
 80075d8:	f8c8 2000 	streq.w	r2, [r8]
 80075dc:	605a      	strne	r2, [r3, #4]
 80075de:	e7eb      	b.n	80075b8 <_malloc_r+0xa8>
 80075e0:	4623      	mov	r3, r4
 80075e2:	6864      	ldr	r4, [r4, #4]
 80075e4:	e7ae      	b.n	8007544 <_malloc_r+0x34>
 80075e6:	463c      	mov	r4, r7
 80075e8:	687f      	ldr	r7, [r7, #4]
 80075ea:	e7b6      	b.n	800755a <_malloc_r+0x4a>
 80075ec:	461a      	mov	r2, r3
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d1fb      	bne.n	80075ec <_malloc_r+0xdc>
 80075f4:	2300      	movs	r3, #0
 80075f6:	6053      	str	r3, [r2, #4]
 80075f8:	e7de      	b.n	80075b8 <_malloc_r+0xa8>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 f80c 	bl	800761c <__malloc_unlock>
 8007604:	e794      	b.n	8007530 <_malloc_r+0x20>
 8007606:	6005      	str	r5, [r0, #0]
 8007608:	e7d6      	b.n	80075b8 <_malloc_r+0xa8>
 800760a:	bf00      	nop
 800760c:	20000538 	.word	0x20000538

08007610 <__malloc_lock>:
 8007610:	4801      	ldr	r0, [pc, #4]	@ (8007618 <__malloc_lock+0x8>)
 8007612:	f7ff b8ae 	b.w	8006772 <__retarget_lock_acquire_recursive>
 8007616:	bf00      	nop
 8007618:	20000530 	.word	0x20000530

0800761c <__malloc_unlock>:
 800761c:	4801      	ldr	r0, [pc, #4]	@ (8007624 <__malloc_unlock+0x8>)
 800761e:	f7ff b8a9 	b.w	8006774 <__retarget_lock_release_recursive>
 8007622:	bf00      	nop
 8007624:	20000530 	.word	0x20000530

08007628 <_Balloc>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	69c6      	ldr	r6, [r0, #28]
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	b976      	cbnz	r6, 8007650 <_Balloc+0x28>
 8007632:	2010      	movs	r0, #16
 8007634:	f7ff ff42 	bl	80074bc <malloc>
 8007638:	4602      	mov	r2, r0
 800763a:	61e0      	str	r0, [r4, #28]
 800763c:	b920      	cbnz	r0, 8007648 <_Balloc+0x20>
 800763e:	4b18      	ldr	r3, [pc, #96]	@ (80076a0 <_Balloc+0x78>)
 8007640:	4818      	ldr	r0, [pc, #96]	@ (80076a4 <_Balloc+0x7c>)
 8007642:	216b      	movs	r1, #107	@ 0x6b
 8007644:	f000 fda6 	bl	8008194 <__assert_func>
 8007648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800764c:	6006      	str	r6, [r0, #0]
 800764e:	60c6      	str	r6, [r0, #12]
 8007650:	69e6      	ldr	r6, [r4, #28]
 8007652:	68f3      	ldr	r3, [r6, #12]
 8007654:	b183      	cbz	r3, 8007678 <_Balloc+0x50>
 8007656:	69e3      	ldr	r3, [r4, #28]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800765e:	b9b8      	cbnz	r0, 8007690 <_Balloc+0x68>
 8007660:	2101      	movs	r1, #1
 8007662:	fa01 f605 	lsl.w	r6, r1, r5
 8007666:	1d72      	adds	r2, r6, #5
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fdb0 	bl	80081d0 <_calloc_r>
 8007670:	b160      	cbz	r0, 800768c <_Balloc+0x64>
 8007672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007676:	e00e      	b.n	8007696 <_Balloc+0x6e>
 8007678:	2221      	movs	r2, #33	@ 0x21
 800767a:	2104      	movs	r1, #4
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fda7 	bl	80081d0 <_calloc_r>
 8007682:	69e3      	ldr	r3, [r4, #28]
 8007684:	60f0      	str	r0, [r6, #12]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e4      	bne.n	8007656 <_Balloc+0x2e>
 800768c:	2000      	movs	r0, #0
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	6802      	ldr	r2, [r0, #0]
 8007692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007696:	2300      	movs	r3, #0
 8007698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800769c:	e7f7      	b.n	800768e <_Balloc+0x66>
 800769e:	bf00      	nop
 80076a0:	08008bf9 	.word	0x08008bf9
 80076a4:	08008c79 	.word	0x08008c79

080076a8 <_Bfree>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	69c6      	ldr	r6, [r0, #28]
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b976      	cbnz	r6, 80076d0 <_Bfree+0x28>
 80076b2:	2010      	movs	r0, #16
 80076b4:	f7ff ff02 	bl	80074bc <malloc>
 80076b8:	4602      	mov	r2, r0
 80076ba:	61e8      	str	r0, [r5, #28]
 80076bc:	b920      	cbnz	r0, 80076c8 <_Bfree+0x20>
 80076be:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <_Bfree+0x3c>)
 80076c0:	4809      	ldr	r0, [pc, #36]	@ (80076e8 <_Bfree+0x40>)
 80076c2:	218f      	movs	r1, #143	@ 0x8f
 80076c4:	f000 fd66 	bl	8008194 <__assert_func>
 80076c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076cc:	6006      	str	r6, [r0, #0]
 80076ce:	60c6      	str	r6, [r0, #12]
 80076d0:	b13c      	cbz	r4, 80076e2 <_Bfree+0x3a>
 80076d2:	69eb      	ldr	r3, [r5, #28]
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076dc:	6021      	str	r1, [r4, #0]
 80076de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	08008bf9 	.word	0x08008bf9
 80076e8:	08008c79 	.word	0x08008c79

080076ec <__multadd>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	690d      	ldr	r5, [r1, #16]
 80076f2:	4607      	mov	r7, r0
 80076f4:	460c      	mov	r4, r1
 80076f6:	461e      	mov	r6, r3
 80076f8:	f101 0c14 	add.w	ip, r1, #20
 80076fc:	2000      	movs	r0, #0
 80076fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007702:	b299      	uxth	r1, r3
 8007704:	fb02 6101 	mla	r1, r2, r1, r6
 8007708:	0c1e      	lsrs	r6, r3, #16
 800770a:	0c0b      	lsrs	r3, r1, #16
 800770c:	fb02 3306 	mla	r3, r2, r6, r3
 8007710:	b289      	uxth	r1, r1
 8007712:	3001      	adds	r0, #1
 8007714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007718:	4285      	cmp	r5, r0
 800771a:	f84c 1b04 	str.w	r1, [ip], #4
 800771e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007722:	dcec      	bgt.n	80076fe <__multadd+0x12>
 8007724:	b30e      	cbz	r6, 800776a <__multadd+0x7e>
 8007726:	68a3      	ldr	r3, [r4, #8]
 8007728:	42ab      	cmp	r3, r5
 800772a:	dc19      	bgt.n	8007760 <__multadd+0x74>
 800772c:	6861      	ldr	r1, [r4, #4]
 800772e:	4638      	mov	r0, r7
 8007730:	3101      	adds	r1, #1
 8007732:	f7ff ff79 	bl	8007628 <_Balloc>
 8007736:	4680      	mov	r8, r0
 8007738:	b928      	cbnz	r0, 8007746 <__multadd+0x5a>
 800773a:	4602      	mov	r2, r0
 800773c:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <__multadd+0x84>)
 800773e:	480d      	ldr	r0, [pc, #52]	@ (8007774 <__multadd+0x88>)
 8007740:	21ba      	movs	r1, #186	@ 0xba
 8007742:	f000 fd27 	bl	8008194 <__assert_func>
 8007746:	6922      	ldr	r2, [r4, #16]
 8007748:	3202      	adds	r2, #2
 800774a:	f104 010c 	add.w	r1, r4, #12
 800774e:	0092      	lsls	r2, r2, #2
 8007750:	300c      	adds	r0, #12
 8007752:	f000 fd11 	bl	8008178 <memcpy>
 8007756:	4621      	mov	r1, r4
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ffa5 	bl	80076a8 <_Bfree>
 800775e:	4644      	mov	r4, r8
 8007760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007764:	3501      	adds	r5, #1
 8007766:	615e      	str	r6, [r3, #20]
 8007768:	6125      	str	r5, [r4, #16]
 800776a:	4620      	mov	r0, r4
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	08008c68 	.word	0x08008c68
 8007774:	08008c79 	.word	0x08008c79

08007778 <__hi0bits>:
 8007778:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800777c:	4603      	mov	r3, r0
 800777e:	bf36      	itet	cc
 8007780:	0403      	lslcc	r3, r0, #16
 8007782:	2000      	movcs	r0, #0
 8007784:	2010      	movcc	r0, #16
 8007786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800778a:	bf3c      	itt	cc
 800778c:	021b      	lslcc	r3, r3, #8
 800778e:	3008      	addcc	r0, #8
 8007790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007794:	bf3c      	itt	cc
 8007796:	011b      	lslcc	r3, r3, #4
 8007798:	3004      	addcc	r0, #4
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779e:	bf3c      	itt	cc
 80077a0:	009b      	lslcc	r3, r3, #2
 80077a2:	3002      	addcc	r0, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db05      	blt.n	80077b4 <__hi0bits+0x3c>
 80077a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077ac:	f100 0001 	add.w	r0, r0, #1
 80077b0:	bf08      	it	eq
 80077b2:	2020      	moveq	r0, #32
 80077b4:	4770      	bx	lr

080077b6 <__lo0bits>:
 80077b6:	6803      	ldr	r3, [r0, #0]
 80077b8:	4602      	mov	r2, r0
 80077ba:	f013 0007 	ands.w	r0, r3, #7
 80077be:	d00b      	beq.n	80077d8 <__lo0bits+0x22>
 80077c0:	07d9      	lsls	r1, r3, #31
 80077c2:	d421      	bmi.n	8007808 <__lo0bits+0x52>
 80077c4:	0798      	lsls	r0, r3, #30
 80077c6:	bf49      	itett	mi
 80077c8:	085b      	lsrmi	r3, r3, #1
 80077ca:	089b      	lsrpl	r3, r3, #2
 80077cc:	2001      	movmi	r0, #1
 80077ce:	6013      	strmi	r3, [r2, #0]
 80077d0:	bf5c      	itt	pl
 80077d2:	6013      	strpl	r3, [r2, #0]
 80077d4:	2002      	movpl	r0, #2
 80077d6:	4770      	bx	lr
 80077d8:	b299      	uxth	r1, r3
 80077da:	b909      	cbnz	r1, 80077e0 <__lo0bits+0x2a>
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	2010      	movs	r0, #16
 80077e0:	b2d9      	uxtb	r1, r3
 80077e2:	b909      	cbnz	r1, 80077e8 <__lo0bits+0x32>
 80077e4:	3008      	adds	r0, #8
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	0719      	lsls	r1, r3, #28
 80077ea:	bf04      	itt	eq
 80077ec:	091b      	lsreq	r3, r3, #4
 80077ee:	3004      	addeq	r0, #4
 80077f0:	0799      	lsls	r1, r3, #30
 80077f2:	bf04      	itt	eq
 80077f4:	089b      	lsreq	r3, r3, #2
 80077f6:	3002      	addeq	r0, #2
 80077f8:	07d9      	lsls	r1, r3, #31
 80077fa:	d403      	bmi.n	8007804 <__lo0bits+0x4e>
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	f100 0001 	add.w	r0, r0, #1
 8007802:	d003      	beq.n	800780c <__lo0bits+0x56>
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	4770      	bx	lr
 8007808:	2000      	movs	r0, #0
 800780a:	4770      	bx	lr
 800780c:	2020      	movs	r0, #32
 800780e:	4770      	bx	lr

08007810 <__i2b>:
 8007810:	b510      	push	{r4, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	2101      	movs	r1, #1
 8007816:	f7ff ff07 	bl	8007628 <_Balloc>
 800781a:	4602      	mov	r2, r0
 800781c:	b928      	cbnz	r0, 800782a <__i2b+0x1a>
 800781e:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <__i2b+0x24>)
 8007820:	4805      	ldr	r0, [pc, #20]	@ (8007838 <__i2b+0x28>)
 8007822:	f240 1145 	movw	r1, #325	@ 0x145
 8007826:	f000 fcb5 	bl	8008194 <__assert_func>
 800782a:	2301      	movs	r3, #1
 800782c:	6144      	str	r4, [r0, #20]
 800782e:	6103      	str	r3, [r0, #16]
 8007830:	bd10      	pop	{r4, pc}
 8007832:	bf00      	nop
 8007834:	08008c68 	.word	0x08008c68
 8007838:	08008c79 	.word	0x08008c79

0800783c <__multiply>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	4617      	mov	r7, r2
 8007842:	690a      	ldr	r2, [r1, #16]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	429a      	cmp	r2, r3
 8007848:	bfa8      	it	ge
 800784a:	463b      	movge	r3, r7
 800784c:	4689      	mov	r9, r1
 800784e:	bfa4      	itt	ge
 8007850:	460f      	movge	r7, r1
 8007852:	4699      	movge	r9, r3
 8007854:	693d      	ldr	r5, [r7, #16]
 8007856:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	eb05 060a 	add.w	r6, r5, sl
 8007862:	42b3      	cmp	r3, r6
 8007864:	b085      	sub	sp, #20
 8007866:	bfb8      	it	lt
 8007868:	3101      	addlt	r1, #1
 800786a:	f7ff fedd 	bl	8007628 <_Balloc>
 800786e:	b930      	cbnz	r0, 800787e <__multiply+0x42>
 8007870:	4602      	mov	r2, r0
 8007872:	4b41      	ldr	r3, [pc, #260]	@ (8007978 <__multiply+0x13c>)
 8007874:	4841      	ldr	r0, [pc, #260]	@ (800797c <__multiply+0x140>)
 8007876:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800787a:	f000 fc8b 	bl	8008194 <__assert_func>
 800787e:	f100 0414 	add.w	r4, r0, #20
 8007882:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007886:	4623      	mov	r3, r4
 8007888:	2200      	movs	r2, #0
 800788a:	4573      	cmp	r3, lr
 800788c:	d320      	bcc.n	80078d0 <__multiply+0x94>
 800788e:	f107 0814 	add.w	r8, r7, #20
 8007892:	f109 0114 	add.w	r1, r9, #20
 8007896:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800789a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800789e:	9302      	str	r3, [sp, #8]
 80078a0:	1beb      	subs	r3, r5, r7
 80078a2:	3b15      	subs	r3, #21
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	3304      	adds	r3, #4
 80078aa:	3715      	adds	r7, #21
 80078ac:	42bd      	cmp	r5, r7
 80078ae:	bf38      	it	cc
 80078b0:	2304      	movcc	r3, #4
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	9103      	str	r1, [sp, #12]
 80078b8:	428b      	cmp	r3, r1
 80078ba:	d80c      	bhi.n	80078d6 <__multiply+0x9a>
 80078bc:	2e00      	cmp	r6, #0
 80078be:	dd03      	ble.n	80078c8 <__multiply+0x8c>
 80078c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d055      	beq.n	8007974 <__multiply+0x138>
 80078c8:	6106      	str	r6, [r0, #16]
 80078ca:	b005      	add	sp, #20
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	f843 2b04 	str.w	r2, [r3], #4
 80078d4:	e7d9      	b.n	800788a <__multiply+0x4e>
 80078d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80078da:	f1ba 0f00 	cmp.w	sl, #0
 80078de:	d01f      	beq.n	8007920 <__multiply+0xe4>
 80078e0:	46c4      	mov	ip, r8
 80078e2:	46a1      	mov	r9, r4
 80078e4:	2700      	movs	r7, #0
 80078e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078ea:	f8d9 3000 	ldr.w	r3, [r9]
 80078ee:	fa1f fb82 	uxth.w	fp, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80078f8:	443b      	add	r3, r7
 80078fa:	f8d9 7000 	ldr.w	r7, [r9]
 80078fe:	0c12      	lsrs	r2, r2, #16
 8007900:	0c3f      	lsrs	r7, r7, #16
 8007902:	fb0a 7202 	mla	r2, sl, r2, r7
 8007906:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007910:	4565      	cmp	r5, ip
 8007912:	f849 3b04 	str.w	r3, [r9], #4
 8007916:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800791a:	d8e4      	bhi.n	80078e6 <__multiply+0xaa>
 800791c:	9b01      	ldr	r3, [sp, #4]
 800791e:	50e7      	str	r7, [r4, r3]
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007926:	3104      	adds	r1, #4
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	d020      	beq.n	8007970 <__multiply+0x134>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4647      	mov	r7, r8
 8007932:	46a4      	mov	ip, r4
 8007934:	f04f 0a00 	mov.w	sl, #0
 8007938:	f8b7 b000 	ldrh.w	fp, [r7]
 800793c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007940:	fb09 220b 	mla	r2, r9, fp, r2
 8007944:	4452      	add	r2, sl
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794c:	f84c 3b04 	str.w	r3, [ip], #4
 8007950:	f857 3b04 	ldr.w	r3, [r7], #4
 8007954:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007958:	f8bc 3000 	ldrh.w	r3, [ip]
 800795c:	fb09 330a 	mla	r3, r9, sl, r3
 8007960:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007964:	42bd      	cmp	r5, r7
 8007966:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800796a:	d8e5      	bhi.n	8007938 <__multiply+0xfc>
 800796c:	9a01      	ldr	r2, [sp, #4]
 800796e:	50a3      	str	r3, [r4, r2]
 8007970:	3404      	adds	r4, #4
 8007972:	e79f      	b.n	80078b4 <__multiply+0x78>
 8007974:	3e01      	subs	r6, #1
 8007976:	e7a1      	b.n	80078bc <__multiply+0x80>
 8007978:	08008c68 	.word	0x08008c68
 800797c:	08008c79 	.word	0x08008c79

08007980 <__pow5mult>:
 8007980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007984:	4615      	mov	r5, r2
 8007986:	f012 0203 	ands.w	r2, r2, #3
 800798a:	4607      	mov	r7, r0
 800798c:	460e      	mov	r6, r1
 800798e:	d007      	beq.n	80079a0 <__pow5mult+0x20>
 8007990:	4c25      	ldr	r4, [pc, #148]	@ (8007a28 <__pow5mult+0xa8>)
 8007992:	3a01      	subs	r2, #1
 8007994:	2300      	movs	r3, #0
 8007996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800799a:	f7ff fea7 	bl	80076ec <__multadd>
 800799e:	4606      	mov	r6, r0
 80079a0:	10ad      	asrs	r5, r5, #2
 80079a2:	d03d      	beq.n	8007a20 <__pow5mult+0xa0>
 80079a4:	69fc      	ldr	r4, [r7, #28]
 80079a6:	b97c      	cbnz	r4, 80079c8 <__pow5mult+0x48>
 80079a8:	2010      	movs	r0, #16
 80079aa:	f7ff fd87 	bl	80074bc <malloc>
 80079ae:	4602      	mov	r2, r0
 80079b0:	61f8      	str	r0, [r7, #28]
 80079b2:	b928      	cbnz	r0, 80079c0 <__pow5mult+0x40>
 80079b4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a2c <__pow5mult+0xac>)
 80079b6:	481e      	ldr	r0, [pc, #120]	@ (8007a30 <__pow5mult+0xb0>)
 80079b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079bc:	f000 fbea 	bl	8008194 <__assert_func>
 80079c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079c4:	6004      	str	r4, [r0, #0]
 80079c6:	60c4      	str	r4, [r0, #12]
 80079c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079d0:	b94c      	cbnz	r4, 80079e6 <__pow5mult+0x66>
 80079d2:	f240 2171 	movw	r1, #625	@ 0x271
 80079d6:	4638      	mov	r0, r7
 80079d8:	f7ff ff1a 	bl	8007810 <__i2b>
 80079dc:	2300      	movs	r3, #0
 80079de:	f8c8 0008 	str.w	r0, [r8, #8]
 80079e2:	4604      	mov	r4, r0
 80079e4:	6003      	str	r3, [r0, #0]
 80079e6:	f04f 0900 	mov.w	r9, #0
 80079ea:	07eb      	lsls	r3, r5, #31
 80079ec:	d50a      	bpl.n	8007a04 <__pow5mult+0x84>
 80079ee:	4631      	mov	r1, r6
 80079f0:	4622      	mov	r2, r4
 80079f2:	4638      	mov	r0, r7
 80079f4:	f7ff ff22 	bl	800783c <__multiply>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4680      	mov	r8, r0
 80079fc:	4638      	mov	r0, r7
 80079fe:	f7ff fe53 	bl	80076a8 <_Bfree>
 8007a02:	4646      	mov	r6, r8
 8007a04:	106d      	asrs	r5, r5, #1
 8007a06:	d00b      	beq.n	8007a20 <__pow5mult+0xa0>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	b938      	cbnz	r0, 8007a1c <__pow5mult+0x9c>
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4638      	mov	r0, r7
 8007a12:	f7ff ff13 	bl	800783c <__multiply>
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	f8c0 9000 	str.w	r9, [r0]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	e7e4      	b.n	80079ea <__pow5mult+0x6a>
 8007a20:	4630      	mov	r0, r6
 8007a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a26:	bf00      	nop
 8007a28:	08008d2c 	.word	0x08008d2c
 8007a2c:	08008bf9 	.word	0x08008bf9
 8007a30:	08008c79 	.word	0x08008c79

08007a34 <__lshift>:
 8007a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	6849      	ldr	r1, [r1, #4]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	4607      	mov	r7, r0
 8007a46:	4691      	mov	r9, r2
 8007a48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a4c:	f108 0601 	add.w	r6, r8, #1
 8007a50:	42b3      	cmp	r3, r6
 8007a52:	db0b      	blt.n	8007a6c <__lshift+0x38>
 8007a54:	4638      	mov	r0, r7
 8007a56:	f7ff fde7 	bl	8007628 <_Balloc>
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	b948      	cbnz	r0, 8007a72 <__lshift+0x3e>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4b28      	ldr	r3, [pc, #160]	@ (8007b04 <__lshift+0xd0>)
 8007a62:	4829      	ldr	r0, [pc, #164]	@ (8007b08 <__lshift+0xd4>)
 8007a64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a68:	f000 fb94 	bl	8008194 <__assert_func>
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	e7ee      	b.n	8007a50 <__lshift+0x1c>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f100 0114 	add.w	r1, r0, #20
 8007a78:	f100 0210 	add.w	r2, r0, #16
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	4553      	cmp	r3, sl
 8007a80:	db33      	blt.n	8007aea <__lshift+0xb6>
 8007a82:	6920      	ldr	r0, [r4, #16]
 8007a84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a88:	f104 0314 	add.w	r3, r4, #20
 8007a8c:	f019 091f 	ands.w	r9, r9, #31
 8007a90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a98:	d02b      	beq.n	8007af2 <__lshift+0xbe>
 8007a9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a9e:	468a      	mov	sl, r1
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	fa00 f009 	lsl.w	r0, r0, r9
 8007aa8:	4310      	orrs	r0, r2
 8007aaa:	f84a 0b04 	str.w	r0, [sl], #4
 8007aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab2:	459c      	cmp	ip, r3
 8007ab4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ab8:	d8f3      	bhi.n	8007aa2 <__lshift+0x6e>
 8007aba:	ebac 0304 	sub.w	r3, ip, r4
 8007abe:	3b15      	subs	r3, #21
 8007ac0:	f023 0303 	bic.w	r3, r3, #3
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	f104 0015 	add.w	r0, r4, #21
 8007aca:	4560      	cmp	r0, ip
 8007acc:	bf88      	it	hi
 8007ace:	2304      	movhi	r3, #4
 8007ad0:	50ca      	str	r2, [r1, r3]
 8007ad2:	b10a      	cbz	r2, 8007ad8 <__lshift+0xa4>
 8007ad4:	f108 0602 	add.w	r6, r8, #2
 8007ad8:	3e01      	subs	r6, #1
 8007ada:	4638      	mov	r0, r7
 8007adc:	612e      	str	r6, [r5, #16]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	f7ff fde2 	bl	80076a8 <_Bfree>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007aee:	3301      	adds	r3, #1
 8007af0:	e7c5      	b.n	8007a7e <__lshift+0x4a>
 8007af2:	3904      	subs	r1, #4
 8007af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007afc:	459c      	cmp	ip, r3
 8007afe:	d8f9      	bhi.n	8007af4 <__lshift+0xc0>
 8007b00:	e7ea      	b.n	8007ad8 <__lshift+0xa4>
 8007b02:	bf00      	nop
 8007b04:	08008c68 	.word	0x08008c68
 8007b08:	08008c79 	.word	0x08008c79

08007b0c <__mcmp>:
 8007b0c:	690a      	ldr	r2, [r1, #16]
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6900      	ldr	r0, [r0, #16]
 8007b12:	1a80      	subs	r0, r0, r2
 8007b14:	b530      	push	{r4, r5, lr}
 8007b16:	d10e      	bne.n	8007b36 <__mcmp+0x2a>
 8007b18:	3314      	adds	r3, #20
 8007b1a:	3114      	adds	r1, #20
 8007b1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b2c:	4295      	cmp	r5, r2
 8007b2e:	d003      	beq.n	8007b38 <__mcmp+0x2c>
 8007b30:	d205      	bcs.n	8007b3e <__mcmp+0x32>
 8007b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b36:	bd30      	pop	{r4, r5, pc}
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d3f3      	bcc.n	8007b24 <__mcmp+0x18>
 8007b3c:	e7fb      	b.n	8007b36 <__mcmp+0x2a>
 8007b3e:	2001      	movs	r0, #1
 8007b40:	e7f9      	b.n	8007b36 <__mcmp+0x2a>
	...

08007b44 <__mdiff>:
 8007b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b48:	4689      	mov	r9, r1
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4648      	mov	r0, r9
 8007b50:	4614      	mov	r4, r2
 8007b52:	f7ff ffdb 	bl	8007b0c <__mcmp>
 8007b56:	1e05      	subs	r5, r0, #0
 8007b58:	d112      	bne.n	8007b80 <__mdiff+0x3c>
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff fd63 	bl	8007628 <_Balloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <__mdiff+0x2e>
 8007b66:	4b3f      	ldr	r3, [pc, #252]	@ (8007c64 <__mdiff+0x120>)
 8007b68:	f240 2137 	movw	r1, #567	@ 0x237
 8007b6c:	483e      	ldr	r0, [pc, #248]	@ (8007c68 <__mdiff+0x124>)
 8007b6e:	f000 fb11 	bl	8008194 <__assert_func>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b78:	4610      	mov	r0, r2
 8007b7a:	b003      	add	sp, #12
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	bfbc      	itt	lt
 8007b82:	464b      	movlt	r3, r9
 8007b84:	46a1      	movlt	r9, r4
 8007b86:	4630      	mov	r0, r6
 8007b88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b8c:	bfba      	itte	lt
 8007b8e:	461c      	movlt	r4, r3
 8007b90:	2501      	movlt	r5, #1
 8007b92:	2500      	movge	r5, #0
 8007b94:	f7ff fd48 	bl	8007628 <_Balloc>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	b918      	cbnz	r0, 8007ba4 <__mdiff+0x60>
 8007b9c:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <__mdiff+0x120>)
 8007b9e:	f240 2145 	movw	r1, #581	@ 0x245
 8007ba2:	e7e3      	b.n	8007b6c <__mdiff+0x28>
 8007ba4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ba8:	6926      	ldr	r6, [r4, #16]
 8007baa:	60c5      	str	r5, [r0, #12]
 8007bac:	f109 0310 	add.w	r3, r9, #16
 8007bb0:	f109 0514 	add.w	r5, r9, #20
 8007bb4:	f104 0e14 	add.w	lr, r4, #20
 8007bb8:	f100 0b14 	add.w	fp, r0, #20
 8007bbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	46d9      	mov	r9, fp
 8007bc8:	f04f 0c00 	mov.w	ip, #0
 8007bcc:	9b01      	ldr	r3, [sp, #4]
 8007bce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007bd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	fa1f f38a 	uxth.w	r3, sl
 8007bdc:	4619      	mov	r1, r3
 8007bde:	b283      	uxth	r3, r0
 8007be0:	1acb      	subs	r3, r1, r3
 8007be2:	0c00      	lsrs	r0, r0, #16
 8007be4:	4463      	add	r3, ip
 8007be6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007bea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007bf4:	4576      	cmp	r6, lr
 8007bf6:	f849 3b04 	str.w	r3, [r9], #4
 8007bfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bfe:	d8e5      	bhi.n	8007bcc <__mdiff+0x88>
 8007c00:	1b33      	subs	r3, r6, r4
 8007c02:	3b15      	subs	r3, #21
 8007c04:	f023 0303 	bic.w	r3, r3, #3
 8007c08:	3415      	adds	r4, #21
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	42a6      	cmp	r6, r4
 8007c0e:	bf38      	it	cc
 8007c10:	2304      	movcc	r3, #4
 8007c12:	441d      	add	r5, r3
 8007c14:	445b      	add	r3, fp
 8007c16:	461e      	mov	r6, r3
 8007c18:	462c      	mov	r4, r5
 8007c1a:	4544      	cmp	r4, r8
 8007c1c:	d30e      	bcc.n	8007c3c <__mdiff+0xf8>
 8007c1e:	f108 0103 	add.w	r1, r8, #3
 8007c22:	1b49      	subs	r1, r1, r5
 8007c24:	f021 0103 	bic.w	r1, r1, #3
 8007c28:	3d03      	subs	r5, #3
 8007c2a:	45a8      	cmp	r8, r5
 8007c2c:	bf38      	it	cc
 8007c2e:	2100      	movcc	r1, #0
 8007c30:	440b      	add	r3, r1
 8007c32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c36:	b191      	cbz	r1, 8007c5e <__mdiff+0x11a>
 8007c38:	6117      	str	r7, [r2, #16]
 8007c3a:	e79d      	b.n	8007b78 <__mdiff+0x34>
 8007c3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c40:	46e6      	mov	lr, ip
 8007c42:	0c08      	lsrs	r0, r1, #16
 8007c44:	fa1c fc81 	uxtah	ip, ip, r1
 8007c48:	4471      	add	r1, lr
 8007c4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c4e:	b289      	uxth	r1, r1
 8007c50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c54:	f846 1b04 	str.w	r1, [r6], #4
 8007c58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c5c:	e7dd      	b.n	8007c1a <__mdiff+0xd6>
 8007c5e:	3f01      	subs	r7, #1
 8007c60:	e7e7      	b.n	8007c32 <__mdiff+0xee>
 8007c62:	bf00      	nop
 8007c64:	08008c68 	.word	0x08008c68
 8007c68:	08008c79 	.word	0x08008c79

08007c6c <__d2b>:
 8007c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	460f      	mov	r7, r1
 8007c72:	2101      	movs	r1, #1
 8007c74:	ec59 8b10 	vmov	r8, r9, d0
 8007c78:	4616      	mov	r6, r2
 8007c7a:	f7ff fcd5 	bl	8007628 <_Balloc>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	b930      	cbnz	r0, 8007c90 <__d2b+0x24>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b23      	ldr	r3, [pc, #140]	@ (8007d14 <__d2b+0xa8>)
 8007c86:	4824      	ldr	r0, [pc, #144]	@ (8007d18 <__d2b+0xac>)
 8007c88:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c8c:	f000 fa82 	bl	8008194 <__assert_func>
 8007c90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c98:	b10d      	cbz	r5, 8007c9e <__d2b+0x32>
 8007c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ca4:	d023      	beq.n	8007cee <__d2b+0x82>
 8007ca6:	4668      	mov	r0, sp
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	f7ff fd84 	bl	80077b6 <__lo0bits>
 8007cae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cb2:	b1d0      	cbz	r0, 8007cea <__d2b+0x7e>
 8007cb4:	f1c0 0320 	rsb	r3, r0, #32
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	40c2      	lsrs	r2, r0
 8007cc0:	6163      	str	r3, [r4, #20]
 8007cc2:	9201      	str	r2, [sp, #4]
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	61a3      	str	r3, [r4, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2201      	moveq	r2, #1
 8007cce:	2202      	movne	r2, #2
 8007cd0:	6122      	str	r2, [r4, #16]
 8007cd2:	b1a5      	cbz	r5, 8007cfe <__d2b+0x92>
 8007cd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007cd8:	4405      	add	r5, r0
 8007cda:	603d      	str	r5, [r7, #0]
 8007cdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ce0:	6030      	str	r0, [r6, #0]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	b003      	add	sp, #12
 8007ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cea:	6161      	str	r1, [r4, #20]
 8007cec:	e7ea      	b.n	8007cc4 <__d2b+0x58>
 8007cee:	a801      	add	r0, sp, #4
 8007cf0:	f7ff fd61 	bl	80077b6 <__lo0bits>
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	6163      	str	r3, [r4, #20]
 8007cf8:	3020      	adds	r0, #32
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	e7e8      	b.n	8007cd0 <__d2b+0x64>
 8007cfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d06:	6038      	str	r0, [r7, #0]
 8007d08:	6918      	ldr	r0, [r3, #16]
 8007d0a:	f7ff fd35 	bl	8007778 <__hi0bits>
 8007d0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d12:	e7e5      	b.n	8007ce0 <__d2b+0x74>
 8007d14:	08008c68 	.word	0x08008c68
 8007d18:	08008c79 	.word	0x08008c79

08007d1c <__ssputs_r>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	688e      	ldr	r6, [r1, #8]
 8007d22:	461f      	mov	r7, r3
 8007d24:	42be      	cmp	r6, r7
 8007d26:	680b      	ldr	r3, [r1, #0]
 8007d28:	4682      	mov	sl, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	4690      	mov	r8, r2
 8007d2e:	d82d      	bhi.n	8007d8c <__ssputs_r+0x70>
 8007d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d38:	d026      	beq.n	8007d88 <__ssputs_r+0x6c>
 8007d3a:	6965      	ldr	r5, [r4, #20]
 8007d3c:	6909      	ldr	r1, [r1, #16]
 8007d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d42:	eba3 0901 	sub.w	r9, r3, r1
 8007d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d4a:	1c7b      	adds	r3, r7, #1
 8007d4c:	444b      	add	r3, r9
 8007d4e:	106d      	asrs	r5, r5, #1
 8007d50:	429d      	cmp	r5, r3
 8007d52:	bf38      	it	cc
 8007d54:	461d      	movcc	r5, r3
 8007d56:	0553      	lsls	r3, r2, #21
 8007d58:	d527      	bpl.n	8007daa <__ssputs_r+0x8e>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7ff fbd8 	bl	8007510 <_malloc_r>
 8007d60:	4606      	mov	r6, r0
 8007d62:	b360      	cbz	r0, 8007dbe <__ssputs_r+0xa2>
 8007d64:	6921      	ldr	r1, [r4, #16]
 8007d66:	464a      	mov	r2, r9
 8007d68:	f000 fa06 	bl	8008178 <memcpy>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	6126      	str	r6, [r4, #16]
 8007d7a:	6165      	str	r5, [r4, #20]
 8007d7c:	444e      	add	r6, r9
 8007d7e:	eba5 0509 	sub.w	r5, r5, r9
 8007d82:	6026      	str	r6, [r4, #0]
 8007d84:	60a5      	str	r5, [r4, #8]
 8007d86:	463e      	mov	r6, r7
 8007d88:	42be      	cmp	r6, r7
 8007d8a:	d900      	bls.n	8007d8e <__ssputs_r+0x72>
 8007d8c:	463e      	mov	r6, r7
 8007d8e:	6820      	ldr	r0, [r4, #0]
 8007d90:	4632      	mov	r2, r6
 8007d92:	4641      	mov	r1, r8
 8007d94:	f000 f9c6 	bl	8008124 <memmove>
 8007d98:	68a3      	ldr	r3, [r4, #8]
 8007d9a:	1b9b      	subs	r3, r3, r6
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	4433      	add	r3, r6
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	2000      	movs	r0, #0
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	462a      	mov	r2, r5
 8007dac:	f000 fa36 	bl	800821c <_realloc_r>
 8007db0:	4606      	mov	r6, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1e0      	bne.n	8007d78 <__ssputs_r+0x5c>
 8007db6:	6921      	ldr	r1, [r4, #16]
 8007db8:	4650      	mov	r0, sl
 8007dba:	f7ff fb35 	bl	8007428 <_free_r>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	f8ca 3000 	str.w	r3, [sl]
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dd0:	e7e9      	b.n	8007da6 <__ssputs_r+0x8a>
	...

08007dd4 <_svfiprintf_r>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	4698      	mov	r8, r3
 8007dda:	898b      	ldrh	r3, [r1, #12]
 8007ddc:	061b      	lsls	r3, r3, #24
 8007dde:	b09d      	sub	sp, #116	@ 0x74
 8007de0:	4607      	mov	r7, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	d510      	bpl.n	8007e0a <_svfiprintf_r+0x36>
 8007de8:	690b      	ldr	r3, [r1, #16]
 8007dea:	b973      	cbnz	r3, 8007e0a <_svfiprintf_r+0x36>
 8007dec:	2140      	movs	r1, #64	@ 0x40
 8007dee:	f7ff fb8f 	bl	8007510 <_malloc_r>
 8007df2:	6028      	str	r0, [r5, #0]
 8007df4:	6128      	str	r0, [r5, #16]
 8007df6:	b930      	cbnz	r0, 8007e06 <_svfiprintf_r+0x32>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e00:	b01d      	add	sp, #116	@ 0x74
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	2340      	movs	r3, #64	@ 0x40
 8007e08:	616b      	str	r3, [r5, #20]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e0e:	2320      	movs	r3, #32
 8007e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e18:	2330      	movs	r3, #48	@ 0x30
 8007e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fb8 <_svfiprintf_r+0x1e4>
 8007e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e22:	f04f 0901 	mov.w	r9, #1
 8007e26:	4623      	mov	r3, r4
 8007e28:	469a      	mov	sl, r3
 8007e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2e:	b10a      	cbz	r2, 8007e34 <_svfiprintf_r+0x60>
 8007e30:	2a25      	cmp	r2, #37	@ 0x25
 8007e32:	d1f9      	bne.n	8007e28 <_svfiprintf_r+0x54>
 8007e34:	ebba 0b04 	subs.w	fp, sl, r4
 8007e38:	d00b      	beq.n	8007e52 <_svfiprintf_r+0x7e>
 8007e3a:	465b      	mov	r3, fp
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4638      	mov	r0, r7
 8007e42:	f7ff ff6b 	bl	8007d1c <__ssputs_r>
 8007e46:	3001      	adds	r0, #1
 8007e48:	f000 80a7 	beq.w	8007f9a <_svfiprintf_r+0x1c6>
 8007e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e4e:	445a      	add	r2, fp
 8007e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 809f 	beq.w	8007f9a <_svfiprintf_r+0x1c6>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e66:	f10a 0a01 	add.w	sl, sl, #1
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	9307      	str	r3, [sp, #28]
 8007e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e74:	4654      	mov	r4, sl
 8007e76:	2205      	movs	r2, #5
 8007e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7c:	484e      	ldr	r0, [pc, #312]	@ (8007fb8 <_svfiprintf_r+0x1e4>)
 8007e7e:	f7f8 f9cf 	bl	8000220 <memchr>
 8007e82:	9a04      	ldr	r2, [sp, #16]
 8007e84:	b9d8      	cbnz	r0, 8007ebe <_svfiprintf_r+0xea>
 8007e86:	06d0      	lsls	r0, r2, #27
 8007e88:	bf44      	itt	mi
 8007e8a:	2320      	movmi	r3, #32
 8007e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e90:	0711      	lsls	r1, r2, #28
 8007e92:	bf44      	itt	mi
 8007e94:	232b      	movmi	r3, #43	@ 0x2b
 8007e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea0:	d015      	beq.n	8007ece <_svfiprintf_r+0xfa>
 8007ea2:	9a07      	ldr	r2, [sp, #28]
 8007ea4:	4654      	mov	r4, sl
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4621      	mov	r1, r4
 8007eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb2:	3b30      	subs	r3, #48	@ 0x30
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d94b      	bls.n	8007f50 <_svfiprintf_r+0x17c>
 8007eb8:	b1b0      	cbz	r0, 8007ee8 <_svfiprintf_r+0x114>
 8007eba:	9207      	str	r2, [sp, #28]
 8007ebc:	e014      	b.n	8007ee8 <_svfiprintf_r+0x114>
 8007ebe:	eba0 0308 	sub.w	r3, r0, r8
 8007ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	46a2      	mov	sl, r4
 8007ecc:	e7d2      	b.n	8007e74 <_svfiprintf_r+0xa0>
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	9103      	str	r1, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfbb      	ittet	lt
 8007eda:	425b      	neglt	r3, r3
 8007edc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee0:	9307      	strge	r3, [sp, #28]
 8007ee2:	9307      	strlt	r3, [sp, #28]
 8007ee4:	bfb8      	it	lt
 8007ee6:	9204      	strlt	r2, [sp, #16]
 8007ee8:	7823      	ldrb	r3, [r4, #0]
 8007eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eec:	d10a      	bne.n	8007f04 <_svfiprintf_r+0x130>
 8007eee:	7863      	ldrb	r3, [r4, #1]
 8007ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef2:	d132      	bne.n	8007f5a <_svfiprintf_r+0x186>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	9203      	str	r2, [sp, #12]
 8007efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f00:	3402      	adds	r4, #2
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fc8 <_svfiprintf_r+0x1f4>
 8007f08:	7821      	ldrb	r1, [r4, #0]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	f7f8 f987 	bl	8000220 <memchr>
 8007f12:	b138      	cbz	r0, 8007f24 <_svfiprintf_r+0x150>
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	eba0 000a 	sub.w	r0, r0, sl
 8007f1a:	2240      	movs	r2, #64	@ 0x40
 8007f1c:	4082      	lsls	r2, r0
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	3401      	adds	r4, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f28:	4824      	ldr	r0, [pc, #144]	@ (8007fbc <_svfiprintf_r+0x1e8>)
 8007f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f2e:	2206      	movs	r2, #6
 8007f30:	f7f8 f976 	bl	8000220 <memchr>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d036      	beq.n	8007fa6 <_svfiprintf_r+0x1d2>
 8007f38:	4b21      	ldr	r3, [pc, #132]	@ (8007fc0 <_svfiprintf_r+0x1ec>)
 8007f3a:	bb1b      	cbnz	r3, 8007f84 <_svfiprintf_r+0x1b0>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	3308      	adds	r3, #8
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4a:	4433      	add	r3, r6
 8007f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4e:	e76a      	b.n	8007e26 <_svfiprintf_r+0x52>
 8007f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f54:	460c      	mov	r4, r1
 8007f56:	2001      	movs	r0, #1
 8007f58:	e7a8      	b.n	8007eac <_svfiprintf_r+0xd8>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	3401      	adds	r4, #1
 8007f5e:	9305      	str	r3, [sp, #20]
 8007f60:	4619      	mov	r1, r3
 8007f62:	f04f 0c0a 	mov.w	ip, #10
 8007f66:	4620      	mov	r0, r4
 8007f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f6c:	3a30      	subs	r2, #48	@ 0x30
 8007f6e:	2a09      	cmp	r2, #9
 8007f70:	d903      	bls.n	8007f7a <_svfiprintf_r+0x1a6>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0c6      	beq.n	8007f04 <_svfiprintf_r+0x130>
 8007f76:	9105      	str	r1, [sp, #20]
 8007f78:	e7c4      	b.n	8007f04 <_svfiprintf_r+0x130>
 8007f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f7e:	4604      	mov	r4, r0
 8007f80:	2301      	movs	r3, #1
 8007f82:	e7f0      	b.n	8007f66 <_svfiprintf_r+0x192>
 8007f84:	ab03      	add	r3, sp, #12
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	462a      	mov	r2, r5
 8007f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc4 <_svfiprintf_r+0x1f0>)
 8007f8c:	a904      	add	r1, sp, #16
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7fd fe94 	bl	8005cbc <_printf_float>
 8007f94:	1c42      	adds	r2, r0, #1
 8007f96:	4606      	mov	r6, r0
 8007f98:	d1d6      	bne.n	8007f48 <_svfiprintf_r+0x174>
 8007f9a:	89ab      	ldrh	r3, [r5, #12]
 8007f9c:	065b      	lsls	r3, r3, #25
 8007f9e:	f53f af2d 	bmi.w	8007dfc <_svfiprintf_r+0x28>
 8007fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fa4:	e72c      	b.n	8007e00 <_svfiprintf_r+0x2c>
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	462a      	mov	r2, r5
 8007fac:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <_svfiprintf_r+0x1f0>)
 8007fae:	a904      	add	r1, sp, #16
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7fe f91b 	bl	80061ec <_printf_i>
 8007fb6:	e7ed      	b.n	8007f94 <_svfiprintf_r+0x1c0>
 8007fb8:	08008cd2 	.word	0x08008cd2
 8007fbc:	08008cdc 	.word	0x08008cdc
 8007fc0:	08005cbd 	.word	0x08005cbd
 8007fc4:	08007d1d 	.word	0x08007d1d
 8007fc8:	08008cd8 	.word	0x08008cd8

08007fcc <__sflush_r>:
 8007fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd4:	0716      	lsls	r6, r2, #28
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	d454      	bmi.n	8008086 <__sflush_r+0xba>
 8007fdc:	684b      	ldr	r3, [r1, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dc02      	bgt.n	8007fe8 <__sflush_r+0x1c>
 8007fe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd48      	ble.n	800807a <__sflush_r+0xae>
 8007fe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d045      	beq.n	800807a <__sflush_r+0xae>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ff4:	682f      	ldr	r7, [r5, #0]
 8007ff6:	6a21      	ldr	r1, [r4, #32]
 8007ff8:	602b      	str	r3, [r5, #0]
 8007ffa:	d030      	beq.n	800805e <__sflush_r+0x92>
 8007ffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	0759      	lsls	r1, r3, #29
 8008002:	d505      	bpl.n	8008010 <__sflush_r+0x44>
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	1ad2      	subs	r2, r2, r3
 8008008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800800a:	b10b      	cbz	r3, 8008010 <__sflush_r+0x44>
 800800c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	2300      	movs	r3, #0
 8008012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008014:	6a21      	ldr	r1, [r4, #32]
 8008016:	4628      	mov	r0, r5
 8008018:	47b0      	blx	r6
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	d106      	bne.n	800802e <__sflush_r+0x62>
 8008020:	6829      	ldr	r1, [r5, #0]
 8008022:	291d      	cmp	r1, #29
 8008024:	d82b      	bhi.n	800807e <__sflush_r+0xb2>
 8008026:	4a2a      	ldr	r2, [pc, #168]	@ (80080d0 <__sflush_r+0x104>)
 8008028:	40ca      	lsrs	r2, r1
 800802a:	07d6      	lsls	r6, r2, #31
 800802c:	d527      	bpl.n	800807e <__sflush_r+0xb2>
 800802e:	2200      	movs	r2, #0
 8008030:	6062      	str	r2, [r4, #4]
 8008032:	04d9      	lsls	r1, r3, #19
 8008034:	6922      	ldr	r2, [r4, #16]
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	d504      	bpl.n	8008044 <__sflush_r+0x78>
 800803a:	1c42      	adds	r2, r0, #1
 800803c:	d101      	bne.n	8008042 <__sflush_r+0x76>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	b903      	cbnz	r3, 8008044 <__sflush_r+0x78>
 8008042:	6560      	str	r0, [r4, #84]	@ 0x54
 8008044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008046:	602f      	str	r7, [r5, #0]
 8008048:	b1b9      	cbz	r1, 800807a <__sflush_r+0xae>
 800804a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800804e:	4299      	cmp	r1, r3
 8008050:	d002      	beq.n	8008058 <__sflush_r+0x8c>
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff f9e8 	bl	8007428 <_free_r>
 8008058:	2300      	movs	r3, #0
 800805a:	6363      	str	r3, [r4, #52]	@ 0x34
 800805c:	e00d      	b.n	800807a <__sflush_r+0xae>
 800805e:	2301      	movs	r3, #1
 8008060:	4628      	mov	r0, r5
 8008062:	47b0      	blx	r6
 8008064:	4602      	mov	r2, r0
 8008066:	1c50      	adds	r0, r2, #1
 8008068:	d1c9      	bne.n	8007ffe <__sflush_r+0x32>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0c6      	beq.n	8007ffe <__sflush_r+0x32>
 8008070:	2b1d      	cmp	r3, #29
 8008072:	d001      	beq.n	8008078 <__sflush_r+0xac>
 8008074:	2b16      	cmp	r3, #22
 8008076:	d11e      	bne.n	80080b6 <__sflush_r+0xea>
 8008078:	602f      	str	r7, [r5, #0]
 800807a:	2000      	movs	r0, #0
 800807c:	e022      	b.n	80080c4 <__sflush_r+0xf8>
 800807e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008082:	b21b      	sxth	r3, r3
 8008084:	e01b      	b.n	80080be <__sflush_r+0xf2>
 8008086:	690f      	ldr	r7, [r1, #16]
 8008088:	2f00      	cmp	r7, #0
 800808a:	d0f6      	beq.n	800807a <__sflush_r+0xae>
 800808c:	0793      	lsls	r3, r2, #30
 800808e:	680e      	ldr	r6, [r1, #0]
 8008090:	bf08      	it	eq
 8008092:	694b      	ldreq	r3, [r1, #20]
 8008094:	600f      	str	r7, [r1, #0]
 8008096:	bf18      	it	ne
 8008098:	2300      	movne	r3, #0
 800809a:	eba6 0807 	sub.w	r8, r6, r7
 800809e:	608b      	str	r3, [r1, #8]
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	dde9      	ble.n	800807a <__sflush_r+0xae>
 80080a6:	6a21      	ldr	r1, [r4, #32]
 80080a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080aa:	4643      	mov	r3, r8
 80080ac:	463a      	mov	r2, r7
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b0      	blx	r6
 80080b2:	2800      	cmp	r0, #0
 80080b4:	dc08      	bgt.n	80080c8 <__sflush_r+0xfc>
 80080b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	4407      	add	r7, r0
 80080ca:	eba8 0800 	sub.w	r8, r8, r0
 80080ce:	e7e7      	b.n	80080a0 <__sflush_r+0xd4>
 80080d0:	20400001 	.word	0x20400001

080080d4 <_fflush_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b913      	cbnz	r3, 80080e4 <_fflush_r+0x10>
 80080de:	2500      	movs	r5, #0
 80080e0:	4628      	mov	r0, r5
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	b118      	cbz	r0, 80080ee <_fflush_r+0x1a>
 80080e6:	6a03      	ldr	r3, [r0, #32]
 80080e8:	b90b      	cbnz	r3, 80080ee <_fflush_r+0x1a>
 80080ea:	f7fe fa29 	bl	8006540 <__sinit>
 80080ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0f3      	beq.n	80080de <_fflush_r+0xa>
 80080f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080f8:	07d0      	lsls	r0, r2, #31
 80080fa:	d404      	bmi.n	8008106 <_fflush_r+0x32>
 80080fc:	0599      	lsls	r1, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_fflush_r+0x32>
 8008100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008102:	f7fe fb36 	bl	8006772 <__retarget_lock_acquire_recursive>
 8008106:	4628      	mov	r0, r5
 8008108:	4621      	mov	r1, r4
 800810a:	f7ff ff5f 	bl	8007fcc <__sflush_r>
 800810e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008110:	07da      	lsls	r2, r3, #31
 8008112:	4605      	mov	r5, r0
 8008114:	d4e4      	bmi.n	80080e0 <_fflush_r+0xc>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	059b      	lsls	r3, r3, #22
 800811a:	d4e1      	bmi.n	80080e0 <_fflush_r+0xc>
 800811c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800811e:	f7fe fb29 	bl	8006774 <__retarget_lock_release_recursive>
 8008122:	e7dd      	b.n	80080e0 <_fflush_r+0xc>

08008124 <memmove>:
 8008124:	4288      	cmp	r0, r1
 8008126:	b510      	push	{r4, lr}
 8008128:	eb01 0402 	add.w	r4, r1, r2
 800812c:	d902      	bls.n	8008134 <memmove+0x10>
 800812e:	4284      	cmp	r4, r0
 8008130:	4623      	mov	r3, r4
 8008132:	d807      	bhi.n	8008144 <memmove+0x20>
 8008134:	1e43      	subs	r3, r0, #1
 8008136:	42a1      	cmp	r1, r4
 8008138:	d008      	beq.n	800814c <memmove+0x28>
 800813a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008142:	e7f8      	b.n	8008136 <memmove+0x12>
 8008144:	4402      	add	r2, r0
 8008146:	4601      	mov	r1, r0
 8008148:	428a      	cmp	r2, r1
 800814a:	d100      	bne.n	800814e <memmove+0x2a>
 800814c:	bd10      	pop	{r4, pc}
 800814e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008156:	e7f7      	b.n	8008148 <memmove+0x24>

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	@ (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f9 fd44 	bl	8001bf0 <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2000052c 	.word	0x2000052c

08008178 <memcpy>:
 8008178:	440a      	add	r2, r1
 800817a:	4291      	cmp	r1, r2
 800817c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008180:	d100      	bne.n	8008184 <memcpy+0xc>
 8008182:	4770      	bx	lr
 8008184:	b510      	push	{r4, lr}
 8008186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800818a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800818e:	4291      	cmp	r1, r2
 8008190:	d1f9      	bne.n	8008186 <memcpy+0xe>
 8008192:	bd10      	pop	{r4, pc}

08008194 <__assert_func>:
 8008194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008196:	4614      	mov	r4, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <__assert_func+0x2c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4605      	mov	r5, r0
 80081a0:	68d8      	ldr	r0, [r3, #12]
 80081a2:	b14c      	cbz	r4, 80081b8 <__assert_func+0x24>
 80081a4:	4b07      	ldr	r3, [pc, #28]	@ (80081c4 <__assert_func+0x30>)
 80081a6:	9100      	str	r1, [sp, #0]
 80081a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ac:	4906      	ldr	r1, [pc, #24]	@ (80081c8 <__assert_func+0x34>)
 80081ae:	462b      	mov	r3, r5
 80081b0:	f000 f870 	bl	8008294 <fiprintf>
 80081b4:	f000 f880 	bl	80082b8 <abort>
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <__assert_func+0x38>)
 80081ba:	461c      	mov	r4, r3
 80081bc:	e7f3      	b.n	80081a6 <__assert_func+0x12>
 80081be:	bf00      	nop
 80081c0:	2000001c 	.word	0x2000001c
 80081c4:	08008ced 	.word	0x08008ced
 80081c8:	08008cfa 	.word	0x08008cfa
 80081cc:	08008d28 	.word	0x08008d28

080081d0 <_calloc_r>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	fba1 5402 	umull	r5, r4, r1, r2
 80081d6:	b934      	cbnz	r4, 80081e6 <_calloc_r+0x16>
 80081d8:	4629      	mov	r1, r5
 80081da:	f7ff f999 	bl	8007510 <_malloc_r>
 80081de:	4606      	mov	r6, r0
 80081e0:	b928      	cbnz	r0, 80081ee <_calloc_r+0x1e>
 80081e2:	4630      	mov	r0, r6
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	220c      	movs	r2, #12
 80081e8:	6002      	str	r2, [r0, #0]
 80081ea:	2600      	movs	r6, #0
 80081ec:	e7f9      	b.n	80081e2 <_calloc_r+0x12>
 80081ee:	462a      	mov	r2, r5
 80081f0:	4621      	mov	r1, r4
 80081f2:	f7fe fa40 	bl	8006676 <memset>
 80081f6:	e7f4      	b.n	80081e2 <_calloc_r+0x12>

080081f8 <__ascii_mbtowc>:
 80081f8:	b082      	sub	sp, #8
 80081fa:	b901      	cbnz	r1, 80081fe <__ascii_mbtowc+0x6>
 80081fc:	a901      	add	r1, sp, #4
 80081fe:	b142      	cbz	r2, 8008212 <__ascii_mbtowc+0x1a>
 8008200:	b14b      	cbz	r3, 8008216 <__ascii_mbtowc+0x1e>
 8008202:	7813      	ldrb	r3, [r2, #0]
 8008204:	600b      	str	r3, [r1, #0]
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	1e10      	subs	r0, r2, #0
 800820a:	bf18      	it	ne
 800820c:	2001      	movne	r0, #1
 800820e:	b002      	add	sp, #8
 8008210:	4770      	bx	lr
 8008212:	4610      	mov	r0, r2
 8008214:	e7fb      	b.n	800820e <__ascii_mbtowc+0x16>
 8008216:	f06f 0001 	mvn.w	r0, #1
 800821a:	e7f8      	b.n	800820e <__ascii_mbtowc+0x16>

0800821c <_realloc_r>:
 800821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	4607      	mov	r7, r0
 8008222:	4614      	mov	r4, r2
 8008224:	460d      	mov	r5, r1
 8008226:	b921      	cbnz	r1, 8008232 <_realloc_r+0x16>
 8008228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800822c:	4611      	mov	r1, r2
 800822e:	f7ff b96f 	b.w	8007510 <_malloc_r>
 8008232:	b92a      	cbnz	r2, 8008240 <_realloc_r+0x24>
 8008234:	f7ff f8f8 	bl	8007428 <_free_r>
 8008238:	4625      	mov	r5, r4
 800823a:	4628      	mov	r0, r5
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	f000 f841 	bl	80082c6 <_malloc_usable_size_r>
 8008244:	4284      	cmp	r4, r0
 8008246:	4606      	mov	r6, r0
 8008248:	d802      	bhi.n	8008250 <_realloc_r+0x34>
 800824a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800824e:	d8f4      	bhi.n	800823a <_realloc_r+0x1e>
 8008250:	4621      	mov	r1, r4
 8008252:	4638      	mov	r0, r7
 8008254:	f7ff f95c 	bl	8007510 <_malloc_r>
 8008258:	4680      	mov	r8, r0
 800825a:	b908      	cbnz	r0, 8008260 <_realloc_r+0x44>
 800825c:	4645      	mov	r5, r8
 800825e:	e7ec      	b.n	800823a <_realloc_r+0x1e>
 8008260:	42b4      	cmp	r4, r6
 8008262:	4622      	mov	r2, r4
 8008264:	4629      	mov	r1, r5
 8008266:	bf28      	it	cs
 8008268:	4632      	movcs	r2, r6
 800826a:	f7ff ff85 	bl	8008178 <memcpy>
 800826e:	4629      	mov	r1, r5
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff f8d9 	bl	8007428 <_free_r>
 8008276:	e7f1      	b.n	800825c <_realloc_r+0x40>

08008278 <__ascii_wctomb>:
 8008278:	4603      	mov	r3, r0
 800827a:	4608      	mov	r0, r1
 800827c:	b141      	cbz	r1, 8008290 <__ascii_wctomb+0x18>
 800827e:	2aff      	cmp	r2, #255	@ 0xff
 8008280:	d904      	bls.n	800828c <__ascii_wctomb+0x14>
 8008282:	228a      	movs	r2, #138	@ 0x8a
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800828a:	4770      	bx	lr
 800828c:	700a      	strb	r2, [r1, #0]
 800828e:	2001      	movs	r0, #1
 8008290:	4770      	bx	lr
	...

08008294 <fiprintf>:
 8008294:	b40e      	push	{r1, r2, r3}
 8008296:	b503      	push	{r0, r1, lr}
 8008298:	4601      	mov	r1, r0
 800829a:	ab03      	add	r3, sp, #12
 800829c:	4805      	ldr	r0, [pc, #20]	@ (80082b4 <fiprintf+0x20>)
 800829e:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a2:	6800      	ldr	r0, [r0, #0]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f000 f83f 	bl	8008328 <_vfiprintf_r>
 80082aa:	b002      	add	sp, #8
 80082ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b0:	b003      	add	sp, #12
 80082b2:	4770      	bx	lr
 80082b4:	2000001c 	.word	0x2000001c

080082b8 <abort>:
 80082b8:	b508      	push	{r3, lr}
 80082ba:	2006      	movs	r0, #6
 80082bc:	f000 fa08 	bl	80086d0 <raise>
 80082c0:	2001      	movs	r0, #1
 80082c2:	f7f9 fc1d 	bl	8001b00 <_exit>

080082c6 <_malloc_usable_size_r>:
 80082c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ca:	1f18      	subs	r0, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfbc      	itt	lt
 80082d0:	580b      	ldrlt	r3, [r1, r0]
 80082d2:	18c0      	addlt	r0, r0, r3
 80082d4:	4770      	bx	lr

080082d6 <__sfputc_r>:
 80082d6:	6893      	ldr	r3, [r2, #8]
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	b410      	push	{r4}
 80082de:	6093      	str	r3, [r2, #8]
 80082e0:	da08      	bge.n	80082f4 <__sfputc_r+0x1e>
 80082e2:	6994      	ldr	r4, [r2, #24]
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	db01      	blt.n	80082ec <__sfputc_r+0x16>
 80082e8:	290a      	cmp	r1, #10
 80082ea:	d103      	bne.n	80082f4 <__sfputc_r+0x1e>
 80082ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f0:	f000 b932 	b.w	8008558 <__swbuf_r>
 80082f4:	6813      	ldr	r3, [r2, #0]
 80082f6:	1c58      	adds	r0, r3, #1
 80082f8:	6010      	str	r0, [r2, #0]
 80082fa:	7019      	strb	r1, [r3, #0]
 80082fc:	4608      	mov	r0, r1
 80082fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008302:	4770      	bx	lr

08008304 <__sfputs_r>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	4606      	mov	r6, r0
 8008308:	460f      	mov	r7, r1
 800830a:	4614      	mov	r4, r2
 800830c:	18d5      	adds	r5, r2, r3
 800830e:	42ac      	cmp	r4, r5
 8008310:	d101      	bne.n	8008316 <__sfputs_r+0x12>
 8008312:	2000      	movs	r0, #0
 8008314:	e007      	b.n	8008326 <__sfputs_r+0x22>
 8008316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831a:	463a      	mov	r2, r7
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff ffda 	bl	80082d6 <__sfputc_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d1f3      	bne.n	800830e <__sfputs_r+0xa>
 8008326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008328 <_vfiprintf_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	460d      	mov	r5, r1
 800832e:	b09d      	sub	sp, #116	@ 0x74
 8008330:	4614      	mov	r4, r2
 8008332:	4698      	mov	r8, r3
 8008334:	4606      	mov	r6, r0
 8008336:	b118      	cbz	r0, 8008340 <_vfiprintf_r+0x18>
 8008338:	6a03      	ldr	r3, [r0, #32]
 800833a:	b90b      	cbnz	r3, 8008340 <_vfiprintf_r+0x18>
 800833c:	f7fe f900 	bl	8006540 <__sinit>
 8008340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008342:	07d9      	lsls	r1, r3, #31
 8008344:	d405      	bmi.n	8008352 <_vfiprintf_r+0x2a>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	059a      	lsls	r2, r3, #22
 800834a:	d402      	bmi.n	8008352 <_vfiprintf_r+0x2a>
 800834c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800834e:	f7fe fa10 	bl	8006772 <__retarget_lock_acquire_recursive>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	071b      	lsls	r3, r3, #28
 8008356:	d501      	bpl.n	800835c <_vfiprintf_r+0x34>
 8008358:	692b      	ldr	r3, [r5, #16]
 800835a:	b99b      	cbnz	r3, 8008384 <_vfiprintf_r+0x5c>
 800835c:	4629      	mov	r1, r5
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f938 	bl	80085d4 <__swsetup_r>
 8008364:	b170      	cbz	r0, 8008384 <_vfiprintf_r+0x5c>
 8008366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008368:	07dc      	lsls	r4, r3, #31
 800836a:	d504      	bpl.n	8008376 <_vfiprintf_r+0x4e>
 800836c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008370:	b01d      	add	sp, #116	@ 0x74
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d4f7      	bmi.n	800836c <_vfiprintf_r+0x44>
 800837c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800837e:	f7fe f9f9 	bl	8006774 <__retarget_lock_release_recursive>
 8008382:	e7f3      	b.n	800836c <_vfiprintf_r+0x44>
 8008384:	2300      	movs	r3, #0
 8008386:	9309      	str	r3, [sp, #36]	@ 0x24
 8008388:	2320      	movs	r3, #32
 800838a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800838e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008392:	2330      	movs	r3, #48	@ 0x30
 8008394:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008544 <_vfiprintf_r+0x21c>
 8008398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800839c:	f04f 0901 	mov.w	r9, #1
 80083a0:	4623      	mov	r3, r4
 80083a2:	469a      	mov	sl, r3
 80083a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a8:	b10a      	cbz	r2, 80083ae <_vfiprintf_r+0x86>
 80083aa:	2a25      	cmp	r2, #37	@ 0x25
 80083ac:	d1f9      	bne.n	80083a2 <_vfiprintf_r+0x7a>
 80083ae:	ebba 0b04 	subs.w	fp, sl, r4
 80083b2:	d00b      	beq.n	80083cc <_vfiprintf_r+0xa4>
 80083b4:	465b      	mov	r3, fp
 80083b6:	4622      	mov	r2, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7ff ffa2 	bl	8008304 <__sfputs_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	f000 80a7 	beq.w	8008514 <_vfiprintf_r+0x1ec>
 80083c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c8:	445a      	add	r2, fp
 80083ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80083cc:	f89a 3000 	ldrb.w	r3, [sl]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 809f 	beq.w	8008514 <_vfiprintf_r+0x1ec>
 80083d6:	2300      	movs	r3, #0
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e0:	f10a 0a01 	add.w	sl, sl, #1
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80083ee:	4654      	mov	r4, sl
 80083f0:	2205      	movs	r2, #5
 80083f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f6:	4853      	ldr	r0, [pc, #332]	@ (8008544 <_vfiprintf_r+0x21c>)
 80083f8:	f7f7 ff12 	bl	8000220 <memchr>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	b9d8      	cbnz	r0, 8008438 <_vfiprintf_r+0x110>
 8008400:	06d1      	lsls	r1, r2, #27
 8008402:	bf44      	itt	mi
 8008404:	2320      	movmi	r3, #32
 8008406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800840a:	0713      	lsls	r3, r2, #28
 800840c:	bf44      	itt	mi
 800840e:	232b      	movmi	r3, #43	@ 0x2b
 8008410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008414:	f89a 3000 	ldrb.w	r3, [sl]
 8008418:	2b2a      	cmp	r3, #42	@ 0x2a
 800841a:	d015      	beq.n	8008448 <_vfiprintf_r+0x120>
 800841c:	9a07      	ldr	r2, [sp, #28]
 800841e:	4654      	mov	r4, sl
 8008420:	2000      	movs	r0, #0
 8008422:	f04f 0c0a 	mov.w	ip, #10
 8008426:	4621      	mov	r1, r4
 8008428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800842c:	3b30      	subs	r3, #48	@ 0x30
 800842e:	2b09      	cmp	r3, #9
 8008430:	d94b      	bls.n	80084ca <_vfiprintf_r+0x1a2>
 8008432:	b1b0      	cbz	r0, 8008462 <_vfiprintf_r+0x13a>
 8008434:	9207      	str	r2, [sp, #28]
 8008436:	e014      	b.n	8008462 <_vfiprintf_r+0x13a>
 8008438:	eba0 0308 	sub.w	r3, r0, r8
 800843c:	fa09 f303 	lsl.w	r3, r9, r3
 8008440:	4313      	orrs	r3, r2
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	46a2      	mov	sl, r4
 8008446:	e7d2      	b.n	80083ee <_vfiprintf_r+0xc6>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	1d19      	adds	r1, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	9103      	str	r1, [sp, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfbb      	ittet	lt
 8008454:	425b      	neglt	r3, r3
 8008456:	f042 0202 	orrlt.w	r2, r2, #2
 800845a:	9307      	strge	r3, [sp, #28]
 800845c:	9307      	strlt	r3, [sp, #28]
 800845e:	bfb8      	it	lt
 8008460:	9204      	strlt	r2, [sp, #16]
 8008462:	7823      	ldrb	r3, [r4, #0]
 8008464:	2b2e      	cmp	r3, #46	@ 0x2e
 8008466:	d10a      	bne.n	800847e <_vfiprintf_r+0x156>
 8008468:	7863      	ldrb	r3, [r4, #1]
 800846a:	2b2a      	cmp	r3, #42	@ 0x2a
 800846c:	d132      	bne.n	80084d4 <_vfiprintf_r+0x1ac>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	9203      	str	r2, [sp, #12]
 8008476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800847a:	3402      	adds	r4, #2
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008554 <_vfiprintf_r+0x22c>
 8008482:	7821      	ldrb	r1, [r4, #0]
 8008484:	2203      	movs	r2, #3
 8008486:	4650      	mov	r0, sl
 8008488:	f7f7 feca 	bl	8000220 <memchr>
 800848c:	b138      	cbz	r0, 800849e <_vfiprintf_r+0x176>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	eba0 000a 	sub.w	r0, r0, sl
 8008494:	2240      	movs	r2, #64	@ 0x40
 8008496:	4082      	lsls	r2, r0
 8008498:	4313      	orrs	r3, r2
 800849a:	3401      	adds	r4, #1
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a2:	4829      	ldr	r0, [pc, #164]	@ (8008548 <_vfiprintf_r+0x220>)
 80084a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084a8:	2206      	movs	r2, #6
 80084aa:	f7f7 feb9 	bl	8000220 <memchr>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d03f      	beq.n	8008532 <_vfiprintf_r+0x20a>
 80084b2:	4b26      	ldr	r3, [pc, #152]	@ (800854c <_vfiprintf_r+0x224>)
 80084b4:	bb1b      	cbnz	r3, 80084fe <_vfiprintf_r+0x1d6>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	3307      	adds	r3, #7
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	3308      	adds	r3, #8
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c4:	443b      	add	r3, r7
 80084c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c8:	e76a      	b.n	80083a0 <_vfiprintf_r+0x78>
 80084ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ce:	460c      	mov	r4, r1
 80084d0:	2001      	movs	r0, #1
 80084d2:	e7a8      	b.n	8008426 <_vfiprintf_r+0xfe>
 80084d4:	2300      	movs	r3, #0
 80084d6:	3401      	adds	r4, #1
 80084d8:	9305      	str	r3, [sp, #20]
 80084da:	4619      	mov	r1, r3
 80084dc:	f04f 0c0a 	mov.w	ip, #10
 80084e0:	4620      	mov	r0, r4
 80084e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e6:	3a30      	subs	r2, #48	@ 0x30
 80084e8:	2a09      	cmp	r2, #9
 80084ea:	d903      	bls.n	80084f4 <_vfiprintf_r+0x1cc>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0c6      	beq.n	800847e <_vfiprintf_r+0x156>
 80084f0:	9105      	str	r1, [sp, #20]
 80084f2:	e7c4      	b.n	800847e <_vfiprintf_r+0x156>
 80084f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f8:	4604      	mov	r4, r0
 80084fa:	2301      	movs	r3, #1
 80084fc:	e7f0      	b.n	80084e0 <_vfiprintf_r+0x1b8>
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <_vfiprintf_r+0x228>)
 8008506:	a904      	add	r1, sp, #16
 8008508:	4630      	mov	r0, r6
 800850a:	f7fd fbd7 	bl	8005cbc <_printf_float>
 800850e:	4607      	mov	r7, r0
 8008510:	1c78      	adds	r0, r7, #1
 8008512:	d1d6      	bne.n	80084c2 <_vfiprintf_r+0x19a>
 8008514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	d405      	bmi.n	8008526 <_vfiprintf_r+0x1fe>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d402      	bmi.n	8008526 <_vfiprintf_r+0x1fe>
 8008520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008522:	f7fe f927 	bl	8006774 <__retarget_lock_release_recursive>
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	065b      	lsls	r3, r3, #25
 800852a:	f53f af1f 	bmi.w	800836c <_vfiprintf_r+0x44>
 800852e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008530:	e71e      	b.n	8008370 <_vfiprintf_r+0x48>
 8008532:	ab03      	add	r3, sp, #12
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	462a      	mov	r2, r5
 8008538:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <_vfiprintf_r+0x228>)
 800853a:	a904      	add	r1, sp, #16
 800853c:	4630      	mov	r0, r6
 800853e:	f7fd fe55 	bl	80061ec <_printf_i>
 8008542:	e7e4      	b.n	800850e <_vfiprintf_r+0x1e6>
 8008544:	08008cd2 	.word	0x08008cd2
 8008548:	08008cdc 	.word	0x08008cdc
 800854c:	08005cbd 	.word	0x08005cbd
 8008550:	08008305 	.word	0x08008305
 8008554:	08008cd8 	.word	0x08008cd8

08008558 <__swbuf_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	460e      	mov	r6, r1
 800855c:	4614      	mov	r4, r2
 800855e:	4605      	mov	r5, r0
 8008560:	b118      	cbz	r0, 800856a <__swbuf_r+0x12>
 8008562:	6a03      	ldr	r3, [r0, #32]
 8008564:	b90b      	cbnz	r3, 800856a <__swbuf_r+0x12>
 8008566:	f7fd ffeb 	bl	8006540 <__sinit>
 800856a:	69a3      	ldr	r3, [r4, #24]
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	d501      	bpl.n	8008578 <__swbuf_r+0x20>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	b943      	cbnz	r3, 800858a <__swbuf_r+0x32>
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f82a 	bl	80085d4 <__swsetup_r>
 8008580:	b118      	cbz	r0, 800858a <__swbuf_r+0x32>
 8008582:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008586:	4638      	mov	r0, r7
 8008588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	6922      	ldr	r2, [r4, #16]
 800858e:	1a98      	subs	r0, r3, r2
 8008590:	6963      	ldr	r3, [r4, #20]
 8008592:	b2f6      	uxtb	r6, r6
 8008594:	4283      	cmp	r3, r0
 8008596:	4637      	mov	r7, r6
 8008598:	dc05      	bgt.n	80085a6 <__swbuf_r+0x4e>
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f7ff fd99 	bl	80080d4 <_fflush_r>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1ed      	bne.n	8008582 <__swbuf_r+0x2a>
 80085a6:	68a3      	ldr	r3, [r4, #8]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	60a3      	str	r3, [r4, #8]
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	6022      	str	r2, [r4, #0]
 80085b2:	701e      	strb	r6, [r3, #0]
 80085b4:	6962      	ldr	r2, [r4, #20]
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d004      	beq.n	80085c6 <__swbuf_r+0x6e>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	07db      	lsls	r3, r3, #31
 80085c0:	d5e1      	bpl.n	8008586 <__swbuf_r+0x2e>
 80085c2:	2e0a      	cmp	r6, #10
 80085c4:	d1df      	bne.n	8008586 <__swbuf_r+0x2e>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7ff fd83 	bl	80080d4 <_fflush_r>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d0d9      	beq.n	8008586 <__swbuf_r+0x2e>
 80085d2:	e7d6      	b.n	8008582 <__swbuf_r+0x2a>

080085d4 <__swsetup_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4b29      	ldr	r3, [pc, #164]	@ (800867c <__swsetup_r+0xa8>)
 80085d8:	4605      	mov	r5, r0
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	460c      	mov	r4, r1
 80085de:	b118      	cbz	r0, 80085e8 <__swsetup_r+0x14>
 80085e0:	6a03      	ldr	r3, [r0, #32]
 80085e2:	b90b      	cbnz	r3, 80085e8 <__swsetup_r+0x14>
 80085e4:	f7fd ffac 	bl	8006540 <__sinit>
 80085e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ec:	0719      	lsls	r1, r3, #28
 80085ee:	d422      	bmi.n	8008636 <__swsetup_r+0x62>
 80085f0:	06da      	lsls	r2, r3, #27
 80085f2:	d407      	bmi.n	8008604 <__swsetup_r+0x30>
 80085f4:	2209      	movs	r2, #9
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008602:	e033      	b.n	800866c <__swsetup_r+0x98>
 8008604:	0758      	lsls	r0, r3, #29
 8008606:	d512      	bpl.n	800862e <__swsetup_r+0x5a>
 8008608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800860a:	b141      	cbz	r1, 800861e <__swsetup_r+0x4a>
 800860c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008610:	4299      	cmp	r1, r3
 8008612:	d002      	beq.n	800861a <__swsetup_r+0x46>
 8008614:	4628      	mov	r0, r5
 8008616:	f7fe ff07 	bl	8007428 <_free_r>
 800861a:	2300      	movs	r3, #0
 800861c:	6363      	str	r3, [r4, #52]	@ 0x34
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	2300      	movs	r3, #0
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f043 0308 	orr.w	r3, r3, #8
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	b94b      	cbnz	r3, 800864e <__swsetup_r+0x7a>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d003      	beq.n	800864e <__swsetup_r+0x7a>
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f000 f883 	bl	8008754 <__smakebuf_r>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	f013 0201 	ands.w	r2, r3, #1
 8008656:	d00a      	beq.n	800866e <__swsetup_r+0x9a>
 8008658:	2200      	movs	r2, #0
 800865a:	60a2      	str	r2, [r4, #8]
 800865c:	6962      	ldr	r2, [r4, #20]
 800865e:	4252      	negs	r2, r2
 8008660:	61a2      	str	r2, [r4, #24]
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	b942      	cbnz	r2, 8008678 <__swsetup_r+0xa4>
 8008666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800866a:	d1c5      	bne.n	80085f8 <__swsetup_r+0x24>
 800866c:	bd38      	pop	{r3, r4, r5, pc}
 800866e:	0799      	lsls	r1, r3, #30
 8008670:	bf58      	it	pl
 8008672:	6962      	ldrpl	r2, [r4, #20]
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	e7f4      	b.n	8008662 <__swsetup_r+0x8e>
 8008678:	2000      	movs	r0, #0
 800867a:	e7f7      	b.n	800866c <__swsetup_r+0x98>
 800867c:	2000001c 	.word	0x2000001c

08008680 <_raise_r>:
 8008680:	291f      	cmp	r1, #31
 8008682:	b538      	push	{r3, r4, r5, lr}
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	d904      	bls.n	8008694 <_raise_r+0x14>
 800868a:	2316      	movs	r3, #22
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008696:	b112      	cbz	r2, 800869e <_raise_r+0x1e>
 8008698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800869c:	b94b      	cbnz	r3, 80086b2 <_raise_r+0x32>
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f830 	bl	8008704 <_getpid_r>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4601      	mov	r1, r0
 80086a8:	4628      	mov	r0, r5
 80086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ae:	f000 b817 	b.w	80086e0 <_kill_r>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d00a      	beq.n	80086cc <_raise_r+0x4c>
 80086b6:	1c59      	adds	r1, r3, #1
 80086b8:	d103      	bne.n	80086c2 <_raise_r+0x42>
 80086ba:	2316      	movs	r3, #22
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	2001      	movs	r0, #1
 80086c0:	e7e7      	b.n	8008692 <_raise_r+0x12>
 80086c2:	2100      	movs	r1, #0
 80086c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086c8:	4620      	mov	r0, r4
 80086ca:	4798      	blx	r3
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7e0      	b.n	8008692 <_raise_r+0x12>

080086d0 <raise>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <raise+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bfd3 	b.w	8008680 <_raise_r>
 80086da:	bf00      	nop
 80086dc:	2000001c 	.word	0x2000001c

080086e0 <_kill_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d07      	ldr	r5, [pc, #28]	@ (8008700 <_kill_r+0x20>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	f7f9 f9f7 	bl	8001ae0 <_kill>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d102      	bne.n	80086fc <_kill_r+0x1c>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	b103      	cbz	r3, 80086fc <_kill_r+0x1c>
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	2000052c 	.word	0x2000052c

08008704 <_getpid_r>:
 8008704:	f7f9 b9e4 	b.w	8001ad0 <_getpid>

08008708 <__swhatbuf_r>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	2900      	cmp	r1, #0
 8008712:	b096      	sub	sp, #88	@ 0x58
 8008714:	4615      	mov	r5, r2
 8008716:	461e      	mov	r6, r3
 8008718:	da0d      	bge.n	8008736 <__swhatbuf_r+0x2e>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008720:	f04f 0100 	mov.w	r1, #0
 8008724:	bf14      	ite	ne
 8008726:	2340      	movne	r3, #64	@ 0x40
 8008728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800872c:	2000      	movs	r0, #0
 800872e:	6031      	str	r1, [r6, #0]
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	b016      	add	sp, #88	@ 0x58
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	466a      	mov	r2, sp
 8008738:	f000 f848 	bl	80087cc <_fstat_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	dbec      	blt.n	800871a <__swhatbuf_r+0x12>
 8008740:	9901      	ldr	r1, [sp, #4]
 8008742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800874a:	4259      	negs	r1, r3
 800874c:	4159      	adcs	r1, r3
 800874e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008752:	e7eb      	b.n	800872c <__swhatbuf_r+0x24>

08008754 <__smakebuf_r>:
 8008754:	898b      	ldrh	r3, [r1, #12]
 8008756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008758:	079d      	lsls	r5, r3, #30
 800875a:	4606      	mov	r6, r0
 800875c:	460c      	mov	r4, r1
 800875e:	d507      	bpl.n	8008770 <__smakebuf_r+0x1c>
 8008760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	6123      	str	r3, [r4, #16]
 8008768:	2301      	movs	r3, #1
 800876a:	6163      	str	r3, [r4, #20]
 800876c:	b003      	add	sp, #12
 800876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008770:	ab01      	add	r3, sp, #4
 8008772:	466a      	mov	r2, sp
 8008774:	f7ff ffc8 	bl	8008708 <__swhatbuf_r>
 8008778:	9f00      	ldr	r7, [sp, #0]
 800877a:	4605      	mov	r5, r0
 800877c:	4639      	mov	r1, r7
 800877e:	4630      	mov	r0, r6
 8008780:	f7fe fec6 	bl	8007510 <_malloc_r>
 8008784:	b948      	cbnz	r0, 800879a <__smakebuf_r+0x46>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	059a      	lsls	r2, r3, #22
 800878c:	d4ee      	bmi.n	800876c <__smakebuf_r+0x18>
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	f043 0302 	orr.w	r3, r3, #2
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	e7e2      	b.n	8008760 <__smakebuf_r+0xc>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	6020      	str	r0, [r4, #0]
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087aa:	b15b      	cbz	r3, 80087c4 <__smakebuf_r+0x70>
 80087ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f81d 	bl	80087f0 <_isatty_r>
 80087b6:	b128      	cbz	r0, 80087c4 <__smakebuf_r+0x70>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	431d      	orrs	r5, r3
 80087c8:	81a5      	strh	r5, [r4, #12]
 80087ca:	e7cf      	b.n	800876c <__smakebuf_r+0x18>

080087cc <_fstat_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	@ (80087ec <_fstat_r+0x20>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	f7f9 f9e1 	bl	8001ba0 <_fstat>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d102      	bne.n	80087e8 <_fstat_r+0x1c>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	b103      	cbz	r3, 80087e8 <_fstat_r+0x1c>
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	bd38      	pop	{r3, r4, r5, pc}
 80087ea:	bf00      	nop
 80087ec:	2000052c 	.word	0x2000052c

080087f0 <_isatty_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	@ (800880c <_isatty_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7f9 f9e0 	bl	8001bc0 <_isatty>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_isatty_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_isatty_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	2000052c 	.word	0x2000052c

08008810 <atan2f>:
 8008810:	f000 b822 	b.w	8008858 <__ieee754_atan2f>

08008814 <sqrtf>:
 8008814:	b508      	push	{r3, lr}
 8008816:	ed2d 8b02 	vpush	{d8}
 800881a:	eeb0 8a40 	vmov.f32	s16, s0
 800881e:	f000 f817 	bl	8008850 <__ieee754_sqrtf>
 8008822:	eeb4 8a48 	vcmp.f32	s16, s16
 8008826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882a:	d60c      	bvs.n	8008846 <sqrtf+0x32>
 800882c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800884c <sqrtf+0x38>
 8008830:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	d505      	bpl.n	8008846 <sqrtf+0x32>
 800883a:	f7fd ff6f 	bl	800671c <__errno>
 800883e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008842:	2321      	movs	r3, #33	@ 0x21
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	ecbd 8b02 	vpop	{d8}
 800884a:	bd08      	pop	{r3, pc}
 800884c:	00000000 	.word	0x00000000

08008850 <__ieee754_sqrtf>:
 8008850:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008854:	4770      	bx	lr
	...

08008858 <__ieee754_atan2f>:
 8008858:	ee10 2a90 	vmov	r2, s1
 800885c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008860:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008864:	b510      	push	{r4, lr}
 8008866:	eef0 7a40 	vmov.f32	s15, s0
 800886a:	d806      	bhi.n	800887a <__ieee754_atan2f+0x22>
 800886c:	ee10 0a10 	vmov	r0, s0
 8008870:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008874:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008878:	d904      	bls.n	8008884 <__ieee754_atan2f+0x2c>
 800887a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800887e:	eeb0 0a67 	vmov.f32	s0, s15
 8008882:	bd10      	pop	{r4, pc}
 8008884:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008888:	d103      	bne.n	8008892 <__ieee754_atan2f+0x3a>
 800888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888e:	f000 b883 	b.w	8008998 <atanf>
 8008892:	1794      	asrs	r4, r2, #30
 8008894:	f004 0402 	and.w	r4, r4, #2
 8008898:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800889c:	b943      	cbnz	r3, 80088b0 <__ieee754_atan2f+0x58>
 800889e:	2c02      	cmp	r4, #2
 80088a0:	d05e      	beq.n	8008960 <__ieee754_atan2f+0x108>
 80088a2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008974 <__ieee754_atan2f+0x11c>
 80088a6:	2c03      	cmp	r4, #3
 80088a8:	bf08      	it	eq
 80088aa:	eef0 7a47 	vmoveq.f32	s15, s14
 80088ae:	e7e6      	b.n	800887e <__ieee754_atan2f+0x26>
 80088b0:	b941      	cbnz	r1, 80088c4 <__ieee754_atan2f+0x6c>
 80088b2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8008978 <__ieee754_atan2f+0x120>
 80088b6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800897c <__ieee754_atan2f+0x124>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	bfa8      	it	ge
 80088be:	eef0 7a47 	vmovge.f32	s15, s14
 80088c2:	e7dc      	b.n	800887e <__ieee754_atan2f+0x26>
 80088c4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80088c8:	d110      	bne.n	80088ec <__ieee754_atan2f+0x94>
 80088ca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088ce:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80088d2:	d107      	bne.n	80088e4 <__ieee754_atan2f+0x8c>
 80088d4:	2c02      	cmp	r4, #2
 80088d6:	d846      	bhi.n	8008966 <__ieee754_atan2f+0x10e>
 80088d8:	4b29      	ldr	r3, [pc, #164]	@ (8008980 <__ieee754_atan2f+0x128>)
 80088da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80088de:	edd3 7a00 	vldr	s15, [r3]
 80088e2:	e7cc      	b.n	800887e <__ieee754_atan2f+0x26>
 80088e4:	2c02      	cmp	r4, #2
 80088e6:	d841      	bhi.n	800896c <__ieee754_atan2f+0x114>
 80088e8:	4b26      	ldr	r3, [pc, #152]	@ (8008984 <__ieee754_atan2f+0x12c>)
 80088ea:	e7f6      	b.n	80088da <__ieee754_atan2f+0x82>
 80088ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088f0:	d0df      	beq.n	80088b2 <__ieee754_atan2f+0x5a>
 80088f2:	1a5b      	subs	r3, r3, r1
 80088f4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80088f8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80088fc:	da1a      	bge.n	8008934 <__ieee754_atan2f+0xdc>
 80088fe:	2a00      	cmp	r2, #0
 8008900:	da01      	bge.n	8008906 <__ieee754_atan2f+0xae>
 8008902:	313c      	adds	r1, #60	@ 0x3c
 8008904:	db19      	blt.n	800893a <__ieee754_atan2f+0xe2>
 8008906:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800890a:	f000 f919 	bl	8008b40 <fabsf>
 800890e:	f000 f843 	bl	8008998 <atanf>
 8008912:	eef0 7a40 	vmov.f32	s15, s0
 8008916:	2c01      	cmp	r4, #1
 8008918:	d012      	beq.n	8008940 <__ieee754_atan2f+0xe8>
 800891a:	2c02      	cmp	r4, #2
 800891c:	d017      	beq.n	800894e <__ieee754_atan2f+0xf6>
 800891e:	2c00      	cmp	r4, #0
 8008920:	d0ad      	beq.n	800887e <__ieee754_atan2f+0x26>
 8008922:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008988 <__ieee754_atan2f+0x130>
 8008926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800892a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800898c <__ieee754_atan2f+0x134>
 800892e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008932:	e7a4      	b.n	800887e <__ieee754_atan2f+0x26>
 8008934:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800897c <__ieee754_atan2f+0x124>
 8008938:	e7ed      	b.n	8008916 <__ieee754_atan2f+0xbe>
 800893a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008990 <__ieee754_atan2f+0x138>
 800893e:	e7ea      	b.n	8008916 <__ieee754_atan2f+0xbe>
 8008940:	ee17 3a90 	vmov	r3, s15
 8008944:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	e797      	b.n	800887e <__ieee754_atan2f+0x26>
 800894e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8008988 <__ieee754_atan2f+0x130>
 8008952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008956:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800898c <__ieee754_atan2f+0x134>
 800895a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800895e:	e78e      	b.n	800887e <__ieee754_atan2f+0x26>
 8008960:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800898c <__ieee754_atan2f+0x134>
 8008964:	e78b      	b.n	800887e <__ieee754_atan2f+0x26>
 8008966:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8008994 <__ieee754_atan2f+0x13c>
 800896a:	e788      	b.n	800887e <__ieee754_atan2f+0x26>
 800896c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008990 <__ieee754_atan2f+0x138>
 8008970:	e785      	b.n	800887e <__ieee754_atan2f+0x26>
 8008972:	bf00      	nop
 8008974:	c0490fdb 	.word	0xc0490fdb
 8008978:	bfc90fdb 	.word	0xbfc90fdb
 800897c:	3fc90fdb 	.word	0x3fc90fdb
 8008980:	08008f38 	.word	0x08008f38
 8008984:	08008f2c 	.word	0x08008f2c
 8008988:	33bbbd2e 	.word	0x33bbbd2e
 800898c:	40490fdb 	.word	0x40490fdb
 8008990:	00000000 	.word	0x00000000
 8008994:	3f490fdb 	.word	0x3f490fdb

08008998 <atanf>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	ee10 5a10 	vmov	r5, s0
 800899e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80089a2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80089a6:	eef0 7a40 	vmov.f32	s15, s0
 80089aa:	d310      	bcc.n	80089ce <atanf+0x36>
 80089ac:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80089b0:	d904      	bls.n	80089bc <atanf+0x24>
 80089b2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80089b6:	eeb0 0a67 	vmov.f32	s0, s15
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008af4 <atanf+0x15c>
 80089c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008af8 <atanf+0x160>
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	bfc8      	it	gt
 80089c8:	eef0 7a47 	vmovgt.f32	s15, s14
 80089cc:	e7f3      	b.n	80089b6 <atanf+0x1e>
 80089ce:	4b4b      	ldr	r3, [pc, #300]	@ (8008afc <atanf+0x164>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d810      	bhi.n	80089f6 <atanf+0x5e>
 80089d4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80089d8:	d20a      	bcs.n	80089f0 <atanf+0x58>
 80089da:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008b00 <atanf+0x168>
 80089de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80089ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ee:	dce2      	bgt.n	80089b6 <atanf+0x1e>
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089f4:	e013      	b.n	8008a1e <atanf+0x86>
 80089f6:	f000 f8a3 	bl	8008b40 <fabsf>
 80089fa:	4b42      	ldr	r3, [pc, #264]	@ (8008b04 <atanf+0x16c>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d84f      	bhi.n	8008aa0 <atanf+0x108>
 8008a00:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008a04:	429c      	cmp	r4, r3
 8008a06:	d841      	bhi.n	8008a8c <atanf+0xf4>
 8008a08:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008a0c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008a10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008a14:	2300      	movs	r3, #0
 8008a16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008a24:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008b08 <atanf+0x170>
 8008a28:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8008b0c <atanf+0x174>
 8008a2c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8008b10 <atanf+0x178>
 8008a30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008a34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008a38:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008b14 <atanf+0x17c>
 8008a3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008a40:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008b18 <atanf+0x180>
 8008a44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008a48:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008b1c <atanf+0x184>
 8008a4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008a50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008b20 <atanf+0x188>
 8008a54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008a58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008b24 <atanf+0x18c>
 8008a5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008a60:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008b28 <atanf+0x190>
 8008a64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008a68:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008b2c <atanf+0x194>
 8008a6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008a70:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008b30 <atanf+0x198>
 8008a74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008a78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008a7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008a80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008a84:	d121      	bne.n	8008aca <atanf+0x132>
 8008a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a8a:	e794      	b.n	80089b6 <atanf+0x1e>
 8008a8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008a90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008a94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a98:	2301      	movs	r3, #1
 8008a9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008a9e:	e7be      	b.n	8008a1e <atanf+0x86>
 8008aa0:	4b24      	ldr	r3, [pc, #144]	@ (8008b34 <atanf+0x19c>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d80b      	bhi.n	8008abe <atanf+0x126>
 8008aa6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8008aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008abc:	e7af      	b.n	8008a1e <atanf+0x86>
 8008abe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008ac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e7a9      	b.n	8008a1e <atanf+0x86>
 8008aca:	4a1b      	ldr	r2, [pc, #108]	@ (8008b38 <atanf+0x1a0>)
 8008acc:	491b      	ldr	r1, [pc, #108]	@ (8008b3c <atanf+0x1a4>)
 8008ace:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008ad2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008ad6:	edd3 6a00 	vldr	s13, [r3]
 8008ada:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ae4:	edd2 7a00 	vldr	s15, [r2]
 8008ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aec:	bfb8      	it	lt
 8008aee:	eef1 7a67 	vneglt.f32	s15, s15
 8008af2:	e760      	b.n	80089b6 <atanf+0x1e>
 8008af4:	bfc90fdb 	.word	0xbfc90fdb
 8008af8:	3fc90fdb 	.word	0x3fc90fdb
 8008afc:	3edfffff 	.word	0x3edfffff
 8008b00:	7149f2ca 	.word	0x7149f2ca
 8008b04:	3f97ffff 	.word	0x3f97ffff
 8008b08:	3c8569d7 	.word	0x3c8569d7
 8008b0c:	3d4bda59 	.word	0x3d4bda59
 8008b10:	bd6ef16b 	.word	0xbd6ef16b
 8008b14:	3d886b35 	.word	0x3d886b35
 8008b18:	3dba2e6e 	.word	0x3dba2e6e
 8008b1c:	3e124925 	.word	0x3e124925
 8008b20:	3eaaaaab 	.word	0x3eaaaaab
 8008b24:	bd15a221 	.word	0xbd15a221
 8008b28:	bd9d8795 	.word	0xbd9d8795
 8008b2c:	bde38e38 	.word	0xbde38e38
 8008b30:	be4ccccd 	.word	0xbe4ccccd
 8008b34:	401bffff 	.word	0x401bffff
 8008b38:	08008f54 	.word	0x08008f54
 8008b3c:	08008f44 	.word	0x08008f44

08008b40 <fabsf>:
 8008b40:	ee10 3a10 	vmov	r3, s0
 8008b44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b48:	ee00 3a10 	vmov	s0, r3
 8008b4c:	4770      	bx	lr
	...

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
